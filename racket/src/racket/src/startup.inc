#define EVAL_STARTUP EVAL_ONE_STR(startup_source)
static const char *startup_source =
"(linklet"
"()"
"((boot boot)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/compile compile)"
"(compile-to-linklets compile-to-linklets)"
"(1/current-compile current-compile)"
"(1/current-compiled-file-roots current-compiled-file-roots)"
"(1/current-eval current-eval)"
"(1/current-library-collection-links current-library-collection-links)"
"(1/current-library-collection-paths current-library-collection-paths)"
"(1/current-load current-load)"
"(1/current-load/use-compiled current-load/use-compiled)"
"(1/current-namespace current-namespace)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(1/datum->syntax datum->syntax)"
"(declare-primitive-module! declare-primitive-module!)"
"(1/dynamic-require dynamic-require)"
"(embedded-load embedded-load)"
"(1/eval eval)"
"(expand$1 expand)"
"(1/find-library-collection-links find-library-collection-links)"
"(1/find-library-collection-paths find-library-collection-paths)"
"(find-main-config find-main-config)"
"(1/identifier-binding identifier-binding)"
"(identifier? identifier?)"
"(1/load load)"
"(1/load-extension load-extension)"
"(1/load/use-compiled load/use-compiled)"
"(make-namespace make-namespace)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(maybe-syntax->datum maybe-syntax->datum)"
"(1/module->language-info module->language-info)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(1/module-declared? module-declared?)"
"(1/module-path-index-join module-path-index-join)"
"(1/module-path-index? module-path-index?)"
"(1/module-path? module-path?)"
"(1/module-predefined? module-predefined?)"
"(namespace->instance namespace->instance)"
"(1/namespace-attach-module namespace-attach-module)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(1/namespace-mapped-symbols namespace-mapped-symbols)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/namespace-require namespace-require)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/read read)"
"(1/read-accept-compiled read-accept-compiled)"
"(1/read-syntax read-syntax)"
"(1/resolved-module-path? resolved-module-path?)"
"(seal seal)"
"(1/syntax->datum syntax->datum)"
"(1/syntax-debug-info syntax-debug-info)"
"(1/syntax-e syntax-e)"
"(syntax-property$1 syntax-property)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(syntax?$1 syntax?)"
"(1/use-collection-link-paths use-collection-link-paths)"
"(1/use-compiled-file-check use-compiled-file-check)"
"(1/use-compiled-file-paths use-compiled-file-paths)"
"(1/use-user-specific-search-paths use-user-specific-search-paths))"
"(define-values"
"(qq-append)"
"  (lambda (a_0 b_0) (begin (if (list? a_0) (append a_0 b_0) (raise-argument-error 'unquote-splicing \"list?\" a_0)))))"
"(define-values(call/ec) call-with-escape-continuation)"
"(define-values"
"(bad-list$1)"
"  (lambda (who_0 orig-l_0) (begin 'bad-list (raise-mismatch-error who_0 \"not a proper list: \" orig-l_0))))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(let-values()"
"(values"
"(let-values(((memq_0)"
"(lambda(v_0 orig-l_1)"
"(begin"
" 'memq"
"((letrec-values(((loop_0)"
"(lambda(ls_0)"
"(begin"
" 'loop"
"(if(null? ls_0)"
"(let-values() #f)"
"(if(not(pair? ls_0))"
"(let-values()(bad-list$1 'memq orig-l_1))"
"(if(eq? v_0(car ls_0))"
"(let-values() ls_0)"
"(let-values()(loop_0(cdr ls_0))))))))))"
" loop_0)"
" orig-l_1)))))"
" memq_0)"
"(let-values(((memv_0)"
"(lambda(v_1 orig-l_2)"
"(begin"
" 'memv"
"((letrec-values(((loop_1)"
"(lambda(ls_1)"
"(begin"
" 'loop"
"(if(null? ls_1)"
"(let-values() #f)"
"(if(not(pair? ls_1))"
"(let-values()(bad-list$1 'memv orig-l_2))"
"(if(eqv? v_1(car ls_1))"
"(let-values() ls_1)"
"(let-values()(loop_1(cdr ls_1))))))))))"
" loop_1)"
" orig-l_2)))))"
" memv_0)"
"(let-values(((default_0)"
"(let-values(((member_0)"
"(lambda(v_2 orig-l_3)"
"(begin"
" 'member"
"((letrec-values(((loop_2)"
"(lambda(ls_2)"
"(begin"
" 'loop"
"(if(null? ls_2)"
"(let-values() #f)"
"(if(not(pair? ls_2))"
"(let-values()(bad-list$1 'member orig-l_3))"
"(if(equal? v_2(car ls_2))"
"(let-values() ls_2)"
"(let-values()(loop_2(cdr ls_2))))))))))"
" loop_2)"
" orig-l_3)))))"
" member_0)))"
"(let-values(((member_1)"
"(case-lambda"
"((v_3 orig-l_4)(begin 'member(default_0 v_3 orig-l_4)))"
"((v_4 orig-l_5 eq?_0)"
"(begin"
"(if(if(procedure? eq?_0)(procedure-arity-includes? eq?_0 2) #f)"
"(void)"
"                             (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_0))"
"((let-values(((member_2)"
"(lambda(v_5 orig-l_6)"
"(begin"
" 'member"
"((letrec-values(((loop_3)"
"(lambda(ls_3)"
"(begin"
" 'loop"
"(if(null? ls_3)"
"(let-values() #f)"
"(if(not(pair? ls_3))"
"(let-values()(bad-list$1 'member orig-l_6))"
"(if(eq?_0 v_5(car ls_3))"
"(let-values() ls_3)"
"(let-values()(loop_3(cdr ls_3))))))))))"
" loop_3)"
" orig-l_6)))))"
" member_2)"
" v_4"
" orig-l_5))))))"
" member_1))))))"
"(define-values"
"(select-handler/no-breaks)"
"(lambda(e_0 bpz_0 l_0)"
"(begin"
"(with-continuation-mark"
" break-enabled-key"
"(make-thread-cell #f)"
"((letrec-values(((loop_4)"
"(lambda(l_1)"
"(begin"
" 'loop"
"(if(null? l_1)"
"(let-values()(raise e_0))"
"(if((caar l_1) e_0)"
"(let-values()"
"(begin0"
"((cdar l_1) e_0)"
"(with-continuation-mark break-enabled-key bpz_0(check-for-break))))"
"(let-values()(loop_4(cdr l_1)))))))))"
" loop_4)"
" l_0)))))"
"(define-values(false-thread-cell)(make-thread-cell #f))"
"(define-values(handler-prompt-key)(make-continuation-prompt-tag 'handler-prompt-tag))"
"(define-values"
"(call-handled-body)"
"(lambda(bpz_1 handle-proc_0 body-thunk_0)"
"(begin"
"(with-continuation-mark"
" break-enabled-key"
" false-thread-cell"
"(call-with-continuation-prompt"
"(lambda(bpz_2 body-thunk_1)"
"(with-continuation-mark"
" break-enabled-key"
" bpz_2"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(e_1)(abort-current-continuation handler-prompt-key e_1))"
"(body-thunk_1))))"
" handler-prompt-key"
" handle-proc_0"
" bpz_1"
" body-thunk_0)))))"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_0 thunk_0)(begin(begin0(with-continuation-mark exception-handler-key exnh_0(thunk_0))(void)))))"
"(define-values"
"(hash-update hash-update! hash-has-key? hash-ref!)"
"(let-values(((not-there_0)(gensym)))"
"(let-values(((up_0)"
"(lambda(who_1 mut?_0 set_0 ht_0 key_0 xform_0 default_1)"
"(begin"
" 'up"
"(begin"
"(if(if(hash? ht_0)(if mut?_0(not(immutable? ht_0))(immutable? ht_0)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_1"
"                             (if mut?_0 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_0)))"
"(if(if(procedure? xform_0)(procedure-arity-includes? xform_0 1) #f)"
"(void)"
"                          (let-values () (raise-argument-error who_1 \"(any/c . -> . any/c)\" xform_0)))"
"(let-values(((v_6)(hash-ref ht_0 key_0 default_1)))"
"(if(eq? v_6 not-there_0)"
"                            (raise-mismatch-error who_1 \"no value found for key: \" key_0)"
"(set_0 ht_0 key_0(xform_0 v_6)))))))))"
"(let-values(((hash-update_0)"
"(case-lambda"
"((ht_1 key_1 xform_1 default_2)"
"(begin 'hash-update(up_0 'hash-update #f hash-set ht_1 key_1 xform_1 default_2)))"
"((ht_2 key_2 xform_2)(hash-update ht_2 key_2 xform_2 not-there_0))))"
"((hash-update!_0)"
"(case-lambda"
"((ht_3 key_3 xform_3 default_3)"
"(begin 'hash-update!(up_0 'hash-update! #t hash-set! ht_3 key_3 xform_3 default_3)))"
"((ht_4 key_4 xform_4)(hash-update! ht_4 key_4 xform_4 not-there_0))))"
"((hash-has-key?_0)"
"(lambda(ht_5 key_5)"
"(begin"
" 'hash-has-key?"
"(begin"
"(if(hash? ht_5)"
"(void)"
"                            (let-values () (raise-argument-error 'hash-has-key? \"hash?\" 0 ht_5 key_5)))"
"(not(eq? not-there_0(hash-ref ht_5 key_5 not-there_0)))))))"
"((hash-ref!_0)"
"(lambda(ht_6 key_6 new_0)"
"(begin"
" 'hash-ref!"
"(begin"
"(if(if(hash? ht_6)(not(immutable? ht_6)) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'hash-ref! \"(and/c hash? (not/c immutable?))\" 0 ht_6 key_6 new_0)))"
"(let-values(((v_7)(hash-ref ht_6 key_6 not-there_0)))"
"(if(eq? not-there_0 v_7)"
"(let-values(((n_0)(if(procedure? new_0)(new_0) new_0)))"
"(begin(hash-set! ht_6 key_6 n_0) n_0))"
" v_7)))))))"
"(values hash-update_0 hash-update!_0 hash-has-key?_0 hash-ref!_0)))))"
"(define-values"
"(path-string?)"
"(lambda(s_0)"
"(begin"
"(let-values(((or-part_0)(path? s_0)))"
"(if or-part_0"
" or-part_0"
"(if(string? s_0)"
"(let-values(((or-part_1)(relative-path? s_0)))(if or-part_1 or-part_1(absolute-path? s_0)))"
" #f))))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_1)"
"(begin"
"(begin"
"(if(let-values(((or-part_2)(path-for-some-system? s_1)))(if or-part_2 or-part_2(path-string? s_1)))"
"(void)"
"          (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_1)))"
"(if(if(path-for-some-system? s_1)(eq?(path-convention-type s_1) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_0)(if(string? s_1) s_1(bytes->string/locale(path->bytes s_1)))))"
"              (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_0)"
"(if(string? s_1)(string->path s_1) s_1)"
"(let-values(((s_2)(string-locale-downcase str_0)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                     '#rx\"/\""
"                     (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_2)"
" s_2"
"                       (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_2 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_1)(let-values()(string->path s_1))(let-values() s_1)))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_3 sfx_0 who_2 sep_0 trust-sep?_0)"
"(begin"
"(begin"
"(let-values(((err-msg_0 err-index_0)"
"(if(not"
"(let-values(((or-part_3)(path-for-some-system? s_3)))"
"(if or-part_3 or-part_3(path-string? s_3))))"
"                        (let-values () (values \"(or/c path-for-some-system? path-string?)\" 0))"
"(if(not(let-values(((or-part_4)(string? sfx_0)))(if or-part_4 or-part_4(bytes? sfx_0))))"
"                          (let-values () (values \"(or/c string? bytes?)\" 1))"
"(if(not"
"(let-values(((or-part_5) trust-sep?_0))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(string? sep_0)))"
"(if or-part_6 or-part_6(bytes? sep_0))))))"
"                            (let-values () (values \"(or/c string? bytes?)\" 2))"
"(let-values()(values #f #f)))))))"
"(if err-msg_0"
"(let-values()"
"(if trust-sep?_0"
"(raise-argument-error who_2 err-msg_0 err-index_0 s_3 sfx_0)"
"(raise-argument-error who_2 err-msg_0 err-index_0 s_3 sfx_0 sep_0)))"
"(void)))"
"(let-values(((base_0 name_0 dir?_0)(split-path s_3)))"
"(begin"
"(if(not base_0)"
"              (let-values () (raise-mismatch-error who_2 \"cannot add an extension to a root path: \" s_3))"
"(void))"
"(values base_0 name_0)))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_1 sep_1 rest-bytes_0 s_4 sfx_1 trust-sep?_1)"
"(begin"
"(let-values(((base_1 name_2)(check-extension-call s_4 sfx_1 name_1 sep_1 trust-sep?_1)))"
"(let-values(((bs_0)(path-element->bytes name_2)))"
"(let-values(((finish_0)"
"(lambda(i_0 sep_2 i2_0)"
"(begin"
" 'finish"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_0 0 i_0)"
"(if(string? sep_2)(string->bytes/locale sep_2(char->integer '#\\?)) sep_2)"
"(rest-bytes_0 bs_0 i2_0)"
"(if(string? sfx_1)(string->bytes/locale sfx_1(char->integer '#\\?)) sfx_1))"
"(if(path-for-some-system? s_4)"
"(path-convention-type s_4)"
"(system-path-convention-type)))))))"
"(let-values(((new-name_0)"
"(letrec-values(((loop_5)"
"(lambda(i_1)"
"(begin"
" 'loop"
"(if(zero? i_1)"
"                                                 (finish_0 (bytes-length bs_0) #\"\" (bytes-length bs_0))"
"(let-values(((i_2)(sub1 i_1)))"
"(if(if(not(zero? i_2))"
"(eq?(char->integer '#\\.)(bytes-ref bs_0 i_2))"
" #f)"
"(finish_0 i_2 sep_1(add1 i_2))"
"(loop_5 i_2))))))))"
"(loop_5(bytes-length bs_0)))))"
"(if(path-for-some-system? base_1)(build-path base_1 new-name_0) new-name_0))))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_5 sfx_2) (begin (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_1 i_3) #\"\") s_5 sfx_2 #t))))"
"(define-values"
"(path-add-extension)"
"(case-lambda"
"   ((s_6 sfx_3) (begin (path-adjust-extension 'path-add-extension #\"_\" subbytes s_6 sfx_3 #t)))"
"((s_7 sfx_4 sep_3)(path-adjust-extension 'path-add-extension sep_3 subbytes s_7 sfx_4 #f))))"
"(define-values"
"(reroot-path)"
"(lambda(p_0 root_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_7)(path-string? p_0)))"
"(if or-part_7 or-part_7(path-for-some-system? p_0)))"
"(void)"
"(let-values()"
"                          (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_0 root_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_8)(path-string? root_0)))"
"(if or-part_8 or-part_8(path-for-some-system? root_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                             \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_0"
" root_0)))"
"(values))))"
"(let-values(((conv_0)"
"(if(path-for-some-system? p_0)(path-convention-type p_0)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_9)(complete-path? p_0)))"
"(if or-part_9 or-part_9(eq?(system-path-convention-type) conv_0)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"path is not complete and not the platform's convention\""
"                                 \"path\""
" p_0"
"                                 \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_0)"
"(path-convention-type root_0)"
"(system-path-convention-type))"
" conv_0)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                   \"given paths use different conventions\""
"                                   \"path\""
" p_0"
"                                   \"root path\""
" root_0)))"
"(values))))"
"(let-values(((c-p_0)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_0) p_0(path->complete-path p_0))))))"
"(let-values(((bstr_0)(path->bytes c-p_0)))"
"(if(eq? conv_0 'unix)"
"(let-values()"
"                        (if (bytes=? bstr_0 #\"/\")"
"(if(path-for-some-system? root_0) root_0(string->path root_0))"
"(build-path root_0(bytes->path(subbytes(path->bytes c-p_0) 1) conv_0))))"
"(if(eq? conv_0 'windows)"
"(let-values()"
"(build-path"
" root_0"
"(bytes->path"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_0)"
"(let-values()"
"                                (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_0 4 5) #\"\\\\\" (subbytes bstr_0 6)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_0)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_0 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_0)"
"                                  (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_0 4)))"
"                                  (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_0)"
"                                    (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_0 2)))"
"                                    (if (regexp-match? '#rx\"^[a-z]:\" bstr_0)"
"(let-values()(bytes-append(subbytes bstr_0 0 1)(subbytes bstr_0 2)))"
"(void))))))"
" conv_0)))"
"(void)))))))))))))"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_0) #f)"
"((cons-path_0)"
"(lambda(default_4 s_1 l_2)"
"(begin"
" 'cons-path"
"                    (let-values (((s_8) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_1 #\"\") s_1)))"
"                      (if (bytes=? s_8 #\"\") (append default_4 l_2) (cons (bytes->path s_8) l_2)))))))"
"(lambda(s_2 default_5)"
"(begin"
"(begin"
"(if r_0"
"(void)"
"(let-values()"
"(set! r_0"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_4) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_4 sep_4)))))))"
"(if(let-values(((or-part_10)(bytes? s_2)))(if or-part_10 or-part_10(string? s_2)))"
"(void)"
"            (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_2)))"
"(if(if(list? default_5)(andmap path? default_5) #f)"
"(void)"
"            (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_5)))"
"((letrec-values(((loop_6)"
"(lambda(s_9)"
"(begin"
" 'loop"
"(let-values(((m_0)(regexp-match r_0 s_9)))"
"(if m_0"
"(cons-path_0 default_5(cadr m_0)(loop_6(caddr m_0)))"
"(cons-path_0 default_5 s_9 null)))))))"
" loop_6)"
"(if(string? s_2)(string->bytes/utf-8 s_2) s_2)))))))"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_0 libpath_0 reverse?_0)"
"(begin"
"(begin"
"(if(path-string? program_0)"
"(void)"
"          (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_0)))"
"(if(let-values(((or-part_11)(not libpath_0)))"
"(if or-part_11 or-part_11(if(path-string? libpath_0)(relative-path? libpath_0) #f)))"
"(void)"
"(let-values()"
"            (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_0)))"
"(letrec-values(((found-exec_0)"
"(lambda(exec-name_0)"
"(begin"
" 'found-exec"
"(if libpath_0"
"(let-values(((base_2 name_3 isdir?_0)(split-path exec-name_0)))"
"(let-values(((next_0)"
"(lambda()"
"(begin"
" 'next"
"(let-values(((resolved_0)(resolve-path exec-name_0)))"
"(if(equal? resolved_0 exec-name_0)"
"(let-values() #f)"
"(if(relative-path? resolved_0)"
"(let-values()(found-exec_0(build-path base_2 resolved_0)))"
"(let-values()(found-exec_0 resolved_0)))))))))"
"(let-values(((or-part_12)(if reverse?_0(next_0) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_2)"
"(let-values(((lib_0)(build-path base_2 libpath_0)))"
"(if(let-values(((or-part_3)(directory-exists? lib_0)))"
"(if or-part_3 or-part_3(file-exists? lib_0)))"
" lib_0"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_0)(next_0) #f)))))))"
" exec-name_0)))))"
"(if(if(relative-path? program_0)"
"(let-values(((base_3 name_4 dir?_1)(split-path program_0)))(eq? base_3 'relative))"
" #f)"
"            (let-values (((paths-str_0) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_0)"
"(lambda(s_10)"
"                            (begin 'win-add (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_10) s_10)))))"
"((letrec-values(((loop_7)"
"(lambda(paths_0)"
"(begin"
" 'loop"
"(if(null? paths_0)"
" #f"
"(let-values(((base_4)(path->complete-path(car paths_0))))"
"(let-values(((name_5)(build-path base_4 program_0)))"
"(if(file-exists? name_5)(found-exec_0 name_5)(loop_7(cdr paths_0))))))))))"
" loop_7)"
"(win-add_0"
"(if paths-str_0(path-list-string->path-list(bytes->string/locale paths-str_0 '#\\?) null) null))))"
"(let-values(((p_1)(path->complete-path program_0)))(if(file-exists? p_1)(found-exec_0 p_1) #f)))))))"
"((program_1 libpath_1)(find-executable-path program_1 libpath_1 #f))"
"((program_2)(find-executable-path program_2 #f #f))))"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_1)"
"(begin"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" 1/read-square-bracket-as-paren"
" #t"
" 1/read-curly-brace-as-paren"
" #t"
" 1/read-square-bracket-with-tag"
" #f"
" 1/read-curly-brace-with-tag"
" #f"
" 1/read-accept-box"
" #t"
" 1/read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" 1/read-accept-graph"
" #t"
" 1/read-decimal-as-inexact"
" #t"
" 1/read-cdot"
" #f"
" 1/read-accept-dot"
" #t"
" 1/read-accept-infix-dot"
" #t"
" 1/read-accept-quasiquote"
" #t"
" 1/read-accept-reader"
" #f"
" 1/read-accept-lang"
" #t"
" 1/current-readtable"
" #f)"
"(let-values()(thunk_1)))"
"        (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_1)))))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_8 info-l_0)(if(exact-integer? v_8)(make-struct-field-accessor(list-ref info-l_0 3) v_8) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property"
" 'procedure"
" #f"
"(list(cons prop:procedure values)(cons prop:procedure-accessor values))"
" #t))"
"(define-values"
"(reverse$1)"
"(lambda(l_3)"
"(begin"
" 'reverse"
"(begin"
"        (if (list? l_3) (void) (raise-argument-error 'reverse \"list?\" l_3))"
"(letrec-values(((loop_8)"
"(lambda(a_1 l_4)(begin 'loop(if(null? l_4) a_1(loop_8(cons(car l_4) a_1)(cdr l_4)))))))"
"(loop_8 null l_3))))))"
"(define-values"
"(sort vector-sort vector-sort!)"
"(let-values()"
"(let-values(((generic-sort_0)"
"(lambda(A_0 less-than?_0 n_1)"
"(begin"
" 'generic-sort"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_0)(unsafe-fxrshift n_1 1)))"
"(let-values(((n/2+_0)(unsafe-fx- n_1 n/2-_0)))"
"(letrec-values(((copying-mergesort_0)"
"(lambda(Alo_0 Blo_0 n_2)"
"(begin"
" 'copying-mergesort"
"(if(unsafe-fx= n_2 1)"
"(let-values()"
"(unsafe-vector-set! A_0 Blo_0(unsafe-vector-ref A_0 Alo_0)))"
"(if(unsafe-fx= n_2 2)"
"(let-values()"
"(let-values(((x_0)(unsafe-vector-ref A_0 Alo_0))"
"((y_0)"
"(unsafe-vector-ref A_0(unsafe-fx+ Alo_0 1))))"
"(if(less-than?_0 y_0 x_0)"
"(begin"
"(unsafe-vector-set! A_0 Blo_0 y_0)"
"(unsafe-vector-set! A_0(unsafe-fx+ Blo_0 1) x_0))"
"(begin"
"(unsafe-vector-set! A_0 Blo_0 x_0)"
"(unsafe-vector-set! A_0(unsafe-fx+ Blo_0 1) y_0)))))"
"(if(unsafe-fx< n_2 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" Blo_0"
"(unsafe-vector-ref A_0 Alo_0))"
"((letrec-values(((iloop_0)"
"(lambda(i_4)"
"(begin"
" 'iloop"
"(if(unsafe-fx< i_4 n_2)"
"(let-values()"
"(let-values(((ref-i_0)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx+"
" Alo_0"
" i_4))))"
"((letrec-values(((jloop_0)"
"(lambda(j_0)"
"(begin"
" 'jloop"
"(let-values(((ref-j-1_0)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx-"
" j_0"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_0"
" j_0)"
"(less-than?_0"
" ref-i_0"
" ref-j-1_0)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_0"
" j_0"
" ref-j-1_0)"
"(jloop_0"
"(unsafe-fx-"
" j_0"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" j_0"
" ref-i_0)"
"(iloop_0"
"(unsafe-fx+"
" i_4"
" 1)))))))))"
" jloop_0)"
"(unsafe-fx+ Blo_0 i_4))))"
"(void))))))"
" iloop_0)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1)(unsafe-fxrshift n_2 1)))"
"(let-values(((n/2+_1)(unsafe-fx- n_2 n/2-_1)))"
"(let-values(((Amid1_0)(unsafe-fx+ Alo_0 n/2-_1))"
"((Amid2_0)(unsafe-fx+ Alo_0 n/2+_1))"
"((Bmid1_0)(unsafe-fx+ Blo_0 n/2-_1)))"
"(begin"
"(copying-mergesort_0 Amid1_0 Bmid1_0 n/2+_1)"
"(copying-mergesort_0 Alo_0 Amid2_0 n/2-_1)"
"(let-values(((b2_0)(unsafe-fx+ Blo_0 n_2)))"
"((letrec-values(((loop_9)"
"(lambda(a1_0 b1_0 c1_0)"
"(begin"
" 'loop"
"(let-values(((x_1)"
"(unsafe-vector-ref"
" A_0"
" a1_0))"
"((y_1)"
"(unsafe-vector-ref"
" A_0"
" b1_0)))"
"(if(not"
"(less-than?_0"
" y_1"
" x_1))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_0"
" x_1)"
"(let-values(((a1_1)"
"(unsafe-fx+"
" a1_0"
" 1))"
"((c1_1)"
"(unsafe-fx+"
" c1_0"
" 1)))"
"(if(unsafe-fx<"
" c1_1"
" b1_0)"
"(let-values()"
"(loop_9"
" a1_1"
" b1_0"
" c1_1))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_0"
" y_1)"
"(let-values(((b1_1)"
"(unsafe-fx+"
" b1_0"
" 1))"
"((c1_2)"
"(unsafe-fx+"
" c1_0"
" 1)))"
"(if(unsafe-fx<="
" b2_0"
" b1_1)"
"((letrec-values(((loop_10)"
"(lambda(a1_2"
" c1_3)"
"(begin"
" 'loop"
"(if(unsafe-fx<"
" c1_3"
" b1_1)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_3"
"(unsafe-vector-ref"
" A_0"
" a1_2))"
"(loop_10"
"(unsafe-fx+"
" a1_2"
" 1)"
"(unsafe-fx+"
" c1_3"
" 1))))"
"(void))))))"
" loop_10)"
" a1_0"
" c1_2)"
"(loop_9"
" a1_0"
" b1_1"
" c1_2))))))))))"
" loop_9)"
" Amid2_0"
" Bmid1_0"
" Blo_0))))))))))))))"
"(let-values(((Alo_1) 0)"
"((Amid1_1) n/2-_0)"
"((Amid2_1) n/2+_0)"
"((Ahi_0) n_1)"
"((B1lo_0) n_1))"
"(begin"
"(copying-mergesort_0 Amid1_1 B1lo_0 n/2+_0)"
"(if(zero? n/2-_0)"
"(void)"
"(let-values()(copying-mergesort_0 Alo_1 Amid2_1 n/2-_0)))"
"(let-values(((b2_1) Ahi_0))"
"((letrec-values(((loop_11)"
"(lambda(a1_3 b1_2 c1_4)"
"(begin"
" 'loop"
"(let-values(((x_2)(unsafe-vector-ref A_0 a1_3))"
"((y_2)(unsafe-vector-ref A_0 b1_2)))"
"(if(less-than?_0 x_2 y_2)"
"(begin"
"(unsafe-vector-set! A_0 c1_4 x_2)"
"(let-values(((a1_4)(unsafe-fx+ a1_3 1))"
"((c1_5)(unsafe-fx+ c1_4 1)))"
"(if(unsafe-fx< c1_5 b1_2)"
"(let-values()(loop_11 a1_4 b1_2 c1_5))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_0 c1_4 y_2)"
"(let-values(((b1_3)(unsafe-fx+ b1_2 1))"
"((c1_6)(unsafe-fx+ c1_4 1)))"
"(if(unsafe-fx<= b2_1 b1_3)"
"((letrec-values(((loop_12)"
"(lambda(a1_5 c1_7)"
"(begin"
" 'loop"
"(if(unsafe-fx< c1_7 b1_3)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_7"
"(unsafe-vector-ref"
" A_0"
" a1_5))"
"(loop_12"
"(unsafe-fx+ a1_5 1)"
"(unsafe-fx+"
" c1_7"
" 1))))"
"(void))))))"
" loop_12)"
" a1_3"
" c1_6)"
"(loop_11 a1_3 b1_3 c1_6))))))))))"
" loop_11)"
" B1lo_0"
" Amid2_1"
" Alo_1)))))))))))))"
"(let-values(((generic-sort/key_0)"
"(lambda(A_1 less-than?_1 n_3 key_7)"
"(begin"
" 'generic-sort/key"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_2)(unsafe-fxrshift n_3 1)))"
"(let-values(((n/2+_2)(unsafe-fx- n_3 n/2-_2)))"
"(letrec-values(((copying-mergesort_1)"
"(lambda(Alo_2 Blo_1 n_4)"
"(begin"
" 'copying-mergesort"
"(if(unsafe-fx= n_4 1)"
"(let-values()"
"(unsafe-vector-set! A_1 Blo_1(unsafe-vector-ref A_1 Alo_2)))"
"(if(unsafe-fx= n_4 2)"
"(let-values()"
"(let-values(((x_3)(unsafe-vector-ref A_1 Alo_2))"
"((y_3)"
"(unsafe-vector-ref A_1(unsafe-fx+ Alo_2 1))))"
"(if(if key_7"
"(less-than?_1(key_7 y_3)(key_7 x_3))"
"(less-than?_1 y_3 x_3))"
"(begin"
"(unsafe-vector-set! A_1 Blo_1 y_3)"
"(unsafe-vector-set! A_1(unsafe-fx+ Blo_1 1) x_3))"
"(begin"
"(unsafe-vector-set! A_1 Blo_1 x_3)"
"(unsafe-vector-set! A_1(unsafe-fx+ Blo_1 1) y_3)))))"
"(if(unsafe-fx< n_4 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1"
" Blo_1"
"(unsafe-vector-ref A_1 Alo_2))"
"((letrec-values(((iloop_1)"
"(lambda(i_5)"
"(begin"
" 'iloop"
"(if(unsafe-fx< i_5 n_4)"
"(let-values()"
"(let-values(((ref-i_1)"
"(unsafe-vector-ref"
" A_1"
"(unsafe-fx+"
" Alo_2"
" i_5))))"
"((letrec-values(((jloop_1)"
"(lambda(j_1)"
"(begin"
" 'jloop"
"(let-values(((ref-j-1_1)"
"(unsafe-vector-ref"
" A_1"
"(unsafe-fx-"
" j_1"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1"
" j_1)"
"(if key_7"
"(less-than?_1"
"(key_7"
" ref-i_1)"
"(key_7"
" ref-j-1_1))"
"(less-than?_1"
" ref-i_1"
" ref-j-1_1))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1"
" j_1"
" ref-j-1_1)"
"(jloop_1"
"(unsafe-fx-"
" j_1"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1"
" j_1"
" ref-i_1)"
"(iloop_1"
"(unsafe-fx+"
" i_5"
" 1)))))))))"
" jloop_1)"
"(unsafe-fx+ Blo_1 i_5))))"
"(void))))))"
" iloop_1)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_3)(unsafe-fxrshift n_4 1)))"
"(let-values(((n/2+_3)(unsafe-fx- n_4 n/2-_3)))"
"(let-values(((Amid1_2)(unsafe-fx+ Alo_2 n/2-_3))"
"((Amid2_2)(unsafe-fx+ Alo_2 n/2+_3))"
"((Bmid1_1)(unsafe-fx+ Blo_1 n/2-_3)))"
"(begin"
"(copying-mergesort_1 Amid1_2 Bmid1_1 n/2+_3)"
"(copying-mergesort_1 Alo_2 Amid2_2 n/2-_3)"
"(let-values(((b2_2)(unsafe-fx+ Blo_1 n_4)))"
"((letrec-values(((loop_13)"
"(lambda(a1_6 b1_4 c1_8)"
"(begin"
" 'loop"
"(let-values(((x_4)"
"(unsafe-vector-ref"
" A_1"
" a1_6))"
"((y_4)"
"(unsafe-vector-ref"
" A_1"
" b1_4)))"
"(if(not"
"(if key_7"
"(less-than?_1"
"(key_7 y_4)"
"(key_7 x_4))"
"(less-than?_1"
" y_4"
" x_4)))"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_8"
" x_4)"
"(let-values(((a1_7)"
"(unsafe-fx+"
" a1_6"
" 1))"
"((c1_9)"
"(unsafe-fx+"
" c1_8"
" 1)))"
"(if(unsafe-fx<"
" c1_9"
" b1_4)"
"(let-values()"
"(loop_13"
" a1_7"
" b1_4"
" c1_9))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_8"
" y_4)"
"(let-values(((b1_5)"
"(unsafe-fx+"
" b1_4"
" 1))"
"((c1_10)"
"(unsafe-fx+"
" c1_8"
" 1)))"
"(if(unsafe-fx<="
" b2_2"
" b1_5)"
"((letrec-values(((loop_14)"
"(lambda(a1_8"
" c1_11)"
"(begin"
" 'loop"
"(if(unsafe-fx<"
" c1_11"
" b1_5)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_11"
"(unsafe-vector-ref"
" A_1"
" a1_8))"
"(loop_14"
"(unsafe-fx+"
" a1_8"
" 1)"
"(unsafe-fx+"
" c1_11"
" 1))))"
"(void))))))"
" loop_14)"
" a1_6"
" c1_10)"
"(loop_13"
" a1_6"
" b1_5"
" c1_10))))))))))"
" loop_13)"
" Amid2_2"
" Bmid1_1"
" Blo_1))))))))))))))"
"(let-values(((Alo_3) 0)"
"((Amid1_3) n/2-_2)"
"((Amid2_3) n/2+_2)"
"((Ahi_1) n_3)"
"((B1lo_1) n_3))"
"(begin"
"(copying-mergesort_1 Amid1_3 B1lo_1 n/2+_2)"
"(if(zero? n/2-_2)"
"(void)"
"(let-values()(copying-mergesort_1 Alo_3 Amid2_3 n/2-_2)))"
"(let-values(((b2_3) Ahi_1))"
"((letrec-values(((loop_15)"
"(lambda(a1_9 b1_6 c1_12)"
"(begin"
" 'loop"
"(let-values(((x_5)(unsafe-vector-ref A_1 a1_9))"
"((y_5)(unsafe-vector-ref A_1 b1_6)))"
"(if(if key_7"
"(less-than?_1(key_7 x_5)(key_7 y_5))"
"(less-than?_1 x_5 y_5))"
"(begin"
"(unsafe-vector-set! A_1 c1_12 x_5)"
"(let-values(((a1_10)(unsafe-fx+ a1_9 1))"
"((c1_13)(unsafe-fx+ c1_12 1)))"
"(if(unsafe-fx< c1_13 b1_6)"
"(let-values()(loop_15 a1_10 b1_6 c1_13))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_1 c1_12 y_5)"
"(let-values(((b1_7)(unsafe-fx+ b1_6 1))"
"((c1_14)(unsafe-fx+ c1_12 1)))"
"(if(unsafe-fx<= b2_3 b1_7)"
"((letrec-values(((loop_16)"
"(lambda(a1_11 c1_15)"
"(begin"
" 'loop"
"(if(unsafe-fx<"
" c1_15"
" b1_7)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_15"
"(unsafe-vector-ref"
" A_1"
" a1_11))"
"(loop_16"
"(unsafe-fx+"
" a1_11"
" 1)"
"(unsafe-fx+"
" c1_15"
" 1))))"
"(void))))))"
" loop_16)"
" a1_9"
" c1_14)"
"(loop_15 a1_9 b1_7 c1_14))))))))))"
" loop_15)"
" B1lo_1"
" Amid2_3"
" Alo_3)))))))))))))"
"(values"
"(case-lambda"
"((lst_0 less-than?_2)"
"(let-values(((n_5)(length lst_0)))"
"(let-values()"
"(if(unsafe-fx= n_5 0)"
"(let-values() lst_0)"
"(if((letrec-values(((loop_17)"
"(lambda(last_0 next_1)"
"(begin"
" 'loop"
"(let-values(((or-part_14)(null? next_1)))"
"(if or-part_14"
" or-part_14"
"(if(not(less-than?_2(unsafe-car next_1) last_0))"
"(loop_17(unsafe-car next_1)(unsafe-cdr next_1))"
" #f)))))))"
" loop_17)"
"(car lst_0)"
"(cdr lst_0))"
"(let-values() lst_0)"
"(if(unsafe-fx<= n_5 3)"
"(let-values()"
"(if(unsafe-fx= n_5 1)"
"(let-values() lst_0)"
"(if(unsafe-fx= n_5 2)"
"(let-values()(list(cadr lst_0)(car lst_0)))"
"(let-values()"
"(let-values(((a_2)(car lst_0))((b_1)(cadr lst_0))((c_0)(caddr lst_0)))"
"(if(less-than?_2 b_1 a_2)"
"(if(less-than?_2 c_0 b_1)"
"(list c_0 b_1 a_2)"
"(if(less-than?_2 c_0 a_2)(list b_1 c_0 a_2)(list b_1 a_2 c_0)))"
"(if(less-than?_2 c_0 a_2)(list c_0 a_2 b_1)(list a_2 c_0 b_1))))))))"
"(let-values()"
"(let-values(((vec_0)(make-vector(+ n_5(ceiling(/ n_5 2))))))"
"(begin"
"((letrec-values(((loop_18)"
"(lambda(i_6 lst_1)"
"(begin"
" 'loop"
"(if(pair? lst_1)"
"(let-values()"
"(begin"
"(vector-set! vec_0 i_6(car lst_1))"
"(loop_18(add1 i_6)(cdr lst_1))))"
"(void))))))"
" loop_18)"
" 0"
" lst_0)"
"(generic-sort_0 vec_0 less-than?_2 n_5)"
"((letrec-values(((loop_19)"
"(lambda(i_7 r_1)"
"(begin"
" 'loop"
"(let-values(((i_8)(sub1 i_7)))"
"(if(< i_8 0)"
" r_1"
"(loop_19 i_8(cons(vector-ref vec_0 i_8) r_1))))))))"
" loop_19)"
" n_5"
" '()))))))))))"
"((lst_2 less-than?_3 getkey_0)"
"(if(if getkey_0(not(eq? values getkey_0)) #f)"
"(sort lst_2 less-than?_3 getkey_0 #f)"
"(sort lst_2 less-than?_3)))"
"((lst_3 less-than?_4 getkey_1 cache-keys?_0)"
"(if(if getkey_1(not(eq? values getkey_1)) #f)"
"(let-values(((n_6)(length lst_3)))"
"(let-values()"
"(if(unsafe-fx= n_6 0)"
"(let-values() lst_3)"
"(if cache-keys?_0"
"(let-values()"
"(let-values(((vec_1)(make-vector(+ n_6(ceiling(/ n_6 2))))))"
"(begin"
"((letrec-values(((loop_20)"
"(lambda(i_9 lst_4)"
"(begin"
" 'loop"
"(if(pair? lst_4)"
"(let-values()"
"(let-values(((x_6)(car lst_4)))"
"(begin"
"(unsafe-vector-set! vec_1 i_9(cons(getkey_1 x_6) x_6))"
"(loop_20(unsafe-fx+ i_9 1)(cdr lst_4)))))"
"(void))))))"
" loop_20)"
" 0"
" lst_3)"
"(generic-sort/key_0 vec_1 less-than?_4 n_6 unsafe-car)"
"((letrec-values(((loop_21)"
"(lambda(i_10 r_2)"
"(begin"
" 'loop"
"(let-values(((i_11)(unsafe-fx- i_10 1)))"
"(if(unsafe-fx< i_11 0)"
" r_2"
"(loop_21"
" i_11"
"(cons(unsafe-cdr(unsafe-vector-ref vec_1 i_11)) r_2))))))))"
" loop_21)"
" n_6"
" '()))))"
"(if((letrec-values(((loop_22)"
"(lambda(last_1 next_2)"
"(begin"
" 'loop"
"(let-values(((or-part_15)(null? next_2)))"
"(if or-part_15"
" or-part_15"
"(if(not"
"(if getkey_1"
"(less-than?_4"
"(getkey_1(unsafe-car next_2))"
"(getkey_1 last_1))"
"(less-than?_4(unsafe-car next_2) last_1)))"
"(loop_22(unsafe-car next_2)(unsafe-cdr next_2))"
" #f)))))))"
" loop_22)"
"(car lst_3)"
"(cdr lst_3))"
"(let-values() lst_3)"
"(if(unsafe-fx<= n_6 3)"
"(let-values()"
"(if(unsafe-fx= n_6 1)"
"(let-values() lst_3)"
"(if(unsafe-fx= n_6 2)"
"(let-values()(list(cadr lst_3)(car lst_3)))"
"(let-values()"
"(let-values(((a_3)(car lst_3))((b_2)(cadr lst_3))((c_1)(caddr lst_3)))"
"(if(if getkey_1(less-than?_4(getkey_1 b_2)(getkey_1 a_3))(less-than?_4 b_2 a_3))"
"(if(if getkey_1"
"(less-than?_4(getkey_1 c_1)(getkey_1 b_2))"
"(less-than?_4 c_1 b_2))"
"(list c_1 b_2 a_3)"
"(if(if getkey_1"
"(less-than?_4(getkey_1 c_1)(getkey_1 a_3))"
"(less-than?_4 c_1 a_3))"
"(list b_2 c_1 a_3)"
"(list b_2 a_3 c_1)))"
"(if(if getkey_1"
"(less-than?_4(getkey_1 c_1)(getkey_1 a_3))"
"(less-than?_4 c_1 a_3))"
"(list c_1 a_3 b_2)"
"(list a_3 c_1 b_2))))))))"
"(let-values()"
"(let-values(((vec_2)(make-vector(+ n_6(ceiling(/ n_6 2))))))"
"(begin"
"((letrec-values(((loop_23)"
"(lambda(i_12 lst_5)"
"(begin"
" 'loop"
"(if(pair? lst_5)"
"(let-values()"
"(begin"
"(vector-set! vec_2 i_12(car lst_5))"
"(loop_23(add1 i_12)(cdr lst_5))))"
"(void))))))"
" loop_23)"
" 0"
" lst_3)"
"(generic-sort/key_0 vec_2 less-than?_4 n_6 getkey_1)"
"((letrec-values(((loop_24)"
"(lambda(i_13 r_3)"
"(begin"
" 'loop"
"(let-values(((i_14)(sub1 i_13)))"
"(if(< i_14 0)"
" r_3"
"(loop_24 i_14(cons(vector-ref vec_2 i_14) r_3))))))))"
" loop_24)"
" n_6"
" '()))))))))))"
"(sort lst_3 less-than?_4))))"
"(case-lambda"
"((vec_3 less-than?_5 start_0 end_0)"
"(let-values(((n_7)(- end_0 start_0)))"
"(let-values(((dst-vec_0)(make-vector n_7)))"
"(let-values(((dst-start_0) 0))"
"(begin"
"(if(unsafe-fx= n_7 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_25)"
"(lambda(prev-val_0 next-index_0)"
"(begin"
" 'loop"
"(let-values(((or-part_16)(unsafe-fx= next-index_0 end_0)))"
"(if or-part_16"
" or-part_16"
"(let-values(((next-val_0)(unsafe-vector-ref vec_3 next-index_0)))"
"(if(not(less-than?_5 next-val_0 prev-val_0))"
"(loop_25 next-val_0(unsafe-fx+ next-index_0 1))"
" #f))))))))"
" loop_25)"
"(unsafe-vector-ref vec_3 start_0)"
"(unsafe-fx+ start_0 1))"
"(let-values()(let-values()(vector-copy! dst-vec_0 dst-start_0 vec_3 start_0 end_0)))"
"(if(unsafe-fx<= n_7 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_0 dst-start_0 vec_3 start_0 end_0))"
"(if(unsafe-fx= n_7 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_7 2)"
"(let-values()"
"(let-values(((tmp_0)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_0"
"(unsafe-fx+ dst-start_0 0)"
"(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 1)))"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) tmp_0))))"
"(let-values()"
"(let-values(((a_4)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 0)))"
"((b_3)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 1)))"
"((c_2)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 2))))"
"(if(less-than?_5 b_3 a_4)"
"(let-values()"
"(if(less-than?_5 c_2 b_3)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) c_2)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) a_4)))"
"(if(less-than?_5 c_2 a_4)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) b_3)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) c_2)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) a_4)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) b_3)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) a_4))))))"
"(if(less-than?_5 c_2 a_4)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) c_2)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) a_4)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) b_3)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) c_2)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) b_3)))))))))))"
"(let-values()"
"(let-values(((work-vec_0)(make-vector(+ n_7(ceiling(/ n_7 2))) #f)))"
"(begin"
"(vector-copy! work-vec_0 0 vec_3 start_0 end_0)"
"(generic-sort_0 work-vec_0 less-than?_5 n_7)"
"(vector-copy! dst-vec_0 dst-start_0 work-vec_0 0 n_7)))))))"
" dst-vec_0)))))"
"((vec_4 less-than?_6 start_1 end_1 getkey_2 cache-keys?_1)"
"(if(if getkey_2(not(eq? values getkey_2)) #f)"
"(let-values(((n_8)(- end_1 start_1)))"
"(let-values(((dst-vec_1)(make-vector n_8)))"
"(let-values(((dst-start_1) 0))"
"(begin"
"(if(unsafe-fx= n_8 0)"
"(let-values()(void))"
"(if cache-keys?_1"
"(let-values()"
"(let-values(((work-vec_1)(make-vector(+ n_8(ceiling(/ n_8 2))) #t)))"
"(begin"
"((letrec-values(((loop_26)"
"(lambda(i_15)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_15 n_8)"
"(let-values()"
"(begin"
"(let-values(((x_7)"
"(unsafe-vector-ref"
" vec_4"
"(unsafe-fx+ i_15 start_1))))"
"(unsafe-vector-set!"
" work-vec_1"
" i_15"
"(cons(getkey_2 x_7) x_7)))"
"(loop_26(unsafe-fx+ i_15 1))))"
"(void))))))"
" loop_26)"
" 0)"
"(generic-sort/key_0 work-vec_1 less-than?_6 n_8 unsafe-car)"
"((letrec-values(((loop_27)"
"(lambda(i_16)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_16 n_8)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_1"
"(unsafe-fx+ i_16 dst-start_1)"
"(unsafe-cdr(unsafe-vector-ref work-vec_1 i_16)))"
"(loop_27(unsafe-fx+ i_16 1))))"
"(void))))))"
" loop_27)"
" 0))))"
"(if((letrec-values(((loop_28)"
"(lambda(prev-val_1 next-index_1)"
"(begin"
" 'loop"
"(let-values(((or-part_17)(unsafe-fx= next-index_1 end_1)))"
"(if or-part_17"
" or-part_17"
"(let-values(((next-val_1)"
"(unsafe-vector-ref vec_4 next-index_1)))"
"(if(not"
"(if getkey_2"
"(less-than?_6"
"(getkey_2 next-val_1)"
"(getkey_2 prev-val_1))"
"(less-than?_6 next-val_1 prev-val_1)))"
"(loop_28 next-val_1(unsafe-fx+ next-index_1 1))"
" #f))))))))"
" loop_28)"
"(unsafe-vector-ref vec_4 start_1)"
"(unsafe-fx+ start_1 1))"
"(let-values()(let-values()(vector-copy! dst-vec_1 dst-start_1 vec_4 start_1 end_1)))"
"(if(unsafe-fx<= n_8 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_1 dst-start_1 vec_4 start_1 end_1))"
"(if(unsafe-fx= n_8 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_8 2)"
"(let-values()"
"(let-values(((tmp_1)(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_1"
"(unsafe-fx+ dst-start_1 0)"
"(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 1)))"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) tmp_1))))"
"(let-values()"
"(let-values(((a_5)(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 0)))"
"((b_4)(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 1)))"
"((c_3)(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 2))))"
"(if(if getkey_2"
"(less-than?_6(getkey_2 b_4)(getkey_2 a_5))"
"(less-than?_6 b_4 a_5))"
"(let-values()"
"(if(if getkey_2"
"(less-than?_6(getkey_2 c_3)(getkey_2 b_4))"
"(less-than?_6 c_3 b_4))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) c_3)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) a_5)))"
"(if(if getkey_2"
"(less-than?_6(getkey_2 c_3)(getkey_2 a_5))"
"(less-than?_6 c_3 a_5))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) b_4)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) c_3)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) a_5)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) b_4)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) a_5))))))"
"(if(if getkey_2"
"(less-than?_6(getkey_2 c_3)(getkey_2 a_5))"
"(less-than?_6 c_3 a_5))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) c_3)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) a_5)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) b_4)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) c_3)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) b_4)))))))))))"
"(let-values()"
"(let-values(((work-vec_2)(make-vector(+ n_8(ceiling(/ n_8 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2 0 vec_4 start_1 end_1)"
"(generic-sort/key_0 work-vec_2 less-than?_6 n_8 getkey_2)"
"(vector-copy! dst-vec_1 dst-start_1 work-vec_2 0 n_8))))))))"
" dst-vec_1))))"
"(vector-sort vec_4 less-than?_6 start_1 end_1))))"
"(case-lambda"
"((vec_5 less-than?_7 start_2 end_2)"
"(let-values(((n_9)(- end_2 start_2)))"
"(let-values(((dst-vec_2) vec_5))"
"(let-values(((dst-start_2) start_2))"
"(begin"
"(if(unsafe-fx= n_9 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_29)"
"(lambda(prev-val_2 next-index_2)"
"(begin"
" 'loop"
"(let-values(((or-part_18)(unsafe-fx= next-index_2 end_2)))"
"(if or-part_18"
" or-part_18"
"(let-values(((next-val_2)(unsafe-vector-ref vec_5 next-index_2)))"
"(if(not(less-than?_7 next-val_2 prev-val_2))"
"(loop_29 next-val_2(unsafe-fx+ next-index_2 1))"
" #f))))))))"
" loop_29)"
"(unsafe-vector-ref vec_5 start_2)"
"(unsafe-fx+ start_2 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_9 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_9 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_9 2)"
"(let-values()"
"(let-values(((tmp_2)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2"
"(unsafe-fx+ dst-start_2 0)"
"(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 1)))"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) tmp_2))))"
"(let-values()"
"(let-values(((a_6)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 0)))"
"((b_5)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 1)))"
"((c_4)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 2))))"
"(if(less-than?_7 b_5 a_6)"
"(let-values()"
"(if(less-than?_7 c_4 b_5)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) c_4)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) a_6)))"
"(if(less-than?_7 c_4 a_6)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) b_5)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) c_4)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) a_6)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) b_5)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) a_6))))))"
"(if(less-than?_7 c_4 a_6)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) c_4)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) a_6)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) b_5)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) c_4)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) b_5)))))))))))"
"(let-values()"
"(let-values(((work-vec_3)(make-vector(+ n_9(ceiling(/ n_9 2))) #f)))"
"(begin"
"(vector-copy! work-vec_3 0 vec_5 start_2 end_2)"
"(generic-sort_0 work-vec_3 less-than?_7 n_9)"
"(vector-copy! dst-vec_2 dst-start_2 work-vec_3 0 n_9)))))))"
"(void))))))"
"((vec_6 less-than?_8 start_3 end_3 getkey_3 cache-keys?_2)"
"(if(if getkey_3(not(eq? values getkey_3)) #f)"
"(let-values(((n_10)(- end_3 start_3)))"
"(let-values(((dst-vec_3) vec_6))"
"(let-values(((dst-start_3) start_3))"
"(begin"
"(if(unsafe-fx= n_10 0)"
"(let-values()(void))"
"(if cache-keys?_2"
"(let-values()"
"(let-values(((work-vec_4)(make-vector(+ n_10(ceiling(/ n_10 2))) #t)))"
"(begin"
"((letrec-values(((loop_30)"
"(lambda(i_17)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_17 n_10)"
"(let-values()"
"(begin"
"(let-values(((x_8)"
"(unsafe-vector-ref"
" vec_6"
"(unsafe-fx+ i_17 start_3))))"
"(unsafe-vector-set!"
" work-vec_4"
" i_17"
"(cons(getkey_3 x_8) x_8)))"
"(loop_30(unsafe-fx+ i_17 1))))"
"(void))))))"
" loop_30)"
" 0)"
"(generic-sort/key_0 work-vec_4 less-than?_8 n_10 unsafe-car)"
"((letrec-values(((loop_31)"
"(lambda(i_18)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_18 n_10)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_3"
"(unsafe-fx+ i_18 dst-start_3)"
"(unsafe-cdr(unsafe-vector-ref work-vec_4 i_18)))"
"(loop_31(unsafe-fx+ i_18 1))))"
"(void))))))"
" loop_31)"
" 0))))"
"(if((letrec-values(((loop_32)"
"(lambda(prev-val_3 next-index_3)"
"(begin"
" 'loop"
"(let-values(((or-part_19)(unsafe-fx= next-index_3 end_3)))"
"(if or-part_19"
" or-part_19"
"(let-values(((next-val_3)"
"(unsafe-vector-ref vec_6 next-index_3)))"
"(if(not"
"(if getkey_3"
"(less-than?_8"
"(getkey_3 next-val_3)"
"(getkey_3 prev-val_3))"
"(less-than?_8 next-val_3 prev-val_3)))"
"(loop_32 next-val_3(unsafe-fx+ next-index_3 1))"
" #f))))))))"
" loop_32)"
"(unsafe-vector-ref vec_6 start_3)"
"(unsafe-fx+ start_3 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_10 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_10 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_10 2)"
"(let-values()"
"(let-values(((tmp_3)(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_3"
"(unsafe-fx+ dst-start_3 0)"
"(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 1)))"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) tmp_3))))"
"(let-values()"
"(let-values(((a_7)(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 0)))"
"((b_6)(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 1)))"
"((c_5)(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 2))))"
"(if(if getkey_3"
"(less-than?_8(getkey_3 b_6)(getkey_3 a_7))"
"(less-than?_8 b_6 a_7))"
"(let-values()"
"(if(if getkey_3"
"(less-than?_8(getkey_3 c_5)(getkey_3 b_6))"
"(less-than?_8 c_5 b_6))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) c_5)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) a_7)))"
"(if(if getkey_3"
"(less-than?_8(getkey_3 c_5)(getkey_3 a_7))"
"(less-than?_8 c_5 a_7))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) b_6)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) c_5)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) a_7)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) b_6)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) a_7))))))"
"(if(if getkey_3"
"(less-than?_8(getkey_3 c_5)(getkey_3 a_7))"
"(less-than?_8 c_5 a_7))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) c_5)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) a_7)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) b_6)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) c_5)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) b_6)))))))))))"
"(let-values()"
"(let-values(((work-vec_5)(make-vector(+ n_10(ceiling(/ n_10 2))) #f)))"
"(begin"
"(vector-copy! work-vec_5 0 vec_6 start_3 end_3)"
"(generic-sort/key_0 work-vec_5 less-than?_8 n_10 getkey_3)"
"(vector-copy! dst-vec_3 dst-start_3 work-vec_5 0 n_10))))))))"
"(void)))))"
"(vector-sort! vec_6 less-than?_8 start_3 end_3)))))))))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_9 si_0)"
"(begin"
"(if(if(vector? v_9)"
"(if(= 3(vector-length v_9))"
"(if(procedure?(vector-ref v_9 0))"
"(if(procedure-arity-includes?(vector-ref v_9 0) 1)"
"(if(procedure?(vector-ref v_9 1))"
"(if(procedure-arity-includes?(vector-ref v_9 1) 1)"
"(if(procedure?(vector-ref v_9 2))(procedure-arity-includes?(vector-ref v_9 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_9)))"
"(vector->immutable-vector v_9)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_10 si_1)"
"(begin"
"(if(if(procedure? v_10)(procedure-arity-includes? v_10 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_10)))"
" v_10))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_11)(let-values(((cont?_0)(range-ref v_11 2)))(if cont?_0(not(cont?_0(range-ref v_11 0))) #f)))"
"(lambda(v_12)(range-ref v_12 0))"
"(lambda(v_13)(make-range((range-ref v_13 1)(range-ref v_13 0))(range-ref v_13 1)(range-ref v_13 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_14)(values values #f(range-ref v_14 1)(range-ref v_14 0)(range-ref v_14 2) #f #f))))))"
"(define-values"
"(check-range)"
"(lambda(a_8 b_7 step_0)"
"(begin"
"(begin"
"        (if (real? a_8) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_8)))"
"        (if (real? b_7) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_7)))"
"        (if (real? step_0) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_0)))))))"
"(define-values"
"(check-naturals)"
"(lambda(n_11)"
"(begin"
"(if(if(integer? n_11)(if(exact? n_11)(>= n_11 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_11))))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_15)(not(pair?(list-stream-ref v_15 0))))"
"(lambda(v_16)(car(list-stream-ref v_16 0)))"
"(lambda(v_17)(make-list-stream(cdr(list-stream-ref v_17 0))))))"
"(cons prop:gen-sequence(lambda(v_18)(values car cdr values(list-stream-ref v_18 0) pair? #f #f))))))"
"(define-values"
"(check-list)"
"  (lambda (l_5) (begin (if (list? l_5) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_5))))))"
"(define-values"
"(check-in-hash)"
"(lambda(ht_7)"
"(begin"
"      (if ((lambda (ht_8) (hash? ht_8)) ht_7) (void) (let-values () (raise-argument-error 'in-hash \"hash?\" ht_7))))))"
"(define-values"
"(check-in-immutable-hash)"
"(lambda(ht_9)"
"(begin"
"(if((lambda(ht_10)(if(hash? ht_10)(immutable? ht_10) #f)) ht_9)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_9))))))"
"(define-values"
"(check-in-hash-keys)"
"(lambda(ht_11)"
"(begin"
"(if((lambda(ht_12)(hash? ht_12)) ht_11)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_11))))))"
"(define-values"
"(check-in-immutable-hash-keys)"
"(lambda(ht_13)"
"(begin"
"(if((lambda(ht_14)(if(hash? ht_14)(immutable? ht_14) #f)) ht_13)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_13))))))"
"(define-values"
"(check-in-hash-values)"
"(lambda(ht_15)"
"(begin"
"(if((lambda(ht_16)(hash? ht_16)) ht_15)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_15))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_3 vec_7 start_4 stop_0 step_1 len_0)"
"(begin"
"(begin"
"(if(if(exact-nonnegative-integer? start_4)"
"(let-values(((or-part_20)(< start_4 len_0)))(if or-part_20 or-part_20(= len_0 start_4 stop_0)))"
" #f)"
"(void)"
"          (let-values () (raise-range-error who_3 \"vector\" \"starting \" start_4 vec_7 0 (sub1 len_0))))"
"(if(if(exact-integer? stop_0)(if(<= -1 stop_0)(<= stop_0 len_0) #f) #f)"
"(void)"
"          (let-values () (raise-range-error who_3 \"vector\" \"stopping \" stop_0 vec_7 -1 len_0)))"
"(if(if(exact-integer? step_1)(not(zero? step_1)) #f)"
"(void)"
"          (let-values () (raise-argument-error who_3 \"(and/c exact-integer? (not/c zero?))\" step_1)))"
"(if(if(< start_4 stop_0)(< step_1 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_3"
"             \"starting index less than stopping index, but given a negative step\""
"             \"starting index\""
" start_4"
"             \"stopping index\""
" stop_0"
"             \"step\""
" step_1))"
"(void))"
"(if(if(< stop_0 start_4)(> step_1 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_3"
"             \"starting index more than stopping index, but given a positive step\""
"             \"starting index\""
" start_4"
"             \"stopping index\""
" stop_0"
"             \"step\""
" step_1))"
"(void))))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_4 type-name_0 vector?_0 unsafe-vector-length_0 vec_8 start_5 stop_1 step_2)"
"(begin"
"(begin"
"(if(vector?_0 vec_8)(void)(let-values()(raise-argument-error who_4 type-name_0 vec_8)))"
"(let-values(((len_1)(unsafe-vector-length_0 vec_8)))"
"(let-values(((stop*_0)(if stop_1 stop_1 len_1)))"
"(begin(check-ranges who_4 vec_8 start_5 stop*_0 step_2 len_1)(values vec_8 start_5 stop*_0 step_2))))))))"
"(define-values"
"(check-vector)"
"  (lambda (v_19) (begin (if (vector? v_19) (void) (let-values () (raise-argument-error 'in-vector \"vector\" v_19))))))"
"(define-values"
"(check-string)"
"  (lambda (v_20) (begin (if (string? v_20) (void) (let-values () (raise-argument-error 'in-string \"string\" v_20))))))"
"(define-values"
"(check-bytes)"
"  (lambda (v_21) (begin (if (bytes? v_21) (void) (let-values () (raise-argument-error 'in-bytes \"bytes\" v_21))))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_22)((do-stream-ref v_22 0)))"
"(lambda(v_23)((do-stream-ref v_23 1)))"
"(lambda(v_24)((do-stream-ref v_24 2))))))))"
"(define-values(empty-stream)(make-do-stream(lambda() #t) void void))"
"(define-values"
"(grow-vector)"
"(lambda(vec_9)"
"(begin"
"(let-values(((n_12)(vector-length vec_9)))"
"(let-values(((new-vec_0)(make-vector(* 2 n_12))))"
"(begin(vector-copy! new-vec_0 0 vec_9 0 n_12) new-vec_0))))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_10 i_19)"
"(begin(let-values(((new-vec_1)(make-vector i_19)))(begin(vector-copy! new-vec_1 0 vec_10 0 i_19) new-vec_1)))))"
"(define-values"
"(map2)"
"(let-values(((map_0)"
"(case-lambda"
"((f_0 l_6)"
"(begin"
" 'map"
"(if(if(procedure? f_0)(if(procedure-arity-includes? f_0 1)(list? l_6) #f) #f)"
"((letrec-values(((loop_33)"
"(lambda(l_2)"
"(begin"
" 'loop"
"(if(null? l_2)"
"(let-values() null)"
"(let-values()"
"(let-values(((r_4)(cdr l_2)))"
"(cons(f_0(car l_2))(loop_33 r_4)))))))))"
" loop_33)"
" l_6)"
"(gen-map f_0(list l_6)))))"
"((f_1 l1_0 l2_0)"
"(if(if(procedure? f_1)"
"(if(procedure-arity-includes? f_1 2)"
"(if(list? l1_0)(if(list? l2_0)(=(length l1_0)(length l2_0)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_34)"
"(lambda(l1_1 l2_1)"
"(begin"
" 'loop"
"(if(null? l1_1)"
"(let-values() null)"
"(let-values()"
"(let-values(((r1_0)(cdr l1_1))((r2_0)(cdr l2_1)))"
"(cons(f_1(car l1_1)(car l2_1))(loop_34 r1_0 r2_0)))))))))"
" loop_34)"
" l1_0"
" l2_0)"
"(gen-map f_1(list l1_0 l2_0))))"
"((f_2 l_7 . args_0)(gen-map f_2(cons l_7 args_0))))))"
" map_0))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_0)"
"(case-lambda"
"((f_3 l_8)"
"(begin"
" 'for-each"
"(if(if(procedure? f_3)(if(procedure-arity-includes? f_3 1)(list? l_8) #f) #f)"
"((letrec-values(((loop_35)"
"(lambda(l_9)"
"(begin"
" 'loop"
"(if(null? l_9)"
"(let-values()(void))"
"(let-values()"
"(let-values(((r_5)(cdr l_9)))"
"(begin(f_3(car l_9))(loop_35 r_5)))))))))"
" loop_35)"
" l_8)"
"(gen-for-each f_3(list l_8)))))"
"((f_4 l1_2 l2_2)"
"(if(if(procedure? f_4)"
"(if(procedure-arity-includes? f_4 2)"
"(if(list? l1_2)(if(list? l2_2)(=(length l1_2)(length l2_2)) #f) #f)"
" #f)"
" #f)"
"((letrec-values(((loop_36)"
"(lambda(l1_3 l2_3)"
"(begin"
" 'loop"
"(if(null? l1_3)"
"(let-values()(void))"
"(let-values()"
"(let-values(((r1_1)(cdr l1_3))((r2_1)(cdr l2_3)))"
"(begin(f_4(car l1_3)(car l2_3))(loop_36 r1_1 r2_1)))))))))"
" loop_36)"
" l1_2"
" l2_2)"
"(gen-for-each f_4(list l1_2 l2_2))))"
"((f_5 l_10 . args_1)(gen-for-each f_5(cons l_10 args_1))))))"
" for-each_0))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_0)"
"(case-lambda"
"((f_6 l_11)"
"(begin"
" 'andmap"
"(if(if(procedure? f_6)(if(procedure-arity-includes? f_6 1)(list? l_11) #f) #f)"
"(if(null? l_11)"
" #t"
"((letrec-values(((loop_37)"
"(lambda(l_12)"
"(begin"
" 'loop"
"(if(null?(cdr l_12))"
"(let-values()(f_6(car l_12)))"
"(let-values()"
"(let-values(((r_6)(cdr l_12)))"
"(if(f_6(car l_12))(loop_37 r_6) #f))))))))"
" loop_37)"
" l_11))"
"(gen-andmap f_6(list l_11)))))"
"((f_7 l1_4 l2_4)"
"(if(if(procedure? f_7)"
"(if(procedure-arity-includes? f_7 2)"
"(if(list? l1_4)(if(list? l2_4)(=(length l1_4)(length l2_4)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_4)"
" #t"
"((letrec-values(((loop_38)"
"(lambda(l1_5 l2_5)"
"(begin"
" 'loop"
"(if(null?(cdr l1_5))"
"(let-values()(f_7(car l1_5)(car l2_5)))"
"(let-values()"
"(let-values(((r1_2)(cdr l1_5))((r2_2)(cdr l2_5)))"
"(if(f_7(car l1_5)(car l2_5))(loop_38 r1_2 r2_2) #f))))))))"
" loop_38)"
" l1_4"
" l2_4))"
"(gen-andmap f_7(list l1_4 l2_4))))"
"((f_8 l_13 . args_2)(gen-andmap f_8(cons l_13 args_2))))))"
" andmap_0))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_0)"
"(case-lambda"
"((f_9 l_14)"
"(begin"
" 'ormap"
"(if(if(procedure? f_9)(if(procedure-arity-includes? f_9 1)(list? l_14) #f) #f)"
"(if(null? l_14)"
" #f"
"((letrec-values(((loop_39)"
"(lambda(l_15)"
"(begin"
" 'loop"
"(if(null?(cdr l_15))"
"(let-values()(f_9(car l_15)))"
"(let-values()"
"(let-values(((r_7)(cdr l_15)))"
"(let-values(((or-part_21)(f_9(car l_15))))"
"(if or-part_21 or-part_21(loop_39 r_7))))))))))"
" loop_39)"
" l_14))"
"(gen-ormap f_9(list l_14)))))"
"((f_10 l1_6 l2_6)"
"(if(if(procedure? f_10)"
"(if(procedure-arity-includes? f_10 2)"
"(if(list? l1_6)(if(list? l2_6)(=(length l1_6)(length l2_6)) #f) #f)"
" #f)"
" #f)"
"(if(null? l1_6)"
" #f"
"((letrec-values(((loop_40)"
"(lambda(l1_7 l2_7)"
"(begin"
" 'loop"
"(if(null?(cdr l1_7))"
"(let-values()(f_10(car l1_7)(car l2_7)))"
"(let-values()"
"(let-values(((r1_3)(cdr l1_7))((r2_3)(cdr l2_7)))"
"(let-values(((or-part_22)(f_10(car l1_7)(car l2_7))))"
"(if or-part_22 or-part_22(loop_40 r1_3 r2_3))))))))))"
" loop_40)"
" l1_6"
" l2_6))"
"(gen-ormap f_10(list l1_6 l2_6))))"
"((f_11 l_16 . args_3)(gen-ormap f_11(cons l_16 args_3))))))"
" ormap_0))"
"(define-values"
"(check-args)"
"(lambda(who_5 f_12 ls_4)"
"(begin"
"(begin"
"        (if (procedure? f_12) (void) (let-values () (raise-argument-error who_5 \"procedure?\" f_12)))"
"((letrec-values(((loop_41)"
"(lambda(prev-len_0 ls_5 i_20)"
"(begin"
" 'loop"
"(if(null? ls_5)"
"(void)"
"(let-values()"
"(let-values(((l_17)(car ls_5)))"
"(begin"
"                                      (if (list? l_17) (void) (let-values () (raise-argument-error who_5 \"list?\" l_17)))"
"(let-values(((len_2)(length l_17)))"
"(begin"
"(if(if prev-len_0(not(= len_2 prev-len_0)) #f)"
"(let-values()"
"(raise-arguments-error"
" who_5"
"                                               \"all lists must have same size\""
"                                               \"first list length\""
" prev-len_0"
"                                               \"other list length\""
" len_2"
"                                               \"procedure\""
" f_12))"
"(void))"
"(loop_41 len_2(cdr ls_5)(add1 i_20))))))))))))"
" loop_41)"
" #f"
" ls_4"
" 1)"
"(if(procedure-arity-includes? f_12(length ls_4))"
"(void)"
"(let-values()"
"(apply"
" raise-arguments-error"
" who_5"
"(string-append"
"              \"argument mismatch;\\n\""
"              \" the given procedure's expected number of arguments does not match\""
"              \" the given number of lists\")"
"             \"given procedure\""
"(unquoted-printing-string"
"(let-values(((or-part_23)"
"(let-values(((n_13)(object-name f_12)))(if(symbol? n_13)(symbol->string n_13) #f))))"
"                (if or-part_23 or-part_23 \"#<procedure>\")))"
"(append"
"(let-values(((a_9)(procedure-arity f_12)))"
"(if(integer? a_9)"
"                  (let-values () (list \"expected\" a_9))"
"(if(arity-at-least? a_9)"
"(let-values()"
"(list"
"                       \"expected\""
"(unquoted-printing-string"
"                        (string-append \"at least \" (number->string (arity-at-least-value a_9))))))"
"(let-values() null))))"
"              (list \"given\" (length ls_4))"
"(let-values(((w_0)(quotient(error-print-width)(length ls_4))))"
"(if(> w_0 10)"
"(list"
"                   \"argument lists...\""
"(unquoted-printing-string"
"(apply"
" string-append"
"((letrec-values(((loop_42)"
"(lambda(ls_6)"
"(begin"
" 'loop"
"(if(null? ls_6)"
"(let-values() null)"
"(let-values()"
"(cons"
"                                                (string-append \"\\n   \" ((error-value->string-handler) (car ls_6) w_0))"
"(loop_42(cdr ls_6)))))))))"
" loop_42)"
" ls_4))))"
" null))))))))))"
"(define-values"
"(gen-map)"
"(lambda(f_13 ls_7)"
"(begin"
"(begin"
"(check-args 'map f_13 ls_7)"
"((letrec-values(((loop_43)"
"(lambda(ls_8)"
"(begin"
" 'loop"
"(if(null?(car ls_8))"
"(let-values() null)"
"(let-values()"
"(let-values(((next-ls_0)(map2 cdr ls_8)))"
"(cons(apply f_13(map2 car ls_8))(loop_43 next-ls_0)))))))))"
" loop_43)"
" ls_7)))))"
"(define-values"
"(gen-for-each)"
"(lambda(f_14 ls_9)"
"(begin"
"(begin"
"(check-args 'for-each f_14 ls_9)"
"((letrec-values(((loop_44)"
"(lambda(ls_10)"
"(begin"
" 'loop"
"(if(null?(car ls_10))"
"(void)"
"(let-values()"
"(let-values(((next-ls_1)(map2 cdr ls_10)))"
"(begin(apply f_14(map2 car ls_10))(loop_44 next-ls_1)))))))))"
" loop_44)"
" ls_9)))))"
"(define-values"
"(gen-andmap)"
"(lambda(f_15 ls_11)"
"(begin"
"(begin"
"(check-args 'andmap f_15 ls_11)"
"((letrec-values(((loop_45)"
"(lambda(ls_12)"
"(begin"
" 'loop"
"(if(null?(car ls_12))"
"(let-values() #t)"
"(if(null?(cdar ls_12))"
"(let-values()(apply f_15(map2 car ls_12)))"
"(let-values()"
"(let-values(((next-ls_2)(map2 cdr ls_12)))"
"(if(apply f_15(map2 car ls_12))(loop_45 next-ls_2) #f)))))))))"
" loop_45)"
" ls_11)))))"
"(define-values"
"(gen-ormap)"
"(lambda(f_16 ls_13)"
"(begin"
"(begin"
"(check-args 'ormap f_16 ls_13)"
"((letrec-values(((loop_46)"
"(lambda(ls_14)"
"(begin"
" 'loop"
"(if(null?(car ls_14))"
"(let-values() #f)"
"(if(null?(cdar ls_14))"
"(let-values()(apply f_16(map2 car ls_14)))"
"(let-values()"
"(let-values(((next-ls_3)(map2 cdr ls_14)))"
"(let-values(((or-part_24)(apply f_16(map2 car ls_14))))"
"(if or-part_24 or-part_24(loop_46 next-ls_3)))))))))))"
" loop_46)"
" ls_13)))))"
"(define-values"
"(hash-keys)"
"(lambda(h_0)"
"(begin"
"((letrec-values(((loop_8)"
"(lambda(pos_0)"
"(begin"
" 'loop"
"(if pos_0"
"(cons(hash-iterate-key h_0 pos_0)(loop_8(hash-iterate-next h_0 pos_0)))"
" null)))))"
" loop_8)"
"(hash-iterate-first h_0)))))"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_0 cache-keys?4_0 key1_0 key3_0 lst5_0 less?6_0)"
"(begin"
" 'sort7"
"(let-values(((lst_6) lst5_0))"
"(let-values(((less?_0) less?6_0))"
"(let-values(((getkey_4)(if key3_0 key1_0 #f)))"
"(let-values(((cache-keys?_3)(if cache-keys?4_0 cache-keys?2_0 #f)))"
"(let-values()"
"(begin"
"                  (if (list? lst_6) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_6)))"
"(if(if(procedure? less?_0)(procedure-arity-includes? less?_0 2) #f)"
"(void)"
"                    (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_0)))"
"(if(if getkey_4(not(if(procedure? getkey_4)(procedure-arity-includes? getkey_4 1) #f)) #f)"
"                    (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_4))"
"(void))"
"(if getkey_4(sort lst_6 less?_0 getkey_4 cache-keys?_3)(sort lst_6 less?_0)))))))))))"
"(define-values"
"(bad-list)"
"  (lambda (who_6 orig-l_7) (begin (raise-mismatch-error who_6 \"not a proper list: \" orig-l_7))))"
"(define-values"
"(bad-item)"
"  (lambda (who_7 a_10 orig-l_8) (begin (raise-mismatch-error who_7 \"non-pair found in list: \" a_10 \" in \" orig-l_8))))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values()"
"(let-values(((assq_0)"
"(lambda(x_9 l_18)"
"(begin"
" 'assq"
"((letrec-values(((loop_46)"
"(lambda(l_19 t_0)"
"(begin"
" 'loop"
"(if(pair? l_19)"
"(let-values()"
"(let-values(((a_0)(unsafe-car l_19)))"
"(if(pair? a_0)"
"(if(eq? x_9(unsafe-car a_0))"
" a_0"
"(let-values(((l_20)(unsafe-cdr l_19)))"
"(if(pair? l_20)"
"(let-values()"
"(let-values(((a_11)(unsafe-car l_20)))"
"(if(pair? a_11)"
"(if(eq? x_9(unsafe-car a_11))"
" a_11"
"(let-values(((t_1)(unsafe-cdr t_0))"
"((l_21)(unsafe-cdr l_20)))"
"(if(eq? l_21 t_1)"
"(bad-list 'assq l_18)"
"(loop_46 l_21 t_1))))"
"(bad-item 'assq a_11 l_18))))"
"(if(null? l_20)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_18))))))"
"(bad-item 'assq a_0 l_18))))"
"(if(null? l_19)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_18))))))))"
" loop_46)"
" l_18"
" l_18))))"
"((assv_0)"
"(lambda(x_10 l_22)"
"(begin"
" 'assv"
"((letrec-values(((loop_47)"
"(lambda(l_23 t_2)"
"(begin"
" 'loop"
"(if(pair? l_23)"
"(let-values()"
"(let-values(((a_12)(unsafe-car l_23)))"
"(if(pair? a_12)"
"(if(eqv? x_10(unsafe-car a_12))"
" a_12"
"(let-values(((l_24)(unsafe-cdr l_23)))"
"(if(pair? l_24)"
"(let-values()"
"(let-values(((a_13)(unsafe-car l_24)))"
"(if(pair? a_13)"
"(if(eqv? x_10(unsafe-car a_13))"
" a_13"
"(let-values(((t_3)(unsafe-cdr t_2))"
"((l_25)(unsafe-cdr l_24)))"
"(if(eq? l_25 t_3)"
"(bad-list 'assv l_22)"
"(loop_47 l_25 t_3))))"
"(bad-item 'assv a_13 l_22))))"
"(if(null? l_24)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_22))))))"
"(bad-item 'assv a_12 l_22))))"
"(if(null? l_23)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_22))))))))"
" loop_47)"
" l_22"
" l_22))))"
"((assoc_0)"
"(case-lambda"
"((x_11 l_26)"
"(begin"
" 'assoc"
"((letrec-values(((loop_48)"
"(lambda(l_27 t_4)"
"(begin"
" 'loop"
"(if(pair? l_27)"
"(let-values()"
"(let-values(((a_14)(unsafe-car l_27)))"
"(if(pair? a_14)"
"(if(equal? x_11(unsafe-car a_14))"
" a_14"
"(let-values(((l_28)(unsafe-cdr l_27)))"
"(if(pair? l_28)"
"(let-values()"
"(let-values(((a_15)(unsafe-car l_28)))"
"(if(pair? a_15)"
"(if(equal? x_11(unsafe-car a_15))"
" a_15"
"(let-values(((t_5)(unsafe-cdr t_4))"
"((l_29)(unsafe-cdr l_28)))"
"(if(eq? l_29 t_5)"
"(bad-list 'assoc l_26)"
"(loop_48 l_29 t_5))))"
"(bad-item 'assoc a_15 l_26))))"
"(if(null? l_28)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_26))))))"
"(bad-item 'assoc a_14 l_26))))"
"(if(null? l_27)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_26))))))))"
" loop_48)"
" l_26"
" l_26)))"
"((x_12 l_30 is-equal?_0)"
"(begin"
"(if(if(procedure? is-equal?_0)(procedure-arity-includes? is-equal?_0 2) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_0)))"
"((letrec-values(((loop_49)"
"(lambda(l_31 t_6)"
"(begin"
" 'loop"
"(if(pair? l_31)"
"(let-values()"
"(let-values(((a_16)(unsafe-car l_31)))"
"(if(pair? a_16)"
"(if(is-equal?_0 x_12(unsafe-car a_16))"
" a_16"
"(let-values(((l_32)(unsafe-cdr l_31)))"
"(if(pair? l_32)"
"(let-values()"
"(let-values(((a_17)(unsafe-car l_32)))"
"(if(pair? a_17)"
"(if(is-equal?_0 x_12(unsafe-car a_17))"
" a_17"
"(let-values(((t_7)(unsafe-cdr t_6))"
"((l_33)(unsafe-cdr l_32)))"
"(if(eq? l_33 t_7)"
"(bad-list 'assoc l_30)"
"(loop_49 l_33 t_7))))"
"(bad-item 'assoc a_17 l_30))))"
"(if(null? l_32)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_30))))))"
"(bad-item 'assoc a_16 l_30))))"
"(if(null? l_31)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_30))))))))"
" loop_49)"
" l_30"
" l_30)))))"
"((assf_0)"
"(lambda(f_17 l_34)"
"(begin"
" 'assf"
"(begin"
"(if(if(procedure? f_17)(procedure-arity-includes? f_17 1) #f)"
"(void)"
"                            (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_17)))"
"((letrec-values(((loop_50)"
"(lambda(l_35 t_8)"
"(begin"
" 'loop"
"(if(pair? l_35)"
"(let-values()"
"(let-values(((a_18)(unsafe-car l_35)))"
"(if(pair? a_18)"
"(if((lambda(__0 a_19)(f_17 a_19)) #f(unsafe-car a_18))"
" a_18"
"(let-values(((l_36)(unsafe-cdr l_35)))"
"(if(pair? l_36)"
"(let-values()"
"(let-values(((a_20)(unsafe-car l_36)))"
"(if(pair? a_20)"
"(if((lambda(__1 a_21)(f_17 a_21))"
" #f"
"(unsafe-car a_20))"
" a_20"
"(let-values(((t_9)(unsafe-cdr t_8))"
"((l_37)(unsafe-cdr l_36)))"
"(if(eq? l_37 t_9)"
"(bad-list 'assf l_34)"
"(loop_50 l_37 t_9))))"
"(bad-item 'assf a_20 l_34))))"
"(if(null? l_36)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_34))))))"
"(bad-item 'assf a_18 l_34))))"
"(if(null? l_35)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_34))))))))"
" loop_50)"
" l_34"
" l_34))))))"
"(values assq_0 assv_0 assoc_0 assf_0)))))"
"(define-values"
"(filter)"
"(lambda(f_18 list_0)"
"(begin"
"(begin"
"(if(if(procedure? f_18)(procedure-arity-includes? f_18 1) #f)"
"(void)"
"          (let-values () (raise-argument-error 'filter \"(any/c . -> . any/c)\" f_18)))"
"        (if (list? list_0) (void) (let-values () (raise-argument-error 'filter \"list?\" list_0)))"
"((letrec-values(((loop_51)"
"(lambda(l_38 result_0)"
"(begin"
" 'loop"
"(if(null? l_38)"
"(reverse$1 result_0)"
"(loop_51(cdr l_38)(if(f_18(car l_38))(cons(car l_38) result_0) result_0)))))))"
" loop_51)"
" list_0"
" null)))))"
"(define-values(no-empty-edge-table)(make-hash))"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_0 for-module?4_0 mode1_0 mode3_0 path5_0)"
"(begin"
" 'open-input-file6"
"(let-values(((path_0) path5_0))"
"(let-values(((mode_0)(if mode3_0 mode1_0 'binary)))"
"(let-values(((for-module?_0)(if for-module?4_0 for-module?2_0 #f)))"
"(let-values()"
"(begin"
"(if(path-string? path_0)"
"(void)"
"                  (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_0)))"
"(if(memq mode_0 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_0)))"
"(open-input-file path_0 mode_0(if for-module?_0 'module 'none))))))))))"
"(define-values"
"(with-input-from-file45.1)"
"(lambda(mode41_0 mode42_0 path43_0 proc44_0)"
"(begin"
" 'with-input-from-file45"
"(let-values(((path_1) path43_0))"
"(let-values(((proc_0) proc44_0))"
"(let-values(((mode_1)(if mode42_0 mode41_0 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_1)"
"(void)"
"                  (let-values () (raise-argument-error 'with-input-from-file \"path-string?\" path_1)))"
"(if(if(procedure? proc_0)(procedure-arity-includes? proc_0 0) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'with-input-from-file \"(-> any)\" proc_0)))"
"(if(memq mode_1 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-input-from-file binary-or-text-desc mode_1)))"
"(with-input-from-file path_1 proc_0 mode_1)))))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_0 mode58_0 path59_0 proc60_0)"
"(begin"
" 'call-with-input-file*61"
"(let-values(((path_2) path59_0))"
"(let-values(((proc_1) proc60_0))"
"(let-values(((mode_2)(if mode58_0 mode57_0 'binary)))"
"(let-values()"
"(begin"
"(if(path-string? path_2)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_2)))"
"(if(if(procedure? proc_1)(procedure-arity-includes? proc_1 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_1)))"
"(if(memq mode_2 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_2)))"
"(let-values(((p_2)(open-input-file path_2 mode_2)))"
"(dynamic-wind void(lambda()(proc_1 p_2))(lambda()(close-input-port p_2))))))))))))"
"(define-values(the-empty-hash) '#hash())"
"(define-values(the-empty-hasheq) '#hasheq())"
"(define-values(the-empty-hasheqv) '#hasheqv())"
"(define-values"
"(set)"
"(case-lambda"
"(()(begin the-empty-hash))"
"(l_39"
"(let-values(((lst_7) l_39))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_7)))"
"((letrec-values(((for-loop_0)"
"(lambda(s_11 lst_8)"
"(begin"
" 'for-loop"
"(if(pair? lst_8)"
"(let-values(((e_2)(unsafe-car lst_8))((rest_0)(unsafe-cdr lst_8)))"
"(let-values(((s_12)"
"(let-values(((s_13) s_11))"
"(let-values(((s_14)(let-values()(hash-set s_13 e_2 #t))))"
"(values s_14)))))"
"(if(not #f)(for-loop_0 s_12 rest_0) s_12)))"
" s_11)))))"
" for-loop_0)"
" the-empty-hash"
" lst_7))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(()(begin the-empty-hasheq))"
"(l_40"
"(let-values(((lst_9) l_40))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_9)))"
"((letrec-values(((for-loop_1)"
"(lambda(s_15 lst_10)"
"(begin"
" 'for-loop"
"(if(pair? lst_10)"
"(let-values(((e_3)(unsafe-car lst_10))((rest_1)(unsafe-cdr lst_10)))"
"(let-values(((s_16)"
"(let-values(((s_17) s_15))"
"(let-values(((s_18)(let-values()(hash-set s_17 e_3 #t))))"
"(values s_18)))))"
"(if(not #f)(for-loop_1 s_16 rest_1) s_16)))"
" s_15)))))"
" for-loop_1)"
" the-empty-hasheq"
" lst_9))))))"
"(define-values(seteqv)(lambda()(begin the-empty-hasheqv)))"
"(define-values(set?)(lambda(s_19)(begin(hash? s_19))))"
"(define-values(set-empty?)(lambda(s_20)(begin(zero?(hash-count s_20)))))"
"(define-values(set-member?)(lambda(s_21 e_4)(begin(hash-ref s_21 e_4 #f))))"
"(define-values(set-count)(lambda(s_22)(begin(hash-count s_22))))"
"(define-values(set-add)(lambda(s_23 e_5)(begin(hash-set s_23 e_5 #t))))"
"(define-values(set-remove)(lambda(s_24 e_6)(begin(hash-remove s_24 e_6))))"
"(define-values(set-first)(lambda(s_25)(begin(hash-iterate-key s_25(hash-iterate-first s_25)))))"
"(define-values(subset?)(lambda(s1_0 s2_0)(begin(hash-keys-subset? s1_0 s2_0))))"
"(define-values"
"(set=?)"
"(lambda(s1_1 s2_1)"
"(begin"
"(let-values(((or-part_25)(eq? s1_1 s2_1)))"
"(if or-part_25 or-part_25(if(=(hash-count s1_1)(hash-count s2_1))(hash-keys-subset? s1_1 s2_1) #f))))))"
"(define-values"
"(set-subtract)"
"(lambda(s1_2 s2_2)"
"(begin"
"(let-values(((ht_17) s2_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_17)))"
"((letrec-values(((for-loop_2)"
"(lambda(s1_3 i_21)"
"(begin"
" 'for-loop"
"(if i_21"
"(let-values(((k_0)(unsafe-immutable-hash-iterate-key ht_17 i_21)))"
"(let-values(((s1_4)"
"(let-values(((s1_5) s1_3))"
"(let-values(((s1_6)(let-values()(hash-remove s1_5 k_0))))"
"(values s1_6)))))"
"(if(not #f)"
"(for-loop_2 s1_4(unsafe-immutable-hash-iterate-next ht_17 i_21))"
" s1_4)))"
" s1_3)))))"
" for-loop_2)"
" s1_2"
"(unsafe-immutable-hash-iterate-first ht_17)))))))"
"(define-values"
"(set-union)"
"(lambda(s1_7 s2_3)"
"(begin"
"(if(<(set-count s1_7)(set-count s2_3))"
"(set-union s2_3 s1_7)"
"(let-values(((ht_18) s2_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_18)))"
"((letrec-values(((for-loop_3)"
"(lambda(s1_8 i_22)"
"(begin"
" 'for-loop"
"(if i_22"
"(let-values(((k_1)(unsafe-immutable-hash-iterate-key ht_18 i_22)))"
"(let-values(((s1_9)"
"(let-values(((s1_10) s1_8))"
"(let-values(((s1_11)(let-values()(hash-set s1_10 k_1 #t))))"
"(values s1_11)))))"
"(if(not #f)"
"(for-loop_3 s1_9(unsafe-immutable-hash-iterate-next ht_18 i_22))"
" s1_9)))"
" s1_8)))))"
" for-loop_3)"
" s1_7"
"(unsafe-immutable-hash-iterate-first ht_18))))))))"
"(define-values"
"(set-intersect)"
"(lambda(s1_12 s2_4)"
"(begin"
"(if(<(set-count s1_12)(set-count s2_4))"
"(set-intersect s2_4 s1_12)"
"(let-values(((ht_19) s2_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_19)))"
"((letrec-values(((for-loop_4)"
"(lambda(s_26 i_23)"
"(begin"
" 'for-loop"
"(if i_23"
"(let-values(((k_2)(unsafe-immutable-hash-iterate-key ht_19 i_23)))"
"(let-values(((s_27)"
"(let-values(((s_28) s_26))"
"(let-values(((s_29)"
"(let-values()"
"(if(hash-ref s1_12 k_2 #f)"
" s_28"
"(hash-remove s_28 k_2)))))"
"(values s_29)))))"
"(if(not #f)"
"(for-loop_4 s_27(unsafe-immutable-hash-iterate-next ht_19 i_23))"
" s_27)))"
" s_26)))))"
" for-loop_4)"
" s2_4"
"(unsafe-immutable-hash-iterate-first ht_19))))))))"
"(define-values"
"(set-partition)"
"(lambda(s_30 pred_0 empty-y-set_0 empty-n-set_0)"
"(begin"
"(let-values(((ht_20) s_30))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_20)))"
"((letrec-values(((for-loop_5)"
"(lambda(y_6 n_14 i_24)"
"(begin"
" 'for-loop"
"(if i_24"
"(let-values(((v_25)(unsafe-immutable-hash-iterate-key ht_20 i_24)))"
"(let-values(((y_7 n_15)"
"(let-values(((y_8) y_6)((n_16) n_14))"
"(let-values(((y_9 n_17)"
"(let-values()"
"(if(pred_0 v_25)"
"(values(set-add y_8 v_25) n_16)"
"(values y_8(set-add n_16 v_25))))))"
"(values y_9 n_17)))))"
"(if(not #f)"
"(for-loop_5 y_7 n_15(unsafe-immutable-hash-iterate-next ht_20 i_24))"
"(values y_7 n_15))))"
"(values y_6 n_14))))))"
" for-loop_5)"
" empty-y-set_0"
" empty-n-set_0"
"(unsafe-immutable-hash-iterate-first ht_20)))))))"
"(define-values"
"(set->list)"
"(lambda(s_31)"
"(begin"
"(reverse$1"
"(let-values(((ht_21) s_31))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_21)))"
"((letrec-values(((for-loop_6)"
"(lambda(fold-var_0 i_25)"
"(begin"
" 'for-loop"
"(if i_25"
"(let-values(((k_3)(unsafe-immutable-hash-iterate-key ht_21 i_25)))"
"(let-values(((fold-var_1)"
"(let-values(((fold-var_2) fold-var_0))"
"(let-values(((fold-var_3)"
"(let-values()"
"(cons(let-values() k_3) fold-var_2))))"
"(values fold-var_3)))))"
"(if(not #f)"
"(for-loop_6 fold-var_1(unsafe-immutable-hash-iterate-next ht_21 i_25))"
" fold-var_1)))"
" fold-var_0)))))"
" for-loop_6)"
" null"
"(unsafe-immutable-hash-iterate-first ht_21))))))))"
"(define-values"
"(list->set)"
"(lambda(l_41)"
"(begin"
"(let-values(((lst_11) l_41))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_11)))"
"((letrec-values(((for-loop_7)"
"(lambda(table_0 lst_12)"
"(begin"
" 'for-loop"
"(if(pair? lst_12)"
"(let-values(((k_4)(unsafe-car lst_12))((rest_2)(unsafe-cdr lst_12)))"
"(let-values(((table_1)"
"(let-values(((table_2) table_0))"
"(let-values(((table_3)"
"(let-values()"
"(let-values(((key_8 val_0)"
"(let-values()"
"(values(let-values() k_4) #t))))"
"(hash-set table_2 key_8 val_0)))))"
"(values table_3)))))"
"(if(not #f)(for-loop_7 table_1 rest_2) table_1)))"
" table_0)))))"
" for-loop_7)"
" '#hash()"
" lst_11))))))"
"(define-values"
"(list->seteq)"
"(lambda(l_42)"
"(begin"
"(let-values(((lst_13) l_42))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_13)))"
"((letrec-values(((for-loop_8)"
"(lambda(table_4 lst_14)"
"(begin"
" 'for-loop"
"(if(pair? lst_14)"
"(let-values(((k_5)(unsafe-car lst_14))((rest_3)(unsafe-cdr lst_14)))"
"(let-values(((table_5)"
"(let-values(((table_6) table_4))"
"(let-values(((table_7)"
"(let-values()"
"(let-values(((key_9 val_1)"
"(let-values()"
"(values(let-values() k_5) #t))))"
"(hash-set table_6 key_9 val_1)))))"
"(values table_7)))))"
"(if(not #f)(for-loop_8 table_5 rest_3) table_5)))"
" table_4)))))"
" for-loop_8)"
" '#hasheq()"
" lst_13))))))"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(define-values"
"(1/module-path?)"
"(lambda(v_26)"
"(begin"
" 'module-path?"
"(let-values(((or-part_0)(if(pair? v_26)(if(eq?(car v_26) 'submod)(submodule-module-path? v_26) #f) #f)))"
"(if or-part_0 or-part_0(root-module-path? v_26))))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_27)"
"(begin"
"(let-values(((or-part_11)(path? v_27)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_2)(if(string? v_27)(string-module-path? v_27) #f)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_26)(if(symbol? v_27)(symbol-module-path? v_27) #f)))"
"(if or-part_26"
" or-part_26"
"(if(pair? v_27)"
"(let-values(((tmp_4)(car v_27)))"
"(if(equal? tmp_4 'quote)"
"(let-values()(if(pair?(cdr v_27))(if(symbol?(cadr v_27))(null?(cddr v_27)) #f) #f))"
"(if(equal? tmp_4 'lib)"
"(let-values()(lib-module-path? v_27))"
"(if(equal? tmp_4 'file)"
"(let-values()"
"(if(pair?(cdr v_27))"
"(if(string?(cadr v_27))(if(path-string?(cadr v_27))(null?(cddr v_27)) #f) #f)"
" #f))"
"(if(equal? tmp_4 'planet)"
"(let-values()(planet-module-path? v_27))"
"(let-values() #f))))))"
" #f))))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_28)"
"(begin"
"(if(pair?(cdr v_28))"
"(if(list? v_28)"
"          (if (let-values (((or-part_27) (equal? (cadr v_28) \"..\")))"
"(if or-part_27"
" or-part_27"
"                  (let-values (((or-part_10) (equal? (cadr v_28) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_28))))))"
"(let-values(((lst_15)(cddr v_28)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_15)))"
"((letrec-values(((for-loop_9)"
"(lambda(result_1 lst_16)"
"(begin"
" 'for-loop"
"(if(pair? lst_16)"
"(let-values(((e_7)(unsafe-car lst_16))((rest_4)(unsafe-cdr lst_16)))"
"(let-values(((result_2)"
"(let-values()"
"(let-values(((result_3)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_28)"
"                                                                                          (equal? e_7 \"..\")))"
"(if or-part_28"
" or-part_28"
"(symbol? e_7)))))))"
"(values result_3)))))"
"(if(if(not((lambda x_13(not result_2)) e_7))(not #f) #f)"
"(for-loop_9 result_2 rest_4)"
" result_2)))"
" result_1)))))"
" for-loop_9)"
" #t"
" lst_15)))"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(string-module-path?)"
"(lambda(v_29)"
"(begin"
"(let-values(((temp14_0) #t)((temp15_0) #t)((temp16_0) #t))"
"(module-path-string?10.1 temp14_0 #t temp16_0 #t #f #f temp15_0 #t v_29)))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_30)"
"(begin"
"(let-values(((temp17_0)(symbol->string v_30)))(module-path-string?10.1 #f #f #f #f #f #f #f #f temp17_0)))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_31)"
"(begin"
"(if(list? v_31)"
"(if(pair?(cdr v_31))"
"((letrec-values(((loop_52)"
"(lambda(v_32 first?_0)"
"(begin"
" 'loop"
"(let-values(((or-part_29)(null? v_32)))"
"(if or-part_29"
" or-part_29"
"(if(string?(car v_32))"
"(if(let-values(((temp18_0)(car v_32))"
"((first?19_0) first?_0)"
"((first?20_0) first?_0))"
"(module-path-string?10.1 #f #f first?20_0 #t #f #f first?19_0 #t temp18_0))"
"(loop_52(cdr v_32) #f)"
" #f)"
" #f)))))))"
" loop_52)"
"(cdr v_31)"
" #t)"
" #f)"
" #f))))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_33)"
"(begin"
"(if(list? v_33)"
"(let-values(((tmp_5)(length v_33)))"
"(if(equal? tmp_5 1)"
"(let-values() #f)"
"(if(equal? tmp_5 2)"
"(let-values()"
"(let-values(((e_8)(cadr v_33)))"
"(if(string? e_8)"
"(let-values()"
"(let-values(((temp22_0) #t)((temp23_0) #t))"
"(module-path-string?10.1 #f #f temp23_0 #t temp22_0 #t #f #f e_8)))"
"(if(symbol? e_8)"
"(let-values()"
"(let-values(((temp24_0)(symbol->string e_8))((temp25_0) #t))"
"(module-path-string?10.1 #f #f #f #f temp25_0 #t #f #f temp24_0)))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_0)(cadr v_33)))"
"(let-values(((pkg_0)(caddr v_33)))"
"(let-values(((subs_0)(cdddr v_33)))"
"(if file_0"
"(if(let-values(((temp27_0) #t)((temp28_0) #t))"
"(module-path-string?10.1 #f #f temp28_0 #t #f #f temp27_0 #t file_0))"
"(if(if(list? pkg_0)"
"(if(<= 2(length pkg_0) 4)"
"(if(planet-user/pkg-string?(car pkg_0))"
"(if(planet-user/pkg-string?(cadr pkg_0))"
"(let-values(((or-part_30)(null?(cddr pkg_0))))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(planet-version-number?(caddr pkg_0))))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(null?(cddr pkg_0))))"
"(if or-part_32"
" or-part_32"
"(planet-version-minor-spec?(cadddr pkg_0))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_17) subs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_17)))"
"((letrec-values(((for-loop_10)"
"(lambda(result_4 lst_18)"
"(begin"
" 'for-loop"
"(if(pair? lst_18)"
"(let-values(((sub_0)(unsafe-car lst_18))"
"((rest_5)(unsafe-cdr lst_18)))"
"(let-values(((result_5)"
"(let-values()"
"(let-values(((result_6)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_0)"
" sub_0))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sub29_0))))))"
"(values result_6)))))"
"(if(if(not((lambda x_14(not result_5)) sub_0))"
"(not #f)"
" #f)"
"(for-loop_10 result_5 rest_5)"
" result_5)))"
" result_4)))))"
" for-loop_10)"
" #t"
" lst_17)))"
" #f)"
" #f)"
" #f))))))))"
" #f))))"
"(define-values(planet-version-number?)(lambda(v_34)(begin(exact-nonnegative-integer? v_34))))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_35)"
"(begin"
"(let-values(((or-part_33)(planet-version-number? v_35)))"
"(if or-part_33"
" or-part_33"
"(if(pair? v_35)"
"(if(list? v_35)"
"(if(= 2(length v_35))"
"(let-values(((tmp_6)(car v_35)))"
"(if(if(equal? tmp_6 '=) #t(if(equal? tmp_6 '+) #t(equal? tmp_6 '-)))"
"(let-values()(planet-version-number?(cadr v_35)))"
"(let-values()(if(planet-version-number?(car v_35))(planet-version-number?(cadr v_35)) #f))))"
" #f)"
" #f)"
" #f))))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_0"
" dots-dir-ok?6_0"
" file-end-ok?4_0"
" file-end-ok?8_0"
" for-planet?1_0"
" for-planet?5_0"
" just-file-ok?3_0"
" just-file-ok?7_0"
" v9_0)"
"(begin"
" 'module-path-string?10"
"(let-values(((v_36) v9_0))"
"(let-values(((for-planet?_0)(if for-planet?5_0 for-planet?1_0 #f)))"
"(let-values(((dots-dir-ok?_0)(if dots-dir-ok?6_0 dots-dir-ok?2_0 #f)))"
"(let-values(((just-file-ok?_0)(if just-file-ok?7_0 just-file-ok?3_0 #f)))"
"(let-values(((file-end-ok?_0)(if file-end-ok?8_0 file-end-ok?4_0 #f)))"
"(let-values()"
"(let-values(((len_3)(string-length v_36)))"
"(if(positive? len_3)"
"(if(not(char=? '#\\/(string-ref v_36 0)))"
"(if(not(char=? '#\\/(string-ref v_36(sub1 len_3))))"
"(let-values(((start-package-version-pos_0 end-package-version-pos_0)"
"(if for-planet?_0(check-planet-part v_36 len_3)(values 0 0))))"
"(if start-package-version-pos_0"
"((letrec-values(((loop_53)"
"(lambda(i_26 prev-was-slash?_0 saw-slash?_0 saw-dot?_0)"
"(begin"
" 'loop"
"(if(not(zero? i_26))"
"(let-values()"
"(let-values(((c_6)(string-ref v_36 i_26)))"
"(if(char=? c_6 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_0)"
"(loop_53(sub1 i_26) #t #t saw-dot?_0)"
" #f))"
"(if(char=? c_6 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_26) len_3)"
"(if(not"
"(char=?(string-ref v_36(add1 i_26)) '#\\/))"
"(not"
"(char=?(string-ref v_36(add1 i_26)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_0)"
"(loop_53(sub1 i_26) #f saw-slash?_0 #t)"
" #f)"
"(loop_53(sub1 i_26) #f saw-slash?_0 saw-dot?_0)))"
"(if(let-values(((or-part_34)(plain-char? c_6)))"
"(if or-part_34"
" or-part_34"
"(if(char=? c_6 '#\\%)"
"(if(<(+ i_26 2) len_3)"
"(hex-sequence? v_36(add1 i_26))"
" #f)"
" #f)))"
"(let-values()"
"(loop_53(sub1 i_26) #f saw-slash?_0 saw-dot?_0))"
"(if(if(>= i_26 start-package-version-pos_0)"
"(< i_26 end-package-version-pos_0)"
" #f)"
"(let-values()"
"(loop_53(sub1 i_26) #f saw-slash?_0 saw-dot?_0))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_0)"
"(if saw-dot?_0(not saw-slash?_0) #f)"
" #f))"
"(let-values(((or-part_35) dots-dir-ok?_0))"
"(if or-part_35"
" or-part_35"
"((letrec-values(((loop_54)"
"(lambda(i_27)"
"(begin"
" 'loop"
"(if(= i_27 len_3)"
"(let-values() #t)"
"(if(char=?"
"(string-ref v_36 i_27)"
" '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_36)"
"(="
" len_3"
"(add1"
" i_27))))"
"(if or-part_36"
" or-part_36"
"(char=?"
"(string-ref"
" v_36"
"(add1 i_27))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_36"
"(add1 i_27))"
" '#\\.)"
"(let-values(((or-part_37)"
"(="
" len_3"
"(+"
" i_27"
" 2))))"
"(if or-part_37"
" or-part_37"
"(char=?"
"(string-ref"
" v_36"
"(+ i_27 2))"
" '#\\/)))"
" #f))"
"(loop_54"
"((letrec-values(((loop_55)"
"(lambda(i_28)"
"(begin"
" 'loop"
"(if(char=?"
" '#\\."
"(string-ref"
" v_36"
" i_28))"
"(loop_55"
"(add1"
" i_28))"
" i_28)))))"
" loop_55)"
" i_27))"
" #f)"
" #f))"
"(let-values()"
"(loop_54(add1 i_27)))))))))"
" loop_54)"
" 0)))"
" #f)))))))"
" loop_53)"
"(sub1 len_3)"
" #f"
"(not file-end-ok?_0)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f)))))))))))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_37)"
"(begin"
"(if(string? v_37)"
"(let-values(((len_4)(string-length v_37)))"
"(if(positive? len_4)"
"(let-values(((vec_11 len_5)"
"(let-values(((vec_12) v_37))"
"(begin(check-string vec_12)(values vec_12(unsafe-string-length vec_12)))))"
"((start_6) 0))"
"(begin"
" #f"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_6)))"
"((letrec-values(((for-loop_11)"
"(lambda(result_7 pos_1 pos_2)"
"(begin"
" 'for-loop"
"(if(if(unsafe-fx< pos_1 len_5) #t #f)"
"(let-values(((c_7)(string-ref vec_11 pos_1))((i_29) pos_2))"
"(let-values(((result_8)"
"(let-values()"
"(let-values(((result_9)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_38)"
"(plain-char? c_7)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)"
"(char=? '#\\. c_7)))"
"(if or-part_39"
" or-part_39"
"(if(char=? '#\\% c_7)"
"(if(< i_29(- len_4 2))"
"(hex-sequence? v_37(add1 i_29))"
" #f)"
" #f)))))))))"
"(values result_9)))))"
"(if(if(not((lambda x_15(not result_8)) c_7))"
"(if(not((lambda x_16(not result_8)) i_29))(not #f) #f)"
" #f)"
"(for-loop_11 result_8(unsafe-fx+ 1 pos_1)(+ pos_2 1))"
" result_8)))"
" result_7)))))"
" for-loop_11)"
" #t"
" 0"
" start_6)))"
" #f))"
" #f))))"
"(define-values"
"(plain-char?)"
"(lambda(c_8)"
"(begin"
"(let-values(((or-part_40)(char<=? '#\\a c_8 '#\\z)))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(char<=? '#\\A c_8 '#\\Z)))"
"(if or-part_41"
" or-part_41"
"(let-values(((or-part_42)(char<=? '#\\0 c_8 '#\\9)))"
"(if or-part_42"
" or-part_42"
"(let-values(((or-part_43)(char=? '#\\- c_8)))"
"(if or-part_43"
" or-part_43"
"(let-values(((or-part_44)(char=? '#\\_ c_8)))"
"(if or-part_44 or-part_44(char=? '#\\+ c_8))))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_32 i_30)"
"(begin"
"(let-values(((c1_16)(string-ref s_32 i_30)))"
"(let-values(((c2_0)(string-ref s_32(add1 i_30))))"
"(if(hex-char? c1_16)"
"(if(hex-char? c2_0)"
"(let-values(((c_9)(integer->char(+(*(hex-char->integer c1_16) 16)(hex-char->integer c2_0)))))"
"(not(plain-char? c_9)))"
" #f)"
" #f))))))"
"(define-values"
"(hex-char?)"
"(lambda(c_10)"
"(begin(let-values(((or-part_45)(char<=? '#\\a c_10 '#\\f)))(if or-part_45 or-part_45(char<=? '#\\0 c_10 '#\\9))))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_11)"
"(begin"
"(if(char<=? '#\\a c_11 '#\\f)"
"(let-values()(-(char->integer c_11)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_11 '#\\F)"
"(let-values()(-(char->integer c_11)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_11)(char->integer '#\\0))))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_38 len_6)"
"(begin"
"(let-values(((start-package-version-pos_1 end-package-version-pos_1 colon1-pos_0 colon2-pos_0)"
"((letrec-values(((loop_56)"
"(lambda(j_2"
" start-package-version-pos_2"
" end-package-version-pos_2"
" colon1-pos_1"
" colon2-pos_1)"
"(begin"
" 'loop"
"(if(= j_2 len_6)"
"(let-values()"
"(values"
" start-package-version-pos_2"
"(let-values(((or-part_46) end-package-version-pos_2))"
"(if or-part_46 or-part_46 j_2))"
" colon1-pos_1"
" colon2-pos_1))"
"(let-values()"
"(let-values(((tmp_7)(string-ref v_38 j_2)))"
"(if(equal? tmp_7 '#\\/)"
"(let-values()"
"(loop_56"
"(add1 j_2)"
"(let-values(((or-part_47) start-package-version-pos_2))"
"(if or-part_47 or-part_47(add1 j_2)))"
"(if start-package-version-pos_2"
"(let-values(((or-part_48) end-package-version-pos_2))"
"(if or-part_48 or-part_48 j_2))"
" #f)"
" colon1-pos_1"
" colon2-pos_1))"
"(if(equal? tmp_7 '#\\:)"
"(let-values()"
"(if colon2-pos_1"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_1"
"(let-values()"
"(loop_56"
"(add1 j_2)"
" start-package-version-pos_2"
" end-package-version-pos_2"
" colon1-pos_1"
" j_2))"
"(let-values()"
"(loop_56"
"(add1 j_2)"
" start-package-version-pos_2"
" end-package-version-pos_2"
" j_2"
" #f)))))"
"(let-values()"
"(loop_56"
"(add1 j_2)"
" start-package-version-pos_2"
" end-package-version-pos_2"
" colon1-pos_1"
" colon2-pos_1)))))))))))"
" loop_56)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_1"
"(if(> end-package-version-pos_1 start-package-version-pos_1)"
"(let-values(((or-part_49)(not colon2-pos_0)))"
"(if or-part_49 or-part_49(<(add1 colon2-pos_0) end-package-version-pos_1)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_0"
"(let-values()"
"(let-values(((colon1-end_0)"
"(let-values(((or-part_50) colon2-pos_0))"
"(if or-part_50 or-part_50 end-package-version-pos_1))))"
"(if(if(integer-sequence? v_38(add1 colon1-pos_0) colon1-end_0)"
"(let-values(((or-part_51)(not colon2-pos_0)))"
"(if or-part_51"
" or-part_51"
"(let-values(((tmp_8)(string-ref v_38(add1 colon2-pos_0))))"
"(if(equal? tmp_8 '#\\=)"
"(let-values()(integer-sequence? v_38(+ 2 colon2-pos_0) end-package-version-pos_1))"
"(if(if(equal? tmp_8 '#\\>) #t(equal? tmp_8 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_0) end-package-version-pos_1)"
"(char=? '#\\=(string-ref v_38(+ colon2-pos_0 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_38(+ 3 colon2-pos_0) end-package-version-pos_1))"
"(let-values()"
"(integer-sequence? v_38(+ 2 colon2-pos_0) end-package-version-pos_1))))"
"(let-values()"
"(integer-range-sequence? v_38(add1 colon2-pos_0) end-package-version-pos_1)))))))"
" #f)"
"(let-values()(values colon1-pos_0 end-package-version-pos_1))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f)))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_33 start_7 end_4)"
"(begin"
"(if(< start_7 end_4)"
"(let-values(((start_8) start_7)((end_5) end_4)((inc_0) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_8 end_5 inc_0)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_10 pos_3)"
"(begin"
" 'for-loop"
"(if(< pos_3 end_5)"
"(let-values(((i_31) pos_3))"
"(let-values(((result_11)"
"(let-values()"
"(let-values(((result_12)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_33 i_31) '#\\9)))))"
"(values result_12)))))"
"(if(if(not((lambda x_17(not result_11)) i_31))(not #f) #f)"
"(for-loop_12 result_11(+ pos_3 inc_0))"
" result_11)))"
" result_10)))))"
" for-loop_12)"
" #t"
" start_8)))"
" #f))))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_34 start_9 end_6)"
"(begin"
"(if(< start_9 end_6)"
"(if(let-values(((start_10) start_9)((end_7) end_6)((inc_1) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_10 end_7 inc_1)))"
"((letrec-values(((for-loop_13)"
"(lambda(result_13 pos_4)"
"(begin"
" 'for-loop"
"(if(< pos_4 end_7)"
"(let-values(((i_32) pos_4))"
"(let-values(((result_14)"
"(let-values()"
"(let-values(((result_15)"
"(let-values()"
"(let-values()"
"(let-values(((c_12)"
"(string-ref s_34 i_32)))"
"(let-values(((or-part_52)"
"(char=? c_12 '#\\-)))"
"(if or-part_52"
" or-part_52"
"(char<=? '#\\0 c_12 '#\\9))))))))"
"(values result_15)))))"
"(if(if(not((lambda x_18(not result_14)) i_32))(not #f) #f)"
"(for-loop_13 result_14(+ pos_4 inc_1))"
" result_14)))"
" result_13)))))"
" for-loop_13)"
" #t"
" start_10)))"
"(>="
" 1"
"(let-values(((start_11) start_9)((end_8) end_6)((inc_2) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_11 end_8 inc_2)))"
"((letrec-values(((for-loop_14)"
"(lambda(result_16 pos_5)"
"(begin"
" 'for-loop"
"(if(< pos_5 end_8)"
"(let-values(((i_33) pos_5))"
"(let-values(((result_17)"
"(let-values(((result_18) result_16))"
"(let-values(((result_19)"
"(let-values()"
"(+"
" result_18"
"(let-values()"
"(if(char=?(string-ref s_34 i_33) '#\\-)"
" 1"
" 0))))))"
"(values result_19)))))"
"(if(not #f)(for-loop_14 result_17(+ pos_5 inc_2)) result_17)))"
" result_16)))))"
" for-loop_14)"
" 0"
" start_11))))"
" #f)"
" #f))))"
"(define-values"
"(struct:weak-intern-table weak-intern-table1.1 weak-intern-table? weak-intern-table-box)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'weak-intern-table"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'weak-intern-table)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'box))))"
"(define-values"
"(struct:table table2.1 table? table-ht table-count table-prune-at)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()(make-struct-type 'table #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'table)))))"
"(values"
" struct:_1"
" make-_1"
" ?_1"
"(make-struct-field-accessor -ref_1 0 'ht)"
"(make-struct-field-accessor -ref_1 1 'count)"
"(make-struct-field-accessor -ref_1 2 'prune-at))))"
"(define-values(make-weak-intern-table)(lambda()(begin(weak-intern-table1.1(box(table2.1(hasheqv) 0 128))))))"
"(define-values"
"(weak-intern!)"
"(lambda(tt_0 v_39)"
"(begin"
"(let-values(((b_8)(weak-intern-table-box tt_0)))"
"(let-values(((t_10)(unbox b_8)))"
"(let-values(((code_0)(equal-hash-code v_39)))"
"(let-values(((vals_0)(hash-ref(table-ht t_10) code_0 null)))"
"(let-values(((or-part_53)"
"(let-values(((lst_19) vals_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_19)))"
"((letrec-values(((for-loop_15)"
"(lambda(result_20 lst_20)"
"(begin"
" 'for-loop"
"(if(pair? lst_20)"
"(let-values(((b_9)(unsafe-car lst_20))"
"((rest_6)(unsafe-cdr lst_20)))"
"(let-values(((result_21)"
"(let-values()"
"(let-values(((result_22)"
"(let-values()"
"(let-values()"
"(let-values(((bv_0)"
"(weak-box-value"
" b_9)))"
"(if(equal? bv_0 v_39)"
" bv_0"
" #f))))))"
"(values result_22)))))"
"(if(if(not((lambda x_19 result_21) b_9))(not #f) #f)"
"(for-loop_15 result_21 rest_6)"
" result_21)))"
" result_20)))))"
" for-loop_15)"
" #f"
" lst_19)))))"
"(if or-part_53"
" or-part_53"
"(let-values(((pruned-t_0)(if(=(table-count t_10)(table-prune-at t_10))(prune-table t_10) t_10)))"
"(let-values(((ht_22)(table-ht pruned-t_0)))"
"(let-values(((new-t_0)"
"(table2.1"
"(hash-set ht_22 code_0(cons(make-weak-box v_39)(hash-ref ht_22 code_0 null)))"
"(add1(table-count pruned-t_0))"
"(table-prune-at pruned-t_0))))"
"(let-values(((or-part_54)(if(box-cas! b_8 t_10 new-t_0) v_39 #f)))"
"(if or-part_54 or-part_54(weak-intern! tt_0 v_39)))))))))))))))"
"(define-values"
"(prune-table)"
"(lambda(t_11)"
"(begin"
"(let-values(((new-ht_0)"
"(let-values(((ht_23)(table-ht t_11)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_23)))"
"((letrec-values(((for-loop_16)"
"(lambda(table_8 i_34)"
"(begin"
" 'for-loop"
"(if i_34"
"(let-values(((k_6 vals_1)(hash-iterate-key+value ht_23 i_34)))"
"(let-values(((table_9)"
"(let-values(((new-vals_0)"
"(reverse$1"
"(let-values(((lst_21) vals_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_21)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_4"
" lst_22)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_22)"
"(let-values(((b_10)"
"(unsafe-car"
" lst_22))"
"((rest_7)"
"(unsafe-cdr"
" lst_22)))"
"(let-values(((fold-var_5)"
"(let-values(((fold-var_6)"
" fold-var_4))"
"(if(weak-box-value"
" b_10)"
"(let-values(((fold-var_7)"
" fold-var_6))"
"(let-values(((fold-var_8)"
"(let-values()"
"(cons"
"(let-values()"
" b_10)"
" fold-var_7))))"
"(values"
" fold-var_8)))"
" fold-var_6))))"
"(if(not"
" #f)"
"(for-loop_17"
" fold-var_5"
" rest_7)"
" fold-var_5)))"
" fold-var_4)))))"
" for-loop_17)"
" null"
" lst_21))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_18)"
"(lambda(table_10)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_11)"
"(let-values(((table_12)"
" table_10))"
"(if(pair?"
" new-vals_0)"
"(let-values(((table_13)"
" table_12))"
"(let-values(((table_14)"
"(let-values()"
"(let-values(((key_10"
" val_2)"
"(let-values()"
"(values"
" k_6"
" new-vals_0))))"
"(hash-set"
" table_13"
" key_10"
" val_2)))))"
"(values"
" table_14)))"
" table_12))))"
" table_11))))))"
" for-loop_18)"
" table_8)))))"
"(if(not #f)"
"(for-loop_16 table_9(hash-iterate-next ht_23 i_34))"
" table_9)))"
" table_8)))))"
" for-loop_16)"
" '#hash()"
"(hash-iterate-first ht_23))))))"
"(let-values(((count_0)"
"(let-values(((ht_24) new-ht_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_24)))"
"((letrec-values(((for-loop_19)"
"(lambda(result_23 i_35)"
"(begin"
" 'for-loop"
"(if i_35"
"(let-values(((k_7 vals_2)(hash-iterate-key+value ht_24 i_35)))"
"(let-values(((result_24)"
"(let-values(((result_25) result_23))"
"(let-values(((result_26)"
"(let-values()"
"(+"
" result_25"
"(let-values()(length vals_2))))))"
"(values result_26)))))"
"(if(not #f)"
"(for-loop_19 result_24(hash-iterate-next ht_24 i_35))"
" result_24)))"
" result_23)))))"
" for-loop_19)"
" 0"
"(hash-iterate-first ht_24))))))"
"(table2.1 new-ht_0 count_0(max 128(* 2 count_0))))))))"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(r_8 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:resolved-module-path)"
"(ser-push!_0(1/resolved-module-path-name r_8)))))"
"(cons"
" prop:custom-write"
"(lambda(r_9 port_0 mode_3)"
"(begin"
"                           (if mode_3 (let-values () (write-string \"#<resolved-module-path:\" port_0)) (void))"
"                           (fprintf port_0 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_9)))"
"                           (if mode_3 (let-values () (write-string \">\" port_0)) (void)))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_22 b_11 eql?_0)"
"(eql?_0(1/resolved-module-path-name a_22)(1/resolved-module-path-name b_11)))"
"(lambda(a_23 hash-code_0)(hash-code_0(1/resolved-module-path-name a_23)))"
"(lambda(a_24 hash-code_1)(hash-code_1(1/resolved-module-path-name a_24))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_3)"
"(begin"
"(if(path? p_3)"
"        (let-values () (string-append \"\\\"\" (path->string p_3) \"\\\"\"))"
"(if(symbol? p_3)"
"(let-values()(format-symbol p_3))"
"(let-values()(format-submod(format-resolved-module-path-name(car p_3))(cdr p_3))))))))"
"(define-values"
"(format-symbol)"
"  (lambda (p_4) (begin (format \"'~s~a\" p_4 (if (symbol-interned? p_4) \"\" (format \"[~a]\" (eq-hash-code p_4)))))))"
"(define-values"
"(format-submod)"
"(lambda(base_5 syms_0)"
"(begin"
"(format"
"       \"(submod ~a~a)\""
" base_5"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_23) syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_23)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_9 lst_24)"
"(begin"
" 'for-loop"
"(if(pair? lst_24)"
"(let-values(((i_36)(unsafe-car lst_24))((rest_8)(unsafe-cdr lst_24)))"
"(let-values(((fold-var_10)"
"(let-values(((fold-var_11) fold-var_9))"
"(let-values(((fold-var_12)"
"(let-values()"
"(cons"
"                                                                        (let-values () (format \" ~s\" i_36))"
" fold-var_11))))"
"(values fold-var_12)))))"
"(if(not #f)(for-loop_20 fold-var_10 rest_8) fold-var_10)))"
" fold-var_9)))))"
" for-loop_20)"
" null"
" lst_23)))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_10)"
"(begin(let-values(((name_6)(1/resolved-module-path-name r_10)))(if(pair? name_6)(car name_6) name_6)))))"
"(define-values(resolved-module-paths)(make-weak-intern-table))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_5)"
"(begin"
" 'make-resolved-module-path"
"(begin"
"(if(let-values(((or-part_55)(symbol? p_5)))"
"(if or-part_55"
" or-part_55"
"(let-values(((or-part_56)(if(path? p_5)(complete-path? p_5) #f)))"
"(if or-part_56"
" or-part_56"
"(if(pair? p_5)"
"(if(pair?(cdr p_5))"
"(if(list? p_5)"
"(if(let-values(((or-part_7)(symbol?(car p_5))))"
"(if or-part_7 or-part_7(if(path?(car p_5))(complete-path?(car p_5)) #f)))"
"(let-values(((lst_18)(cdr p_5)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_18)))"
"((letrec-values(((for-loop_21)"
"(lambda(result_27 lst_25)"
"(begin"
" 'for-loop"
"(if(pair? lst_25)"
"(let-values(((s_35)(unsafe-car lst_25))"
"((rest_9)(unsafe-cdr lst_25)))"
"(let-values(((result_20)"
"(let-values()"
"(let-values(((result_28)"
"(let-values()"
"(let-values()"
"(symbol? s_35)))))"
"(values result_28)))))"
"(if(if(not((lambda x_20(not result_20)) s_35))"
"(not #f)"
" #f)"
"(for-loop_21 result_20 rest_9)"
" result_20)))"
" result_27)))))"
" for-loop_21)"
" #t"
" lst_18)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"              \"(or/c symbol?\\n\""
"              \"      (and/c path? complete-path?)\\n\""
"              \"      (cons/c (or/c symbol?\\n\""
"              \"                    (and/c path? complete-path?))\\n\""
"              \"              (non-empty-listof symbol?)))\")"
" p_5)))"
"(weak-intern! resolved-module-paths(resolved-module-path1.1 p_5))))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_11)"
"(begin"
"(let-values(((name_7)(1/resolved-module-path-name r_11)))"
"(let-values(((root-name_0)(if(pair? name_7)(car name_7) name_7)))"
"(let-values(((root-mod-path_0)(if(path? root-name_0) root-name_0(list 'quote root-name_0))))"
"(if(pair? name_7)(list* 'submod root-mod-path_0(cdr name_7)) root-mod-path_0)))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_2 make-_2 ?_2 -ref_2 -set!_2)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:custom-write"
"(lambda(r_12 port_1 mode_4)"
"(begin"
"                           (write-string \"#<module-path-index\" port_1)"
"(if(top-level-module-path-index? r_12)"
"                             (let-values () (fprintf port_1 \":top-level\"))"
"(if(module-path-index-path r_12)"
"(let-values()"
"(let-values(((l_43)"
"((letrec-values(((loop_57)"
"(lambda(r_13)"
"(begin"
" 'loop"
"(if(not r_13)"
"(let-values() null)"
"(if(1/resolved-module-path? r_13)"
"                                                                         (let-values () (list \"+\" (format \"~a\" r_13)))"
"(if(module-path-index-path r_13)"
"(let-values()"
"(cons"
"((letrec-values(((loop_58)"
"(lambda(v_40)"
"(begin"
" 'loop"
"(if(if(pair? v_40)"
"(if(eq?"
" 'quote"
"(car"
" v_40))"
"(null?"
"(cddr"
" v_40))"
" #f)"
" #f)"
"(let-values()"
"(format-symbol"
"(cadr v_40)))"
"(if(if(pair?"
" v_40)"
"(eq?"
" 'submod"
"(car v_40))"
" #f)"
"(let-values()"
"(format-submod"
"(loop_58"
"(cadr v_40))"
"(cddr v_40)))"
"(let-values()"
"(format"
"                                                                                                           \"~.s\""
"(module-path-index-path"
" r_13)))))))))"
" loop_58)"
"(module-path-index-path r_13))"
"(loop_57(module-path-index-base r_13))))"
"(if(module-path-index-resolved r_13)"
"(let-values()"
"(list"
"                                                                                \"+\""
"(format"
"                                                                                 \"~a\""
"(module-path-index-resolved r_13))))"
"(let-values() null)))))))))"
" loop_57)"
" r_12)))"
"(fprintf"
" port_1"
"                                    \":~.a\""
"(apply"
" string-append"
"(car l_43)"
"(reverse$1"
"(let-values(((lst_26)(cdr l_43)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_26)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_13 lst_27)"
"(begin"
" 'for-loop"
"(if(pair? lst_27)"
"(let-values(((i_37)(unsafe-car lst_27))"
"((rest_10)(unsafe-cdr lst_27)))"
"(let-values(((fold-var_14)"
"(let-values(((fold-var_15)"
" fold-var_13))"
"(let-values(((fold-var_16)"
"(let-values()"
"(cons"
"(let-values()"
"(format"
"                                                                                                        \" ~a\""
" i_37))"
" fold-var_15))))"
"(values fold-var_16)))))"
"(if(not #f)"
"(for-loop_22 fold-var_14 rest_10)"
" fold-var_14)))"
" fold-var_13)))))"
" for-loop_22)"
" null"
" lst_26))))))))"
"(if(module-path-index-resolved r_12)"
"                                 (let-values () (fprintf port_1 \"=~a\" (module-path-index-resolved r_12)))"
"(void))))"
"                           (write-string \">\" port_1))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_25 b_12 eql?_1)"
"(if(eql?_1(module-path-index-path a_25)(module-path-index-path b_12))"
"(eql?_1(module-path-index-base a_25)(module-path-index-base b_12))"
" #f))"
"(lambda(a_26 hash-code_2)"
"(+(hash-code_2(module-path-index-path a_26))(hash-code_2(module-path-index-base a_26))))"
"(lambda(a_27 hash-code_3)"
"(+"
"(hash-code_3(module-path-index-path a_27))"
"(hash-code_3(module-path-index-base a_27)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index)))))"
"(values"
" struct:_2"
" make-_2"
" ?_2"
"(make-struct-field-accessor -ref_2 0 'path)"
"(make-struct-field-accessor -ref_2 1 'base)"
"(make-struct-field-accessor -ref_2 2 'resolved)"
"(make-struct-field-accessor -ref_2 3 'shift-cache)"
"(make-struct-field-mutator -set!_2 2 'resolved)"
"(make-struct-field-mutator -set!_2 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_3 base_6)(begin(1/module-path-index-join path_3 base_6)))"
"((name_8)(make-self-module-path-index(1/make-resolved-module-path name_8)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve6_0)"
"(lambda(mpi5_0 load?3_0 load?4_0)"
"(begin"
" 'module-path-index-resolve6"
"(let-values(((mpi_0) mpi5_0))"
"(let-values(((load?_0)(if load?4_0 load?3_0 #f)))"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_0)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_0)))"
"(let-values(((or-part_57)(module-path-index-resolved mpi_0)))"
"(if or-part_57"
" or-part_57"
"(let-values(((mod-name_0)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_0)"
"(module-path-index-resolve/maybe(module-path-index-base mpi_0) load?_0)"
" #f"
" load?_0)))"
"(begin"
"(if(1/resolved-module-path? mod-name_0)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                         \"current module name resolver's result is not a resolved module path\""
"                                         \"result\""
" mod-name_0)))"
"(set-module-path-index-resolved! mpi_0 mod-name_0)"
" mod-name_0))))))))))))"
"(case-lambda"
"((mpi_1)(begin 'module-path-index-resolve(module-path-index-resolve6_0 mpi_1 #f #f)))"
"((mpi_2 load?3_1)(module-path-index-resolve6_0 mpi_2 load?3_1 #t)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_3)"
"(begin"
"(if(module-path-index-resolved mpi_3)"
"(let-values()"
"(let-values(((path_4 base_7)(1/module-path-index-split mpi_3)))(1/module-path-index-join path_4 base_7)))"
"(let-values() mpi_3)))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join12_0)"
"(lambda(mod-path10_0 base11_0 submod8_0 submod9_0)"
"(begin"
" 'module-path-index-join12"
"(let-values(((mod-path_0) mod-path10_0))"
"(let-values(((base_8) base11_0))"
"(let-values(((submod_0)(if submod9_0 submod8_0 #f)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_43)(not mod-path_0)))"
"(if or-part_43 or-part_43(1/module-path? mod-path_0)))"
"(void)"
"(let-values()"
"                                  (raise-argument-error 'module-path-index-join \"(or/c #f module-path?)\" mod-path_0)))"
"(if(let-values(((or-part_44)(not base_8)))"
"(if or-part_44"
" or-part_44"
"(let-values(((or-part_58)(1/resolved-module-path? base_8)))"
"(if or-part_58 or-part_58(1/module-path-index? base_8)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                   \"(or/c #f resolved-module-path? module-path-index?)\""
" base_8)))"
"(if(let-values(((or-part_59)(not submod_0)))"
"(if or-part_59"
" or-part_59"
"(if(pair? submod_0)(if(list? submod_0)(andmap2 symbol? submod_0) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                   \"(or/c #f (non-empty-listof symbol?))\""
" submod_0)))"
"(if(if(not mod-path_0) base_8 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                   \"cannot combine #f path with non-#f base\""
"                                   \"given base\""
" base_8))"
"(void))"
"(if(if submod_0 mod-path_0 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                   \"cannot combine #f submodule list with non-#f module path\""
"                                   \"given module path\""
" mod-path_0"
"                                   \"given submodule list\""
" submod_0))"
"(void))"
"(if submod_0"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_0))))"
"(let-values()"
"(let-values(((keep-base_0)"
"((letrec-values(((loop_59)"
"(lambda(mod-path_1)"
"(begin"
" 'loop"
"(if(path? mod-path_1)"
"(let-values() #f)"
"(if(if(pair? mod-path_1)"
"(eq? 'quote(car mod-path_1))"
" #f)"
"(let-values() #f)"
"(if(symbol? mod-path_1)"
"(let-values() #f)"
"(if(if(pair? mod-path_1)"
"(eq? 'submod(car mod-path_1))"
" #f)"
"(let-values()"
"(loop_59(cadr mod-path_1)))"
"(let-values() base_8)))))))))"
" loop_59)"
" mod-path_0)))"
"(module-path-index2.1 mod-path_0 keep-base_0 #f #f)))))))))))))"
"(case-lambda"
"((mod-path_2 base_9)(begin 'module-path-index-join(module-path-index-join12_0 mod-path_2 base_9 #f #f)))"
"((mod-path_3 base_10 submod8_1)(module-path-index-join12_0 mod-path_3 base_10 submod8_1 #t)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_11 load?_1)"
"(begin(if(1/module-path-index? base_11)(1/module-path-index-resolve base_11 load?_1) base_11))))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_4)"
"(begin"
" 'module-path-index-split"
"(begin"
"(if(1/module-path-index? mpi_4)"
"(void)"
"          (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_4)))"
"(values(module-path-index-path mpi_4)(module-path-index-base mpi_4))))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_5)"
"(begin"
" 'module-path-index-submodule"
"(begin"
"(if(1/module-path-index? mpi_5)"
"(void)"
"          (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_5)))"
"(if(not(module-path-index-path mpi_5))"
"(let-values(((r_14)(module-path-index-resolved mpi_5)))"
"(if r_14(let-values(((p_6)(1/resolved-module-path-name r_14)))(if(pair? p_6)(cdr p_6) #f)) #f))"
" #f)))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_9)(begin(module-path-index2.1 #f #f name_9 #f)))"
"((name_10 enclosing_0)"
"(make-self-module-path-index"
"(let-values(((name23_0) name_10)((temp24_1)(if enclosing_0(1/module-path-index-resolve enclosing_0) #f)))"
"(build-module-name18.1 #f #f name23_0 temp24_1))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_0)"
"(begin"
"(let-values(((r_15)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_0))))"
"(let-values(((or-part_48)"
"(let-values(((e_9)(hash-ref generic-self-mpis r_15 #f)))(if e_9(ephemeron-value e_9) #f))))"
"(if or-part_48"
" or-part_48"
"(let-values(((mpi_6)(module-path-index2.1 #f #f r_15 #f)))"
"(begin(hash-set! generic-self-mpis r_15(make-ephemeron r_15 mpi_6)) mpi_6))))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_16)"
"(begin"
"(let-values(((name_11)(1/resolved-module-path-name r_16)))"
"(1/make-resolved-module-path"
"(if(symbol? name_11) generic-module-name(cons generic-module-name(cdr name_11))))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_7)"
"(begin"
"(let-values(((r_17)(module-path-index-resolved mpi_7)))"
"(if r_17"
"(let-values()"
"(set-module-path-index-resolved! mpi_7(resolved-module-path-to-generic-resolved-module-path r_17)))"
"(void))))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_8 from-mpi_0 to-mpi_0)"
"(begin"
"(if(eq? mpi_8 from-mpi_0)"
"(let-values() to-mpi_0)"
"(let-values()"
"(let-values(((base_12)(module-path-index-base mpi_8)))"
"(if(not base_12)"
"(let-values() mpi_8)"
"(let-values()"
"(let-values(((shifted-base_0)(module-path-index-shift base_12 from-mpi_0 to-mpi_0)))"
"(if(eq? shifted-base_0 base_12)"
"(let-values() mpi_8)"
"(let-values(((c1_17)(shift-cache-ref(module-path-index-shift-cache shifted-base_0) mpi_8)))"
"(if c1_17"
" c1_17"
"(let-values()"
"(let-values(((shifted-mpi_0)"
"(module-path-index2.1(module-path-index-path mpi_8) shifted-base_0 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_0) mpi_8 shifted-mpi_0)"
" shifted-mpi_0)))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_9)"
"(begin"
"(let-values(((or-part_60)"
"(let-values(((cache_0)(module-path-index-shift-cache mpi_9)))"
"(if cache_0(if(weak-box-value cache_0) cache_0 #f) #f))))"
"(if or-part_60"
" or-part_60"
"(let-values(((cache_1)(make-weak-box(box '#hasheq()))))"
"(begin(set-module-path-index-shift-cache! mpi_9 cache_1) cache_1)))))))"
"(define-values"
"(shift-cache-ref)"
"(lambda(cache_2 v_41)"
"(begin"
"(if cache_2(let-values(((b_13)(weak-box-value cache_2)))(if b_13(hash-ref(unbox b_13) v_41 #f) #f)) #f))))"
"(define-values"
"(shift-cache-set!)"
"(lambda(cache_3 v_42 r_18)"
"(begin"
"(let-values(((b_14)(weak-box-value cache_3)))"
"(if b_14(let-values()(set-box! b_14(hash-set(unbox b_14) v_42 r_18)))(void))))))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_10)(begin(eq? top-level-module-path-index mpi_10))))"
"(define-values"
"(core-module-name-resolver)"
"(case-lambda"
"((name_12 from-namespace_0)(begin(void)))"
"((p_7 enclosing_1 source-stx-stx_0 load?_2)"
"(begin"
"(if(1/module-path? p_7)"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_7)))"
"(if(let-values(((or-part_52)(not enclosing_1)))"
"(if or-part_52 or-part_52(1/resolved-module-path? enclosing_1)))"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_1)))"
"(if(if(list? p_7)(if(=(length p_7) 2)(if(eq? 'quote(car p_7))(symbol?(cadr p_7)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_7)))"
"        (if (if (list? p_7) (if (eq? 'submod (car p_7)) (equal? \"..\" (cadr p_7)) #f) #f)"
"(let-values()"
"(let-values(((lst_28)(cdr p_7)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_28)))"
"((letrec-values(((for-loop_23)"
"(lambda(enclosing_2 lst_29)"
"(begin"
" 'for-loop"
"(if(pair? lst_29)"
"(let-values(((s_36)(unsafe-car lst_29))((rest_11)(unsafe-cdr lst_29)))"
"(let-values(((enclosing_3)"
"(let-values(((enclosing_4) enclosing_2))"
"(let-values(((enclosing_5)"
"(let-values()"
"(let-values(((p27_0) p_7))"
"(build-module-name18.1"
" p27_0"
" #t"
" s_36"
" enclosing_4)))))"
"(values enclosing_5)))))"
"(if(not #f)(for-loop_23 enclosing_3 rest_11) enclosing_3)))"
" enclosing_2)))))"
" for-loop_23)"
" enclosing_1"
" lst_28))))"
"          (if (if (list? p_7) (if (eq? 'submod (car p_7)) (equal? \".\" (cadr p_7)) #f) #f)"
"(let-values()"
"(let-values(((lst_30)(cddr p_7)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_30)))"
"((letrec-values(((for-loop_24)"
"(lambda(enclosing_6 lst_31)"
"(begin"
" 'for-loop"
"(if(pair? lst_31)"
"(let-values(((s_37)(unsafe-car lst_31))((rest_12)(unsafe-cdr lst_31)))"
"(let-values(((enclosing_7)"
"(let-values(((enclosing_8) enclosing_6))"
"(let-values(((enclosing_9)"
"(let-values()"
"(let-values(((p30_0) p_7))"
"(build-module-name18.1"
" p30_0"
" #t"
" s_37"
" enclosing_8)))))"
"(values enclosing_9)))))"
"(if(not #f)(for-loop_24 enclosing_7 rest_12) enclosing_7)))"
" enclosing_6)))))"
" for-loop_24)"
" enclosing_1"
" lst_30))))"
"(if(if(list? p_7)(eq? 'submod(car p_7)) #f)"
"(let-values()"
"(let-values(((base_13)((1/current-module-name-resolver)(cadr p_7) enclosing_1 #f #f)))"
"(let-values(((lst_32)(cddr p_7)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_32)))"
"((letrec-values(((for-loop_25)"
"(lambda(enclosing_10 lst_33)"
"(begin"
" 'for-loop"
"(if(pair? lst_33)"
"(let-values(((s_38)(unsafe-car lst_33))((rest_13)(unsafe-cdr lst_33)))"
"(let-values(((enclosing_11)"
"(let-values(((enclosing_12) enclosing_10))"
"(let-values(((enclosing_13)"
"(let-values()"
"(let-values(((p33_0) p_7))"
"(build-module-name18.1"
" p33_0"
" #t"
" s_38"
" enclosing_12)))))"
"(values enclosing_13)))))"
"(if(not #f)(for-loop_25 enclosing_11 rest_13) enclosing_11)))"
" enclosing_10)))))"
" for-loop_25)"
" base_13"
" lst_32)))))"
"              (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_7))))))))))"
"(define-values"
"(build-module-name18.1)"
"(lambda(original14_0 original15_0 name16_0 enclosing17_0)"
"(begin"
" 'build-module-name18"
"(let-values(((name_13) name16_0))"
"(let-values(((enclosing_14) enclosing17_0))"
"(let-values(((orig-name_0)(if original15_0 original14_0 name_13)))"
"(let-values()"
"(let-values(((enclosing-module-name_0)(if enclosing_14(1/resolved-module-path-name enclosing_14) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_0)"
"(let-values() name_13)"
"(if(symbol? enclosing-module-name_0)"
"(let-values()(list enclosing-module-name_0 name_13))"
"                     (if (equal? name_13 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_0)"
"                           (let-values () (error \"too many \\\"..\\\"s:\" orig-name_0))"
"(if(= 2(length enclosing-module-name_0))"
"(let-values()(car enclosing-module-name_0))"
"(let-values()(reverse$1(cdr(reverse$1 enclosing-module-name_0)))))))"
"(let-values()(append enclosing-module-name_0(list name_13)))))))))))))))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
" core-module-name-resolver"
"(lambda(v_43)"
"(begin"
"(if(if(procedure? v_43)(if(procedure-arity-includes? v_43 2)(procedure-arity-includes? v_43 4) #f) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-name-resolver"
"            \"(and/c (procedure-arity-includes/c 2) (procedure-arity-includes/c 4))\""
" v_43)))"
" v_43))))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_19)"
"(begin"
"(if(let-values(((or-part_61)(not r_19)))(if or-part_61 or-part_61(1/resolved-module-path? r_19)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_19)))"
" r_19))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_39)"
"(begin"
"(if(let-values(((or-part_62)(not s_39)))"
"(if or-part_62"
" or-part_62"
"(let-values(((or-part_63)(symbol? s_39)))"
"(if or-part_63 or-part_63(if(path? s_39)(complete-path? s_39) #f)))))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-module-declare-source \"(or/c #f symbol? (and/c path? complete-path?))\" s_39)))"
" s_39))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_0)"
"(begin"
"(let-values(((current-name_0)(1/current-module-declare-name)))"
"(let-values(((root-name_1)"
"(if current-name_0"
"(resolved-module-path-root-name current-name_0)"
"(if(pair? default-name_0)(car default-name_0) default-name_0))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_0)(cons root-name_1(cdr default-name_0)) root-name_1)))))))"
"(define-values"
"(force/composable)"
"(lambda(root_1)"
"(begin"
"(let-values(((v_44)(unsafe-struct-ref root_1 0)))"
"(if(procedure? v_44)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_1 0(make-running(object-name v_44)))"
"(call-with-exception-handler"
"(lambda(e_10)(begin(unsafe-struct-set! root_1 0(make-reraise e_10)) e_10))"
"(lambda()"
"((letrec-values(((loop_60)"
"(lambda(v_45)"
"(begin"
" 'loop"
"(if(composable-promise? v_45)"
"(let-values()"
"(let-values(((v*_0)(unsafe-struct-ref v_45 0)))"
"(begin"
"(unsafe-struct-set! v_45 0 root_1)"
"(if(procedure? v*_0)"
"(let-values()(loop_60(v*_0)))"
"(if(pair? v*_0)"
"(let-values()"
"(begin(unsafe-struct-set! root_1 0 v*_0)(unsafe-car v*_0)))"
"(let-values()(loop_60 v*_0)))))))"
"(if(promise? v_45)"
"(let-values()(begin(unsafe-struct-set! root_1 0 v_45)(force v_45)))"
"(let-values()(begin(unsafe-struct-set! root_1 0(list v_45)) v_45))))))))"
" loop_60)"
"(v_44))))))"
"(if(pair? v_44)"
"(let-values()(if(null?(unsafe-cdr v_44))(unsafe-car v_44)(apply values v_44)))"
"(if(composable-promise? v_44)"
"(let-values()(force/composable v_44))"
"(if(null? v_44)"
"(let-values()(values))"
"(if(promise? v_44)"
"(let-values()(force v_44))"
"                  (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_44)))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_46)"
"(begin"
"(if(pair? v_46)"
"(let-values()(if(null?(unsafe-cdr v_46))(unsafe-car v_46)(apply values v_46)))"
"(if(null? v_46)"
"(let-values()(values))"
"(if(reraise? v_46)"
"(let-values()(v_46))"
"            (let-values () (error 'force \"promise with invalid contents: ~e\" v_46))))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_0)"
"(begin"
"(reify-result"
"(let-values(((v_47)(unsafe-struct-ref promise_0 0)))"
"(if(procedure? v_47)"
"(begin"
"(unsafe-struct-set! promise_0 0(make-running(object-name v_47)))"
"(call-with-exception-handler"
"(lambda(e_11)(begin(unsafe-struct-set! promise_0 0(make-reraise e_11)) e_11))"
"(lambda()"
"(let-values(((vs_0)(call-with-values v_47 list)))"
"(begin(unsafe-struct-set! promise_0 0 vs_0) vs_0)))))"
" v_47))))))"
"(define-values"
"(force)"
"(lambda(promise_1)(begin(if(promise? promise_1)((promise-forcer promise_1) promise_1) promise_1))))"
"(define-values"
"(promise-printer)"
"(lambda(promise_2 port_2 write?_0)"
"(begin"
"((letrec-values(((loop_47)"
"(lambda(v_48)"
"(begin"
" 'loop"
"(if(reraise? v_48)"
"(let-values()"
"(let-values(((r_20)(reraise-val v_48)))"
"(if(exn? r_20)"
"(fprintf"
" port_2"
"                                     (if write?_0 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_20))"
"                                    (fprintf port_2 (if write?_0 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_20))))"
"(if(running? v_48)"
"(let-values()"
"(let-values(((r_21)(running-name v_48)))"
"(if r_21"
"                                      (fprintf port_2 \"#<promise:!running!~a>\" r_21)"
"                                      (fprintf port_2 \"#<promise:!running>\"))))"
"(if(procedure? v_48)"
"(let-values()"
"(let-values(((c1_18)(object-name v_48)))"
"(if c1_18"
"                                        ((lambda (n_18) (fprintf port_2 \"#<promise:~a>\" n_18)) c1_18)"
"                                        (let-values () (display \"#<promise>\" port_2)))))"
"(if(promise? v_48)"
"(let-values()(loop_47(unsafe-struct-ref v_48 0)))"
"(if(null? v_48)"
"                                      (let-values () (fprintf port_2 \"#<promise!(values)>\"))"
"(if(null?(cdr v_48))"
"(let-values()"
"                                          (fprintf port_2 (if write?_0 \"#<promise!~s>\" \"#<promise!~a>\") (car v_48)))"
"(let-values()"
"(begin"
"                                            (display \"#<promise!(values\" port_2)"
"                                            (let-values (((fmt_0) (if write?_0 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_21)(fprintf port_2 fmt_0 x_21)) v_48))"
"                                            (display \")>\" port_2)))))))))))))"
" loop_47)"
"(unsafe-struct-ref promise_2 0)))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_0 pred?_0 get_0)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_49 info_0)"
"(begin"
"(if(if(procedure? v_49)(procedure-arity-includes? v_49 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_49)))"
" v_49))"
" null"
" #t)))"
"(values prop_0 get_0)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_3 make-_3 ?_3 -ref_3 -set!_3)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))))"
"(values"
" struct:_3"
" make-_3"
" ?_3"
"(make-struct-field-accessor -ref_3 0 'val)"
"(make-struct-field-mutator -set!_3 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_4 make-_4 ?_4 -ref_4 -set!_4)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise)))))"
"(values struct:_4 make-_4 ?_4)))"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_5 make-_5 ?_5 -ref_5 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_0)(raise(reraise-val this_0)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise)))))"
"(values struct:_5 make-_5 ?_5(make-struct-field-accessor -ref_5 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_6 make-_6 ?_6 -ref_6 -set!_6)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_1 port_3 write?_1)"
"                         (fprintf port_3 (if write?_1 \"#<running:~s>\" \"#<running:~a>\") (running-name this_1))))"
"(cons"
" prop:procedure"
"(lambda(this_2)"
"(let-values(((name_14)(running-name this_2)))"
"(if name_14"
"                             (error 'force \"reentrant promise `~.s'\" name_14)"
"                             (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running)))))"
"(values struct:_6 make-_6 ?_6(make-struct-field-accessor -ref_6 0 'name))))"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_7 make-_7 ?_7 -ref_7 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_8)((unsafe-struct-ref p_8 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/name)))))"
"(values struct:_7 make-_7 ?_7)))"
"(define-values"
"(struct:promise/strict make-promise/strict promise/strict?)"
"(let-values(((struct:_8 make-_8 ?_8 -ref_8 -set!_8)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/strict"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_9)(reify-result(unsafe-struct-ref p_9 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/strict)))))"
"(values struct:_8 make-_8 ?_8)))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_9 make-_9 ?_9 -ref_9 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running-thread"
" struct:running"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running-thread)))))"
"(values struct:_9 make-_9 ?_9(make-struct-field-accessor -ref_9 0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_10 make-_10 ?_10 -ref_10 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syncinfo #f 4 0 #f null(current-inspector) #f '(1 2 3) #f 'syncinfo)))))"
"(values"
" struct:_10"
" make-_10"
" ?_10"
"(make-struct-field-accessor -ref_10 0 'thunk)"
"(make-struct-field-accessor -ref_10 1 'done-evt)"
"(make-struct-field-accessor -ref_10 2 'done-sema)"
"(make-struct-field-accessor -ref_10 3 'access-sema)"
"(make-struct-field-mutator -set!_10 0 'thunk))))"
"(define-values"
"(struct:promise/sync make-promise/sync promise/sync?)"
"(let-values(((struct:_11 make-_11 ?_11 -ref_11 -set!_11)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/sync"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_10)"
"(let-values(((v_50)(unsafe-struct-ref p_10 0)))"
"(wrap-evt(if(syncinfo? v_50)(syncinfo-done-evt v_50) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_11)"
"(let-values(((v_48)(unsafe-struct-ref p_11 0)))"
"(reify-result"
"(if(not(syncinfo? v_48))"
"(let-values() v_48)"
"(if(running-thread?(syncinfo-thunk v_48))"
"(let-values()"
"(let-values(((r_20)(syncinfo-thunk v_48)))"
"(if(eq?(running-thread-thread r_20)(current-thread))"
"(r_20)"
"(begin(sync(syncinfo-done-evt v_48))(unsafe-struct-ref p_11 0)))))"
"(let-values()"
"(begin"
"(call-with-semaphore"
"(syncinfo-access-sema v_48)"
"(lambda(p_12 v_51)"
"(let-values(((thunk_2)(syncinfo-thunk v_51)))"
"(let-values(((done_0)(syncinfo-done-sema v_51)))"
"(if(running-thread? thunk_2)"
"(void)"
"(let-values()"
"(begin"
"(set-syncinfo-thunk!"
" v_51"
"(make-running-thread(object-name thunk_2)(current-thread)))"
"(call-with-exception-handler"
"(lambda(e_12)"
"(begin"
"(unsafe-struct-set! p_12 0(make-reraise e_12))"
"(semaphore-post done_0)"
" e_12))"
"(lambda()"
"(begin"
"(unsafe-struct-set! p_12 0(call-with-values thunk_2 list))"
"(semaphore-post done_0))))))))))"
" #f"
" p_11"
" v_48)"
"(unsafe-struct-ref p_11 0)))))))))"
"(cons"
" prop:custom-write"
"(lambda(p_13 port_4 write?_2)"
"(let-values(((v_49)(unsafe-struct-ref p_13 0)))"
"(promise-printer"
"(if(syncinfo? v_49)(make-promise(syncinfo-thunk v_49)) p_13)"
" port_4"
" write?_2)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/sync)))))"
"(values struct:_11 make-_11 ?_11)))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_12 make-_12 ?_12 -ref_12 -set!_12)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_14)"
"(let-values(((v_52)(unsafe-struct-ref p_14 0)))"
"(wrap-evt(if(running? v_52)(running-thread-thread v_52) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_15)"
"(let-values(((v_25)(unsafe-struct-ref p_15 0)))"
"(reify-result"
"(if(running-thread? v_25)"
"(let-values(((t_8)(running-thread-thread v_25)))"
"(let-values((()(begin(thread-wait t_8)(values))))"
"(let-values(((v_53)(unsafe-struct-ref p_15 0)))"
"(if(running-thread? v_53)"
"(error"
" 'force"
"                                       \"promise's thread terminated ~a\\n  promise: ~e\""
"                                       \"without result or exception\""
" p_15)"
" v_53))))"
" v_25))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/thread)))))"
"(values struct:_12 make-_12 ?_12)))"
"(define-values"
"(struct:promise/idle make-promise/idle promise/idle?)"
"(let-values(((struct:_13 make-_13 ?_13 -ref_13 -set!_13)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/idle"
" struct:promise/thread"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:force"
"(lambda(p_16)"
"(let-values(((v_54)(unsafe-struct-ref p_16 0)))"
"(reify-result"
"(if(procedure? v_54)"
"(let-values(((controller_0)"
"(if(running-thread? v_54)(running-thread-thread v_54)(v_54))))"
"(begin"
"(thread-send controller_0 'force!)"
"(thread-wait controller_0)"
"(unsafe-struct-ref p_16 0)))"
" v_54))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/idle)))))"
"(values struct:_13 make-_13 ?_13)))"
"(define-values"
"(phase?)"
"(lambda(v_26)(begin(let-values(((or-part_0)(not v_26)))(if or-part_0 or-part_0(exact-integer? v_26))))))"
"(define-values(phase+)(lambda(a_1 b_15)(begin(if a_1(if b_15(+ a_1 b_15) #f) #f))))"
"(define-values(phase-)(lambda(a_28 b_16)(begin(if a_28(if b_16(- a_28 b_16) #f) #f))))"
"(define-values"
"(phase<?)"
"(lambda(a_29 b_17)"
"(begin(if(not b_17)(let-values() #f)(if(not a_29)(let-values() #t)(let-values()(< a_29 b_17)))))))"
"(define-values(zero-phase?)(lambda(a_30)(begin(eq? a_30 0))))"
"(define-values(label-phase?)(lambda(a_31)(begin(not a_31))))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(define-values(make-small-hasheq)(lambda()(begin(box '#hasheq()))))"
"(define-values(make-small-hasheqv)(lambda()(begin(box '#hasheqv()))))"
"(define-values"
"(small-hash-ref)"
"(lambda(small-ht_0 key_11 default_4)(begin(hash-ref(unbox small-ht_0) key_11 default_4))))"
"(define-values"
"(small-hash-set!)"
"(lambda(small-ht_1 key_12 val_3)(begin(set-box! small-ht_1(hash-set(unbox small-ht_1) key_12 val_3)))))"
"(define-values(small-hash-keys)(lambda(small-ht_2)(begin(hash-keys(unbox small-ht_2)))))"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-syntax-context"
" serialize-state-sharing-syntaxes)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'serialize-state"
" #f"
" 11"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'serialize-state)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_0 1 'bindings-intern)"
"(make-struct-field-accessor -ref_0 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_0 3 'scopes)"
"(make-struct-field-accessor -ref_0 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_0 5 'mpi-shifts)"
"(make-struct-field-accessor -ref_0 6 'context-triples)"
"(make-struct-field-accessor -ref_0 7 'props)"
"(make-struct-field-accessor -ref_0 8 'interned-props)"
"(make-struct-field-accessor -ref_0 9 'syntax-context)"
"(make-struct-field-accessor -ref_0 10 'sharing-syntaxes))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_0)"
"(begin"
"(serialize-state1.1"
" reachable-scopes_0"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(box null)"
"(make-hasheq)))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_0 state_1)"
"(begin"
"(let-values(((or-part_64)(hash-ref(serialize-state-scopes state_1) scs_0 #f)))"
"(if or-part_64 or-part_64(begin(hash-set!(serialize-state-scopes state_1) scs_0 scs_0) scs_0))))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_0 state_2)"
"(begin"
"(let-values(((or-part_65)(hash-ref(serialize-state-shifted-multi-scopes state_2) sms_0 #f)))"
"(if or-part_65"
" or-part_65"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_2) sms_0 sms_0) sms_0))))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_0 state_3)"
"(begin"
"(if(null? mpi-shifts_0)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_0)(intern-mpi-shifts(cdr mpi-shifts_0) state_3)))"
"(let-values(((tail-table_0)"
"(let-values(((or-part_66)(hash-ref(serialize-state-mpi-shifts state_3) tail_0 #f)))"
"(if or-part_66"
" or-part_66"
"(let-values(((ht_25)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_3) tail_0 ht_25) ht_25))))))"
"(let-values(((or-part_67)(hash-ref tail-table_0(car mpi-shifts_0) #f)))"
"(if or-part_67"
" or-part_67"
"(let-values(((v_55)(cons(car mpi-shifts_0) tail_0)))"
"(begin(hash-set! tail-table_0(car mpi-shifts_0) v_55) v_55)))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_1 sms_1 mpi-shifts_1 state_4)"
"(begin"
"(let-values(((scs-ht_0)"
"(let-values(((or-part_68)(hash-ref(serialize-state-context-triples state_4) scs_1 #f)))"
"(if or-part_68"
" or-part_68"
"(let-values(((ht_26)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_4) scs_1 ht_26) ht_26))))))"
"(let-values(((sms-ht_0)"
"(let-values(((or-part_37)(hash-ref scs-ht_0 sms_1 #f)))"
"(if or-part_37"
" or-part_37"
"(let-values(((ht_27)(make-hasheq)))(begin(hash-set! scs-ht_0 sms_1 ht_27) ht_27))))))"
"(let-values(((or-part_69)(hash-ref sms-ht_0 mpi-shifts_1 #f)))"
"(if or-part_69"
" or-part_69"
"(let-values(((vec_13)(vector-immutable scs_1 sms_1 mpi-shifts_1)))"
"(begin(hash-set! sms-ht_0 mpi-shifts_1 vec_13) vec_13)))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_0 get-preserved-props_0 state_5)"
"(begin"
"(let-values(((v_56)(hash-ref(serialize-state-props state_5) all-props_0 'no)))"
"(if(eq? v_56 'no)"
"(let-values()"
"(let-values(((preserved-props_0)(get-preserved-props_0)))"
"(let-values(((p_17)"
"(if(zero?(hash-count preserved-props_0))"
"(let-values() #f)"
"(let-values(((c1_19)"
"(hash-ref(serialize-state-interned-props state_5) preserved-props_0 #f)))"
"(if c1_19"
"((lambda(p_18) p_18) c1_19)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_5)"
" preserved-props_0"
" preserved-props_0)"
" preserved-props_0)))))))"
"(begin(hash-set!(serialize-state-props state_5) all-props_0 p_17) p_17))))"
"(let-values() v_56))))))"
"(define-values"
"(push-syntax-context!)"
"(lambda(state_6 v_57)"
"(begin(let-values(((b_18)(serialize-state-syntax-context state_6)))(set-box! b_18(cons v_57(unbox b_18)))))))"
"(define-values"
"(get-syntax-context)"
"(lambda(state_7)"
"(begin"
"(let-values(((b_19)(serialize-state-syntax-context state_7)))"
"(if(null?(unbox b_19)) #f(car(unbox b_19)))))))"
"(define-values"
"(pop-syntax-context!)"
"(lambda(state_8)"
"(begin(let-values(((b_20)(serialize-state-syntax-context state_8)))(set-box! b_20(cdr(unbox b_20)))))))"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_26)"
"(begin(let-values(((k_8)(prefab-struct-key v_26)))(if k_8(if(all-fields-immutable? k_8) k_8 #f) #f)))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_9)"
"(begin"
"(let-values(((or-part_11)(symbol? k_9)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_2)(null? k_9)))"
"(if or-part_2"
" or-part_2"
"(let-values(((rk_0)(cdr k_9)))"
"(let-values(((rk_1)(if(if(pair? rk_0)(exact-integer?(car rk_0)) #f)(cdr rk_0) rk_0)))"
"(let-values(((rk_2)"
"(if(if(pair? rk_1)(pair?(car rk_1)) #f)"
"(if(zero?(caar rk_1))(cdr rk_1)(cons '#(1)(cdr rk_1)))"
" rk_1)))"
"(if(if(pair? rk_2)(vector?(car rk_2)) #f)"
"(if(zero?(vector-length(car rk_2)))(all-fields-immutable?(cdr rk_2)) #f)"
"(all-fields-immutable? rk_2))))))))))))"
"(define-values"
"(datum-map-slow)"
"(lambda(tail?_0 s_40 f_19 seen_0)"
"(begin"
"((letrec-values(((loop_61)"
"(lambda(tail?_1 s_41 prev-seen_0)"
"(begin"
" 'loop"
"(let-values(((seen_1)"
"(if(if prev-seen_0(datum-has-elements? s_41) #f)"
"(let-values()"
"(if(hash-ref prev-seen_0 s_41 #f)"
"(let-values()((hash-ref prev-seen_0 'cycle-fail) s_41))"
"(let-values()(hash-set prev-seen_0 s_41 #t))))"
"(let-values() prev-seen_0))))"
"(if(null? s_41)"
"(let-values()(f_19 tail?_1 s_41))"
"(if(pair? s_41)"
"(let-values()"
"(f_19 tail?_1(cons(loop_61 #f(car s_41) seen_1)(loop_61 #t(cdr s_41) seen_1))))"
"(if(let-values(((or-part_70)(symbol? s_41)))"
"(if or-part_70"
" or-part_70"
"(let-values(((or-part_71)(boolean? s_41)))"
"(if or-part_71 or-part_71(number? s_41)))))"
"(let-values()(f_19 #f s_41))"
"(if(vector? s_41)"
"(let-values()"
"(f_19"
" #f"
"(vector->immutable-vector"
"(let-values(((len_7)(vector-length s_41)))"
"(begin"
"(if(exact-nonnegative-integer? len_7)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                   \"exact-nonnegative-integer?\""
" len_7)))"
"(let-values(((v_58)(make-vector len_7 0)))"
"(begin"
"(if(zero? len_7)"
"(void)"
"(let-values()"
"(let-values(((vec_14 len_8)"
"(let-values(((vec_15) s_41))"
"(begin"
"(check-vector vec_15)"
"(values"
" vec_15"
"(unsafe-vector-length vec_15))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_26)"
"(lambda(i_38 pos_6)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_6 len_8)"
"(let-values(((e_13)"
"(unsafe-vector-ref"
" vec_14"
" pos_6)))"
"(let-values(((i_39)"
"(let-values(((i_40)"
" i_38))"
"(let-values(((i_41)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_58"
" i_40"
"(let-values()"
"(loop_61"
" #f"
" e_13"
" seen_1)))"
"(unsafe-fx+"
" 1"
" i_40)))))"
"(values i_41)))))"
"(if(if(not"
"((lambda x_22"
"(unsafe-fx="
" i_39"
" len_7))"
" e_13))"
"(not #f)"
" #f)"
"(for-loop_26"
" i_39"
"(unsafe-fx+ 1 pos_6))"
" i_39)))"
" i_38)))))"
" for-loop_26)"
" 0"
" 0)))))"
" v_58)))))))"
"(if(box? s_41)"
"(let-values()(f_19 #f(box-immutable(loop_61 #f(unbox s_41) seen_1))))"
"(let-values(((c1_20)(immutable-prefab-struct-key s_41)))"
"(if c1_20"
"((lambda(key_13)"
"(f_19"
" #f"
"(apply"
" make-prefab-struct"
" key_13"
"(reverse$1"
"(let-values(((v*_1 start*_0 stop*_1 step*_0)"
"(normalise-inputs"
" 'in-vector"
"                                                                 \"vector\""
"(lambda(x_23)(vector? x_23))"
"(lambda(x_24)(unsafe-vector-length x_24))"
"(struct->vector s_41)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_27)"
"(lambda(fold-var_17 idx_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< idx_0 stop*_1)"
"(let-values(((e_14)"
"(unsafe-vector-ref"
" v*_1"
" idx_0)))"
"(let-values(((fold-var_18)"
"(let-values(((fold-var_19)"
" fold-var_17))"
"(let-values(((fold-var_20)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_61"
" #f"
" e_14"
" seen_1))"
" fold-var_19))))"
"(values"
" fold-var_20)))))"
"(if(not #f)"
"(for-loop_27"
" fold-var_18"
"(unsafe-fx+ idx_0 1))"
" fold-var_18)))"
" fold-var_17)))))"
" for-loop_27)"
" null"
" start*_0)))))))"
" c1_20)"
"(if(if(hash? s_41)(immutable? s_41) #f)"
"(let-values()"
"(if(hash-eq? s_41)"
"(let-values()"
"(f_19"
" #f"
"(let-values(((ht_28) s_41))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_28)))"
"((letrec-values(((for-loop_28)"
"(lambda(table_15 i_42)"
"(begin"
" 'for-loop"
"(if i_42"
"(let-values(((k_10 v_59)"
"(hash-iterate-key+value"
" ht_28"
" i_42)))"
"(let-values(((table_16)"
"(let-values(((table_17)"
" table_15))"
"(let-values(((table_18)"
"(let-values()"
"(let-values(((key_14"
" val_4)"
"(let-values()"
"(values"
" k_10"
"(loop_61"
" #f"
" v_59"
" seen_1)))))"
"(hash-set"
" table_17"
" key_14"
" val_4)))))"
"(values"
" table_18)))))"
"(if(not #f)"
"(for-loop_28"
" table_16"
"(hash-iterate-next ht_28 i_42))"
" table_16)))"
" table_15)))))"
" for-loop_28)"
" '#hasheq()"
"(hash-iterate-first ht_28))))))"
"(if(hash-eqv? s_41)"
"(let-values()"
"(f_19"
" #f"
"(let-values(((ht_29) s_41))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_29)))"
"((letrec-values(((for-loop_29)"
"(lambda(table_19 i_43)"
"(begin"
" 'for-loop"
"(if i_43"
"(let-values(((k_11 v_60)"
"(hash-iterate-key+value"
" ht_29"
" i_43)))"
"(let-values(((table_20)"
"(let-values(((table_21)"
" table_19))"
"(let-values(((table_22)"
"(let-values()"
"(let-values(((key_15"
" val_5)"
"(let-values()"
"(values"
" k_11"
"(loop_61"
" #f"
" v_60"
" seen_1)))))"
"(hash-set"
" table_21"
" key_15"
" val_5)))))"
"(values"
" table_22)))))"
"(if(not #f)"
"(for-loop_29"
" table_20"
"(hash-iterate-next"
" ht_29"
" i_43))"
" table_20)))"
" table_19)))))"
" for-loop_29)"
" '#hasheqv()"
"(hash-iterate-first ht_29))))))"
"(let-values()"
"(f_19"
" #f"
"(let-values(((ht_30) s_41))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_30)))"
"((letrec-values(((for-loop_30)"
"(lambda(table_23 i_27)"
"(begin"
" 'for-loop"
"(if i_27"
"(let-values(((k_12 v_61)"
"(hash-iterate-key+value"
" ht_30"
" i_27)))"
"(let-values(((table_10)"
"(let-values(((table_11)"
" table_23))"
"(let-values(((table_12)"
"(let-values()"
"(let-values(((key_16"
" val_6)"
"(let-values()"
"(values"
" k_12"
"(loop_61"
" #f"
" v_61"
" seen_1)))))"
"(hash-set"
" table_11"
" key_16"
" val_6)))))"
"(values"
" table_12)))))"
"(if(not #f)"
"(for-loop_30"
" table_10"
"(hash-iterate-next"
" ht_30"
" i_27))"
" table_10)))"
" table_23)))))"
" for-loop_30)"
" '#hash()"
"(hash-iterate-first ht_30)))))))))"
"(let-values()(f_19 #f s_41)))))))))))))))"
" loop_61)"
" tail?_0"
" s_40"
" seen_0))))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_0)"
"(begin"
"(let-values(((or-part_72)(pair? d_0)))"
"(if or-part_72"
" or-part_72"
"(let-values(((or-part_73)(vector? d_0)))"
"(if or-part_73"
" or-part_73"
"(let-values(((or-part_74)(box? d_0)))"
"(if or-part_74"
" or-part_74"
"(let-values(((or-part_75)(immutable-prefab-struct-key d_0)))"
"(if or-part_75"
" or-part_75"
"(if(hash? d_0)(if(immutable? d_0)(positive?(hash-count d_0)) #f) #f))))))))))))"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_62)(begin(if(preserved-property-value? v_62)(preserved-property-value-content v_62) v_62))))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_63 syntax?_0)"
"(begin"
"(let-values(((s_4) v_63)"
"((f_20)"
"(lambda(tail?_0 v_3)"
"(begin"
" 'f"
"(begin"
"(if(let-values(((or-part_76)(null? v_3)))"
"(if or-part_76"
" or-part_76"
"(let-values(((or-part_77)(boolean? v_3)))"
"(if or-part_77"
" or-part_77"
"(let-values(((or-part_29)(symbol? v_3)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_78)(number? v_3)))"
"(if or-part_78"
" or-part_78"
"(let-values(((or-part_79)(char? v_3)))"
"(if or-part_79"
" or-part_79"
"(let-values(((or-part_80)(string? v_3)))"
"(if or-part_80"
" or-part_80"
"(let-values(((or-part_81)(bytes? v_3)))"
"(if or-part_81"
" or-part_81"
"(let-values(((or-part_70)(regexp? v_3)))"
"(if or-part_70"
" or-part_70"
"(let-values(((or-part_71)(syntax?_0 v_3)))"
"(if or-part_71"
" or-part_71"
"(let-values(((or-part_82)(pair? v_3)))"
"(if or-part_82"
" or-part_82"
"(let-values(((or-part_83)(vector? v_3)))"
"(if or-part_83"
" or-part_83"
"(let-values(((or-part_84)(box? v_3)))"
"(if or-part_84"
" or-part_84"
"(let-values(((or-part_85)(hash? v_3)))"
"(if or-part_85"
" or-part_85"
"(immutable-prefab-struct-key"
" v_3)))))))))))))))))))))))))))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'write"
"                               \"disallowed value in preserved syntax property\""
"                               \"value\""
" v_3)))"
" v_3))))"
"((seen_2) disallow-cycles$1))"
"((letrec-values(((loop_62)"
"(lambda(tail?_2 s_7 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_0)(add1 prev-depth_0)))"
"(if(if seen_2(> depth_0 32) #f)"
"(let-values()"
"(datum-map-slow tail?_2 s_7(lambda(tail?_3 s_42)(f_20 tail?_3 s_42)) seen_2))"
"(if(null? s_7)"
"(let-values()(f_20 tail?_2 s_7))"
"(if(pair? s_7)"
"(let-values()"
"(f_20"
" tail?_2"
"(cons(loop_62 #f(car s_7) depth_0)(loop_62 #t(cdr s_7) depth_0))))"
"(if(let-values(((or-part_32)(symbol? s_7)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_55)(boolean? s_7)))"
"(if or-part_55 or-part_55(number? s_7)))))"
"(let-values()(f_20 #f s_7))"
"(if(let-values(((or-part_56)(vector? s_7)))"
"(if or-part_56"
" or-part_56"
"(let-values(((or-part_7)(box? s_7)))"
"(if or-part_7"
" or-part_7"
"(let-values(((or-part_8)(prefab-struct-key s_7)))"
"(if or-part_8 or-part_8(hash? s_7)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_2"
" s_7"
"(lambda(tail?_4 s_43)(f_20 tail?_4 s_43))"
" seen_2))"
"(let-values()(f_20 #f s_7))))))))))))"
" loop_62)"
" #f"
" s_4"
" 0)))))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_64) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_64))))"
"(define-values"
"(tamper?)"
"(lambda(v_26)"
"(begin"
"(let-values(((or-part_0)(not v_26)))"
"(if or-part_0 or-part_0(let-values(((or-part_1)(symbol? v_26)))(if or-part_1 or-part_1(set? v_26))))))))"
"(define-values(tamper-tainted?)(lambda(v_65)(begin(symbol? v_65))))"
"(define-values(tamper-armed?)(lambda(v_66)(begin(set? v_66))))"
"(define-values(tamper-clean?)(lambda(v_67)(begin(not v_67))))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_68)(begin(if(datum-has-elements? v_68) 'tainted/need-propagate 'tainted))))"
"(define-values(tamper-needs-propagate?)(lambda(t_12)(begin(eq? t_12 'tainted/need-propagate))))"
"(define-values(tamper-propagated)(lambda(t_13)(begin(if(eq? t_13 'tainted/need-propagate) 'tainted t_13))))"
"(define-values(serialize-tamper)(lambda(t_14)(begin(if(tamper-armed? t_14) 'armed t_14))))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_15)(begin(if(eq? t_15 'armed)(current-arm-inspectors) t_15))))"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations+tamper"
" syntax-mpi-shifts"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" set-syntax-content!"
" set-syntax-scope-propagations+tamper!)"
"(let-values(((struct:_14 make-_14 ?_14 -ref_14 -set!_14)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:reach-scopes"
"(lambda(s_44 reach_0)"
"(let-values(((prop_1)(syntax-scope-propagations+tamper s_44)))"
"(begin"
"(reach_0"
"(if(propagation?$1 prop_1)((propagation-ref prop_1) s_44)(syntax-content s_44)))"
"(reach_0(syntax-scopes s_44))"
"(reach_0(syntax-shifted-multi-scopes s_44))"
"(let-values(((ht_31)(syntax-props s_44)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_31)))"
"((letrec-values(((for-loop_31)"
"(lambda(i_44)"
"(begin"
" 'for-loop"
"(if i_44"
"(let-values(((k_13 v_69)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_31"
" i_44)))"
"(let-values((()"
"(let-values()"
"(if(preserved-property-value? v_69)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(reach_0"
"(plain-property-value"
" v_69)))"
"(values)))))"
"(values)))"
"(values)))))"
"(if(not #f)"
"(for-loop_31"
"(unsafe-immutable-hash-iterate-next ht_31 i_44))"
"(values))))"
"(values))))))"
" for-loop_31)"
"(unsafe-immutable-hash-iterate-first ht_31))))"
"(void)"
"(reach_0(syntax-srcloc s_44))))))"
"(cons"
" prop:serialize"
"(lambda(s_45 ser-push!_1 state_9)"
"(let-values(((prop_2)(syntax-scope-propagations+tamper s_45)))"
"(let-values(((content_0)"
"(if(propagation?$1 prop_2)"
"((propagation-ref prop_2) s_45)"
"(syntax-content s_45))))"
"(let-values(((properties_0)"
"(intern-properties"
"(syntax-props s_45)"
"(lambda()"
"(let-values(((ht_32)(syntax-props s_45)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_32)))"
"((letrec-values(((for-loop_32)"
"(lambda(table_24 i_29)"
"(begin"
" 'for-loop"
"(if i_29"
"(let-values(((k_14 v_70)"
"(hash-iterate-key+value"
" ht_32"
" i_29)))"
"(let-values(((table_25)"
"(let-values(((table_26)"
" table_24))"
"(if(preserved-property-value?"
" v_70)"
"(let-values(((table_27)"
" table_26))"
"(let-values(((table_28)"
"(let-values()"
"(let-values(((key_17"
" val_7)"
"(let-values()"
"(values"
" k_14"
"(check-value-to-preserve"
"(plain-property-value"
" v_70)"
" syntax?$1)))))"
"(hash-set"
" table_27"
" key_17"
" val_7)))))"
"(values table_28)))"
" table_26))))"
"(if(not #f)"
"(for-loop_32"
" table_25"
"(hash-iterate-next ht_32 i_29))"
" table_25)))"
" table_24)))))"
" for-loop_32)"
" '#hasheq()"
"(hash-iterate-first ht_32)))))"
" state_9)))"
"(let-values(((tamper_0)(serialize-tamper(syntax-tamper s_45))))"
"(let-values(((context-triple_0)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_45) state_9)"
"(intern-shifted-multi-scopes(syntax-shifted-multi-scopes s_45) state_9)"
"(intern-mpi-shifts(syntax-mpi-shifts s_45) state_9)"
" state_9)))"
"(let-values(((stx-state_0)(get-syntax-context state_9)))"
"(if(let-values(((or-part_40) properties_0))(if or-part_40 or-part_40 tamper_0))"
"(let-values()"
"(begin"
"(ser-push!_1 'tag '#:syntax+props)"
"(push-syntax-context! state_9 #f)"
"(ser-push!_1 content_0)"
"(pop-syntax-context! state_9)"
"(ser-push!_1 'reference context-triple_0)"
"(ser-push!_1 'reference(syntax-srcloc s_45))"
"(ser-push!_1 properties_0)"
"(ser-push!_1 tamper_0)"
"(if stx-state_0"
"(let-values()(set-syntax-state-all-sharing?! stx-state_0 #f))"
"(void))))"
"(let-values()"
"(let-values(((sharing-mode_0)"
"(hash-ref"
"(serialize-state-sharing-syntaxes state_9)"
" s_45"
" 'unknown)))"
"(begin"
"(if(eq? sharing-mode_0 'share)"
"(let-values()"
"(begin"
"(ser-push!_1 'tag '#:datum->syntax)"
"(ser-push!_1(syntax->datum$1 s_45))))"
"(if(eq? sharing-mode_0 'unknown)"
"(let-values()"
"(let-values((()(begin(ser-push!_1 'tag '#:syntax)(values))))"
"(let-values(((this-state_0)"
"(if(no-pair-syntax-in-cdr? content_0)"
"(syntax-state19.1"
" #t"
" context-triple_0"
"(syntax-srcloc s_45))"
" #f)))"
"(let-values((()"
"(begin"
"(push-syntax-context! state_9 this-state_0)"
"(values))))"
"(let-values((()(begin(ser-push!_1 content_0)(values))))"
"(let-values((()"
"(begin"
"(pop-syntax-context! state_9)"
"(values))))"
"(let-values(((new-sharing-mode_0)"
"(if(if this-state_0"
"(syntax-state-all-sharing?"
" this-state_0)"
" #f)"
" 'share"
" 'none)))"
"(begin"
"(hash-set!"
"(serialize-state-sharing-syntaxes state_9)"
" s_45"
"(if(datum-has-elements? content_0)"
" new-sharing-mode_0"
" 'none))"
"(if(if stx-state_0(eq? new-sharing-mode_0 'none) #f)"
"(let-values()"
"(set-syntax-state-all-sharing?! stx-state_0 #f))"
"(void))))))))))"
"(let-values()"
"(begin"
"(ser-push!_1 'tag '#:syntax)"
"(push-syntax-context! state_9 #f)"
"(ser-push!_1 content_0)"
"(pop-syntax-context! state_9)))))"
"(ser-push!_1 'reference context-triple_0)"
"(ser-push!_1 'reference(syntax-srcloc s_45))"
"(if stx-state_0"
"(let-values()"
"(if(if(eq?"
" context-triple_0"
"(syntax-state-context-triple stx-state_0))"
"(equal?(syntax-srcloc s_45)(syntax-state-srcloc stx-state_0))"
" #f)"
"(void)"
"(let-values()(set-syntax-state-all-sharing?! stx-state_0 #f))))"
"(void))))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_46 port_5 mode_5)"
"                         (let-values ((() (begin (write-string \"#<syntax\" port_5) (values))))"
"(let-values(((srcloc_0)(syntax-srcloc s_46)))"
"(begin"
"(if srcloc_0"
"(let-values()"
"(let-values(((srcloc-str_0)(srcloc->string srcloc_0)))"
"                                     (if srcloc-str_0 (let-values () (fprintf port_5 \":~a\" srcloc-str_0)) (void))))"
"(void))"
"                               (fprintf port_5 \" ~.s\" (syntax->datum$1 s_46))"
"                               (write-string \">\" port_5)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'syntax)))))"
"(values"
" struct:_14"
" make-_14"
" ?_14"
"(make-struct-field-accessor -ref_14 0 'content)"
"(make-struct-field-accessor -ref_14 1 'scopes)"
"(make-struct-field-accessor -ref_14 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_14 3 'scope-propagations+tamper)"
"(make-struct-field-accessor -ref_14 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_14 5 'srcloc)"
"(make-struct-field-accessor -ref_14 6 'props)"
"(make-struct-field-accessor -ref_14 7 'inspector)"
"(make-struct-field-mutator -set!_14 0 'content)"
"(make-struct-field-mutator -set!_14 3 'scope-propagations+tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values"
"(prop:propagation-tamper propagation-tamper? propagation-tamper-ref)"
"(make-struct-type-property 'propagation-tamper))"
"(define-values"
"(prop:propagation-set-tamper propagation-set-tamper? propagation-set-tamper-ref)"
"(make-struct-type-property 'propagation-set-tamper))"
"(define-values"
"(syntax-tamper)"
"(lambda(s_47)"
"(begin"
"(let-values(((v_71)(syntax-scope-propagations+tamper s_47)))"
"(if(tamper? v_71) v_71((propagation-tamper-ref v_71) v_71))))))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f empty-props #f))"
"(define-values(identifier?)(lambda(s_48)(begin(if(syntax?$1 s_48)(symbol?(syntax-content s_48)) #f))))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_49)"
"(begin"
" 'syntax->datum"
"(let-values(((s_50) s_49)"
"((f_21)(lambda(tail?_5 x_25)(begin 'f x_25)))"
"((d->s_0)(lambda(s_51 d_1)(begin 'd->s d_1)))"
"((s-e_0) syntax-content)"
"((seen_3) #f))"
"((letrec-values(((loop_63)"
"(lambda(s_52)"
"(begin"
" 'loop"
"(let-values(((s_53) s_52)"
"((f_22)"
"(lambda(tail?_6 v_72)"
"(begin"
" 'f"
"(if(syntax?$1 v_72)"
"(let-values()(d->s_0 v_72(loop_63(s-e_0 v_72))))"
"(let-values()(f_21 tail?_6 v_72))))))"
"((seen_4) seen_3))"
"((letrec-values(((loop_64)"
"(lambda(tail?_7 s_54 prev-depth_1)"
"(begin"
" 'loop"
"(let-values(((depth_1)(add1 prev-depth_1)))"
"(if(if seen_4(> depth_1 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_7"
" s_54"
"(lambda(tail?_8 s_55)(f_22 tail?_8 s_55))"
" seen_4))"
"(if(null? s_54)"
"(let-values()(f_22 tail?_7 s_54))"
"(if(pair? s_54)"
"(let-values()"
"(f_22"
" tail?_7"
"(cons"
"(loop_64 #f(car s_54) depth_1)"
"(loop_64 #t(cdr s_54) depth_1))))"
"(if(let-values(((or-part_86)(symbol? s_54)))"
"(if or-part_86"
" or-part_86"
"(let-values(((or-part_87)(boolean? s_54)))"
"(if or-part_87 or-part_87(number? s_54)))))"
"(let-values()(f_22 #f s_54))"
"(if(let-values(((or-part_88)(vector? s_54)))"
"(if or-part_88"
" or-part_88"
"(let-values(((or-part_89)(box? s_54)))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_90)"
"(prefab-struct-key s_54)))"
"(if or-part_90"
" or-part_90"
"(hash? s_54)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_7"
" s_54"
"(lambda(tail?_9 s_56)(f_22 tail?_9 s_56))"
" seen_4))"
"(let-values()(f_22 #f s_54))))))))))))"
" loop_64)"
" #f"
" s_53"
" 0))))))"
" loop_63)"
" s_50)))))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax8_0)"
"(lambda(stx-c6_0 s7_0 stx-l2_0 stx-p3_0 stx-l4_0 stx-p5_0)"
"(begin"
" 'datum->syntax8"
"(let-values(((stx-c_0) stx-c6_0))"
"(let-values(((s_57) s7_0))"
"(let-values(((stx-l_0)(if stx-l4_0 stx-l2_0 #f)))"
"(let-values(((stx-p_0)(if stx-p5_0 stx-p3_0 #f)))"
"(let-values()"
"(if(syntax?$1 s_57)"
"(let-values() s_57)"
"(let-values()"
"(let-values(((wrap_0)"
"(lambda(content_1)"
"(begin"
" 'wrap"
"(syntax1.1"
" content_1"
"(if stx-c_0(syntax-scopes stx-c_0) empty-scopes)"
"(if stx-c_0"
"(syntax-shifted-multi-scopes stx-c_0)"
" empty-shifted-multi-scopes)"
"(if stx-c_0"
"(if(syntax-tamper stx-c_0)"
"(tamper-tainted-for-content content_1)"
" #f)"
" #f)"
"(if stx-c_0(syntax-mpi-shifts stx-c_0) empty-mpi-shifts)"
"(if stx-l_0(syntax-srcloc stx-l_0) #f)"
" empty-props"
"(if stx-c_0(syntax-inspector stx-c_0) #f))))))"
"(let-values(((result-s_0)"
"(let-values(((s_58) s_57)"
"((f_23)"
"(lambda(tail?_10 x_26)"
"(begin 'f(if tail?_10 x_26(wrap_0 x_26)))))"
"((s->_0)(lambda(s_59)(begin 's-> s_59)))"
"((seen_5) disallow-cycles))"
"(let-values(((s_60) s_58)"
"((f_24)"
"(lambda(tail?_11 v_73)"
"(begin"
" 'f"
"(if(syntax?$1 v_73)"
"(let-values()(s->_0 v_73))"
"(let-values()(f_23 tail?_11 v_73))))))"
"((seen_6) seen_5))"
"((letrec-values(((loop_65)"
"(lambda(tail?_12 s_61 prev-depth_2)"
"(begin"
" 'loop"
"(let-values(((depth_2)"
"(add1 prev-depth_2)))"
"(if(if seen_6(> depth_2 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_12"
" s_61"
"(lambda(tail?_13 s_62)"
"(f_24 tail?_13 s_62))"
" seen_6))"
"(if(null? s_61)"
"(let-values()(f_24 tail?_12 s_61))"
"(if(pair? s_61)"
"(let-values()"
"(f_24"
" tail?_12"
"(cons"
"(loop_65 #f(car s_61) depth_2)"
"(loop_65"
" #t"
"(cdr s_61)"
" depth_2))))"
"(if(let-values(((or-part_91)"
"(symbol? s_61)))"
"(if or-part_91"
" or-part_91"
"(let-values(((or-part_92)"
"(boolean?"
" s_61)))"
"(if or-part_92"
" or-part_92"
"(number? s_61)))))"
"(let-values()(f_24 #f s_61))"
"(if(let-values(((or-part_93)"
"(vector? s_61)))"
"(if or-part_93"
" or-part_93"
"(let-values(((or-part_94)"
"(box?"
" s_61)))"
"(if or-part_94"
" or-part_94"
"(let-values(((or-part_95)"
"(prefab-struct-key"
" s_61)))"
"(if or-part_95"
" or-part_95"
"(hash? s_61)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_12"
" s_61"
"(lambda(tail?_14 s_63)"
"(f_24 tail?_14 s_63))"
" seen_6))"
"(let-values()"
"(f_24 #f s_61))))))))))))"
" loop_65)"
" #f"
" s_60"
" 0)))))"
"(if(if stx-p_0(not(eq?(syntax-props stx-p_0) empty-props)) #f)"
"(let-values(((the-struct_0) result-s_0))"
"(if(syntax?$1 the-struct_0)"
"(let-values(((props21_0)(syntax-props stx-p_0)))"
"(syntax1.1"
"(syntax-content the-struct_0)"
"(syntax-scopes the-struct_0)"
"(syntax-shifted-multi-scopes the-struct_0)"
"(syntax-scope-propagations+tamper the-struct_0)"
"(syntax-mpi-shifts the-struct_0)"
"(syntax-srcloc the-struct_0)"
" props21_0"
"(syntax-inspector the-struct_0)))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_0)))"
" result-s_0))))))))))))))"
"(case-lambda"
"((stx-c_1 s_64)(begin 'datum->syntax(datum->syntax8_0 stx-c_1 s_64 #f #f #f #f)))"
"((stx-c_2 s_38 stx-l_1 stx-p3_1)(datum->syntax8_0 stx-c_2 s_38 stx-l_1 stx-p3_1 #t #t))"
"((stx-c_3 s_65 stx-l2_1)(datum->syntax8_0 stx-c_3 s_65 stx-l2_1 #f #t #f)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_66) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" s_66))))"
"(define-values"
"(struct:syntax-state"
" syntax-state19.1"
" syntax-state?"
" syntax-state-all-sharing?"
" syntax-state-context-triple"
" syntax-state-srcloc"
" set-syntax-state-all-sharing?!)"
"(let-values(((struct:_15 make-_15 ?_15 -ref_15 -set!_15)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syntax-state #f 3 0 #f null(current-inspector) #f '(1 2) #f 'syntax-state)))))"
"(values"
" struct:_15"
" make-_15"
" ?_15"
"(make-struct-field-accessor -ref_15 0 'all-sharing?)"
"(make-struct-field-accessor -ref_15 1 'context-triple)"
"(make-struct-field-accessor -ref_15 2 'srcloc)"
"(make-struct-field-mutator -set!_15 0 'all-sharing?))))"
"(define-values"
"(no-pair-syntax-in-cdr?)"
"(lambda(content_2)"
"(begin"
"(if(pair? content_2)"
"(let-values()"
"((letrec-values(((loop_66)"
"(lambda(content_3)"
"(begin"
" 'loop"
"(if(if(syntax?$1 content_3)(pair?(syntax-content content_3)) #f)"
"(let-values() #f)"
"(if(pair? content_3)"
"(let-values()(loop_66(cdr content_3)))"
"(let-values() #t)))))))"
" loop_66)"
"(cdr content_2)))"
"(let-values() #t)))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_4 context-triple_1 srcloc_1 props_0 tamper_1 inspector_0)"
"(begin"
"(syntax1.1"
" content_4"
"(vector*-ref context-triple_1 0)"
"(vector*-ref context-triple_1 1)"
"(deserialize-tamper tamper_1)"
"(vector*-ref context-triple_1 2)"
" srcloc_1"
"(if props_0"
"(let-values(((ht_33) props_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_33)))"
"((letrec-values(((for-loop_33)"
"(lambda(table_29 i_45)"
"(begin"
" 'for-loop"
"(if i_45"
"(let-values(((k_15 v_74)(unsafe-immutable-hash-iterate-key+value ht_33 i_45)))"
"(let-values(((table_30)"
"(let-values(((table_31) table_29))"
"(let-values(((table_32)"
"(let-values()"
"(let-values(((key_18 val_8)"
"(let-values()"
"(values"
" k_15"
"(preserved-property-value1.1"
" v_74)))))"
"(hash-set table_31 key_18 val_8)))))"
"(values table_32)))))"
"(if(not #f)"
"(for-loop_33 table_30(unsafe-immutable-hash-iterate-next ht_33 i_45))"
" table_30)))"
" table_29)))))"
" for-loop_33)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_33))))"
" empty-props)"
" inspector_0))))"
"(define-values"
"(deserialize-datum->syntax)"
"(lambda(content_5 context-triple_2 srcloc_2 inspector_1)"
"(begin"
"(let-values(((s_67)(deserialize-syntax #f context-triple_2 srcloc_2 #f #f inspector_1)))"
"(datum->syntax$1 s_67 content_5 s_67 s_67)))))"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-syms/serialize"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_16 make-_16 ?_16 -ref_16 -set!_16)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(twbb_0 ser-push!_2 state_10)"
"(begin"
"(ser-push!_2 'tag '#:table-with-bulk-bindings)"
"(ser-push!_2(table-with-bulk-bindings-syms/serialize twbb_0))"
"(ser-push!_2(table-with-bulk-bindings-bulk-bindings twbb_0))))))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table-with-bulk-bindings)))))"
"(values"
" struct:_16"
" make-_16"
" ?_16"
"(make-struct-field-accessor -ref_16 0 'syms)"
"(make-struct-field-accessor -ref_16 1 'syms/serialize)"
"(make-struct-field-accessor -ref_16 2 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_1 bulk-bindings_0)(begin(table-with-bulk-bindings1.1 syms_1 syms_1 bulk-bindings_0))))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_17 make-_17 ?_17 -ref_17 -set!_17)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"                      (cons prop:reach-scopes (lambda (sms_2 reach_1) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_0 ser-push!_3 state_11)"
"(begin"
"(ser-push!_3 'tag '#:bulk-binding-at)"
"(ser-push!_3(bulk-binding-at-scopes bba_0))"
"(ser-push!_3(bulk-binding-at-bulk bba_0))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))))"
"(values"
" struct:_17"
" make-_17"
" ?_17"
"(make-struct-field-accessor -ref_17 0 'scopes)"
"(make-struct-field-accessor -ref_17 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_0 bulk_0)(begin(bulk-binding-at2.1 scopes_0 bulk_0))))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_18 make-_18 ?_18 -ref_18 -set!_18)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))))"
"(values"
" struct:_18"
" make-_18"
" ?_18"
"(make-struct-field-accessor -ref_18 0 'get-symbols)"
"(make-struct-field-accessor -ref_18 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_21 s_68 extra-shifts_0)"
"(begin"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_21))"
" b_21"
"(append extra-shifts_0(if s_68(syntax-mpi-shifts s_68) null))))))"
"(define-values(bulk-binding-create)(lambda(b_22)(begin(bulk-binding-class-create(bulk-binding-ref b_22)))))"
"(define-values(binding-table-empty?)(lambda(bt_0)(begin(if(hash? bt_0)(zero?(hash-count bt_0)) #f))))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_1 scopes_1 sym_0 binding_0 just-for-nominal?_0)"
"(begin"
"(if(hash? bt_1)"
"(let-values()(hash-set bt_1 sym_0(hash-set(hash-ref bt_1 sym_0 '#hash()) scopes_1 binding_0)))"
"(let-values()"
"(let-values(((new-syms_0)"
"(binding-table-add"
"(table-with-bulk-bindings-syms bt_1)"
" scopes_1"
" sym_0"
" binding_0"
" just-for-nominal?_0)))"
"(let-values(((new-syms/serialize_0)"
"(if just-for-nominal?_0"
"(let-values()(table-with-bulk-bindings-syms/serialize bt_1))"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_1)"
"(table-with-bulk-bindings-syms/serialize bt_1))"
"(let-values() new-syms_0)"
"(let-values()"
"(binding-table-add"
"(table-with-bulk-bindings-syms/serialize bt_1)"
" scopes_1"
" sym_0"
" binding_0"
" #f))))))"
"(let-values(((the-struct_1) bt_1))"
"(if(table-with-bulk-bindings? the-struct_1)"
"(let-values(((syms7_0) new-syms_0)((syms/serialize8_0) new-syms/serialize_0))"
"(table-with-bulk-bindings1.1"
" syms7_0"
" syms/serialize8_0"
"(table-with-bulk-bindings-bulk-bindings the-struct_1)))"
"                  (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_1))))))))))"
"(define-values"
"(binding-table-add-bulk)"
"(lambda(bt_2 scopes_2 bulk_1)"
"(begin"
"(if(table-with-bulk-bindings? bt_2)"
"(let-values()"
"(let-values(((new-syms_1)(remove-matching-bindings(table-with-bulk-bindings-syms bt_2) scopes_2 bulk_1)))"
"(let-values(((new-syms/serialize_1)"
"(if(eq?(table-with-bulk-bindings-syms bt_2)(table-with-bulk-bindings-syms/serialize bt_2))"
" new-syms_1"
"(remove-matching-bindings(table-with-bulk-bindings-syms/serialize bt_2) scopes_2 bulk_1))))"
"(table-with-bulk-bindings1.1"
" new-syms_1"
" new-syms/serialize_1"
"(cons(bulk-binding-at2.1 scopes_2 bulk_1)(table-with-bulk-bindings-bulk-bindings bt_2))))))"
"(let-values()(binding-table-add-bulk(table-with-bulk-bindings1.1 bt_2 bt_2 null) scopes_2 bulk_1))))))"
"(define-values"
"(remove-matching-bindings)"
"(lambda(syms_2 scopes_3 bulk_2)"
"(begin"
"(let-values(((bulk-symbols_0)(bulk-binding-symbols bulk_2 #f null)))"
"(if(<(hash-count syms_2)(hash-count bulk-symbols_0))"
"(let-values()"
"(let-values(((ht_34) syms_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_34)))"
"((letrec-values(((for-loop_34)"
"(lambda(syms_3 i_46)"
"(begin"
" 'for-loop"
"(if i_46"
"(let-values(((sym_1 sym-bindings_0)"
"(unsafe-immutable-hash-iterate-key+value ht_34 i_46)))"
"(let-values(((syms_4)"
"(let-values(((syms_5) syms_3))"
"(let-values(((syms_6)"
"(let-values()"
"(if(hash-ref bulk-symbols_0 sym_1 #f)"
"(remove-matching-binding"
" syms_5"
" sym_1"
" sym-bindings_0"
" scopes_3)"
" syms_5))))"
"(values syms_6)))))"
"(if(not #f)"
"(for-loop_34 syms_4(unsafe-immutable-hash-iterate-next ht_34 i_46))"
" syms_4)))"
" syms_3)))))"
" for-loop_34)"
" syms_2"
"(unsafe-immutable-hash-iterate-first ht_34)))))"
"(let-values()"
"(let-values(((ht_35) bulk-symbols_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_35)))"
"((letrec-values(((for-loop_35)"
"(lambda(syms_7 i_47)"
"(begin"
" 'for-loop"
"(if i_47"
"(let-values(((sym_2)(unsafe-immutable-hash-iterate-key ht_35 i_47)))"
"(let-values(((syms_8)"
"(let-values(((syms_9) syms_7))"
"(let-values(((syms_10)"
"(let-values()"
"(let-values(((sym-bindings_1)"
"(hash-ref syms_9 sym_2 #f)))"
"(if sym-bindings_1"
"(remove-matching-binding"
" syms_9"
" sym_2"
" sym-bindings_1"
" scopes_3)"
" syms_9)))))"
"(values syms_10)))))"
"(if(not #f)"
"(for-loop_35 syms_8(unsafe-immutable-hash-iterate-next ht_35 i_47))"
" syms_8)))"
" syms_7)))))"
" for-loop_35)"
" syms_2"
"(unsafe-immutable-hash-iterate-first ht_35))))))))))"
"(define-values"
"(remove-matching-binding)"
"(lambda(syms_11 sym_3 sym-bindings_2 scopes_4)"
"(begin(hash-set syms_11 sym_3(hash-remove sym-bindings_2 scopes_4)))))"
"(define-values"
"(binding-table-symbols)"
"(lambda(table_33 scs_2 s_69 extra-shifts_1)"
"(begin"
"(let-values(((ht_36 bulk-bindings_1)"
"(if(hash? table_33)"
"(values table_33 null)"
"(values"
"(table-with-bulk-bindings-syms table_33)"
"(table-with-bulk-bindings-bulk-bindings table_33)))))"
"(set-union"
"(let-values(((ht_37) ht_36))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_37)))"
"((letrec-values(((for-loop_36)"
"(lambda(table_34 i_48)"
"(begin"
" 'for-loop"
"(if i_48"
"(let-values(((sym_4 at-sym_0)(hash-iterate-key+value ht_37 i_48)))"
"(let-values(((table_2)"
"(let-values(((table_3) table_34))"
"(if(let-values(((ht_38) at-sym_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_38)))"
"((letrec-values(((for-loop_37)"
"(lambda(result_29 i_49)"
"(begin"
" 'for-loop"
"(if i_49"
"(let-values(((an-scs_0)"
"(hash-iterate-key"
" ht_38"
" i_49)))"
"(let-values(((result_30)"
"(let-values()"
"(let-values(((result_31)"
"(let-values()"
"(let-values()"
"(subset?"
" an-scs_0"
" scs_2)))))"
"(values"
" result_31)))))"
"(if(if(not"
"((lambda x_27"
" result_30)"
" an-scs_0))"
"(not #f)"
" #f)"
"(for-loop_37"
" result_30"
"(hash-iterate-next"
" ht_38"
" i_49))"
" result_30)))"
" result_29)))))"
" for-loop_37)"
" #f"
"(hash-iterate-first ht_38))))"
"(let-values(((table_5) table_3))"
"(let-values(((table_6)"
"(let-values()"
"(let-values(((key_19 val_9)"
"(let-values()"
"(values"
"(let-values() sym_4)"
" #t))))"
"(hash-set table_5 key_19 val_9)))))"
"(values table_6)))"
" table_3))))"
"(if(not #f)(for-loop_36 table_2(hash-iterate-next ht_37 i_48)) table_2)))"
" table_34)))))"
" for-loop_36)"
" '#hasheq()"
"(hash-iterate-first ht_37))))"
"(let-values(((lst_34) bulk-bindings_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_34)))"
"((letrec-values(((for-loop_38)"
"(lambda(table_35 lst_35)"
"(begin"
" 'for-loop"
"(if(pair? lst_35)"
"(let-values(((bba_1)(unsafe-car lst_35))((rest_14)(unsafe-cdr lst_35)))"
"(let-values(((table_36)"
"(let-values(((table_37) table_35))"
"(if(subset?(bulk-binding-at-scopes bba_1) scs_2)"
"(let-values(((ht_39)"
"(bulk-binding-symbols"
"(bulk-binding-at-bulk bba_1)"
" s_69"
" extra-shifts_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_39)))"
"((letrec-values(((for-loop_39)"
"(lambda(table_38 i_50)"
"(begin"
" 'for-loop"
"(if i_50"
"(let-values(((sym_5)"
"(hash-iterate-key"
" ht_39"
" i_50)))"
"(let-values(((table_39)"
"(let-values(((table_40)"
" table_38))"
"(let-values(((table_41)"
"(let-values()"
"(let-values(((key_20"
" val_10)"
"(let-values()"
"(values"
"(let-values()"
" sym_5)"
" #t))))"
"(hash-set"
" table_40"
" key_20"
" val_10)))))"
"(values"
" table_41)))))"
"(if(not #f)"
"(for-loop_39"
" table_39"
"(hash-iterate-next"
" ht_39"
" i_50))"
" table_39)))"
" table_38)))))"
" for-loop_39)"
" table_37"
"(hash-iterate-first ht_39))))"
" table_37))))"
"(if(not #f)(for-loop_38 table_36 rest_14) table_36)))"
" table_35)))))"
" for-loop_38)"
" '#hasheq()"
" lst_34))))))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_3 state_12)"
"(begin"
"(let-values(((or-part_96)(hash-ref(serialize-state-bindings-intern state_12) bt_3 #f)))"
"(if or-part_96"
" or-part_96"
"(let-values(((reachable-scopes_1)(serialize-state-reachable-scopes state_12)))"
"(let-values(((new-syms_2)"
"(let-values(((ht_40)(if(hash? bt_3) bt_3(table-with-bulk-bindings-syms/serialize bt_3))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_40)))"
"((letrec-values(((for-loop_40)"
"(lambda(table_42 i_51)"
"(begin"
" 'for-loop"
"(if i_51"
"(let-values(((sym_6 bindings-for-sym_0)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_40"
" i_51)))"
"(let-values(((table_43)"
"(let-values(((new-bindings-for-sym_0)"
"(let-values(((ht_41)"
" bindings-for-sym_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash"
" ht_41)))"
"((letrec-values(((for-loop_41)"
"(lambda(table_44"
" i_52)"
"(begin"
" 'for-loop"
"(if i_52"
"(let-values(((scopes_5"
" binding_1)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_41"
" i_52)))"
"(let-values(((table_45)"
"(let-values(((table_46)"
" table_44))"
"(if(subset?"
" scopes_5"
" reachable-scopes_1)"
"(let-values(((table_47)"
" table_46))"
"(let-values(((table_48)"
"(let-values()"
"(let-values(((key_21"
" val_11)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_5"
" state_12)"
" binding_1))))"
"(hash-set"
" table_47"
" key_21"
" val_11)))))"
"(values"
" table_48)))"
" table_46))))"
"(if(not"
" #f)"
"(for-loop_41"
" table_45"
"(unsafe-immutable-hash-iterate-next"
" ht_41"
" i_52))"
" table_45)))"
" table_44)))))"
" for-loop_41)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_41))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_42)"
"(lambda(table_49)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_50)"
"(let-values(((table_51)"
" table_49))"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_0))"
"(let-values(((table_52)"
" table_51))"
"(let-values(((table_53)"
"(let-values()"
"(let-values(((key_22"
" val_12)"
"(let-values()"
"(values"
" sym_6"
" new-bindings-for-sym_0))))"
"(hash-set"
" table_52"
" key_22"
" val_12)))))"
"(values"
" table_53)))"
" table_51))))"
" table_50))))))"
" for-loop_42)"
" table_42)))))"
"(if(not #f)"
"(for-loop_40"
" table_43"
"(unsafe-immutable-hash-iterate-next ht_40 i_51))"
" table_43)))"
" table_42)))))"
" for-loop_40)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_40))))))"
"(let-values(((new-bulk-bindings_0)"
"(if(hash? bt_3)"
" null"
"(reverse$1"
"(let-values(((lst_36)(table-with-bulk-bindings-bulk-bindings bt_3)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_36)))"
"((letrec-values(((for-loop_43)"
"(lambda(fold-var_21 lst_37)"
"(begin"
" 'for-loop"
"(if(pair? lst_37)"
"(let-values(((bba_2)(unsafe-car lst_37))"
"((rest_15)(unsafe-cdr lst_37)))"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23) fold-var_21))"
"(if(subset?"
"(bulk-binding-at-scopes bba_2)"
" reachable-scopes_1)"
"(let-values(((fold-var_24) fold-var_23))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((the-struct_2)"
" bba_2))"
"(if(bulk-binding-at?"
" the-struct_2)"
"(let-values(((scopes9_0)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_2)"
" state_12)))"
"(bulk-binding-at2.1"
" scopes9_0"
"(bulk-binding-at-bulk"
" the-struct_2)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                         \"bulk-binding-at?\""
" the-struct_2))))"
" fold-var_24))))"
"(values fold-var_25)))"
" fold-var_23))))"
"(if(not #f)"
"(for-loop_43 fold-var_22 rest_15)"
" fold-var_22)))"
" fold-var_21)))))"
" for-loop_43)"
" null"
" lst_36)))))))"
"(let-values(((new-bt_0)"
"(if(pair? new-bulk-bindings_0)"
"(table-with-bulk-bindings1.1 new-syms_2 new-syms_2 new-bulk-bindings_0)"
" new-syms_2)))"
"(begin(hash-set!(serialize-state-bulk-bindings-intern state_12) bt_3 new-bt_0) new-bt_0))))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_4 reachable-scopes_2 reach_2 register-trigger_0)"
"(begin"
"(begin"
"(let-values(((ht_42)(if(hash? bt_4) bt_4(table-with-bulk-bindings-syms/serialize bt_4))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_42)))"
"((letrec-values(((for-loop_44)"
"(lambda(i_53)"
"(begin"
" 'for-loop"
"(if i_53"
"(let-values(((sym_7 bindings-for-sym_1)"
"(unsafe-immutable-hash-iterate-key+value ht_42 i_53)))"
"(let-values((()"
"(let-values(((ht_43) bindings-for-sym_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_43)))"
"((letrec-values(((for-loop_45)"
"(lambda(i_54)"
"(begin"
" 'for-loop"
"(if i_54"
"(let-values(((scopes_6 binding_2)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_43"
" i_54)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
" scopes_6"
" binding_2"
" reachable-scopes_2"
" reach_2"
" register-trigger_0))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_45"
"(unsafe-immutable-hash-iterate-next"
" ht_43"
" i_54))"
"(values))))"
"(values))))))"
" for-loop_45)"
"(unsafe-immutable-hash-iterate-first ht_43))))))"
"(if(not #f)"
"(for-loop_44(unsafe-immutable-hash-iterate-next ht_42 i_53))"
"(values))))"
"(values))))))"
" for-loop_44)"
"(unsafe-immutable-hash-iterate-first ht_42))))"
"(void)))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_7 binding_3 reachable-scopes_3 reach_3 register-trigger_1)"
"(begin"
"(let-values(((v_43)(if(binding-reach-scopes? binding_3)((binding-reach-scopes-ref binding_3) binding_3) #f)))"
"(if v_43"
"(let-values()"
"(if(subset? scopes_7 reachable-scopes_3)"
"(let-values()(reach_3 v_43))"
"(let-values()"
"(begin"
"(let-values(((ht_44) scopes_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_44)))"
"((letrec-values(((for-loop_46)"
"(lambda(i_55)"
"(begin"
" 'for-loop"
"(if i_55"
"(let-values(((sc_0)(unsafe-immutable-hash-iterate-key ht_44 i_55)))"
"(let-values((()"
"(let-values()"
"(if(set-member? reachable-scopes_3 sc_0)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_1 sc_0 v_43))"
"(values)))))"
"(values)))))))"
"(if(not #f)"
"(for-loop_46(unsafe-immutable-hash-iterate-next ht_44 i_55))"
"(values))))"
"(values))))))"
" for-loop_46)"
"(unsafe-immutable-hash-iterate-first ht_44))))"
"(void)))))"
"(void))))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(begin"
"(let-values(((s_70) d_2)"
"((f_25)(lambda(tail?_15 x_28)(begin 'f x_28)))"
"((s->_1)"
"(lambda(sub-s_0)"
"(begin"
" 's->"
"(if(tamper-tainted?(syntax-tamper sub-s_0))"
"(let-values() sub-s_0)"
"(let-values()"
"(let-values(((stx_0) sub-s_0))"
"(let-values(((the-struct_3) stx_0))"
"(if(syntax?$1 the-struct_3)"
"(let-values(((scope-propagations+tamper6_0)"
"(let-values(((t_16)"
"(tamper-tainted-for-content(syntax-content sub-s_0)))"
"((p_19)(syntax-scope-propagations+tamper stx_0)))"
"(if(tamper? p_19)"
" t_16"
"((propagation-set-tamper-ref p_19) p_19 t_16)))))"
"(syntax1.1"
"(syntax-content the-struct_3)"
"(syntax-scopes the-struct_3)"
"(syntax-shifted-multi-scopes the-struct_3)"
" scope-propagations+tamper6_0"
"(syntax-mpi-shifts the-struct_3)"
"(syntax-srcloc the-struct_3)"
"(syntax-props the-struct_3)"
"(syntax-inspector the-struct_3)))"
"                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_3)))))))))"
"((seen_7) #f))"
"(let-values(((s_71) s_70)"
"((f_4)"
"(lambda(tail?_16 v_75)"
"(begin"
" 'f"
"(if(syntax?$1 v_75)(let-values()(s->_1 v_75))(let-values()(f_25 tail?_16 v_75))))))"
"((seen_8) seen_7))"
"((letrec-values(((loop_67)"
"(lambda(tail?_17 s_72 prev-depth_3)"
"(begin"
" 'loop"
"(let-values(((depth_3)(add1 prev-depth_3)))"
"(if(if seen_8(> depth_3 32) #f)"
"(let-values()"
"(datum-map-slow tail?_17 s_72(lambda(tail?_1 s_41)(f_4 tail?_1 s_41)) seen_8))"
"(if(null? s_72)"
"(let-values()(f_4 tail?_17 s_72))"
"(if(pair? s_72)"
"(let-values()"
"(f_4"
" tail?_17"
"(cons(loop_67 #f(car s_72) depth_3)(loop_67 #t(cdr s_72) depth_3))))"
"(if(let-values(((or-part_80)(symbol? s_72)))"
"(if or-part_80"
" or-part_80"
"(let-values(((or-part_81)(boolean? s_72)))"
"(if or-part_81 or-part_81(number? s_72)))))"
"(let-values()(f_4 #f s_72))"
"(if(let-values(((or-part_70)(vector? s_72)))"
"(if or-part_70"
" or-part_70"
"(let-values(((or-part_71)(box? s_72)))"
"(if or-part_71"
" or-part_71"
"(let-values(((or-part_82)(prefab-struct-key s_72)))"
"(if or-part_82 or-part_82(hash? s_72)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_17"
" s_72"
"(lambda(tail?_18 s_73)(f_4 tail?_18 s_73))"
" seen_8))"
"(let-values()(f_4 #f s_72))))))))))))"
" loop_67)"
" #f"
" s_71"
" 0))))))"
"(define-values(syntax-tainted?$1)(lambda(s_74)(begin 'syntax-tainted?(tamper-tainted?(syntax-tamper s_74)))))"
"(define-values(syntax-clean?)(lambda(s_6)(begin(tamper-clean?(syntax-tamper s_6)))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_75 insp_0)"
"(begin"
" 'syntax-arm"
"(let-values(((t_17)(syntax-tamper s_75)))"
"(if(tamper-tainted? t_17)"
"(let-values() s_75)"
"(if(if t_17"
"(let-values(((or-part_97)(set-member? t_17 insp_0)))"
"(if or-part_97"
" or-part_97"
"(let-values(((ht_45) t_17))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_45)))"
"((letrec-values(((for-loop_47)"
"(lambda(result_32 i_56)"
"(begin"
" 'for-loop"
"(if i_56"
"(let-values(((already-insp_0)"
"(unsafe-immutable-hash-iterate-key ht_45 i_56)))"
"(let-values(((result_4)"
"(let-values()"
"(let-values(((result_33)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_0"
" insp_0)))))"
"(values result_33)))))"
"(if(if(not((lambda x_29 result_4) already-insp_0))(not #f) #f)"
"(for-loop_47"
" result_4"
"(unsafe-immutable-hash-iterate-next ht_45 i_56))"
" result_4)))"
" result_32)))))"
" for-loop_47)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_45))))))"
" #f)"
"(let-values() s_75)"
"(let-values()"
"(let-values(((stx_1) s_75))"
"(let-values(((the-struct_4) stx_1))"
"(if(syntax?$1 the-struct_4)"
"(let-values(((scope-propagations+tamper7_0)"
"(let-values(((t_18)(set-add(if t_17(remove-inferior t_17 insp_0)(seteq)) insp_0))"
"((p_20)(syntax-scope-propagations+tamper stx_1)))"
"(if(tamper? p_20) t_18((propagation-set-tamper-ref p_20) p_20 t_18)))))"
"(syntax1.1"
"(syntax-content the-struct_4)"
"(syntax-scopes the-struct_4)"
"(syntax-shifted-multi-scopes the-struct_4)"
" scope-propagations+tamper7_0"
"(syntax-mpi-shifts the-struct_4)"
"(syntax-srcloc the-struct_4)"
"(syntax-props the-struct_4)"
"(syntax-inspector the-struct_4)))"
"                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_4)))))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_19 insp_1)"
"(begin"
"(let-values(((ht_46) t_19))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_46)))"
"((letrec-values(((for-loop_48)"
"(lambda(table_54 i_57)"
"(begin"
" 'for-loop"
"(if i_57"
"(let-values(((already-insp_1)(unsafe-immutable-hash-iterate-key ht_46 i_57)))"
"(let-values(((table_15)"
"(let-values(((table_55) table_54))"
"(if(inspector-superior-or-same? insp_1 already-insp_1)"
" table_55"
"(let-values(((table_56) table_55))"
"(let-values(((table_57)"
"(let-values()"
"(let-values(((key_23 val_13)"
"(let-values()"
"(values"
"(let-values() already-insp_1)"
" #t))))"
"(hash-set table_56 key_23 val_13)))))"
"(values table_57)))))))"
"(if(not #f)"
"(for-loop_48 table_15(unsafe-immutable-hash-iterate-next ht_46 i_57))"
" table_15)))"
" table_54)))))"
" for-loop_48)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_46)))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm4_0)"
"(lambda(s3_0 insp1_0 insp2_0)"
"(begin"
" 'syntax-disarm4"
"(let-values(((s_13) s3_0))"
"(let-values(((insp_2)(if insp2_0 insp1_0 #f)))"
"(let-values()"
"(let-values(((t_20)(syntax-tamper s_13)))"
"(if(not(tamper-armed? t_20))"
"(let-values() s_13)"
"(if(not insp_2)"
"(let-values()"
"(let-values(((stx_2) s_13))"
"(let-values(((the-struct_5) stx_2))"
"(if(syntax?$1 the-struct_5)"
"(let-values(((scope-propagations+tamper8_0)"
"(let-values(((t_21) #f)"
"((p_21)(syntax-scope-propagations+tamper stx_2)))"
"(if(tamper? p_21)"
" t_21"
"((propagation-set-tamper-ref p_21) p_21 t_21)))))"
"(syntax1.1"
"(syntax-content the-struct_5)"
"(syntax-scopes the-struct_5)"
"(syntax-shifted-multi-scopes the-struct_5)"
" scope-propagations+tamper8_0"
"(syntax-mpi-shifts the-struct_5)"
"(syntax-srcloc the-struct_5)"
"(syntax-props the-struct_5)"
"(syntax-inspector the-struct_5)))"
"                                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_5)))))"
"(let-values()"
"(let-values(((new-t_1)(remove-inferior t_20 insp_2)))"
"(let-values(((stx_3) s_13))"
"(let-values(((the-struct_6) stx_3))"
"(if(syntax?$1 the-struct_6)"
"(let-values(((scope-propagations+tamper9_0)"
"(let-values(((t_22)(if(not(set-empty? new-t_1)) new-t_1 #f))"
"((p_22)(syntax-scope-propagations+tamper stx_3)))"
"(if(tamper? p_22)"
" t_22"
"((propagation-set-tamper-ref p_22) p_22 t_22)))))"
"(syntax1.1"
"(syntax-content the-struct_6)"
"(syntax-scopes the-struct_6)"
"(syntax-shifted-multi-scopes the-struct_6)"
" scope-propagations+tamper9_0"
"(syntax-mpi-shifts the-struct_6)"
"(syntax-srcloc the-struct_6)"
"(syntax-props the-struct_6)"
"(syntax-inspector the-struct_6)))"
"                                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_6))))))))))))))))"
"(case-lambda"
"((s_21)(begin 'syntax-disarm(syntax-disarm4_0 s_21 #f #f)))"
"((s_76 insp1_1)(syntax-disarm4_0 s_76 insp1_1 #t)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_23 from-s_0)"
"(begin"
" 'syntax-rearm"
"(let-values(((t_23)(syntax-tamper s_23)))"
"(if(tamper-tainted? t_23)"
"(let-values() s_23)"
"(let-values()"
"(let-values(((from-t_0)(syntax-tamper from-s_0)))"
"(if(tamper-clean? from-t_0)"
"(let-values() s_23)"
"(if(tamper-tainted? from-t_0)"
"(let-values()"
"(let-values(((stx_4) s_23))"
"(let-values(((the-struct_7) stx_4))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((scope-propagations+tamper10_0)"
"(let-values(((t_24)(tamper-tainted-for-content(syntax-content s_23)))"
"((p_23)(syntax-scope-propagations+tamper stx_4)))"
"(if(tamper? p_23) t_24((propagation-set-tamper-ref p_23) p_23 t_24)))))"
"(syntax1.1"
"(syntax-content the-struct_7)"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
" scope-propagations+tamper10_0"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
"(syntax-inspector the-struct_7)))"
"                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_7)))))"
"(if(tamper-clean? t_23)"
"(let-values()"
"(let-values(((stx_5) s_23))"
"(let-values(((the-struct_8) stx_5))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((scope-propagations+tamper11_0)"
"(let-values(((t_25) from-t_0)"
"((p_24)(syntax-scope-propagations+tamper stx_5)))"
"(if(tamper? p_24) t_25((propagation-set-tamper-ref p_24) p_24 t_25)))))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
" scope-propagations+tamper11_0"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-srcloc the-struct_8)"
"(syntax-props the-struct_8)"
"(syntax-inspector the-struct_8)))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_8)))))"
"(let-values()"
"(let-values(((stx_6) s_23))"
"(let-values(((the-struct_9) stx_6))"
"(if(syntax?$1 the-struct_9)"
"(let-values(((scope-propagations+tamper12_0)"
"(let-values(((t_26)"
"(let-values(((ht_47) from-t_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_47)))"
"((letrec-values(((for-loop_49)"
"(lambda(t_27 i_58)"
"(begin"
" 'for-loop"
"(if i_58"
"(let-values(((from-i_0)"
"(unsafe-immutable-hash-iterate-key"
" ht_47"
" i_58)))"
"(let-values(((t_28)"
"(let-values(((t_29)"
" t_27))"
"(let-values(((t_30)"
"(let-values()"
"(if(set-member?"
" t_29"
" from-i_0)"
"(let-values()"
" t_29)"
"(if(any-superior?"
" t_29"
" from-i_0)"
"(let-values()"
" t_29)"
"(let-values()"
"(set-add"
"(remove-inferior"
" t_29"
" from-i_0)"
" from-i_0)))))))"
"(values"
" t_30)))))"
"(if(not #f)"
"(for-loop_49"
" t_28"
"(unsafe-immutable-hash-iterate-next"
" ht_47"
" i_58))"
" t_28)))"
" t_27)))))"
" for-loop_49)"
" t_23"
"(unsafe-immutable-hash-iterate-first ht_47)))))"
"((p_25)(syntax-scope-propagations+tamper stx_6)))"
"(if(tamper? p_25) t_26((propagation-set-tamper-ref p_25) p_25 t_26)))))"
"(syntax1.1"
"(syntax-content the-struct_9)"
"(syntax-scopes the-struct_9)"
"(syntax-shifted-multi-scopes the-struct_9)"
" scope-propagations+tamper12_0"
"(syntax-mpi-shifts the-struct_9)"
"(syntax-srcloc the-struct_9)"
"(syntax-props the-struct_9)"
"(syntax-inspector the-struct_9)))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_9)))))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_77)"
"(begin"
" 'syntax-taint"
"(if(tamper-tainted?(syntax-tamper s_77))"
" s_77"
"(let-values(((stx_7) s_77))"
"(let-values(((the-struct_10) stx_7))"
"(if(syntax?$1 the-struct_10)"
"(let-values(((scope-propagations+tamper13_0)"
"(let-values(((t_31)(tamper-tainted-for-content(syntax-content s_77)))"
"((p_26)(syntax-scope-propagations+tamper stx_7)))"
"(if(tamper? p_26) t_31((propagation-set-tamper-ref p_26) p_26 t_31)))))"
"(syntax1.1"
"(syntax-content the-struct_10)"
"(syntax-scopes the-struct_10)"
"(syntax-shifted-multi-scopes the-struct_10)"
" scope-propagations+tamper13_0"
"(syntax-mpi-shifts the-struct_10)"
"(syntax-srcloc the-struct_10)"
"(syntax-props the-struct_10)"
"(syntax-inspector the-struct_10)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_10))))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_5 from-i_1)"
"(begin"
"(let-values(((ht_48) t_5))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_48)))"
"((letrec-values(((for-loop_50)"
"(lambda(result_34 i_59)"
"(begin"
" 'for-loop"
"(if i_59"
"(let-values(((i_60)(unsafe-immutable-hash-iterate-key ht_48 i_59)))"
"(let-values(((result_7)"
"(let-values()"
"(let-values(((result_35)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_60 from-i_1)))))"
"(values result_35)))))"
"(if(if(not((lambda x_30 result_7) i_60))(not #f) #f)"
"(for-loop_50 result_7(unsafe-immutable-hash-iterate-next ht_48 i_59))"
" result_7)))"
" result_34)))))"
" for-loop_50)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_48)))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_0 i_61)"
"(begin"
"(let-values(((or-part_98)(eq? sup-i_0 i_61)))(if or-part_98 or-part_98(inspector-superior? sup-i_0 i_61))))))"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_0)(begin(if(fallback? smss_0)(car(fallback-search-list smss_0)) smss_0))))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_1)"
"(begin"
"(let-values(((l_44)(cdr(fallback-search-list smss_1))))"
"(if(null?(cdr l_44))(car l_44)(fallback1.1 l_44))))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_2 smss/maybe-fallback_0)"
"(begin"
"(fallback1.1"
"(cons"
" smss_2"
"(if(fallback? smss/maybe-fallback_0)"
"(fallback-search-list smss/maybe-fallback_0)"
"(list smss/maybe-fallback_0)))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_3 f_26)"
"(begin"
"(if(fallback? smss_3)"
"(let-values(((l_45)(fallback-search-list smss_3)))(fallback1.1(cons(f_26(car l_45))(cdr l_45))))"
"(f_26 smss_3)))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_4 f_19)"
"(begin"
"(if(fallback? smss_4)"
"(fallback1.1"
"(reverse$1"
"(let-values(((lst_38)(fallback-search-list smss_4)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_38)))"
"((letrec-values(((for-loop_51)"
"(lambda(fold-var_26 lst_39)"
"(begin"
" 'for-loop"
"(if(pair? lst_39)"
"(let-values(((smss_5)(unsafe-car lst_39))((rest_16)(unsafe-cdr lst_39)))"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28) fold-var_26))"
"(let-values(((fold-var_29)"
"(let-values()"
"(cons"
"(let-values()(f_19 smss_5))"
" fold-var_28))))"
"(values fold-var_29)))))"
"(if(not #f)(for-loop_51 fold-var_27 rest_16) fold-var_27)))"
" fold-var_26)))))"
" for-loop_51)"
" null"
" lst_38)))))"
"(f_19 smss_4)))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_6)(begin(if(fallback? smss_6)(fallback-search-list smss_6)(list smss_6)))))"
"(define-values(cache)(box(make-weak-box #f)))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_8)"
"(begin"
"(let-values(((c_13)(weak-box-value(unbox* cache))))"
"(if c_13(let-values()(hash-remove! c_13 sym_8))(void)))))"
"(()(let-values(((c_14)(weak-box-value(unbox* cache))))(if c_14(let-values()(hash-clear! c_14))(void))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scs entry-smss entry-phase entry-binding)"
"(let-values(((struct:_16 make-_16 ?_16 -ref_16 -set!_16)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'entry"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'entry)))))"
"(values"
" struct:_16"
" make-_16"
" ?_16"
"(make-struct-field-accessor -ref_16 0 'scs)"
"(make-struct-field-accessor -ref_16 1 'smss)"
"(make-struct-field-accessor -ref_16 2 'phase)"
"(make-struct-field-accessor -ref_16 3 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_9 phase_0 scs_3 smss_7)"
"(begin"
"(let-values(((c_15)(weak-box-value(unbox* cache))))"
"(if c_15"
"(let-values(((v_76)(hash-ref c_15 sym_9 #f)))"
"(if v_76"
"(if(eqv? phase_0(entry-phase v_76))"
"(if(set=? scs_3(entry-scs v_76))(if(set=? smss_7(entry-smss v_76))(entry-binding v_76) #f) #f)"
" #f)"
" #f))"
" #f)))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_10 phase_1 scs_4 smss_8 b_23)"
"(begin"
"(let-values(((wb_0)(unbox* cache)))"
"(let-values(((c_16)(weak-box-value wb_0)))"
"(if(not c_16)"
"(let-values()"
"(begin"
"(box-cas! cache wb_0(make-weak-box(make-hasheq)))"
"(resolve-cache-set! sym_10 phase_1 scs_4 smss_8 b_23)))"
"(let-values()(hash-set! c_16 sym_10(entry1.1 scs_4 smss_8 phase_1 b_23)))))))))"
"(define-values(NUM-CACHE-SLOTS) 8)"
"(define-values(cached-sets)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-sets-pos) 0)"
"(define-values(cached-hashes)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-hashes-pos) 0)"
"(define-values"
"(cache-or-reuse-set)"
"(lambda(s_78)"
"(begin"
"(let-values(((vec_16)"
"(let-values(((or-part_99)(weak-box-value cached-sets)))"
"(if or-part_99"
" or-part_99"
"(let-values(((vec_17)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-sets(make-weak-box vec_17)) vec_17))))))"
"(let-values(((or-part_100)"
"(let-values(((vec_18 len_9)"
"(let-values(((vec_19) vec_16))"
"(begin(check-vector vec_19)(values vec_19(unsafe-vector-length vec_19))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_52)"
"(lambda(result_36 pos_7)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_7 len_9)"
"(let-values(((s2_5)(unsafe-vector-ref vec_18 pos_7)))"
"(let-values(((result_37)"
"(let-values()"
"(let-values(((result_38)"
"(let-values()"
"(let-values()"
"(if s2_5"
"(if(set=? s_78 s2_5) s2_5 #f)"
" #f)))))"
"(values result_38)))))"
"(if(if(not((lambda x_31 result_37) s2_5))(not #f) #f)"
"(for-loop_52 result_37(unsafe-fx+ 1 pos_7))"
" result_37)))"
" result_36)))))"
" for-loop_52)"
" #f"
" 0)))))"
"(if or-part_100"
" or-part_100"
"(begin"
"(vector-set! vec_16 cached-sets-pos s_78)"
"(set! cached-sets-pos(modulo(add1 cached-sets-pos) NUM-CACHE-SLOTS))"
" s_78)))))))"
"(define-values"
"(cache-or-reuse-hash)"
"(lambda(s_79)"
"(begin"
"(let-values(((vec_20)"
"(let-values(((or-part_101)(weak-box-value cached-hashes)))"
"(if or-part_101"
" or-part_101"
"(let-values(((vec_21)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-hashes(make-weak-box vec_21)) vec_21))))))"
"(let-values(((or-part_102)"
"(let-values(((vec_22 len_10)"
"(let-values(((vec_23) vec_20))"
"(begin(check-vector vec_23)(values vec_23(unsafe-vector-length vec_23))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_53)"
"(lambda(result_39 pos_8)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_8 len_10)"
"(let-values(((s2_6)(unsafe-vector-ref vec_22 pos_8)))"
"(let-values(((result_40)"
"(let-values()"
"(let-values(((result_41)"
"(let-values()"
"(let-values()"
"(if s2_6"
"(if(equal? s_79 s2_6) s2_6 #f)"
" #f)))))"
"(values result_41)))))"
"(if(if(not((lambda x_32 result_40) s2_6))(not #f) #f)"
"(for-loop_53 result_40(unsafe-fx+ 1 pos_8))"
" result_40)))"
" result_39)))))"
" for-loop_53)"
" #f"
" 0)))))"
"(if or-part_102"
" or-part_102"
"(begin"
"(vector-set! vec_20 cached-hashes-pos s_79)"
"(set! cached-hashes-pos(modulo(add1 cached-hashes-pos) NUM-CACHE-SLOTS))"
" s_79)))))))"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_19 make-_19 ?_19 -ref_19 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_75 reachable-scopes_4 reach_4 register-trigger_2)"
"(binding-table-register-reachable"
"(scope-binding-table s_75)"
" reachable-scopes_4"
" reach_4"
" register-trigger_2)))"
"(cons prop:reach-scopes(lambda(s_80 reach_5)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_81 ser-push!_4 state_13)"
"(if(binding-table-empty?(scope-binding-table s_81))"
"(let-values()(ser-push!_4 'tag #f))"
"(let-values()"
"(begin"
"(ser-push!_4 'tag '#:scope-fill!)"
"(ser-push!_4(binding-table-prune-to-reachable(scope-binding-table s_81) state_13)))))))"
"(cons"
" prop:serialize"
"(lambda(s_82 ser-push!_5 state_14)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_14) s_82)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_82 top-level-common-scope)"
"(let-values()(ser-push!_5 'tag '#:scope))"
"(let-values()"
"(begin(ser-push!_5 'tag '#:scope+kind)(ser-push!_5(scope-kind s_82))))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_1 port_6 mode_6)"
"(begin"
"                           (write-string \"#<scope:\" port_6)"
"(display(scope-id sc_1) port_6)"
"                           (write-string \":\" port_6)"
"(display(scope-kind sc_1) port_6)"
"                           (write-string \">\" port_6)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))))"
"(values"
" struct:_19"
" make-_19"
" ?_19"
"(make-struct-field-accessor -ref_19 0 'id)"
"(make-struct-field-accessor -ref_19 1 'kind)"
"(make-struct-field-accessor -ref_19 2 'binding-table)"
"(make-struct-field-mutator -set!_19 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(()(begin top-level-common-scope))"
"((kind_0)(scope1.1(new-deserialize-scope-id!) kind_0 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_83 bt_5)(begin(set-scope-binding-table! s_83 bt_5))))"
"(define-values"
"(struct:multi-scope"
" multi-scope2.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_20 make-_20 ?_20 -ref_20 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons prop:reach-scopes(lambda(ms_0 reach_6)(reach_6(multi-scope-scopes ms_0))))"
"(cons"
" prop:serialize"
"(lambda(ms_1 ser-push!_6 state_6)"
"(begin"
"(ser-push!_6 'tag '#:multi-scope)"
"(ser-push!_6(multi-scope-name ms_1))"
"(ser-push!_6(multi-scope-scopes ms_1))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))))"
"(values"
" struct:_20"
" make-_20"
" ?_20"
"(make-struct-field-accessor -ref_20 0 'id)"
"(make-struct-field-accessor -ref_20 1 'name)"
"(make-struct-field-accessor -ref_20 2 'scopes)"
"(make-struct-field-accessor -ref_20 3 'shifted)"
"(make-struct-field-accessor -ref_20 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_15 scopes_8)"
"(begin(multi-scope2.1(new-deserialize-scope-id!) name_15 scopes_8(box(hasheqv))(box(hash))))))"
"(define-values"
"(struct:representative-scope"
" representative-scope3.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_21 make-_21 ?_21 -ref_21 -set!_21)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons prop:reach-scopes(lambda(s_28 reach_7)(reach_7(representative-scope-owner s_28))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_30 ser-push!_7 state_15)"
"(begin"
"(ser-push!_7 'tag '#:representative-scope-fill!)"
"(ser-push!_7(binding-table-prune-to-reachable(scope-binding-table s_30) state_15))"
"(ser-push!_7(representative-scope-owner s_30)))))"
"(cons"
" prop:serialize"
"(lambda(s_84 ser-push!_8 state_16)"
"(begin"
"(ser-push!_8 'tag '#:representative-scope)"
"(ser-push!_8(scope-kind s_84))"
"(ser-push!_8(representative-scope-phase s_84)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_2 port_7 mode_7)"
"(begin"
"                           (write-string \"#<scope:\" port_7)"
"(display(scope-id sc_2) port_7)"
"(if(representative-scope-owner sc_2)"
"(let-values()"
"(begin"
"                                 (write-string \"=\" port_7)"
"(display(multi-scope-id(representative-scope-owner sc_2)) port_7)))"
"(void))"
"                           (write-string \"@\" port_7)"
"(display(representative-scope-phase sc_2) port_7)"
"                           (write-string \">\" port_7)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))))"
"(values"
" struct:_21"
" make-_21"
" ?_21"
"(make-struct-field-accessor -ref_21 0 'owner)"
"(make-struct-field-accessor -ref_21 1 'phase)"
"(make-struct-field-mutator -set!_21 0 'owner)"
"(make-struct-field-mutator -set!_21 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_1 phase_2)"
"(begin(let-values(((v_53)(representative-scope3.1(new-deserialize-scope-id!) kind_1 #f #f phase_2))) v_53))))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_85 bt_6 owner_0)"
"(begin(begin(deserialize-scope-fill! s_85 bt_6)(set-representative-scope-owner! s_85 owner_0)))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope4.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_22 make-_22 ?_22 -ref_22 -set!_22)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:reach-scopes"
"(lambda(sms_3 reach_8)(reach_8(shifted-multi-scope-multi-scope sms_3))))"
"(cons"
" prop:serialize"
"(lambda(sms_4 ser-push!_9 state_17)"
"(begin"
"(ser-push!_9 'tag '#:shifted-multi-scope)"
"(ser-push!_9(shifted-multi-scope-phase sms_4))"
"(ser-push!_9(shifted-multi-scope-multi-scope sms_4)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_5 port_8 mode_8)"
"(begin"
"                           (write-string \"#<scope:\" port_8)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_5)) port_8)"
"                           (write-string \"@\" port_8)"
"(display(shifted-multi-scope-phase sms_5) port_8)"
"                           (write-string \">\" port_8)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))))"
"(values"
" struct:_22"
" make-_22"
" ?_22"
"(make-struct-field-accessor -ref_22 0 'phase)"
"(make-struct-field-accessor -ref_22 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_3 multi-scope_0)(begin(intern-shifted-multi-scope phase_3 multi-scope_0))))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_4 multi-scope_1)"
"(begin"
"(letrec-values(((transaction-loop_0)"
"(lambda(boxed-table_0 key_24 make_0)"
"(begin"
" 'transaction-loop"
"(let-values(((or-part_60)(hash-ref(unbox boxed-table_0) phase_4 #f)))"
"(if or-part_60"
" or-part_60"
"(let-values(((val_14)(make_0)))"
"(let-values(((current_0)(unbox boxed-table_0)))"
"(let-values(((next_3)(hash-set current_0 key_24 val_14)))"
"(if(box-cas! boxed-table_0 current_0 next_3)"
" val_14"
"(transaction-loop_0 boxed-table_0 key_24 make_0)))))))))))"
"(if(phase? phase_4)"
"(let-values()"
"(let-values(((or-part_103)(hash-ref(unbox(multi-scope-shifted multi-scope_1)) phase_4 #f)))"
"(if or-part_103"
" or-part_103"
"(transaction-loop_0"
"(multi-scope-shifted multi-scope_1)"
" phase_4"
"(lambda()(shifted-multi-scope4.1 phase_4 multi-scope_1))))))"
"(let-values()"
"(let-values(((or-part_104)(hash-ref(unbox(multi-scope-label-shifted multi-scope_1)) phase_4 #f)))"
"(if or-part_104"
" or-part_104"
"(transaction-loop_0"
"(multi-scope-label-shifted multi-scope_1)"
" phase_4"
"(lambda()(shifted-multi-scope4.1 phase_4 multi-scope_1)))))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase5.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_23 make-_23 ?_23 -ref_23 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-to-label-phase"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'shifted-to-label-phase)))))"
"(values struct:_23 make-_23 ?_23(make-struct-field-accessor -ref_23 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(begin(set! id-counter(add1 id-counter)) id-counter))))"
"(define-values(new-deserialize-scope-id!)(lambda()(begin(-(new-scope-id!)))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_2)(begin(scope1.1(new-scope-id!) kind_2 empty-binding-table))))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_0)"
"(lambda(name6_0 name7_0)"
"(begin"
" 'new-multi-scope8"
"(let-values(((name_16)(if name7_0 name6_0 #f)))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope2.1(new-scope-id!) name_16(make-hasheqv)(box(hasheqv))(box(hash))))))))))"
"(case-lambda(()(begin(new-multi-scope8_0 #f #f)))((name6_1)(new-multi-scope8_0 name6_1 #t)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_2 phase_5)"
"(begin"
"(let-values(((or-part_92)(hash-ref(multi-scope-scopes ms_2) phase_5 #f)))"
"(if or-part_92"
" or-part_92"
"(let-values(((s_86)(representative-scope3.1(new-scope-id!) 'module empty-binding-table ms_2 phase_5)))"
"(begin(hash-set!(multi-scope-scopes ms_2) phase_5 s_86) s_86)))))))"
"(define-values(scope>?)(lambda(sc1_0 sc2_0)(begin(>(scope-id sc1_0)(scope-id sc2_0)))))"
"(define-values(scope<?)(lambda(sc1_1 sc2_1)(begin(<(scope-id sc1_1)(scope-id sc2_1)))))"
"(define-values"
"(shifted-multi-scope<?)"
"(lambda(sms1_0 sms2_0)"
"(begin"
"(let-values(((ms1_0)(shifted-multi-scope-multi-scope sms1_0)))"
"(let-values(((ms2_0)(shifted-multi-scope-multi-scope sms2_0)))"
"(if(eq? ms1_0 ms2_0)"
"(let-values(((p1_0)(shifted-multi-scope-phase sms1_0))((p2_0)(shifted-multi-scope-phase sms2_0)))"
"(if(shifted-to-label-phase? p1_0)"
"(let-values()"
"(if(shifted-to-label-phase? p2_0)"
"(let-values()(phase<?(shifted-to-label-phase-from p1_0)(shifted-to-label-phase-from p2_0)))"
"(let-values() #f)))"
"(if(shifted-to-label-phase? p2_0)(let-values() #t)(let-values()(phase<? p1_0 p2_0)))))"
"(<(multi-scope-id ms1_0)(multi-scope-id ms2_0))))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_87)"
"(begin"
"(let-values(((prop_3)(syntax-scope-propagations+tamper s_87)))"
"(if(let-values(((or-part_105)(propagation? prop_3)))"
"(if or-part_105 or-part_105(tamper-needs-propagate? prop_3)))"
"(let-values(((new-content_0)"
"(let-values(((s_88)(syntax-content s_87))"
"((f_27)(lambda(tail?_19 x_33)(begin 'f x_33)))"
"((s->_2)"
"(lambda(sub-s_1)"
"(begin"
" 's->"
"(if(propagation? prop_3)"
"(let-values(((the-struct_11) sub-s_1))"
"(if(syntax?$1 the-struct_11)"
"(let-values(((scopes41_0)"
"(propagation-apply prop_3(syntax-scopes sub-s_1) s_87))"
"((shifted-multi-scopes42_0)"
"(propagation-apply-shifted"
" prop_3"
"(syntax-shifted-multi-scopes sub-s_1)"
" s_87))"
"((mpi-shifts43_0)"
"(propagation-apply-mpi-shifts"
" prop_3"
"(syntax-mpi-shifts sub-s_1)"
" s_87))"
"((inspector44_0)"
"(propagation-apply-inspector"
" prop_3"
"(syntax-inspector sub-s_1)))"
"((scope-propagations+tamper45_0)"
"(propagation-merge"
"(syntax-content sub-s_1)"
" prop_3"
"(syntax-scope-propagations+tamper sub-s_1)"
"(syntax-scopes sub-s_1)"
"(syntax-shifted-multi-scopes sub-s_1)"
"(syntax-mpi-shifts sub-s_1))))"
"(syntax1.1"
"(syntax-content the-struct_11)"
" scopes41_0"
" shifted-multi-scopes42_0"
" scope-propagations+tamper45_0"
" mpi-shifts43_0"
"(syntax-srcloc the-struct_11)"
"(syntax-props the-struct_11)"
" inspector44_0))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_11)))"
"(let-values(((the-struct_12) sub-s_1))"
"(if(syntax?$1 the-struct_12)"
"(let-values(((scope-propagations+tamper46_0)"
"(tamper-tainted-for-content(syntax-content sub-s_1))))"
"(syntax1.1"
"(syntax-content the-struct_12)"
"(syntax-scopes the-struct_12)"
"(syntax-shifted-multi-scopes the-struct_12)"
" scope-propagations+tamper46_0"
"(syntax-mpi-shifts the-struct_12)"
"(syntax-srcloc the-struct_12)"
"(syntax-props the-struct_12)"
"(syntax-inspector the-struct_12)))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_12)))))))"
"((seen_9) #f))"
"(let-values(((s_89) s_88)"
"((f_28)"
"(lambda(tail?_20 v_77)"
"(begin"
" 'f"
"(if(syntax?$1 v_77)"
"(let-values()(s->_2 v_77))"
"(let-values()(f_27 tail?_20 v_77))))))"
"((seen_10) seen_9))"
"((letrec-values(((loop_68)"
"(lambda(tail?_21 s_90 prev-depth_4)"
"(begin"
" 'loop"
"(let-values(((depth_4)(add1 prev-depth_4)))"
"(if(if seen_10(> depth_4 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_21"
" s_90"
"(lambda(tail?_22 s_91)(f_28 tail?_22 s_91))"
" seen_10))"
"(if(null? s_90)"
"(let-values()(f_28 tail?_21 s_90))"
"(if(pair? s_90)"
"(let-values()"
"(f_28"
" tail?_21"
"(cons"
"(loop_68 #f(car s_90) depth_4)"
"(loop_68 #t(cdr s_90) depth_4))))"
"(if(let-values(((or-part_106)(symbol? s_90)))"
"(if or-part_106"
" or-part_106"
"(let-values(((or-part_61)(boolean? s_90)))"
"(if or-part_61 or-part_61(number? s_90)))))"
"(let-values()(f_28 #f s_90))"
"(if(let-values(((or-part_107)(vector? s_90)))"
"(if or-part_107"
" or-part_107"
"(let-values(((or-part_62)(box? s_90)))"
"(if or-part_62"
" or-part_62"
"(let-values(((or-part_63)"
"(prefab-struct-key s_90)))"
"(if or-part_63 or-part_63(hash? s_90)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_21"
" s_90"
"(lambda(tail?_23 s_92)(f_28 tail?_23 s_92))"
" seen_10))"
"(let-values()(f_28 #f s_90))))))))))))"
" loop_68)"
" #f"
" s_89"
" 0)))))"
"(begin"
"(set-syntax-content! s_87 new-content_0)"
"(set-syntax-scope-propagations+tamper!"
" s_87"
"(tamper-propagated(if(propagation? prop_3)(propagation-tamper prop_3) prop_3)))"
" new-content_0))"
"(syntax-content s_87))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_93)"
"(begin"
" 'syntax-e"
"(let-values(((content_4)(syntax-e/no-taint s_93)))"
"(if(not(tamper-armed?(syntax-tamper s_93)))"
"(let-values() content_4)"
"(if(datum-has-elements? content_4)(let-values()(taint-content content_4))(let-values() content_4)))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_3)"
"(begin"
"(if(representative-scope? sc_3)"
"(intern-shifted-multi-scope(representative-scope-phase sc_3)(representative-scope-owner sc_3))"
" sc_3))))"
"(define-values"
"(add-scope)"
"(lambda(s_94 sc_4)"
"(begin"
"(let-values(((s_95) s_94)((sc_5)(generalize-scope sc_4))((op_0) set-add)((prop-op_0) propagation-add))"
"(if(shifted-multi-scope? sc_5)"
"(let-values(((the-struct_13) s_95))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((shifted-multi-scopes47_0)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_95)"
"(lambda(smss_9)(op_0(fallback-first smss_9) sc_5))))"
"((scope-propagations+tamper48_0)"
"(if(datum-has-elements?(syntax-content s_95))"
"(prop-op_0"
"(syntax-scope-propagations+tamper s_95)"
" sc_5"
"(syntax-scopes s_95)"
"(syntax-shifted-multi-scopes s_95)"
"(syntax-mpi-shifts s_95))"
"(syntax-scope-propagations+tamper s_95))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
" shifted-multi-scopes47_0"
" scope-propagations+tamper48_0"
"(syntax-mpi-shifts the-struct_13)"
"(syntax-srcloc the-struct_13)"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13)))"
"(let-values(((the-struct_14) s_95))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((scopes49_0)(op_0(syntax-scopes s_95) sc_5))"
"((scope-propagations+tamper50_0)"
"(if(datum-has-elements?(syntax-content s_95))"
"(prop-op_0"
"(syntax-scope-propagations+tamper s_95)"
" sc_5"
"(syntax-scopes s_95)"
"(syntax-shifted-multi-scopes s_95)"
"(syntax-mpi-shifts s_95))"
"(syntax-scope-propagations+tamper s_95))))"
"(syntax1.1"
"(syntax-content the-struct_14)"
" scopes49_0"
"(syntax-shifted-multi-scopes the-struct_14)"
" scope-propagations+tamper50_0"
"(syntax-mpi-shifts the-struct_14)"
"(syntax-srcloc the-struct_14)"
"(syntax-props the-struct_14)"
"(syntax-inspector the-struct_14)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_14))))))))"
"(define-values"
"(add-scopes)"
"(lambda(s_96 scs_5)"
"(begin"
"(let-values(((lst_40) scs_5))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_40)))"
"((letrec-values(((for-loop_54)"
"(lambda(s_97 lst_41)"
"(begin"
" 'for-loop"
"(if(pair? lst_41)"
"(let-values(((sc_6)(unsafe-car lst_41))((rest_17)(unsafe-cdr lst_41)))"
"(let-values(((s_98)"
"(let-values(((s_99) s_97))"
"(let-values(((s_100)(let-values()(add-scope s_99 sc_6))))"
"(values s_100)))))"
"(if(not #f)(for-loop_54 s_98 rest_17) s_98)))"
" s_97)))))"
" for-loop_54)"
" s_96"
" lst_40))))))"
"(define-values"
"(remove-scope)"
"(lambda(s_101 sc_7)"
"(begin"
"(let-values(((s_102) s_101)"
"((sc_8)(generalize-scope sc_7))"
"((op_1) set-remove)"
"((prop-op_1) propagation-remove))"
"(if(shifted-multi-scope? sc_8)"
"(let-values(((the-struct_15) s_102))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((shifted-multi-scopes51_0)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_102)"
"(lambda(smss_10)(op_1(fallback-first smss_10) sc_8))))"
"((scope-propagations+tamper52_0)"
"(if(datum-has-elements?(syntax-content s_102))"
"(prop-op_1"
"(syntax-scope-propagations+tamper s_102)"
" sc_8"
"(syntax-scopes s_102)"
"(syntax-shifted-multi-scopes s_102)"
"(syntax-mpi-shifts s_102))"
"(syntax-scope-propagations+tamper s_102))))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
" shifted-multi-scopes51_0"
" scope-propagations+tamper52_0"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-srcloc the-struct_15)"
"(syntax-props the-struct_15)"
"(syntax-inspector the-struct_15)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_15)))"
"(let-values(((the-struct_16) s_102))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((scopes53_0)(op_1(syntax-scopes s_102) sc_8))"
"((scope-propagations+tamper54_0)"
"(if(datum-has-elements?(syntax-content s_102))"
"(prop-op_1"
"(syntax-scope-propagations+tamper s_102)"
" sc_8"
"(syntax-scopes s_102)"
"(syntax-shifted-multi-scopes s_102)"
"(syntax-mpi-shifts s_102))"
"(syntax-scope-propagations+tamper s_102))))"
"(syntax1.1"
"(syntax-content the-struct_16)"
" scopes53_0"
"(syntax-shifted-multi-scopes the-struct_16)"
" scope-propagations+tamper54_0"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-srcloc the-struct_16)"
"(syntax-props the-struct_16)"
"(syntax-inspector the-struct_16)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_16))))))))"
"(define-values"
"(remove-scopes)"
"(lambda(s_103 scs_6)"
"(begin"
"(let-values(((lst_42) scs_6))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_42)))"
"((letrec-values(((for-loop_55)"
"(lambda(s_104 lst_43)"
"(begin"
" 'for-loop"
"(if(pair? lst_43)"
"(let-values(((sc_9)(unsafe-car lst_43))((rest_18)(unsafe-cdr lst_43)))"
"(let-values(((s_105)"
"(let-values(((s_106) s_104))"
"(let-values(((s_107)(let-values()(remove-scope s_106 sc_9))))"
"(values s_107)))))"
"(if(not #f)(for-loop_55 s_105 rest_18) s_105)))"
" s_104)))))"
" for-loop_55)"
" s_103"
" lst_42))))))"
"(define-values"
"(set-flip)"
"(lambda(s_108 e_15)(begin(if(set-member? s_108 e_15)(set-remove s_108 e_15)(set-add s_108 e_15)))))"
"(define-values"
"(flip-scope)"
"(lambda(s_109 sc_10)"
"(begin"
"(let-values(((s_110) s_109)((sc_11)(generalize-scope sc_10))((op_2) set-flip)((prop-op_2) propagation-flip))"
"(if(shifted-multi-scope? sc_11)"
"(let-values(((the-struct_17) s_110))"
"(if(syntax?$1 the-struct_17)"
"(let-values(((shifted-multi-scopes55_0)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_110)"
"(lambda(smss_11)(op_2(fallback-first smss_11) sc_11))))"
"((scope-propagations+tamper56_0)"
"(if(datum-has-elements?(syntax-content s_110))"
"(prop-op_2"
"(syntax-scope-propagations+tamper s_110)"
" sc_11"
"(syntax-scopes s_110)"
"(syntax-shifted-multi-scopes s_110)"
"(syntax-mpi-shifts s_110))"
"(syntax-scope-propagations+tamper s_110))))"
"(syntax1.1"
"(syntax-content the-struct_17)"
"(syntax-scopes the-struct_17)"
" shifted-multi-scopes55_0"
" scope-propagations+tamper56_0"
"(syntax-mpi-shifts the-struct_17)"
"(syntax-srcloc the-struct_17)"
"(syntax-props the-struct_17)"
"(syntax-inspector the-struct_17)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_17)))"
"(let-values(((the-struct_18) s_110))"
"(if(syntax?$1 the-struct_18)"
"(let-values(((scopes57_0)(op_2(syntax-scopes s_110) sc_11))"
"((scope-propagations+tamper58_0)"
"(if(datum-has-elements?(syntax-content s_110))"
"(prop-op_2"
"(syntax-scope-propagations+tamper s_110)"
" sc_11"
"(syntax-scopes s_110)"
"(syntax-shifted-multi-scopes s_110)"
"(syntax-mpi-shifts s_110))"
"(syntax-scope-propagations+tamper s_110))))"
"(syntax1.1"
"(syntax-content the-struct_18)"
" scopes57_0"
"(syntax-shifted-multi-scopes the-struct_18)"
" scope-propagations+tamper58_0"
"(syntax-mpi-shifts the-struct_18)"
"(syntax-srcloc the-struct_18)"
"(syntax-props the-struct_18)"
"(syntax-inspector the-struct_18)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_18))))))))"
"(define-values"
"(flip-scopes)"
"(lambda(s_111 scs_7)"
"(begin"
"(let-values(((lst_44) scs_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_44)))"
"((letrec-values(((for-loop_56)"
"(lambda(s_112 lst_45)"
"(begin"
" 'for-loop"
"(if(pair? lst_45)"
"(let-values(((sc_12)(unsafe-car lst_45))((rest_19)(unsafe-cdr lst_45)))"
"(let-values(((s_113)"
"(let-values(((s_114) s_112))"
"(let-values(((s_115)(let-values()(flip-scope s_114 sc_12))))"
"(values s_115)))))"
"(if(not #f)(for-loop_56 s_113 rest_19) s_113)))"
" s_112)))))"
" for-loop_56)"
" s_111"
" lst_44))))))"
"(define-values"
"(push-scope)"
"(lambda(s_116 sms_6)"
"(begin"
"(let-values(((smss/maybe-fallbacks59_0) #f))"
"(let-values(((prev-result_0) #f))"
"(let-values(((push_0)"
"(lambda(smss/maybe-fallbacks_0)"
"(begin"
" 'push"
"(if(eq? smss/maybe-fallbacks59_0 smss/maybe-fallbacks_0)"
"(let-values() prev-result_0)"
"(let-values()"
"(let-values(((r_22)"
"(let-values()"
"(let-values(((smss_12)(fallback-first smss/maybe-fallbacks_0)))"
"(if(set-empty? smss_12)"
"(let-values()(set-add smss_12 sms_6))"
"(if(set-member? smss_12 sms_6)"
"(let-values() smss/maybe-fallbacks_0)"
"(let-values()"
"(fallback-push"
"(set-add smss_12 sms_6)"
" smss/maybe-fallbacks_0))))))))"
"(begin"
"(set! smss/maybe-fallbacks59_0 smss/maybe-fallbacks_0)"
"(set! prev-result_0 r_22)"
" r_22))))))))"
"(let-values(((s_117) s_116)"
"((f_29)(lambda(tail?_24 x_34)(begin 'f x_34)))"
"((d->s_1)"
"(lambda(s_118 d_3)"
"(begin"
" 'd->s"
"(let-values(((the-struct_19) s_118))"
"(if(syntax?$1 the-struct_19)"
"(let-values(((content60_0) d_3)"
"((shifted-multi-scopes61_0)"
"(push_0(syntax-shifted-multi-scopes s_118))))"
"(syntax1.1"
" content60_0"
"(syntax-scopes the-struct_19)"
" shifted-multi-scopes61_0"
"(syntax-scope-propagations+tamper the-struct_19)"
"(syntax-mpi-shifts the-struct_19)"
"(syntax-srcloc the-struct_19)"
"(syntax-props the-struct_19)"
"(syntax-inspector the-struct_19)))"
"                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_19))))))"
"((s-e_1) syntax-e/no-taint)"
"((seen_11) #f))"
"((letrec-values(((loop_69)"
"(lambda(s_119)"
"(begin"
" 'loop"
"(let-values(((s_120) s_119)"
"((f_30)"
"(lambda(tail?_25 v_78)"
"(begin"
" 'f"
"(if(syntax?$1 v_78)"
"(let-values()(d->s_1 v_78(loop_69(s-e_1 v_78))))"
"(let-values()(f_29 tail?_25 v_78))))))"
"((seen_12) seen_11))"
"((letrec-values(((loop_70)"
"(lambda(tail?_26 s_121 prev-depth_5)"
"(begin"
" 'loop"
"(let-values(((depth_5)(add1 prev-depth_5)))"
"(if(if seen_12(> depth_5 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_26"
" s_121"
"(lambda(tail?_27 s_122)(f_30 tail?_27 s_122))"
" seen_12))"
"(if(null? s_121)"
"(let-values()(f_30 tail?_26 s_121))"
"(if(pair? s_121)"
"(let-values()"
"(f_30"
" tail?_26"
"(cons"
"(loop_70 #f(car s_121) depth_5)"
"(loop_70 #t(cdr s_121) depth_5))))"
"(if(let-values(((or-part_108)(symbol? s_121)))"
"(if or-part_108"
" or-part_108"
"(let-values(((or-part_109)"
"(boolean? s_121)))"
"(if or-part_109"
" or-part_109"
"(number? s_121)))))"
"(let-values()(f_30 #f s_121))"
"(if(let-values(((or-part_110)(vector? s_121)))"
"(if or-part_110"
" or-part_110"
"(let-values(((or-part_111)(box? s_121)))"
"(if or-part_111"
" or-part_111"
"(let-values(((or-part_112)"
"(prefab-struct-key"
" s_121)))"
"(if or-part_112"
" or-part_112"
"(hash? s_121)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_26"
" s_121"
"(lambda(tail?_28 s_123)"
"(f_30 tail?_28 s_123))"
" seen_12))"
"(let-values()(f_30 #f s_121))))))))))))"
" loop_70)"
" #f"
" s_120"
" 0))))))"
" loop_69)"
" s_117))))))))"
"(define-values"
"(struct:propagation"
" propagation14.1"
" propagation?"
" propagation-prev-scs"
" propagation-prev-smss"
" propagation-scope-ops"
" propagation-prev-mss"
" propagation-add-mpi-shifts"
" propagation-inspector"
" propagation-tamper)"
"(let-values(((struct:_24 make-_24 ?_24 -ref_24 -set!_24)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'propagation"
" #f"
" 7"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons prop:propagation-set-tamper(lambda(p_27 v_79)(propagation-set-tamper p_27 v_79)))"
"(cons prop:propagation-tamper(lambda(p_28)(propagation-tamper p_28)))"
"(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'propagation)))))"
"(values"
" struct:_24"
" make-_24"
" ?_24"
"(make-struct-field-accessor -ref_24 0 'prev-scs)"
"(make-struct-field-accessor -ref_24 1 'prev-smss)"
"(make-struct-field-accessor -ref_24 2 'scope-ops)"
"(make-struct-field-accessor -ref_24 3 'prev-mss)"
"(make-struct-field-accessor -ref_24 4 'add-mpi-shifts)"
"(make-struct-field-accessor -ref_24 5 'inspector)"
"(make-struct-field-accessor -ref_24 6 'tamper))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_4 sc_13 prev-scs_0 prev-smss_0 prev-mss_0)"
"(begin"
"(if(propagation? prop_4)"
"(let-values(((the-struct_20) prop_4))"
"(if(propagation? the-struct_20)"
"(let-values(((scope-ops63_0)(hash-set(propagation-scope-ops prop_4) sc_13 'add)))"
"(propagation14.1"
"(propagation-prev-scs the-struct_20)"
"(propagation-prev-smss the-struct_20)"
" scope-ops63_0"
"(propagation-prev-mss the-struct_20)"
"(propagation-add-mpi-shifts the-struct_20)"
"(propagation-inspector the-struct_20)"
"(propagation-tamper the-struct_20)))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_20)))"
"(propagation14.1 prev-scs_0 prev-smss_0(hasheq sc_13 'add) prev-mss_0 #f #f prop_4)))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_5 sc_14 prev-scs_1 prev-smss_1 prev-mss_1)"
"(begin"
"(if(propagation? prop_5)"
"(let-values(((the-struct_21) prop_5))"
"(if(propagation? the-struct_21)"
"(let-values(((scope-ops64_0)(hash-set(propagation-scope-ops prop_5) sc_14 'remove)))"
"(propagation14.1"
"(propagation-prev-scs the-struct_21)"
"(propagation-prev-smss the-struct_21)"
" scope-ops64_0"
"(propagation-prev-mss the-struct_21)"
"(propagation-add-mpi-shifts the-struct_21)"
"(propagation-inspector the-struct_21)"
"(propagation-tamper the-struct_21)))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_21)))"
"(propagation14.1 prev-scs_1 prev-smss_1(hasheq sc_14 'remove) prev-mss_1 #f #f prop_5)))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_6 sc_15 prev-scs_2 prev-smss_2 prev-mss_2)"
"(begin"
"(if(propagation? prop_6)"
"(let-values(((ops_0)(propagation-scope-ops prop_6)))"
"(let-values(((current-op_0)(hash-ref ops_0 sc_15 #f)))"
"(if(if(eq? current-op_0 'flip)"
"(if(= 1(hash-count ops_0))"
"(if(not(propagation-inspector prop_6))(not(propagation-add-mpi-shifts prop_6)) #f)"
" #f)"
" #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_22) prop_6))"
"(if(propagation? the-struct_22)"
"(let-values(((scope-ops65_0)"
"(if(eq? current-op_0 'flip)"
"(hash-remove ops_0 sc_15)"
"(hash-set"
" ops_0"
" sc_15"
"(let-values(((tmp_9) current-op_0))"
"(if(equal? tmp_9 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_9 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation14.1"
"(propagation-prev-scs the-struct_22)"
"(propagation-prev-smss the-struct_22)"
" scope-ops65_0"
"(propagation-prev-mss the-struct_22)"
"(propagation-add-mpi-shifts the-struct_22)"
"(propagation-inspector the-struct_22)"
"(propagation-tamper the-struct_22)))"
"                    (raise-argument-error 'struct-copy \"propagation?\" the-struct_22)))))))"
"(propagation14.1 prev-scs_2 prev-smss_2(hasheq sc_15 'flip) prev-mss_2 #f #f prop_6)))))"
"(define-values"
"(propagation-mpi-shift)"
"(lambda(prop_7 add_0 inspector_2 prev-scs_3 prev-smss_3 prev-mss_3)"
"(begin"
"(if(propagation? prop_7)"
"(let-values(((the-struct_23) prop_7))"
"(if(propagation? the-struct_23)"
"(let-values(((add-mpi-shifts66_0)"
"(let-values(((base-add_0)(propagation-add-mpi-shifts prop_7)))"
"(if(if add_0 base-add_0 #f)"
"(lambda(mss_0)(begin 'add-mpi-shifts66(add_0(base-add_0 mss_0))))"
"(let-values(((or-part_113) add_0))(if or-part_113 or-part_113 base-add_0)))))"
"((inspector67_0)"
"(let-values(((or-part_114)(propagation-inspector prop_7)))"
"(if or-part_114 or-part_114 inspector_2))))"
"(propagation14.1"
"(propagation-prev-scs the-struct_23)"
"(propagation-prev-smss the-struct_23)"
"(propagation-scope-ops the-struct_23)"
"(propagation-prev-mss the-struct_23)"
" add-mpi-shifts66_0"
" inspector67_0"
"(propagation-tamper the-struct_23)))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_23)))"
"(propagation14.1 prev-scs_3 prev-smss_3 '#hasheq() prev-mss_3 add_0 inspector_2 prop_7)))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_8 scs_8 parent-s_0)"
"(begin"
"(if(eq?(propagation-prev-scs prop_8) scs_8)"
"(let-values()(syntax-scopes parent-s_0))"
"(let-values()"
"(let-values(((new-scs_0)"
"(let-values(((ht_49)(propagation-scope-ops prop_8)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_49)))"
"((letrec-values(((for-loop_57)"
"(lambda(scs_9 i_62)"
"(begin"
" 'for-loop"
"(if i_62"
"(let-values(((sc_16 op_3)"
"(unsafe-immutable-hash-iterate-key+value ht_49 i_62)))"
"(let-values(((scs_10)"
"(let-values(((scs_11) scs_9))"
"(if(not(shifted-multi-scope? sc_16))"
"(let-values(((scs_12) scs_11))"
"(let-values(((scs_13)"
"(let-values()"
"(let-values(((tmp_10) op_3))"
"(if(equal? tmp_10 'add)"
"(let-values()"
"(set-add scs_12 sc_16))"
"(if(equal?"
" tmp_10"
" 'remove)"
"(let-values()"
"(set-remove"
" scs_12"
" sc_16))"
"(let-values()"
"(set-flip"
" scs_12"
" sc_16))))))))"
"(values scs_13)))"
" scs_11))))"
"(if(not #f)"
"(for-loop_57"
" scs_10"
"(unsafe-immutable-hash-iterate-next ht_49 i_62))"
" scs_10)))"
" scs_9)))))"
" for-loop_57)"
" scs_8"
"(unsafe-immutable-hash-iterate-first ht_49))))))"
"(if(set=? new-scs_0(syntax-scopes parent-s_0))"
"(syntax-scopes parent-s_0)"
"(cache-or-reuse-set new-scs_0))))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_9 smss_13 parent-s_1)"
"(begin"
"(if(eq?(propagation-prev-smss prop_9) smss_13)"
"(let-values()(syntax-shifted-multi-scopes parent-s_1))"
"(let-values()"
"(let-values(((new-smss_0)"
"(let-values(((ht_50)(propagation-scope-ops prop_9)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_50)))"
"((letrec-values(((for-loop_58)"
"(lambda(smss_14 i_63)"
"(begin"
" 'for-loop"
"(if i_63"
"(let-values(((sms_7 op_4)"
"(unsafe-immutable-hash-iterate-key+value ht_50 i_63)))"
"(let-values(((smss_15)"
"(let-values(((smss_16) smss_14))"
"(if(shifted-multi-scope? sms_7)"
"(let-values(((smss_17) smss_16))"
"(let-values(((smss_18)"
"(let-values()"
"(fallback-update-first"
" smss_17"
"(lambda(smss_19)"
"(let-values(((tmp_11)"
" op_4))"
"(if(equal? tmp_11 'add)"
"(let-values()"
"(set-add"
" smss_19"
" sms_7))"
"(if(equal?"
" tmp_11"
" 'remove)"
"(let-values()"
"(set-remove"
" smss_19"
" sms_7))"
"(let-values()"
"(set-flip"
" smss_19"
" sms_7))))))))))"
"(values smss_18)))"
" smss_16))))"
"(if(not #f)"
"(for-loop_58"
" smss_15"
"(unsafe-immutable-hash-iterate-next ht_50 i_63))"
" smss_15)))"
" smss_14)))))"
" for-loop_58)"
" smss_13"
"(unsafe-immutable-hash-iterate-first ht_50))))))"
"(let-values(((parent-smss_0)(syntax-shifted-multi-scopes parent-s_1)))"
"(if(if(set? new-smss_0)(if(set? parent-smss_0)(set=? new-smss_0 parent-smss_0) #f) #f)"
" parent-smss_0"
"(cache-or-reuse-hash new-smss_0)))))))))"
"(define-values"
"(propagation-apply-mpi-shifts)"
"(lambda(prop_10 mss_1 parent-s_2)"
"(begin"
"(if(eq?(propagation-prev-mss prop_10) mss_1)"
"(let-values()(syntax-mpi-shifts parent-s_2))"
"(let-values()(let-values(((add_1)(propagation-add-mpi-shifts prop_10)))(if add_1(add_1 mss_1) mss_1)))))))"
"(define-values"
"(propagation-apply-inspector)"
"(lambda(prop_11 i_64)"
"(begin(let-values(((or-part_115) i_64))(if or-part_115 or-part_115(propagation-inspector prop_11))))))"
"(define-values"
"(propagation-set-tamper)"
"(lambda(prop_12 t_32)"
"(begin"
"(if(propagation? prop_12)"
"(let-values(((the-struct_24) prop_12))"
"(if(propagation? the-struct_24)"
"(let-values(((tamper68_0) t_32))"
"(propagation14.1"
"(propagation-prev-scs the-struct_24)"
"(propagation-prev-smss the-struct_24)"
"(propagation-scope-ops the-struct_24)"
"(propagation-prev-mss the-struct_24)"
"(propagation-add-mpi-shifts the-struct_24)"
"(propagation-inspector the-struct_24)"
" tamper68_0))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_24)))"
" t_32))))"
"(define-values"
"(propagation-merge)"
"(lambda(content_6 prop_13 base-prop_0 prev-scs_4 prev-smss_4 prev-mss_4)"
"(begin"
"(if(not(datum-has-elements? content_6))"
"(let-values()(if(tamper-tainted?(propagation-tamper prop_13)) 'tainted base-prop_0))"
"(if(not(propagation? base-prop_0))"
"(let-values()"
"(if(if(eq?(propagation-prev-scs prop_13) prev-scs_4)"
"(if(eq?(propagation-prev-smss prop_13) prev-smss_4)"
"(if(eq?(propagation-prev-mss prop_13) prev-mss_4)"
"(eq?(propagation-tamper prop_13) base-prop_0)"
" #f)"
" #f)"
" #f)"
"(let-values() prop_13)"
"(let-values()"
"(propagation14.1"
" prev-scs_4"
" prev-smss_4"
"(propagation-scope-ops prop_13)"
" prev-mss_4"
"(propagation-add-mpi-shifts prop_13)"
"(propagation-inspector prop_13)"
"(if(tamper-tainted?(propagation-tamper prop_13)) 'tainted/need-propagate base-prop_0)))))"
"(let-values()"
"(let-values(((new-ops_0)"
"(let-values(((ht_51)(propagation-scope-ops prop_13)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_51)))"
"((letrec-values(((for-loop_59)"
"(lambda(ops_1 i_65)"
"(begin"
" 'for-loop"
"(if i_65"
"(let-values(((sc_17 op_5)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_51"
" i_65)))"
"(let-values(((ops_2)"
"(let-values(((ops_3) ops_1))"
"(let-values(((ops_4)"
"(let-values()"
"(let-values(((tmp_12) op_5))"
"(if(equal? tmp_12 'add)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_17"
" 'add))"
"(if(equal? tmp_12 'remove)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_17"
" 'remove))"
"(let-values()"
"(let-values(((current-op_1)"
"(hash-ref"
" ops_3"
" sc_17"
" #f)))"
"(let-values(((tmp_13)"
" current-op_1))"
"(if(equal?"
" tmp_13"
" 'add)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_17"
" 'remove))"
"(if(equal?"
" tmp_13"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_17"
" 'add))"
"(if(equal?"
" tmp_13"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_3"
" sc_17))"
"(let-values()"
"(hash-set"
" ops_3"
" sc_17"
" 'flip))))))))))))))"
"(values ops_4)))))"
"(if(not #f)"
"(for-loop_59"
" ops_2"
"(unsafe-immutable-hash-iterate-next ht_51 i_65))"
" ops_2)))"
" ops_1)))))"
" for-loop_59)"
"(propagation-scope-ops base-prop_0)"
"(unsafe-immutable-hash-iterate-first ht_51))))))"
"(let-values(((add_2)(propagation-add-mpi-shifts prop_13)))"
"(let-values(((base-add_1)(propagation-add-mpi-shifts base-prop_0)))"
"(let-values(((new-tamper_0)"
"(if(let-values(((or-part_116)(tamper-tainted?(propagation-tamper prop_13))))"
"(if or-part_116 or-part_116(tamper-tainted?(propagation-tamper base-prop_0))))"
" 'tainted/need-propagate"
"(propagation-tamper base-prop_0))))"
"(if(if(zero?(hash-count new-ops_0))"
"(if(not add_2)"
"(if(not base-add_1)"
"(if(not(propagation-inspector prop_13))(not(propagation-inspector base-prop_0)) #f)"
" #f)"
" #f)"
" #f)"
" new-tamper_0"
"(let-values(((the-struct_25) base-prop_0))"
"(if(propagation? the-struct_25)"
"(let-values(((scope-ops69_0) new-ops_0)"
"((add-mpi-shifts70_0)"
"(if(if add_2 base-add_1 #f)"
"(lambda(mss_2)(begin 'add-mpi-shifts70(add_2(base-add_1 mss_2))))"
"(let-values(((or-part_117) add_2))(if or-part_117 or-part_117 base-add_1))))"
"((inspector71_0)"
"(let-values(((or-part_118)(propagation-inspector base-prop_0)))"
"(if or-part_118 or-part_118(propagation-inspector prop_13))))"
"((tamper72_0) new-tamper_0))"
"(propagation14.1"
"(propagation-prev-scs the-struct_25)"
"(propagation-prev-smss the-struct_25)"
" scope-ops69_0"
"(propagation-prev-mss the-struct_25)"
" add-mpi-shifts70_0"
" inspector71_0"
" tamper72_0))"
"                          (raise-argument-error 'struct-copy \"propagation?\" the-struct_25))))))))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_8 delta_0)"
"(begin"
"(if(zero-phase? delta_0)"
"(let-values() sms_8)"
"(if(label-phase? delta_0)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_8))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase5.1(phase- 0(shifted-multi-scope-phase sms_8)))"
"(shifted-multi-scope-multi-scope sms_8)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_8))"
"(let-values() sms_8)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_0(shifted-multi-scope-phase sms_8))"
"(shifted-multi-scope-multi-scope sms_8)))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_124 phase_6)"
"(begin"
" 'syntax-shift-phase-level"
"(if(eqv? phase_6 0)"
" s_124"
"(let-values()"
"(let-values(((smss73_0) #f))"
"(let-values(((prev-result_1) #f))"
"(let-values(((shift-all_0)"
"(lambda(smss_20)"
"(begin"
" 'shift-all"
"(if(eq? smss73_0 smss_20)"
"(let-values() prev-result_1)"
"(let-values()"
"(let-values(((r_23)"
"(let-values()"
"(fallback-map"
" smss_20"
"(lambda(smss_21)"
"(let-values(((ht_52) smss_21))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_52)))"
"((letrec-values(((for-loop_60)"
"(lambda(table_58 i_66)"
"(begin"
" 'for-loop"
"(if i_66"
"(let-values(((sms_9)"
"(unsafe-immutable-hash-iterate-key"
" ht_52"
" i_66)))"
"(let-values(((table_59)"
"(let-values(((new-sms_0)"
"(shift-multi-scope"
" sms_9"
" phase_6)))"
"(begin"
" #t"
"((letrec-values(((for-loop_61)"
"(lambda(table_60)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_61)"
"(let-values(((table_62)"
" table_60))"
"(if new-sms_0"
"(let-values(((table_63)"
" table_62))"
"(let-values(((table_64)"
"(let-values()"
"(let-values(((key_25"
" val_15)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_0)"
" #t))))"
"(hash-set"
" table_63"
" key_25"
" val_15)))))"
"(values"
" table_64)))"
" table_62))))"
" table_61))))))"
" for-loop_61)"
" table_58)))))"
"(if(not #f)"
"(for-loop_60"
" table_59"
"(unsafe-immutable-hash-iterate-next"
" ht_52"
" i_66))"
" table_59)))"
" table_58)))))"
" for-loop_60)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_52)))))))))"
"(begin(set! smss73_0 smss_20)(set! prev-result_1 r_23) r_23))))))))"
"(let-values(((s_125) s_124)"
"((f_31)(lambda(tail?_29 d_4)(begin 'f d_4)))"
"((d->s_2)"
"(lambda(s_126 d_5)"
"(begin"
" 'd->s"
"(let-values(((the-struct_26) s_126))"
"(if(syntax?$1 the-struct_26)"
"(let-values(((content74_0) d_5)"
"((shifted-multi-scopes75_0)"
"(shift-all_0(syntax-shifted-multi-scopes s_126))))"
"(syntax1.1"
" content74_0"
"(syntax-scopes the-struct_26)"
" shifted-multi-scopes75_0"
"(syntax-scope-propagations+tamper the-struct_26)"
"(syntax-mpi-shifts the-struct_26)"
"(syntax-srcloc the-struct_26)"
"(syntax-props the-struct_26)"
"(syntax-inspector the-struct_26)))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_26))))))"
"((s-e_2) syntax-e/no-taint)"
"((seen_13) #f))"
"((letrec-values(((loop_71)"
"(lambda(s_127)"
"(begin"
" 'loop"
"(let-values(((s_128) s_127)"
"((f_32)"
"(lambda(tail?_30 v_80)"
"(begin"
" 'f"
"(if(syntax?$1 v_80)"
"(let-values()(d->s_2 v_80(loop_71(s-e_2 v_80))))"
"(let-values()(f_31 tail?_30 v_80))))))"
"((seen_14) seen_13))"
"((letrec-values(((loop_72)"
"(lambda(tail?_31 s_129 prev-depth_6)"
"(begin"
" 'loop"
"(let-values(((depth_6)(add1 prev-depth_6)))"
"(if(if seen_14(> depth_6 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_31"
" s_129"
"(lambda(tail?_32 s_130)(f_32 tail?_32 s_130))"
" seen_14))"
"(if(null? s_129)"
"(let-values()(f_32 tail?_31 s_129))"
"(if(pair? s_129)"
"(let-values()"
"(f_32"
" tail?_31"
"(cons"
"(loop_72 #f(car s_129) depth_6)"
"(loop_72 #t(cdr s_129) depth_6))))"
"(if(let-values(((or-part_119)"
"(symbol? s_129)))"
"(if or-part_119"
" or-part_119"
"(let-values(((or-part_120)"
"(boolean? s_129)))"
"(if or-part_120"
" or-part_120"
"(number? s_129)))))"
"(let-values()(f_32 #f s_129))"
"(if(let-values(((or-part_121)"
"(vector? s_129)))"
"(if or-part_121"
" or-part_121"
"(let-values(((or-part_122)"
"(box? s_129)))"
"(if or-part_122"
" or-part_122"
"(let-values(((or-part_123)"
"(prefab-struct-key"
" s_129)))"
"(if or-part_123"
" or-part_123"
"(hash? s_129)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_31"
" s_129"
"(lambda(tail?_33 s_131)"
"(f_32 tail?_33 s_131))"
" seen_14))"
"(let-values()(f_32 #f s_129))))))))))))"
" loop_72)"
" #f"
" s_128"
" 0))))))"
" loop_71)"
" s_125))))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_132 src-scopes_0 dest-scopes_0)"
"(begin"
"(if(equal? src-scopes_0 dest-scopes_0)"
" s_132"
"(let-values(((src-smss_0 src-scs_0)"
"(set-partition"
"(let-values(((ht_53) src-scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_53)))"
"((letrec-values(((for-loop_62)"
"(lambda(table_65 i_67)"
"(begin"
" 'for-loop"
"(if i_67"
"(let-values(((sc_18)"
"(unsafe-immutable-hash-iterate-key ht_53 i_67)))"
"(let-values(((table_66)"
"(let-values(((table_67) table_65))"
"(let-values(((table_68)"
"(let-values()"
"(let-values(((key_26 val_16)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_18))"
" #t))))"
"(hash-set"
" table_67"
" key_26"
" val_16)))))"
"(values table_68)))))"
"(if(not #f)"
"(for-loop_62"
" table_66"
"(unsafe-immutable-hash-iterate-next ht_53 i_67))"
" table_66)))"
" table_65)))))"
" for-loop_62)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_53))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_0 dest-scs_0)"
"(set-partition"
"(let-values(((ht_54) dest-scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_54)))"
"((letrec-values(((for-loop_63)"
"(lambda(table_69 i_68)"
"(begin"
" 'for-loop"
"(if i_68"
"(let-values(((sc_19)"
"(unsafe-immutable-hash-iterate-key ht_54 i_68)))"
"(let-values(((table_70)"
"(let-values(((table_71) table_69))"
"(let-values(((table_72)"
"(let-values()"
"(let-values(((key_27 val_17)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_19))"
" #t))))"
"(hash-set"
" table_71"
" key_27"
" val_17)))))"
"(values table_72)))))"
"(if(not #f)"
"(for-loop_63"
" table_70"
"(unsafe-immutable-hash-iterate-next ht_54 i_68))"
" table_70)))"
" table_69)))))"
" for-loop_63)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_54))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs76_0) #f))"
"(let-values(((prev-result_2) #f))"
"(let-values(((swap-scs_0)"
"(lambda(scs_14)"
"(begin"
" 'swap-scs"
"(if(eq? scs76_0 scs_14)"
"(let-values() prev-result_2)"
"(let-values()"
"(let-values(((r_24)"
"(let-values()"
"(if(subset? src-scs_0 scs_14)"
"(set-union(set-subtract scs_14 src-scs_0) dest-scs_0)"
" scs_14))))"
"(begin(set! scs76_0 scs_14)(set! prev-result_2 r_24) r_24))))))))"
"(let-values(((smss77_0) #f))"
"(let-values(((prev-result_3) #f))"
"(let-values(((swap-smss_0)"
"(lambda(smss_22)"
"(begin"
" 'swap-smss"
"(if(eq? smss77_0 smss_22)"
"(let-values() prev-result_3)"
"(let-values()"
"(let-values(((r_25)"
"(let-values()"
"(fallback-update-first"
" smss_22"
"(lambda(smss_23)"
"(if(subset? src-smss_0 smss_23)"
"(set-union(set-subtract smss_23 src-smss_0) dest-smss_0)"
" smss_23))))))"
"(begin(set! smss77_0 smss_22)(set! prev-result_3 r_25) r_25))))))))"
"(let-values(((s_133) s_132)"
"((f_33)(lambda(tail?_34 d_6)(begin 'f d_6)))"
"((d->s_3)"
"(lambda(s_134 d_7)"
"(begin"
" 'd->s"
"(let-values(((the-struct_27) s_134))"
"(if(syntax?$1 the-struct_27)"
"(let-values(((content78_0) d_7)"
"((scopes79_0)(swap-scs_0(syntax-scopes s_134)))"
"((shifted-multi-scopes80_0)"
"(swap-smss_0(syntax-shifted-multi-scopes s_134))))"
"(syntax1.1"
" content78_0"
" scopes79_0"
" shifted-multi-scopes80_0"
"(syntax-scope-propagations+tamper the-struct_27)"
"(syntax-mpi-shifts the-struct_27)"
"(syntax-srcloc the-struct_27)"
"(syntax-props the-struct_27)"
"(syntax-inspector the-struct_27)))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_27))))))"
"((s-e_3) syntax-e/no-taint)"
"((seen_15) #f))"
"((letrec-values(((loop_73)"
"(lambda(s_135)"
"(begin"
" 'loop"
"(let-values(((s_136) s_135)"
"((f_34)"
"(lambda(tail?_35 v_81)"
"(begin"
" 'f"
"(if(syntax?$1 v_81)"
"(let-values()(d->s_3 v_81(loop_73(s-e_3 v_81))))"
"(let-values()(f_33 tail?_35 v_81))))))"
"((seen_16) seen_15))"
"((letrec-values(((loop_32)"
"(lambda(tail?_36 s_137 prev-depth_7)"
"(begin"
" 'loop"
"(let-values(((depth_7)(add1 prev-depth_7)))"
"(if(if seen_16(> depth_7 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_36"
" s_137"
"(lambda(tail?_37 s_138)"
"(f_34 tail?_37 s_138))"
" seen_16))"
"(if(null? s_137)"
"(let-values()(f_34 tail?_36 s_137))"
"(if(pair? s_137)"
"(let-values()"
"(f_34"
" tail?_36"
"(cons"
"(loop_32 #f(car s_137) depth_7)"
"(loop_32 #t(cdr s_137) depth_7))))"
"(if(let-values(((or-part_124)"
"(symbol? s_137)))"
"(if or-part_124"
" or-part_124"
"(let-values(((or-part_125)"
"(boolean? s_137)))"
"(if or-part_125"
" or-part_125"
"(number? s_137)))))"
"(let-values()(f_34 #f s_137))"
"(if(let-values(((or-part_126)"
"(vector? s_137)))"
"(if or-part_126"
" or-part_126"
"(let-values(((or-part_127)"
"(box? s_137)))"
"(if or-part_127"
" or-part_127"
"(let-values(((or-part_128)"
"(prefab-struct-key"
" s_137)))"
"(if or-part_128"
" or-part_128"
"(hash? s_137)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_36"
" s_137"
"(lambda(tail?_38 s_139)"
"(f_34 tail?_38 s_139))"
" seen_16))"
"(let-values()"
"(f_34 #f s_137))))))))))))"
" loop_32)"
" #f"
" s_136"
" 0))))))"
" loop_73)"
" s_133)))))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_140 phase_7)"
"(begin(scope-set-at-fallback s_140(fallback-first(syntax-shifted-multi-scopes s_140)) phase_7))))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_141 smss_24 phase_8)"
"(begin"
"(let-values(((ht_55) smss_24))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_55)))"
"((letrec-values(((for-loop_64)"
"(lambda(scopes_9 i_69)"
"(begin"
" 'for-loop"
"(if i_69"
"(let-values(((sms_10)(unsafe-immutable-hash-iterate-key ht_55 i_69)))"
"(let-values(((scopes_10)"
"(let-values(((scopes_11) scopes_9))"
"(if(let-values(((or-part_129)(label-phase? phase_8)))"
"(if or-part_129"
" or-part_129"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_10)))))"
"(let-values(((scopes_12) scopes_11))"
"(let-values(((scopes_13)"
"(let-values()"
"(set-add"
" scopes_12"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_10)"
"(let-values(((ph_0)"
"(shifted-multi-scope-phase"
" sms_10)))"
"(if(shifted-to-label-phase? ph_0)"
"(shifted-to-label-phase-from ph_0)"
"(phase- ph_0 phase_8))))))))"
"(values scopes_13)))"
" scopes_11))))"
"(if(not #f)"
"(for-loop_64 scopes_10(unsafe-immutable-hash-iterate-next ht_55 i_69))"
" scopes_10)))"
" scopes_9)))))"
" for-loop_64)"
"(syntax-scopes s_141)"
"(unsafe-immutable-hash-iterate-first ht_55)))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_14)"
"(begin"
"(begin"
"        (if (set-empty? scopes_14) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_56) scopes_14))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_56)))"
"((letrec-values(((for-loop_65)"
"(lambda(max-sc_0 i_70)"
"(begin"
" 'for-loop"
"(if i_70"
"(let-values(((sc_20)(unsafe-immutable-hash-iterate-key ht_56 i_70)))"
"(let-values(((max-sc_1)"
"(let-values(((max-sc_2) max-sc_0))"
"(let-values(((max-sc_3)"
"(let-values()"
"(if(scope>? sc_20 max-sc_2) sc_20 max-sc_2))))"
"(values max-sc_3)))))"
"(if(not #f)"
"(for-loop_65 max-sc_1(unsafe-immutable-hash-iterate-next ht_56 i_70))"
" max-sc_1)))"
" max-sc_0)))))"
" for-loop_65)"
"(set-first scopes_14)"
"(unsafe-immutable-hash-iterate-first ht_56))))))))"
"(define-values"
"(add-binding-in-scopes!20.1)"
"(lambda(just-for-nominal?15_0 just-for-nominal?16_0 scopes17_0 sym18_0 binding19_0)"
"(begin"
" 'add-binding-in-scopes!20"
"(let-values(((scopes_15) scopes17_0))"
"(let-values(((sym_11) sym18_0))"
"(let-values(((binding_4) binding19_0))"
"(let-values(((just-for-nominal?_1)(if just-for-nominal?16_0 just-for-nominal?15_0 #f)))"
"(let-values()"
"(let-values(((max-sc_4)(find-max-scope scopes_15)))"
"(let-values(((bt_7)"
"(binding-table-add"
"(scope-binding-table max-sc_4)"
" scopes_15"
" sym_11"
" binding_4"
" just-for-nominal?_1)))"
"(begin(set-scope-binding-table! max-sc_4 bt_7)(clear-resolve-cache! sym_11))))))))))))"
"(define-values"
"(add-bulk-binding-in-scopes!)"
"(lambda(scopes_16 bulk-binding_0)"
"(begin"
"(let-values(((max-sc_5)(find-max-scope scopes_16)))"
"(let-values(((bt_8)(binding-table-add-bulk(scope-binding-table max-sc_5) scopes_16 bulk-binding_0)))"
"(begin(set-scope-binding-table! max-sc_5 bt_8)(clear-resolve-cache!)))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_142)"
"(begin"
"(let-values(((ht_57)(syntax-scopes s_142)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_57)))"
"((letrec-values(((for-loop_66)"
"(lambda(result_42 i_71)"
"(begin"
" 'for-loop"
"(if i_71"
"(let-values(((sc_21)(unsafe-immutable-hash-iterate-key ht_57 i_71)))"
"(let-values(((result_43)"
"(let-values()"
"(let-values(((result_44)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_21) 'macro)))))"
"(values result_44)))))"
"(if(if(not((lambda x_35 result_43) sc_21))(not #f) #f)"
"(for-loop_66 result_43(unsafe-immutable-hash-iterate-next ht_57 i_71))"
" result_43)))"
" result_42)))))"
" for-loop_66)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_57)))))))"
"(define-values"
"(resolve33.1)"
"(lambda(ambiguous-value23_0"
" ambiguous-value27_0"
" exactly?24_0"
" exactly?28_0"
" extra-shifts26_0"
" extra-shifts30_0"
" get-scopes?25_0"
" get-scopes?29_0"
" s31_0"
" phase32_0)"
"(begin"
" 'resolve33"
"(let-values(((s_143) s31_0))"
"(let-values(((phase_9) phase32_0))"
"(let-values(((ambiguous-value_0)(if ambiguous-value27_0 ambiguous-value23_0 #f)))"
"(let-values(((exactly?_0)(if exactly?28_0 exactly?24_0 #f)))"
"(let-values(((get-scopes?_0)(if get-scopes?29_0 get-scopes?25_0 #f)))"
"(let-values(((extra-shifts_2)(if extra-shifts30_0 extra-shifts26_0 null)))"
"(let-values()"
"(let-values(((sym_12)(syntax-content s_143)))"
"((letrec-values(((fallback-loop_0)"
"(lambda(smss_25)"
"(begin"
" 'fallback-loop"
"(let-values(((c1_21)"
"(if(not exactly?_0)"
"(if(not get-scopes?_0)"
"(resolve-cache-get"
" sym_12"
" phase_9"
"(syntax-scopes s_143)"
"(fallback-first smss_25))"
" #f)"
" #f)))"
"(if c1_21"
"((lambda(b_24)"
"(if(eq? b_24 '#:none)"
"(let-values()"
"(if(fallback? smss_25)"
"(fallback-loop_0(fallback-rest smss_25))"
" #f))"
"(let-values() b_24)))"
" c1_21)"
"(let-values()"
"(let-values(((scopes_17)"
"(scope-set-at-fallback"
" s_143"
"(fallback-first smss_25)"
" phase_9)))"
"(let-values(((best-scopes_0 best-binding_0)"
"(let-values(((ht_58) scopes_17))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys ht_58)))"
"((letrec-values(((for-loop_67)"
"(lambda(best-scopes_1"
" best-binding_1"
" i_72)"
"(begin"
" 'for-loop"
"(if i_72"
"(let-values(((sc_22)"
"(unsafe-immutable-hash-iterate-key"
" ht_58"
" i_72)))"
"(let-values(((best-scopes_2"
" best-binding_2)"
"(let-values(((ht_59"
" bulk-bindings_2)"
"(let-values(((table_73)"
"(scope-binding-table"
" sc_22)))"
"(if(hash?"
" table_73)"
"(values"
"(hash-ref"
" table_73"
" sym_12"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_73)"
" sym_12"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_73)))))"
"((s_144)"
" s_143)"
"((extra-shifts_3)"
" extra-shifts_2))"
"(begin"
" #t"
"((letrec-values(((for-loop_68)"
"(lambda(best-scopes_3"
" best-binding_3"
" i_73)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" i_73))"
"(let-values(((b-scopes_0)"
"(if(pair?"
" i_73)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_73)))"
"(let-values()"
"(hash-iterate-key"
" ht_59"
" i_73))))"
"((binding_5)"
"(if(pair?"
" i_73)"
"(let-values()"
"(let-values(((bulk_3)"
"(bulk-binding-at-bulk"
"(car"
" i_73))))"
"(let-values(((b-info_0)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_3"
" s_144"
" extra-shifts_3)"
" sym_12"
" #f)))"
"(if b-info_0"
"((bulk-binding-create"
" bulk_3)"
" bulk_3"
" b-info_0"
" sym_12)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_59"
" i_73)))))"
"(let-values(((best-scopes_4"
" best-binding_4)"
"(let-values(((best-scopes_5)"
" best-scopes_3)"
"((best-binding_5)"
" best-binding_3))"
"(if(if b-scopes_0"
"(if binding_5"
"(subset?"
" b-scopes_0"
" scopes_17)"
" #f)"
" #f)"
"(let-values(((best-scopes_6)"
" best-scopes_5)"
"((best-binding_6)"
" best-binding_5))"
"(let-values(((best-scopes_7"
" best-binding_7)"
"(let-values()"
"(if(pair?"
" best-scopes_6)"
"(let-values()"
"(if(let-values(((lst_46)"
" best-scopes_6))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_46)))"
"((letrec-values(((for-loop_69)"
"(lambda(result_45"
" lst_47)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_47)"
"(let-values(((amb-scopes_0)"
"(unsafe-car"
" lst_47))"
"((rest_20)"
"(unsafe-cdr"
" lst_47)))"
"(let-values(((result_46)"
"(let-values()"
"(let-values(((result_47)"
"(let-values()"
"(let-values()"
"(subset?"
" amb-scopes_0"
" b-scopes_0)))))"
"(values"
" result_47)))))"
"(if(if(not"
"((lambda x_36"
"(not"
" result_46))"
" amb-scopes_0))"
"(not"
" #f)"
" #f)"
"(for-loop_69"
" result_46"
" rest_20)"
" result_46)))"
" result_45)))))"
" for-loop_69)"
" #t"
" lst_46)))"
"(let-values()"
"(values"
" b-scopes_0"
" binding_5))"
"(let-values()"
"(values"
"(cons"
" b-scopes_0"
" best-scopes_6)"
" #f))))"
"(if(not"
" best-scopes_6)"
"(let-values()"
"(values"
" b-scopes_0"
" binding_5))"
"(if(subset?"
" b-scopes_0"
" best-scopes_6)"
"(let-values()"
"(values"
" best-scopes_6"
" best-binding_6))"
"(if(subset?"
" best-scopes_6"
" b-scopes_0)"
"(let-values()"
"(values"
" b-scopes_0"
" binding_5))"
"(let-values()"
"(values"
"(list"
" best-scopes_6"
" b-scopes_0)"
" #f)))))))))"
"(values"
" best-scopes_7"
" best-binding_7)))"
"(values"
" best-scopes_5"
" best-binding_5)))))"
"(if(not"
" #f)"
"(for-loop_68"
" best-scopes_4"
" best-binding_4"
"(if(pair?"
" i_73)"
"(let-values()"
"(cdr"
" i_73))"
"(let-values()"
"(let-values(((or-part_130)"
"(hash-iterate-next"
" ht_59"
" i_73)))"
"(if or-part_130"
" or-part_130"
" bulk-bindings_2)))))"
"(values"
" best-scopes_4"
" best-binding_4))))"
"(values"
" best-scopes_3"
" best-binding_3))))))"
" for-loop_68)"
" best-scopes_1"
" best-binding_1"
"(let-values(((or-part_131)"
"(hash-iterate-first"
" ht_59)))"
"(if or-part_131"
" or-part_131"
" bulk-bindings_2)))))))"
"(if(not #f)"
"(for-loop_67"
" best-scopes_2"
" best-binding_2"
"(unsafe-immutable-hash-iterate-next"
" ht_58"
" i_72))"
"(values"
" best-scopes_2"
" best-binding_2))))"
"(values"
" best-scopes_1"
" best-binding_1))))))"
" for-loop_67)"
" #f"
" #f"
"(unsafe-immutable-hash-iterate-first ht_58))))))"
"(if(pair? best-scopes_0)"
"(let-values()"
"(if(fallback? smss_25)"
"(fallback-loop_0(fallback-rest smss_25))"
" ambiguous-value_0))"
"(if best-scopes_0"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_12"
" phase_9"
"(syntax-scopes s_143)"
"(fallback-first smss_25)"
" best-binding_0)"
"(if(let-values(((or-part_132)(not exactly?_0)))"
"(if or-part_132"
" or-part_132"
"(eqv?"
"(set-count scopes_17)"
"(set-count best-scopes_0))))"
"(if get-scopes?_0 best-scopes_0 best-binding_0)"
" #f)))"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_12"
" phase_9"
"(syntax-scopes s_143)"
"(fallback-first smss_25)"
" '#:none)"
"(if(fallback? smss_25)"
"(fallback-loop_0(fallback-rest smss_25))"
" #f))))))))))))))"
" fallback-loop_0)"
"(syntax-shifted-multi-scopes s_143)))))))))))))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_32 b_25 phase_10)"
"(begin"
" 'bound-identifier=?"
"(if(eq?(syntax-e$1 a_32)(syntax-e$1 b_25))"
"(equal?(syntax-scope-set a_32 phase_10)(syntax-scope-set b_25 phase_10))"
" #f))))"
"(define-values"
"(syntax-property$1)"
"(case-lambda"
"((s_0 key_11)"
"(begin"
" 'syntax-property"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_0)))"
"(values))))"
"(let-values(((v_27)(hash-ref(syntax-props s_0) key_11 #f)))(plain-property-value v_27)))))"
"((s_1 key_12 val_3)"
"(let-values((()"
"(begin"
"                    (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_1)))"
"(values))))"
"(let-values(((pval_0)(if(eq? key_12 'paren-shape)(preserved-property-value1.1 val_3) val_3)))"
"(let-values(((the-struct_28) s_1))"
"(if(syntax?$1 the-struct_28)"
"(let-values(((props1_0)(hash-set(syntax-props s_1) key_12 pval_0)))"
"(syntax1.1"
"(syntax-content the-struct_28)"
"(syntax-scopes the-struct_28)"
"(syntax-shifted-multi-scopes the-struct_28)"
"(syntax-scope-propagations+tamper the-struct_28)"
"(syntax-mpi-shifts the-struct_28)"
"(syntax-srcloc the-struct_28)"
" props1_0"
"(syntax-inspector the-struct_28)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_28))))))"
"((s_145 key_28 val_18 preserved?_0)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_145)"
"(void)"
"                      (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_145)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_0"
"(let-values()"
"(if(if(symbol? key_28)(symbol-interned? key_28) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                               \"key for a perserved property must be an interned symbol\""
"                               \"given key\""
" key_28"
"                               \"given value\""
" val_18))))"
"(void))"
"(values))))"
"(let-values(((pval_1)(if preserved?_0(preserved-property-value1.1 val_18) val_18)))"
"(let-values(((the-struct_29) s_145))"
"(if(syntax?$1 the-struct_29)"
"(let-values(((props2_0)(hash-set(syntax-props s_145) key_28 pval_1)))"
"(syntax1.1"
"(syntax-content the-struct_29)"
"(syntax-scopes the-struct_29)"
"(syntax-shifted-multi-scopes the-struct_29)"
"(syntax-scope-propagations+tamper the-struct_29)"
"(syntax-mpi-shifts the-struct_29)"
"(syntax-srcloc the-struct_29)"
" props2_0"
"(syntax-inspector the-struct_29)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_29)))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_146 key_29)"
"(begin"
" 'syntax-property-preserved?"
"(begin"
"        (if (syntax?$1 s_146) (void) (let-values () (raise-argument-error 'syntax-property-preserved \"syntax?\" s_146)))"
"(if(if(symbol? key_29)(symbol-interned? key_29) #f)"
"(void)"
"          (let-values () (raise-argument-error 'syntax-property \"(and/c symbol? symbol-interned?)\" key_29)))"
"(preserved-property-value?(hash-ref(syntax-props s_146) key_29 #f))))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_147)"
"(begin"
" 'syntax-property-symbol-keys"
"(begin"
"        (if (syntax?$1 s_147) (void) (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_147)))"
"(reverse$1"
"(let-values(((ht_60)(syntax-props s_147)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_60)))"
"((letrec-values(((for-loop_70)"
"(lambda(fold-var_30 i_74)"
"(begin"
" 'for-loop"
"(if i_74"
"(let-values(((k_16 v_82)(unsafe-immutable-hash-iterate-key+value ht_60 i_74)))"
"(let-values(((fold-var_31)"
"(let-values(((fold-var_32) fold-var_30))"
"(if(if(symbol? k_16)(symbol-interned? k_16) #f)"
"(let-values(((fold-var_33) fold-var_32))"
"(let-values(((fold-var_34)"
"(let-values()"
"(cons(let-values() k_16) fold-var_33))))"
"(values fold-var_34)))"
" fold-var_32))))"
"(if(not #f)"
"(for-loop_70 fold-var_31(unsafe-immutable-hash-iterate-next ht_60 i_74))"
" fold-var_31)))"
" fold-var_30)))))"
" for-loop_70)"
" null"
"(unsafe-immutable-hash-iterate-first ht_60)))))))))"
"(define-values"
"(syntax-property-remove)"
"(lambda(s_72 key_30)"
"(begin"
"(if(hash-ref(syntax-props s_72) key_30 #f)"
"(let-values(((the-struct_30) s_72))"
"(if(syntax?$1 the-struct_30)"
"(let-values(((props3_0)(hash-remove(syntax-props s_72) key_30)))"
"(syntax1.1"
"(syntax-content the-struct_30)"
"(syntax-scopes the-struct_30)"
"(syntax-shifted-multi-scopes the-struct_30)"
"(syntax-scope-propagations+tamper the-struct_30)"
"(syntax-mpi-shifts the-struct_30)"
"(syntax-srcloc the-struct_30)"
" props3_0"
"(syntax-inspector the-struct_30)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_30)))"
" s_72))))"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons prop:binding-reach-scopes(lambda(b_26)(binding-free=id b_26))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'frame-id)"
"(make-struct-field-accessor -ref_0 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_27)(begin(if(full-binding? b_27)(full-binding-frame-id b_27) #f))))"
"(define-values(binding-free=id)(lambda(b_11)(begin(if(full-binding? b_11)(full-binding-free=id b_11) #f))))"
"(define-values"
"(make-module-binding22.1)"
"(lambda(extra-inspector8_0"
" extra-inspector17_0"
" extra-nominal-bindings9_0"
" extra-nominal-bindings18_0"
" frame-id6_0"
" frame-id15_0"
" free=id7_0"
" free=id16_0"
" nominal-module2_0"
" nominal-module11_0"
" nominal-phase3_0"
" nominal-phase12_0"
" nominal-require-phase5_0"
" nominal-require-phase14_0"
" nominal-sym4_0"
" nominal-sym13_0"
" wrt1_0"
" wrt10_0"
" module19_0"
" phase20_0"
" sym21_0)"
"(begin"
" 'make-module-binding22"
"(let-values(((module_0) module19_0))"
"(let-values(((phase_11) phase20_0))"
"(let-values(((sym_13) sym21_0))"
"(let-values()"
"(let-values(((nominal-module_0)(if nominal-module11_0 nominal-module2_0 module_0)))"
"(let-values(((nominal-phase_0)(if nominal-phase12_0 nominal-phase3_0 phase_11)))"
"(let-values(((nominal-sym_0)(if nominal-sym13_0 nominal-sym4_0 sym_13)))"
"(let-values(((nominal-require-phase_0)(if nominal-require-phase14_0 nominal-require-phase5_0 0)))"
"(let-values(((frame-id_0)(if frame-id15_0 frame-id6_0 #f)))"
"(let-values(((free=id_0)(if free=id16_0 free=id7_0 #f)))"
"(let-values(((extra-inspector_0)(if extra-inspector17_0 extra-inspector8_0 #f)))"
"(let-values(((extra-nominal-bindings_0)"
"(if extra-nominal-bindings18_0 extra-nominal-bindings9_0 null)))"
"(let-values()"
"(if(let-values(((or-part_79) frame-id_0))"
"(if or-part_79"
" or-part_79"
"(let-values(((or-part_80) free=id_0))"
"(if or-part_80"
" or-part_80"
"(let-values(((or-part_81) extra-inspector_0))"
"(if or-part_81"
" or-part_81"
"(not"
"(if(eqv? nominal-phase_0 phase_11)"
"(if(eq? nominal-sym_0 sym_13)"
"(if(eqv? nominal-require-phase_0 0)"
"(null? extra-nominal-bindings_0)"
" #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding51.1"
" frame-id_0"
" free=id_0"
" module_0"
" phase_11"
" sym_13"
" nominal-module_0"
" nominal-phase_0"
" nominal-sym_0"
" nominal-require-phase_0"
" extra-inspector_0"
" extra-nominal-bindings_0))"
"(let-values()"
"(simple-module-binding52.1"
" module_0"
" phase_11"
" sym_13"
" nominal-module_0)))))))))))))))))))"
"(define-values"
"(module-binding-update48.1)"
"(lambda(extra-inspector34_0"
" extra-inspector45_0"
" extra-nominal-bindings35_0"
" extra-nominal-bindings46_0"
" frame-id32_0"
" frame-id43_0"
" free=id33_0"
" free=id44_0"
" module25_0"
" module36_0"
" nominal-module28_0"
" nominal-module39_0"
" nominal-phase29_0"
" nominal-phase40_0"
" nominal-require-phase31_0"
" nominal-require-phase42_0"
" nominal-sym30_0"
" nominal-sym41_0"
" phase26_0"
" phase37_0"
" sym27_0"
" sym38_0"
" b47_0)"
"(begin"
" 'module-binding-update48"
"(let-values(((b_28) b47_0))"
"(let-values(((module_1)(if module36_0 module25_0(module-binding-module b_28))))"
"(let-values(((phase_12)(if phase37_0 phase26_0(module-binding-phase b_28))))"
"(let-values(((sym_14)(if sym38_0 sym27_0(module-binding-sym b_28))))"
"(let-values(((nominal-module_1)"
"(if nominal-module39_0 nominal-module28_0(module-binding-nominal-module b_28))))"
"(let-values(((nominal-phase_1)"
"(if nominal-phase40_0 nominal-phase29_0(module-binding-nominal-phase b_28))))"
"(let-values(((nominal-sym_1)(if nominal-sym41_0 nominal-sym30_0(module-binding-nominal-sym b_28))))"
"(let-values(((nominal-require-phase_1)"
"(if nominal-require-phase42_0"
" nominal-require-phase31_0"
"(module-binding-nominal-require-phase b_28))))"
"(let-values(((frame-id_1)(if frame-id43_0 frame-id32_0(binding-frame-id b_28))))"
"(let-values(((free=id_1)(if free=id44_0 free=id33_0(binding-free=id b_28))))"
"(let-values(((extra-inspector_1)"
"(if extra-inspector45_0"
" extra-inspector34_0"
"(module-binding-extra-inspector b_28))))"
"(let-values(((extra-nominal-bindings_1)"
"(if extra-nominal-bindings46_0"
" extra-nominal-bindings35_0"
"(module-binding-extra-nominal-bindings b_28))))"
"(let-values()"
"(let-values(((nominal-module56_0) nominal-module_1)"
"((nominal-phase57_0) nominal-phase_1)"
"((nominal-sym58_0) nominal-sym_1)"
"((nominal-require-phase59_0) nominal-require-phase_1)"
"((frame-id60_0) frame-id_1)"
"((free=id61_0) free=id_1)"
"((extra-inspector62_0) extra-inspector_1)"
"((extra-nominal-bindings63_0) extra-nominal-bindings_1))"
"(make-module-binding22.1"
" extra-inspector62_0"
" #t"
" extra-nominal-bindings63_0"
" #t"
" frame-id60_0"
" #t"
" free=id61_0"
" #t"
" nominal-module56_0"
" #t"
" nominal-phase57_0"
" #t"
" nominal-require-phase59_0"
" #t"
" nominal-sym58_0"
" #t"
" #f"
" #f"
" module_1"
" phase_12"
" sym_14))))))))))))))))))"
"(define-values"
"(module-binding?)"
"(lambda(b_29)"
"(begin"
"(let-values(((or-part_133)(simple-module-binding? b_29)))"
"(if or-part_133 or-part_133(full-module-binding? b_29))))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding51.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector"
" full-module-binding-extra-nominal-bindings)"
"(let-values(((struct:_25 make-_25 ?_25 -ref_25 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 9"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(b_30 ser-push!_10 state_18)"
"(let-values(((simplified-b_0)"
"(if(full-binding-frame-id b_30)"
"(let-values(((temp66_0) #f))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" temp66_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b_30))"
" b_30)))"
"(if(full-module-binding? simplified-b_0)"
"(let-values()"
"(begin"
"(ser-push!_10 'tag '#:module-binding)"
"(ser-push!_10(full-module-binding-module b_30))"
"(ser-push!_10(full-module-binding-sym b_30))"
"(ser-push!_10(full-module-binding-phase b_30))"
"(ser-push!_10(full-module-binding-nominal-module b_30))"
"(ser-push!_10(full-module-binding-nominal-phase b_30))"
"(ser-push!_10(full-module-binding-nominal-sym b_30))"
"(ser-push!_10(full-module-binding-nominal-require-phase b_30))"
"(ser-push!_10(full-binding-free=id b_30))"
"(if(full-module-binding-extra-inspector b_30)"
"(ser-push!_10 'tag '#:inspector)"
"(ser-push!_10 #f))"
"(ser-push!_10(full-module-binding-extra-nominal-bindings b_30))))"
"(let-values()(ser-push!_10 simplified-b_0)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'full-module-binding)))))"
"(values"
" struct:_25"
" make-_25"
" ?_25"
"(make-struct-field-accessor -ref_25 0 'module)"
"(make-struct-field-accessor -ref_25 1 'phase)"
"(make-struct-field-accessor -ref_25 2 'sym)"
"(make-struct-field-accessor -ref_25 3 'nominal-module)"
"(make-struct-field-accessor -ref_25 4 'nominal-phase)"
"(make-struct-field-accessor -ref_25 5 'nominal-sym)"
"(make-struct-field-accessor -ref_25 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_25 7 'extra-inspector)"
"(make-struct-field-accessor -ref_25 8 'extra-nominal-bindings))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding52.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym"
" simple-module-binding-nominal-module)"
"(let-values(((struct:_26 make-_26 ?_26 -ref_26 -set!_26)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(b_31 ser-push!_11 state_19)"
"(begin"
"(ser-push!_11 'tag '#:simple-module-binding)"
"(ser-push!_11(simple-module-binding-module b_31))"
"(ser-push!_11(simple-module-binding-sym b_31))"
"(ser-push!_11(simple-module-binding-phase b_31))"
"(ser-push!_11(simple-module-binding-nominal-module b_31))))))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'simple-module-binding)))))"
"(values"
" struct:_26"
" make-_26"
" ?_26"
"(make-struct-field-accessor -ref_26 0 'module)"
"(make-struct-field-accessor -ref_26 1 'phase)"
"(make-struct-field-accessor -ref_26 2 'sym)"
"(make-struct-field-accessor -ref_26 3 'nominal-module))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_2"
" sym_15"
" phase_13"
" nominal-module_2"
" nominal-phase_2"
" nominal-sym_2"
" nominal-require-phase_2"
" free=id_2"
" extra-inspector_2"
" extra-nominal-bindings_2)"
"(begin"
"(let-values(((nominal-module71_0) nominal-module_2)"
"((nominal-phase72_0) nominal-phase_2)"
"((nominal-sym73_0) nominal-sym_2)"
"((nominal-require-phase74_0) nominal-require-phase_2)"
"((free=id75_0) free=id_2)"
"((extra-inspector76_0) extra-inspector_2)"
"((extra-nominal-bindings77_0) extra-nominal-bindings_2))"
"(make-module-binding22.1"
" extra-inspector76_0"
" #t"
" extra-nominal-bindings77_0"
" #t"
" #f"
" #f"
" free=id75_0"
" #t"
" nominal-module71_0"
" #t"
" nominal-phase72_0"
" #t"
" nominal-require-phase74_0"
" #t"
" nominal-sym73_0"
" #t"
" #f"
" #f"
" module_2"
" phase_13"
" sym_15)))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_3 sym_16 phase_14 nominal-module_3)"
"(begin(simple-module-binding52.1 module_3 phase_14 sym_16 nominal-module_3))))"
"(define-values"
"(module-binding-module)"
"(lambda(b_32)"
"(begin(if(simple-module-binding? b_32)(simple-module-binding-module b_32)(full-module-binding-module b_32)))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_33)"
"(begin(if(simple-module-binding? b_33)(simple-module-binding-phase b_33)(full-module-binding-phase b_33)))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_34)"
"(begin(if(simple-module-binding? b_34)(simple-module-binding-sym b_34)(full-module-binding-sym b_34)))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_35)"
"(begin"
"(if(simple-module-binding? b_35)"
"(simple-module-binding-nominal-module b_35)"
"(full-module-binding-nominal-module b_35)))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_36)"
"(begin"
"(if(simple-module-binding? b_36)(simple-module-binding-phase b_36)(full-module-binding-nominal-phase b_36)))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_37)"
"(begin(if(simple-module-binding? b_37)(simple-module-binding-sym b_37)(full-module-binding-nominal-sym b_37)))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_38)(begin(if(simple-module-binding? b_38) 0(full-module-binding-nominal-require-phase b_38)))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_39)(begin(if(simple-module-binding? b_39) #f(full-module-binding-extra-inspector b_39)))))"
"(define-values"
"(module-binding-extra-nominal-bindings)"
"(lambda(b_40)(begin(if(simple-module-binding? b_40) null(full-module-binding-extra-nominal-bindings b_40)))))"
"(define-values"
"(local-binding?)"
"(lambda(b_41)"
"(begin(let-values(((or-part_0)(full-local-binding? b_41)))(if or-part_0 or-part_0(symbol? b_41))))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_27 make-_27 ?_27 -ref_27 -set!_27)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(b_42 ser-push!_12 state_20)"
"(begin"
"(ser-push!_12 'tag '#:local-binding)"
"(ser-push!_12(full-local-binding-key b_42))"
"(ser-push!_12(full-binding-free=id b_42))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))))"
"(values struct:_27 make-_27 ?_27(make-struct-field-accessor -ref_27 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_31 free=id_3)(begin(full-local-binding1.1 #f free=id_3 key_31))))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_0 frame-id4_0 free=id3_0 free=id5_0 key6_0)"
"(begin"
" 'make-local-binding7"
"(let-values(((key_32) key6_0))"
"(let-values(((frame-id_2)(if frame-id4_0 frame-id2_0 #f)))"
"(let-values(((free=id_4)(if free=id5_0 free=id3_0 #f)))"
"(let-values()"
"(if(if(not frame-id_2)(not free=id_4) #f)"
"(let-values() key_32)"
"(let-values()(full-local-binding1.1 frame-id_2 free=id_4 key_32))))))))))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_0 frame-id14_0 free=id12_0 free=id15_0 key10_0 key13_0 b16_0)"
"(begin"
" 'local-binding-update17"
"(let-values(((b_43) b16_0))"
"(let-values(((key_33)(if key13_0 key10_0(local-binding-key b_43))))"
"(let-values(((frame-id_3)(if frame-id14_0 frame-id11_0(binding-frame-id b_43))))"
"(let-values(((free=id_5)(if free=id15_0 free=id12_0(binding-free=id b_43))))"
"(let-values()"
"(let-values(((frame-id22_0) frame-id_3)((free=id23_0) free=id_5))"
"(make-local-binding7.1 frame-id22_0 #t free=id23_0 #t key_33))))))))))"
"(define-values"
"(local-binding-key)"
"(lambda(b_44)(begin(if(full-local-binding? b_44)(full-local-binding-key b_44) b_44))))"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_26 info_1)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_11)(exact-nonnegative-integer? v_26)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_2)(identifier? v_26)))"
"(if or-part_2 or-part_2(if(procedure? v_26)(procedure-arity-includes? v_26 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_26)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_26)"
"(let-values()"
"(begin"
"(if(<= v_26(list-ref info_1 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_26"
"                                  \"initialized-field count\""
"(list-ref info_1 1))))"
"(if(member v_26(list-ref info_1 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_26)))))"
"(void))"
"(values))))"
"(let-values(((ref_0)(list-ref info_1 3)))"
"(if(identifier? v_26)"
"(let-values()(lambda(t_33) v_26))"
"(if(integer? v_26)"
"(let-values()"
"(lambda(t_34)"
"(let-values(((val_19)(ref_0 t_34 v_26)))"
"(if(identifier? val_19) val_19(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_13)"
"(let-values(((id_0)(call-with-continuation-prompt(lambda()(v_26 t_13)))))"
"(begin"
"(if(identifier? id_0)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_0)))"
" id_0))))))))))))"
"(define-values"
"(struct:id-rename-transformer id-rename-transformer1.1 id-rename-transformer? id-rename-transformer-id)"
"(let-values(((struct:_28 make-_28 ?_28 -ref_28 -set!_28)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'id-rename-transformer)))))"
"(values struct:_28 make-_28 ?_28(make-struct-field-accessor -ref_28 0 'id))))"
"(define-values"
"(1/make-rename-transformer)"
"(lambda(id_1)"
"(begin"
" 'make-rename-transformer"
"(begin"
"(if(identifier? id_1)"
"(void)"
"          (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_1)))"
"(id-rename-transformer1.1 id_1)))))"
"(define-values"
"(1/rename-transformer-target)"
"(lambda(t_35)(begin 'rename-transformer-target((rename-transformer-value t_35) t_35))))"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_33 b_45 a-phase_0 b-phase_0)"
"(begin"
" 'free-identifier=?"
"(let-values(((ab_0)"
"(let-values(((temp49_0) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp49_0 #t a_33 a-phase_0))))"
"(let-values(((bb_0)"
"(let-values(((temp52_0) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp52_0 #t b_45 b-phase_0))))"
"(if(let-values(((or-part_27)(symbol? ab_0)))(if or-part_27 or-part_27(symbol? bb_0)))"
"(let-values()(eq? ab_0 bb_0))"
"(let-values()(same-binding? ab_0 bb_0))))))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_1 bb_1)"
"(begin"
"(if(module-binding? ab_1)"
"(let-values()"
"(if(module-binding? bb_1)"
"(if(eq?(module-binding-sym ab_1)(module-binding-sym bb_1))"
"(if(eqv?(module-binding-phase ab_1)(module-binding-phase bb_1))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_1))"
"(1/module-path-index-resolve(module-binding-module bb_1)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_1)"
"(let-values()(if(local-binding? bb_1)(eq?(local-binding-key ab_1)(local-binding-key bb_1)) #f))"
"          (let-values () (error \"bad binding\" ab_1)))))))"
"(define-values"
"(same-binding-nominals?)"
"(lambda(ab_2 bb_2)"
"(begin"
"(if(eq?"
"(1/module-path-index-resolve(module-binding-nominal-module ab_2))"
"(1/module-path-index-resolve(module-binding-nominal-module bb_2)))"
"(if(eqv?(module-binding-nominal-require-phase ab_2)(module-binding-nominal-require-phase bb_2))"
"(eqv?(module-binding-nominal-sym ab_2)(module-binding-nominal-sym bb_2))"
" #f)"
" #f))))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_2 phase_15)"
"(begin"
" 'identifier-binding-symbol"
"(let-values(((b_46)"
"(let-values(((temp55_0) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f temp55_0 #t id_2 phase_15))))"
"(if(symbol? b_46)"
"(let-values() b_46)"
"(if(module-binding? b_46)"
"(let-values()(module-binding-sym b_46))"
"(if(local-binding? b_46)(let-values()(local-binding-key b_46))(let-values()(syntax-e$1 id_2)))))))))"
"(define-values"
"(identifier-binding$1)"
"(let-values(((identifier-binding5_0)"
"(lambda(id3_0 phase4_0 top-level-symbol?1_0 top-level-symbol?2_0)"
"(begin"
" 'identifier-binding5"
"(let-values(((id_3) id3_0))"
"(let-values(((phase_16) phase4_0))"
"(let-values(((top-level-symbol?_0)(if top-level-symbol?2_0 top-level-symbol?1_0 #f)))"
"(let-values()"
"(let-values(((b_26)"
"(let-values(((id56_0) id_3)((phase57_0) phase_16))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f #f #f id56_0 phase57_0))))"
"(if(module-binding? b_26)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_26))"
"(if top-level-symbol?_0(list(module-binding-nominal-sym b_26)) #f)"
"(list"
"(module-binding-module b_26)"
"(module-binding-sym b_26)"
"(module-binding-nominal-module b_26)"
"(module-binding-nominal-sym b_26)"
"(module-binding-phase b_26)"
"(module-binding-nominal-require-phase b_26)"
"(module-binding-nominal-phase b_26))))"
"(if(local-binding? b_26)(let-values() 'lexical)(let-values() #f))))))))))))"
"(case-lambda"
"((id_4 phase_17)(begin 'identifier-binding(identifier-binding5_0 id_4 phase_17 #f #f)))"
"((id_1 phase_18 top-level-symbol?1_1)(identifier-binding5_0 id_1 phase_18 top-level-symbol?1_1 #t)))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_20 id_5 phase_19)"
"(begin"
"(if(1/rename-transformer? val_20)"
"(let-values()"
"(let-values(((free=id_6)(1/rename-transformer-target val_20)))"
"(if(syntax-property$1 free=id_6 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_47)"
"(let-values(((temp63_0) #t)((temp64_0) #t))"
"(resolve+shift30.1 #f #f temp63_0 #t #f #f temp64_0 #t #f #f id_5 phase_19))))"
"(let-values(((temp58_0)(syntax-scope-set id_5 phase_19))"
"((temp59_0)(syntax-e$1 id_5))"
"((temp60_0)(binding-set-free=id b_47 free=id_6)))"
"(add-binding-in-scopes!20.1 #f #f temp58_0 temp59_0 temp60_0)))))))"
"(void)))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_48 free=id_7)"
"(begin"
"(if(module-binding? b_48)"
"(let-values()"
"(let-values(((free=id66_0) free=id_7))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" free=id66_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b_48)))"
"(if(local-binding? b_48)"
"(let-values()"
"(let-values(((free=id68_0) free=id_7))(local-binding-update17.1 #f #f free=id68_0 #t #f #f b_48)))"
"          (let-values () (error \"bad binding for free=id:\" b_48)))))))"
"(define-values"
"(struct:non-source-shift non-source-shift7.1 non-source-shift? non-source-shift-from non-source-shift-to)"
"(let-values(((struct:_29 make-_29 ?_29 -ref_29 -set!_29)"
"(let-values()"
"(let-values()"
"(make-struct-type 'non-source-shift #f 2 0 #f null 'prefab #f '(0 1) #f 'non-source-shift)))))"
"(values"
" struct:_29"
" make-_29"
" ?_29"
"(make-struct-field-accessor -ref_29 0 'from)"
"(make-struct-field-accessor -ref_29 1 'to))))"
"(define-values(shift-from)(lambda(s_148)(begin(if(pair? s_148)(car s_148)(non-source-shift-from s_148)))))"
"(define-values(shift-to)(lambda(s_11)(begin(if(pair? s_11)(cdr s_11)(non-source-shift-to s_11)))))"
"(define-values"
"(syntax-module-path-index-shift15.1)"
"(lambda(non-source?8_0 non-source?9_0 s12_0 from-mpi13_0 to-mpi14_0 inspector10_0 inspector11_0)"
"(begin"
" 'syntax-module-path-index-shift15"
"(let-values(((s_149) s12_0))"
"(let-values(((from-mpi_1) from-mpi13_0))"
"(let-values(((to-mpi_1) to-mpi14_0))"
"(let-values(((inspector_3)(if inspector11_0 inspector10_0 #f)))"
"(let-values(((non-source?_0)(if non-source?9_0 non-source?8_0 #f)))"
"(let-values()"
"(if(eq? from-mpi_1 to-mpi_1)"
"(let-values()(if inspector_3(syntax-set-inspector s_149 inspector_3) s_149))"
"(let-values()"
"(let-values(((shift_0)"
"(if non-source?_0"
"(non-source-shift7.1 from-mpi_1 to-mpi_1)"
"(cons from-mpi_1 to-mpi_1))))"
"(let-values(((the-struct_31) s_149))"
"(if(syntax?$1 the-struct_31)"
"(let-values(((mpi-shifts70_0)(cons shift_0(syntax-mpi-shifts s_149)))"
"((inspector71_1)"
"(let-values(((or-part_68)(syntax-inspector s_149)))"
"(if or-part_68 or-part_68 inspector_3)))"
"((scope-propagations+tamper72_0)"
"(if(datum-has-elements?(syntax-content s_149))"
"(propagation-mpi-shift"
"(syntax-scope-propagations+tamper s_149)"
"(lambda(s_21)(cons shift_0 s_21))"
" inspector_3"
"(syntax-scopes s_149)"
"(syntax-shifted-multi-scopes s_149)"
"(syntax-mpi-shifts s_149))"
"(syntax-scope-propagations+tamper s_149))))"
"(syntax1.1"
"(syntax-content the-struct_31)"
"(syntax-scopes the-struct_31)"
"(syntax-shifted-multi-scopes the-struct_31)"
" scope-propagations+tamper72_0"
" mpi-shifts70_0"
"(syntax-srcloc the-struct_31)"
"(syntax-props the-struct_31)"
" inspector71_1))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_31)))))))))))))))"
"(define-values"
"(resolve+shift30.1)"
"(lambda(ambiguous-value18_0"
" ambiguous-value23_1"
" exactly?19_0"
" exactly?24_1"
" extra-shifts22_0"
" extra-shifts27_0"
" immediate?20_0"
" immediate?25_0"
" unbound-sym?21_0"
" unbound-sym?26_0"
" s28_0"
" phase29_0)"
"(begin"
" 'resolve+shift30"
"(let-values(((s_150) s28_0))"
"(let-values(((phase_20) phase29_0))"
"(let-values(((ambiguous-value_1)(if ambiguous-value23_1 ambiguous-value18_0 #f)))"
"(let-values(((exactly?_1)(if exactly?24_1 exactly?19_0 #f)))"
"(let-values(((immediate?_0)(if immediate?25_0 immediate?20_0 exactly?_1)))"
"(let-values(((unbound-sym?_0)(if unbound-sym?26_0 unbound-sym?21_0 #f)))"
"(let-values(((extra-shifts_4)(if extra-shifts27_0 extra-shifts22_0 null)))"
"(let-values()"
"(let-values(((immediate-b_0)"
"(let-values(((ambiguous-value75_0) ambiguous-value_1)"
"((exactly?76_0) exactly?_1)"
"((extra-shifts77_0) extra-shifts_4))"
"(resolve33.1"
" ambiguous-value75_0"
" #t"
" exactly?76_0"
" #t"
" extra-shifts77_0"
" #t"
" #f"
" #f"
" s_150"
" phase_20))))"
"(let-values(((b_49)"
"(if(if immediate-b_0"
"(if(not immediate?_0)(binding-free=id immediate-b_0) #f)"
" #f)"
"(let-values(((temp78_0)(binding-free=id immediate-b_0))"
"((phase79_0) phase_20)"
"((temp80_0)(append extra-shifts_4(syntax-mpi-shifts s_150)))"
"((ambiguous-value81_0) ambiguous-value_1)"
"((exactly?82_0) exactly?_1)"
"((unbound-sym?83_0) unbound-sym?_0))"
"(resolve+shift30.1"
" ambiguous-value81_0"
" #t"
" exactly?82_0"
" #t"
" temp80_0"
" #t"
" #f"
" #f"
" unbound-sym?83_0"
" #t"
" temp78_0"
" phase79_0))"
" immediate-b_0)))"
"(if(module-binding? b_49)"
"(let-values()"
"(let-values(((mpi-shifts_2)(syntax-mpi-shifts s_150)))"
"(if(null? mpi-shifts_2)"
"(let-values() b_49)"
"(let-values()"
"(let-values(((mod_0)(module-binding-module b_49)))"
"(let-values(((shifted-mod_0)(apply-syntax-shifts mod_0 mpi-shifts_2)))"
"(let-values(((nominal-mod_0)(module-binding-nominal-module b_49)))"
"(let-values(((shifted-nominal-mod_0)"
"(if(eq? mod_0 nominal-mod_0)"
" shifted-mod_0"
"(apply-syntax-shifts nominal-mod_0 mpi-shifts_2))))"
"(if(if(eq? mod_0 shifted-mod_0)"
"(if(eq? nominal-mod_0 shifted-nominal-mod_0)"
"(if(not(binding-free=id b_49))"
"(null?(module-binding-extra-nominal-bindings b_49))"
" #f)"
" #f)"
" #f)"
" b_49"
"(let-values(((shifted-mod85_0) shifted-mod_0)"
"((shifted-nominal-mod86_0) shifted-nominal-mod_0)"
"((temp87_0)"
"(if(binding-free=id b_49)"
"(let-values(((temp89_0)(binding-free=id b_49))"
"((s90_0) s_150))"
"(syntax-transfer-shifts39.1 #f #f temp89_0 s90_0 #f #f))"
" #f))"
"((temp88_0)"
"(reverse$1"
"(let-values(((lst_48)"
"(module-binding-extra-nominal-bindings"
" b_49)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_48)))"
"((letrec-values(((for-loop_71)"
"(lambda(fold-var_35 lst_49)"
"(begin"
" 'for-loop"
"(if(pair? lst_49)"
"(let-values(((b_50)"
"(unsafe-car"
" lst_49))"
"((rest_21)"
"(unsafe-cdr"
" lst_49)))"
"(let-values(((fold-var_36)"
"(let-values(((fold-var_37)"
" fold-var_35))"
"(let-values(((fold-var_38)"
"(let-values()"
"(cons"
"(let-values()"
"(apply-syntax-shifts-to-binding"
" b_50"
" mpi-shifts_2))"
" fold-var_37))))"
"(values"
" fold-var_38)))))"
"(if(not #f)"
"(for-loop_71"
" fold-var_36"
" rest_21)"
" fold-var_36)))"
" fold-var_35)))))"
" for-loop_71)"
" null"
" lst_48))))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp88_0"
" #t"
" #f"
" #f"
" temp87_0"
" #t"
" shifted-mod85_0"
" #t"
" shifted-nominal-mod86_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b_49)))))))))))"
"(if(if(not b_49) unbound-sym?_0 #f)"
"(let-values()(syntax-e$1 s_150))"
"(let-values() b_49))))))))))))))))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_11 shifts_0)"
"(begin"
"(if(null? shifts_0)"
"(let-values() mpi_11)"
"(let-values()"
"(let-values(((shifted-mpi_1)(apply-syntax-shifts mpi_11(cdr shifts_0))))"
"(let-values(((shift_1)(car shifts_0)))"
"(module-path-index-shift shifted-mpi_1(shift-from shift_1)(shift-to shift_1)))))))))"
"(define-values"
"(apply-syntax-shifts-to-binding)"
"(lambda(b_51 shifts_1)"
"(begin"
"(if(null? shifts_1)"
"(let-values() b_51)"
"(let-values()"
"(let-values(((shifted-b_0)(apply-syntax-shifts-to-binding b_51(cdr shifts_1))))"
"(let-values(((shift_2)(car shifts_1)))"
"(binding-module-path-index-shift shifted-b_0(shift-from shift_2)(shift-to shift_2)))))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_52 from-mpi_2 to-mpi_2)"
"(begin"
"(if(module-binding? b_52)"
"(let-values()"
"(let-values(((temp92_0)(module-path-index-shift(module-binding-module b_52) from-mpi_2 to-mpi_2))"
"((temp93_0)(module-path-index-shift(module-binding-nominal-module b_52) from-mpi_2 to-mpi_2))"
"((temp94_0)"
"(reverse$1"
"(let-values(((lst_32)(module-binding-extra-nominal-bindings b_52)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_32)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_39 lst_33)"
"(begin"
" 'for-loop"
"(if(pair? lst_33)"
"(let-values(((b_53)(unsafe-car lst_33))"
"((rest_13)(unsafe-cdr lst_33)))"
"(let-values(((fold-var_21)"
"(let-values(((fold-var_40) fold-var_39))"
"(let-values(((fold-var_41)"
"(let-values()"
"(cons"
"(let-values()"
"(binding-module-path-index-shift"
" b_53"
" from-mpi_2"
" to-mpi_2))"
" fold-var_40))))"
"(values fold-var_41)))))"
"(if(not #f)(for-loop_25 fold-var_21 rest_13) fold-var_21)))"
" fold-var_39)))))"
" for-loop_25)"
" null"
" lst_32))))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp94_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp92_0"
" #t"
" temp93_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b_52)))"
"(let-values() b_52)))))"
"(define-values"
"(syntax-transfer-shifts39.1)"
"(lambda(non-source?33_0 non-source?34_0 to-s37_0 from-s38_0 inspector35_0 inspector36_0)"
"(begin"
" 'syntax-transfer-shifts39"
"(let-values(((to-s_0) to-s37_0))"
"(let-values(((from-s_1) from-s38_0))"
"(let-values(((inspector_4)(if inspector36_0 inspector35_0 #f)))"
"(let-values(((non-source?_1)(if non-source?34_0 non-source?33_0 #f)))"
"(let-values()"
"(let-values(((shifts_2)(syntax-mpi-shifts from-s_1)))"
"(if(if(null? shifts_2) inspector_4 #f)"
"(let-values()(syntax-set-inspector to-s_0 inspector_4))"
"(let-values()"
"(let-values(((lst_50)(reverse$1 shifts_2))((start_12) 0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_50)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_12)))"
"((letrec-values(((for-loop_72)"
"(lambda(s_151 lst_51 pos_9)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_51) #t #f)"
"(let-values(((shift_3)(unsafe-car lst_51))"
"((rest_22)(unsafe-cdr lst_51))"
"((i_75) pos_9))"
"(let-values(((s_152)"
"(let-values(((s_153) s_151))"
"(let-values(((s_90)"
"(let-values()"
"(let-values(((temp96_0)"
"(shift-from shift_3))"
"((temp97_0)"
"(shift-to shift_3))"
"((temp98_0)"
"(if(zero? i_75)"
" inspector_4"
" #f))"
"((non-source?99_0)"
" non-source?_1))"
"(syntax-module-path-index-shift15.1"
" non-source?99_0"
" #t"
" s_153"
" temp96_0"
" temp97_0"
" temp98_0"
" #t)))))"
"(values s_90)))))"
"(if(not #f)(for-loop_72 s_152 rest_22(+ pos_9 1)) s_152)))"
" s_151)))))"
" for-loop_72)"
" to-s_0"
" lst_50"
" start_12))))))))))))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_97 insp_3)"
"(begin"
"(let-values(((the-struct_32) s_97))"
"(if(syntax?$1 the-struct_32)"
"(let-values(((inspector100_0)"
"(let-values(((or-part_134)(syntax-inspector s_97)))(if or-part_134 or-part_134 insp_3)))"
"((scope-propagations+tamper101_0)"
"(if(datum-has-elements?(syntax-content s_97))"
"(propagation-mpi-shift"
"(syntax-scope-propagations+tamper s_97)"
" #f"
" insp_3"
"(syntax-scopes s_97)"
"(syntax-shifted-multi-scopes s_97)"
"(syntax-mpi-shifts s_97))"
"(syntax-scope-propagations+tamper s_97))))"
"(syntax1.1"
"(syntax-content the-struct_32)"
"(syntax-scopes the-struct_32)"
"(syntax-shifted-multi-scopes the-struct_32)"
" scope-propagations+tamper101_0"
"(syntax-mpi-shifts the-struct_32)"
"(syntax-srcloc the-struct_32)"
"(syntax-props the-struct_32)"
" inspector100_0))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_32))))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module45_0)"
"(lambda(s44_0 source?42_0 source?43_0)"
"(begin"
" 'syntax-source-module45"
"(let-values(((s_154) s44_0))"
"(let-values()"
"(let-values()"
"(begin"
"(if(syntax?$1 s_154)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_154)))"
"(let-values(((lst_52)(reverse$1(syntax-mpi-shifts s_154))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_52)))"
"((letrec-values(((for-loop_73)"
"(lambda(result_48 lst_53)"
"(begin"
" 'for-loop"
"(if(pair? lst_53)"
"(let-values(((shift_4)(unsafe-car lst_53))"
"((rest_23)(unsafe-cdr lst_53)))"
"(let-values(((result_49)"
"(let-values(((result_50) result_48))"
"(if(non-source-shift? shift_4)"
" result_50"
"(let-values()"
"(let-values(((result_51)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_3)"
"(car"
" shift_4)))"
"(let-values(((path_5"
" base_14)"
"(1/module-path-index-split"
" from-mpi_3)))"
"(if(not path_5)"
"(if(module-path-index-resolved"
" from-mpi_3)"
"(apply-syntax-shifts"
" from-mpi_3"
"(syntax-mpi-shifts"
" s_154))"
" #f)"
" #f)))))))"
"(values result_51)))))))"
"(if(if(not((lambda x_37 result_49) shift_4))(not #f) #f)"
"(for-loop_73 result_49 rest_23)"
" result_49)))"
" result_48)))))"
" for-loop_73)"
" #f"
" lst_52)))))))))))"
"(case-lambda"
"((s_155)(begin 'syntax-source-module(syntax-source-module45_0 s_155 #f #f)))"
"((s_156 source?42_1)(syntax-source-module45_0 s_156 source?42_1 #t)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_6)"
"(begin"
" 'identifier-prune-to-source-module"
"(begin"
"(if(identifier? id_6)"
"(void)"
"          (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_6)))"
"(let-values(((the-struct_33)(datum->syntax$1 #f(syntax-e$1 id_6) id_6 id_6)))"
"(if(syntax?$1 the-struct_33)"
"(let-values(((mpi-shifts102_0)(syntax-mpi-shifts id_6)))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-scope-propagations+tamper the-struct_33)"
" mpi-shifts102_0"
"(syntax-srcloc the-struct_33)"
"(syntax-props the-struct_33)"
"(syntax-inspector the-struct_33)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_33)))))))"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_0)(begin(hash-set! built-in-symbols s_0 #t))))"
"(define-values(built-in-symbol?)(lambda(s_157)(begin(hash-ref built-in-symbols s_157 #f))))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_158)"
"(begin"
"      (let-values (((built-in-s_0) (string->symbol (format \".~s\" s_158))))"
"(begin(register-built-in-symbol! built-in-s_0) built-in-s_0)))))"
"(void"
"(begin"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference))"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?"
" variable-reference-from-unsafe?))"
"(for-each2"
" register-built-in-symbol!"
" '(let letrec* define"
" or"
" and"
" pariah"
" variable-set!"
" variable-ref"
" variable-ref/no-check"
" make-instance-variable-reference"
" annotation?"
" annotation-expression"
" #%app"
" #%call-with-values"
" make-pthread-parameter))))"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literals-id)(make-built-in-symbol! 'syntax-literals))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'provided"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(p_29 ser-push!_13 state_21)"
"(begin"
"(ser-push!_13 'tag '#:provided)"
"(ser-push!_13(provided-binding p_29))"
"(ser-push!_13(provided-protected? p_29))"
"(ser-push!_13(provided-syntax? p_29))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'provided)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'binding)"
"(make-struct-field-accessor -ref_0 1 'protected?)"
"(make-struct-field-accessor -ref_0 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_83)(begin(if(provided? v_83)(provided-binding v_83) v_83))))"
"(define-values(provided-as-protected?)(lambda(v_5)(begin(if(provided? v_5)(provided-protected? v_5) #f))))"
"(define-values(provided-as-transformer?)(lambda(v_33)(begin(if(provided? v_33)(provided-syntax? v_33) #f))))"
"(define-values"
"(deserialize-provided)"
"(lambda(binding_6 protected?_0 syntax?_1)(begin(provided1.1 binding_6 protected?_0 syntax?_1))))"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_0 phase-shift4_0 provide-phase-level3_0 self1_0 binding/p9_0 sym10_0)"
"(begin"
" 'provide-binding-to-require-binding11"
"(let-values(((binding/p_0) binding/p9_0))"
"(let-values(((sym_17) sym10_0))"
"(let-values(((self_1) self1_0))"
"(let-values(((mpi_12) mpi2_0))"
"(let-values(((provide-phase-level_0) provide-phase-level3_0))"
"(let-values(((phase-shift_0) phase-shift4_0))"
"(let-values()"
"(let-values(((binding_7)(provided-as-binding binding/p_0)))"
"(let-values(((from-mod_0)(module-binding-module binding_7)))"
"(let-values(((temp18_1)(module-path-index-shift from-mod_0 self_1 mpi_12))"
"((mpi19_0) mpi_12)"
"((provide-phase-level20_0) provide-phase-level_0)"
"((sym21_1) sym_17)"
"((phase-shift22_0) phase-shift_0)"
"((temp23_1) #f)"
"((temp24_2)"
"(if(not(provided-as-protected? binding/p_0))"
"(module-binding-extra-inspector binding_7)"
" #f))"
"((null25_0) null))"
"(module-binding-update48.1"
" temp24_2"
" #t"
" null25_0"
" #t"
" temp23_1"
" #t"
" #f"
" #f"
" temp18_1"
" #t"
" mpi19_0"
" #t"
" provide-phase-level20_0"
" #t"
" phase-shift22_0"
" #t"
" sym21_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" binding_7))))))))))))))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-prefix"
" bulk-binding-excepts"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_30 make-_30 ?_30 -ref_30 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_54 ser-push!_14 reachable-scopes_5)"
"(begin"
"(ser-push!_14 'tag '#:bulk-binding)"
"(ser-push!_14(bulk-binding-prefix b_54))"
"(ser-push!_14(bulk-binding-excepts b_54))"
"(ser-push!_14(bulk-binding-mpi b_54))"
"(ser-push!_14(bulk-binding-provide-phase-level b_54))"
"(ser-push!_14(bulk-binding-phase-shift b_54))"
"(ser-push!_14 'tag '#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_55 mpi-shifts_3)"
"(let-values(((or-part_135)(bulk-binding-provides b_55)))"
"(if or-part_135"
" or-part_135"
"(let-values(((mod-name_1)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_55) mpi-shifts_3))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-bulk-binding-registry b_55)"
"(void)"
"(let-values()"
"(error"
"                                                     \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_1)))"
"(values))))"
"(let-values(((table_74)"
"(bulk-binding-registry-table"
"(bulk-binding-bulk-binding-registry b_55))))"
"(let-values(((bulk-provide_0)(hash-ref table_74 mod-name_1 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_0"
"(void)"
"(let-values()"
"(error"
"                                                           \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self! b_55(bulk-provide-self bulk-provide_0))"
"(values))))"
"(let-values(((provides_0)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_0)"
"(bulk-binding-provide-phase-level b_55))))"
"(let-values(((excepts_0)(bulk-binding-excepts b_55)))"
"(let-values(((prefix_0)(bulk-binding-prefix b_55)))"
"(let-values(((adjusted-provides_0)"
"(if(let-values(((or-part_136) prefix_0))"
"(if or-part_136"
" or-part_136"
"(positive?(hash-count excepts_0))))"
"(let-values()"
"(bulk-provides-add-prefix-remove-exceptions"
" provides_0"
" prefix_0"
" excepts_0))"
"(let-values() provides_0))))"
"(begin"
"(set-bulk-binding-provides! b_55 adjusted-provides_0)"
" adjusted-provides_0))))))))))))))"
"(lambda(b_56 binding_8 sym_18)"
"(let-values(((temp28_1)"
"(if(bulk-binding-prefix b_56)"
"(string->symbol"
"(substring"
"(symbol->string sym_18)"
"(string-length(symbol->string(bulk-binding-prefix b_56)))))"
" sym_18))"
"((temp29_0)(bulk-binding-self b_56))"
"((temp30_0)(bulk-binding-mpi b_56))"
"((temp31_0)(bulk-binding-provide-phase-level b_56))"
"((temp32_0)(bulk-binding-phase-shift b_56)))"
"(provide-binding-to-require-binding11.1"
" temp30_0"
" temp32_0"
" temp31_0"
" temp29_0"
" binding_8"
" temp28_1))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'bulk-binding)))))"
"(values"
" struct:_30"
" make-_30"
" ?_30"
"(make-struct-field-accessor -ref_30 0 'provides)"
"(make-struct-field-accessor -ref_30 1 'prefix)"
"(make-struct-field-accessor -ref_30 2 'excepts)"
"(make-struct-field-accessor -ref_30 3 'self)"
"(make-struct-field-accessor -ref_30 4 'mpi)"
"(make-struct-field-accessor -ref_30 5 'provide-phase-level)"
"(make-struct-field-accessor -ref_30 6 'phase-shift)"
"(make-struct-field-accessor -ref_30 7 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_30 0 'provides)"
"(make-struct-field-mutator -set!_30 3 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(prefix_1 excepts_1 mpi_13 provide-phase-level_1 phase-shift_1 bulk-binding-registry_0)"
"(begin"
"(bulk-binding14.1 #f prefix_1 excepts_1 #f mpi_13 provide-phase-level_1 phase-shift_1 bulk-binding-registry_0))))"
"(define-values"
"(bulk-provides-add-prefix-remove-exceptions)"
"(lambda(provides_1 prefix_2 excepts_2)"
"(begin"
"(let-values(((ht_35) provides_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_35)))"
"((letrec-values(((for-loop_35)"
"(lambda(table_28 i_47)"
"(begin"
" 'for-loop"
"(if i_47"
"(let-values(((sym_2 val_21)(hash-iterate-key+value ht_35 i_47)))"
"(let-values(((table_75)"
"(let-values(((table_76) table_28))"
"(if(hash-ref excepts_2 sym_2 #f)"
" table_76"
"(let-values(((table_77) table_76))"
"(let-values(((table_78)"
"(let-values()"
"(let-values(((key_34 val_22)"
"(let-values()"
"(values"
"(if prefix_2"
"(string->symbol"
"(format"
"                                                                                             \"~a~a\""
" prefix_2"
" sym_2))"
" sym_2)"
" val_21))))"
"(hash-set table_77 key_34 val_22)))))"
"(values table_78)))))))"
"(if(not #f)(for-loop_35 table_75(hash-iterate-next ht_35 i_47)) table_75)))"
" table_28)))))"
" for-loop_35)"
" '#hash()"
"(hash-iterate-first ht_35)))))))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_31 make-_31 ?_31 -ref_31 -set!_31)"
"(let-values()"
"(let-values()"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))))"
"(values"
" struct:_31"
" make-_31"
" ?_31"
"(make-struct-field-accessor -ref_31 0 'self)"
"(make-struct-field-accessor -ref_31 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_32 make-_32 ?_32 -ref_32 -set!_32)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))))"
"(values struct:_32 make-_32 ?_32(make-struct-field-accessor -ref_32 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(begin(bulk-binding-registry16.1(make-hasheq)))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_1 mod-name_2 self_2 provides_2)"
"(begin"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_1)"
" mod-name_2"
"(bulk-provide15.1 self_2 provides_2)))))"
"(define-values"
"(registered-bulk-provide?)"
"(lambda(bulk-binding-registry_2 mod-name_3)"
"(begin(if(hash-ref(bulk-binding-registry-table bulk-binding-registry_2) mod-name_3 #f) #t #f))))"
"(define-values(generate-lift-key)(lambda()(begin(gensym 'lift))))"
"(define-values"
"(struct:root-expand-context/outer"
" root-expand-context/outer1.1"
" root-expand-context/outer?"
" root-expand-context/outer-inner"
" root-expand-context/outer-post-expansion-scope"
" root-expand-context/outer-use-site-scopes"
" root-expand-context/outer-frame-id)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'root-expand-context/outer)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'inner)"
"(make-struct-field-accessor -ref_0 1 'post-expansion-scope)"
"(make-struct-field-accessor -ref_0 2 'use-site-scopes)"
"(make-struct-field-accessor -ref_0 3 'frame-id))))"
"(define-values"
"(struct:root-expand-context/inner"
" root-expand-context/inner2.1"
" root-expand-context/inner?"
" root-expand-context/inner-module-scopes"
" root-expand-context/inner-top-level-bind-scope"
" root-expand-context/inner-all-scopes-stx"
" root-expand-context/inner-defined-syms"
" root-expand-context/inner-counter"
" root-expand-context/inner-lift-key)"
"(let-values(((struct:_33 make-_33 ?_33 -ref_33 -set!_33)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context/inner"
" #f"
" 6"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'root-expand-context/inner)))))"
"(values"
" struct:_33"
" make-_33"
" ?_33"
"(make-struct-field-accessor -ref_33 0 'module-scopes)"
"(make-struct-field-accessor -ref_33 1 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_33 2 'all-scopes-stx)"
"(make-struct-field-accessor -ref_33 3 'defined-syms)"
"(make-struct-field-accessor -ref_33 4 'counter)"
"(make-struct-field-accessor -ref_33 5 'lift-key))))"
"(define-values"
"(root-expand-context/make)"
"(lambda(module-scopes_0"
" post-expansion-scope_0"
" top-level-bind-scope_0"
" all-scopes-stx_0"
" use-site-scopes_0"
" defined-syms_0"
" frame-id_4"
" counter_0"
" lift-key_0)"
"(begin"
"(root-expand-context/outer1.1"
"(root-expand-context/inner2.1"
" module-scopes_0"
" top-level-bind-scope_0"
" all-scopes-stx_0"
" defined-syms_0"
" counter_0"
" lift-key_0)"
" post-expansion-scope_0"
" use-site-scopes_0"
" frame-id_4))))"
"(define-values"
"(root-expand-context-post-expansion-scope)"
"(lambda(v_84)(begin(root-expand-context/outer-post-expansion-scope v_84))))"
"(define-values"
"(root-expand-context-use-site-scopes)"
"(lambda(v_85)(begin(root-expand-context/outer-use-site-scopes v_85))))"
"(define-values(root-expand-context-frame-id)(lambda(v_86)(begin(root-expand-context/outer-frame-id v_86))))"
"(define-values"
"(root-expand-context-module-scopes)"
"(lambda(v_61)(begin(root-expand-context/inner-module-scopes(root-expand-context/outer-inner v_61)))))"
"(define-values"
"(root-expand-context-top-level-bind-scope)"
"(lambda(v_87)(begin(root-expand-context/inner-top-level-bind-scope(root-expand-context/outer-inner v_87)))))"
"(define-values"
"(root-expand-context-all-scopes-stx)"
"(lambda(v_88)(begin(root-expand-context/inner-all-scopes-stx(root-expand-context/outer-inner v_88)))))"
"(define-values"
"(root-expand-context-defined-syms)"
"(lambda(v_89)(begin(root-expand-context/inner-defined-syms(root-expand-context/outer-inner v_89)))))"
"(define-values"
"(root-expand-context-counter)"
"(lambda(v_90)(begin(root-expand-context/inner-counter(root-expand-context/outer-inner v_90)))))"
"(define-values"
"(root-expand-context-lift-key)"
"(lambda(v_44)(begin(root-expand-context/inner-lift-key(root-expand-context/outer-inner v_44)))))"
"(define-values"
"(make-root-expand-context11.1)"
"(lambda(all-scopes-stx6_0"
" all-scopes-stx10_0"
" initial-scopes3_0"
" initial-scopes7_0"
" outside-scope4_0"
" outside-scope8_0"
" post-expansion-scope5_0"
" post-expansion-scope9_0)"
"(begin"
" 'make-root-expand-context11"
"(let-values(((initial-scopes_0)(if initial-scopes7_0 initial-scopes3_0 null)))"
"(let-values(((outside-scope_0)(if outside-scope8_0 outside-scope4_0 top-level-common-scope)))"
"(let-values(((post-expansion-scope_1)"
"(if post-expansion-scope9_0 post-expansion-scope5_0(new-multi-scope 'top-level))))"
"(let-values(((all-scopes-stx_1)(if all-scopes-stx10_0 all-scopes-stx6_0 #f)))"
"(let-values()"
"(let-values(((module-scopes_1)(list* post-expansion-scope_1 outside-scope_0 initial-scopes_0)))"
"(root-expand-context/make"
" module-scopes_1"
" post-expansion-scope_1"
"(new-scope 'module)"
"(let-values(((or-part_137) all-scopes-stx_1))"
"(if or-part_137 or-part_137(add-scopes empty-syntax module-scopes_1)))"
"(box null)"
"(make-hasheqv)"
"                   (string->uninterned-symbol \"root-frame\")"
"(box 0)"
"(generate-lift-key)))))))))))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_0 orig-self_0 new-self_0)"
"(begin"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_0))"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope ctx_0))"
"(let-values(((temp16_1)(root-expand-context-all-scopes-stx ctx_0))"
"((orig-self17_0) orig-self_0)"
"((new-self18_0) new-self_0))"
"(syntax-module-path-index-shift15.1 #f #f temp16_1 orig-self17_0 new-self18_0 #f #f))"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_0)))"
"(let-values(((ht_61)(root-expand-context-defined-syms ctx_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_61)))"
"((letrec-values(((for-loop_74)"
"(lambda(table_76 i_76)"
"(begin"
" 'for-loop"
"(if i_76"
"(let-values(((phase_21 ht_62)(hash-iterate-key+value ht_61 i_76)))"
"(let-values(((table_79)"
"(let-values(((table_80) table_76))"
"(let-values(((table_33)"
"(let-values()"
"(let-values(((key_35 val_23)"
"(let-values()"
"(values phase_21 ht_62))))"
"(hash-set table_80 key_35 val_23)))))"
"(values table_33)))))"
"(if(not #f)(for-loop_74 table_79(hash-iterate-next ht_61 i_76)) table_79)))"
" table_76)))))"
" for-loop_74)"
" '#hasheqv()"
"(hash-iterate-first ht_61))))"
"(root-expand-context-frame-id ctx_0)"
"(unbox(root-expand-context-counter ctx_0)))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_0)"
"(begin"
"(let-values(((vec_24)(if(syntax?$1 vec-s_0)(syntax-e$1 vec-s_0) #f)))"
"(begin"
"(if(if(vector? vec_24)"
"(if(=(vector-length vec_24) 7)"
"(if(syntax?$1(vector-ref vec_24 0))"
"(if(syntax-with-one-scope?(vector-ref vec_24 1))"
"(if(syntax?$1(vector-ref vec_24 2))"
"(if(syntax?$1(vector-ref vec_24 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_24 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_24 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_24 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"            (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_0)))"
"(root-expand-context/make"
"(extract-scope-list(vector-ref vec_24 0))"
"(extract-scope(vector-ref vec_24 1))"
"(new-scope 'module)"
"(vector-ref vec_24 2)"
"(box(extract-scope-list(vector-ref vec_24 3)))"
"(unpack-defined-syms(vector-ref vec_24 4))"
"(syntax-e$1(vector-ref vec_24 5))"
"(box(syntax-e$1(vector-ref vec_24 6)))"
"(generate-lift-key)))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_38)"
"(begin"
"(let-values(((ht_37) v_38))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_37)))"
"((letrec-values(((for-loop_36)"
"(lambda(result_52 i_48)"
"(begin"
" 'for-loop"
"(if i_48"
"(let-values(((phase_22 ht-s_0)(hash-iterate-key+value ht_37 i_48)))"
"(let-values(((result_53)"
"(let-values()"
"(let-values(((result_54)"
"(let-values()"
"(let-values()"
"(if(phase? phase_22)"
"(if(hash?(syntax-e$1 ht-s_0))"
"(let-values(((ht_63)(syntax-e$1 ht-s_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_63)))"
"((letrec-values(((for-loop_75)"
"(lambda(result_55 i_77)"
"(begin"
" 'for-loop"
"(if i_77"
"(let-values(((sym_19"
" id_7)"
"(hash-iterate-key+value"
" ht_63"
" i_77)))"
"(let-values(((result_31)"
"(let-values()"
"(let-values(((result_56)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_19)"
"(identifier?"
" id_7)"
" #f)))))"
"(values"
" result_56)))))"
"(if(if(not"
"((lambda x_38"
"(not"
" result_31))"
" sym_19"
" id_7))"
"(not #f)"
" #f)"
"(for-loop_75"
" result_31"
"(hash-iterate-next"
" ht_63"
" i_77))"
" result_31)))"
" result_55)))))"
" for-loop_75)"
" #t"
"(hash-iterate-first ht_63))))"
" #f)"
" #f)))))"
"(values result_54)))))"
"(if(if(not((lambda x_39(not result_53)) phase_22 ht-s_0))(not #f) #f)"
"(for-loop_36 result_53(hash-iterate-next ht_37 i_48))"
" result_53)))"
" result_52)))))"
" for-loop_36)"
" #t"
"(hash-iterate-first ht_37)))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_8)(begin(map2 generalize-scope(set->list(syntax-scope-set stx_8 0))))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_9)(begin(if(syntax?$1 stx_9)(= 1(set-count(syntax-scope-set stx_9 0))) #f))))"
"(define-values"
"(extract-scope)"
"(lambda(stx_10)(begin(let-values(((s_159)(syntax-scope-set stx_10 0)))(generalize-scope(set-first s_159))))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_91)"
"(begin"
"(hash-copy"
"(let-values(((ht_64)(syntax-e$1 v_91)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_64)))"
"((letrec-values(((for-loop_12)"
"(lambda(table_36 i_78)"
"(begin"
" 'for-loop"
"(if i_78"
"(let-values(((phase_23 ht-s_1)(hash-iterate-key+value ht_64 i_78)))"
"(let-values(((table_38)"
"(let-values(((table_81) table_36))"
"(let-values(((table_82)"
"(let-values()"
"(let-values(((key_36 val_24)"
"(let-values()"
"(values"
" phase_23"
"(hash-copy"
"(let-values(((ht_65)"
"(syntax-e$1"
" ht-s_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_65)))"
"((letrec-values(((for-loop_76)"
"(lambda(table_83"
" i_79)"
"(begin"
" 'for-loop"
"(if i_79"
"(let-values(((sym_20"
" id_8)"
"(hash-iterate-key+value"
" ht_65"
" i_79)))"
"(let-values(((table_84)"
"(let-values(((table_85)"
" table_83))"
"(let-values(((table_86)"
"(let-values()"
"(let-values(((key_37"
" val_25)"
"(let-values()"
"(values"
" sym_20"
" id_8))))"
"(hash-set"
" table_85"
" key_37"
" val_25)))))"
"(values"
" table_86)))))"
"(if(not"
" #f)"
"(for-loop_76"
" table_84"
"(hash-iterate-next"
" ht_65"
" i_79))"
" table_84)))"
" table_83)))))"
" for-loop_76)"
" '#hash()"
"(hash-iterate-first"
" ht_65)))))))))"
"(hash-set table_81 key_36 val_24)))))"
"(values table_82)))))"
"(if(not #f)(for-loop_12 table_38(hash-iterate-next ht_64 i_78)) table_38)))"
" table_36)))))"
" for-loop_12)"
" '#hasheqv()"
"(hash-iterate-first ht_64))))))))"
"(define-values(1/primitive-table) primitive-table)"
"(define-values(1/primitive->compiled-position) primitive->compiled-position)"
"(define-values(1/compiled-position->primitive) compiled-position->primitive)"
"(define-values(1/primitive-in-category?) primitive-in-category?)"
"(define-values(1/linklet?) linklet?)"
"(define-values(1/compile-linklet) compile-linklet)"
"(define-values(1/recompile-linklet) recompile-linklet)"
"(define-values(1/eval-linklet) eval-linklet)"
"(define-values(1/read-compiled-linklet) read-compiled-linklet)"
"(define-values(1/instantiate-linklet) instantiate-linklet)"
"(define-values(1/linklet-import-variables) linklet-import-variables)"
"(define-values(1/linklet-export-variables) linklet-export-variables)"
"(define-values(1/instance?) instance?)"
"(define-values(1/make-instance) make-instance)"
"(define-values(1/instance-name) instance-name)"
"(define-values(1/instance-data) instance-data)"
"(define-values(1/instance-variable-names) instance-variable-names)"
"(define-values(1/instance-variable-value) instance-variable-value)"
"(define-values(1/instance-set-variable-value!) instance-set-variable-value!)"
"(define-values(1/instance-unset-variable!) instance-unset-variable!)"
"(define-values(1/linklet-directory?) linklet-directory?)"
"(define-values(1/hash->linklet-directory) hash->linklet-directory)"
"(define-values(1/linklet-directory->hash) linklet-directory->hash)"
"(define-values(1/linklet-bundle?) linklet-bundle?)"
"(define-values(1/hash->linklet-bundle) hash->linklet-bundle)"
"(define-values(1/linklet-bundle->hash) linklet-bundle->hash)"
"(define-values(1/variable-reference?) variable-reference?)"
"(define-values(1/variable-reference->instance) variable-reference->instance)"
"(define-values(1/variable-reference-constant?) variable-reference-constant?)"
"(define-values(1/variable-reference-from-unsafe?) variable-reference-from-unsafe?)"
"(void"
"(if 1/variable-reference-constant?"
"(void)"
"    (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-registry"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-registry)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'declarations)"
"(make-struct-field-accessor -ref_0 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(begin(module-registry1.1(make-hasheq)(box #f)))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_26 proc_2)"
"(begin"
"(let-values(((lock-box_0)(module-registry-lock-box r_26)))"
"((letrec-values(((loop_52)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((v_32)(unbox lock-box_0)))"
"(if(let-values(((or-part_77)(not v_32)))"
"(if or-part_77 or-part_77(sync/timeout 0(car v_32)(cdr v_32))))"
"(let-values()"
"(let-values(((sema_0)(make-semaphore)))"
"(let-values(((lock_0)(cons(semaphore-peek-evt sema_0)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_0 v_32 lock_0)"
"(let-values()(begin(proc_2) void))"
"(let-values()(loop_52))))"
"(lambda()(semaphore-post sema_0)))))))"
"(if(eq?(current-thread)(cdr v_32))"
"(let-values()(proc_2))"
"(let-values()(begin(sync(car v_32)(cdr v_32))(loop_52))))))))))"
" loop_52))))))"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" 1/namespace-module-registry"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(ns_0 port_9 mode_9)"
"                         (let-values ((() (begin (write-string \"#<namespace\" port_9) (values))))"
"(let-values(((n_19)(namespace-source-name ns_0)))"
"(let-values((()"
"(begin"
"(if n_19"
"                                               (let-values () (fprintf port_9 \":~a\" (namespace->name ns_0)))"
"(void))"
"(values))))"
"(let-values(((0-phase_0)(namespace-0-phase ns_0)))"
"(let-values(((phase-level_0)(phase-(namespace-phase ns_0) 0-phase_0)))"
"(begin"
"(if(zero-phase? phase-level_0)"
"(void)"
"                                       (let-values () (fprintf port_9 \":~s\" phase-level_0)))"
"(if(zero-phase? 0-phase_0)"
"(void)"
"(let-values()"
"                                         (fprintf port_9 \"~a~s\" (if (positive? 0-phase_0) \"+\" \"\") 0-phase_0)))"
"                                     (write-string \">\" port_9))))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'mpi)"
"(make-struct-field-accessor -ref_0 1 'source-name)"
"(make-struct-field-accessor -ref_0 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_0 3 'phase)"
"(make-struct-field-accessor -ref_0 4 '0-phase)"
"(make-struct-field-accessor -ref_0 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_0 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_0 7 'module-registry)"
"(make-struct-field-accessor -ref_0 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_0 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_0 10 'root-namespace)"
"(make-struct-field-accessor -ref_0 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_0 12 'inspector)"
"(make-struct-field-accessor -ref_0 13 'available-module-instances)"
"(make-struct-field-accessor -ref_0 14 'module-instances)"
"(make-struct-field-mutator -set!_0 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_34 make-_34 ?_34 -ref_34 -set!_34)"
"(let-values()"
"(let-values()"
"(make-struct-type 'definitions #f 2 0 #f null(current-inspector) #f '(0 1) #f 'definitions)))))"
"(values"
" struct:_34"
" make-_34"
" ?_34"
"(make-struct-field-accessor -ref_34 0 'variables)"
"(make-struct-field-accessor -ref_34 1 'transformers))))"
"(define-values(make-namespace)(lambda()(begin(let-values()(new-namespace9.1 #f #f #f #f #f #f)))))"
"(define-values"
"(new-namespace9.1)"
"(lambda(register?4_0 register?6_0 root-expand-ctx3_0 root-expand-ctx5_0 share-from-ns7_0 share-from-ns8_0)"
"(begin"
" 'new-namespace9"
"(let-values(((share-from-ns_0)(if share-from-ns8_0 share-from-ns7_0 #f)))"
"(let-values(((root-expand-ctx_0)"
"(if root-expand-ctx5_0"
" root-expand-ctx3_0"
"(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f)))))"
"(let-values(((register?_0)(if register?6_0 register?4_0 #t)))"
"(let-values()"
"(let-values(((phase_24)(if share-from-ns_0(namespace-phase share-from-ns_0) 0)))"
"(let-values(((ns_1)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_0)"
" phase_24"
" phase_24"
"(make-small-hasheqv)"
"(make-small-hasheqv)"
"(if share-from-ns_0(1/namespace-module-registry share-from-ns_0)(make-module-registry))"
"(if share-from-ns_0"
"(namespace-bulk-binding-registry share-from-ns_0)"
"(make-bulk-binding-registry))"
"(make-small-hasheq)"
"(if share-from-ns_0"
"(let-values(((or-part_138)(namespace-root-namespace share-from-ns_0)))"
"(if or-part_138 or-part_138 share-from-ns_0))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_0"
"(namespace-available-module-instances share-from-ns_0)"
"(make-hasheqv))"
"(if share-from-ns_0(namespace-module-instances share-from-ns_0)(make-hasheqv)))))"
"(begin"
"(if register?_0"
"(let-values()(small-hash-set!(namespace-phase-to-namespace ns_1) phase_24 ns_1))"
"(void))"
" ns_1))))))))))"
"(define-values"
"(1/current-namespace)"
"(make-parameter"
"(make-namespace)"
"(lambda(v_92)"
"(begin"
"       (if (1/namespace? v_92) (void) (let-values () (raise-argument-error 'current-namespace \"namespace?\" v_92)))"
" v_92))))"
"(define-values"
"(namespace-get-root-expand-ctx)"
"(lambda(ns_2)(begin(force(unbox(namespace-root-expand-ctx ns_2))))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_3 root-ctx_0)(begin(set-box!(namespace-root-expand-ctx ns_3) root-ctx_0))))"
"(define-values"
"(namespace->module)"
"(lambda(ns_4 name_17)"
"(begin"
"(let-values(((or-part_139)(small-hash-ref(namespace-submodule-declarations ns_4) name_17 #f)))"
"(if or-part_139"
" or-part_139"
"(hash-ref(module-registry-declarations(1/namespace-module-registry ns_4)) name_17 #f))))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_5 phase_25)"
"(begin"
"(let-values(((or-part_140)(small-hash-ref(namespace-phase-to-namespace ns_5) phase_25 #f)))"
"(if or-part_140"
" or-part_140"
"(let-values(((p-ns_0)"
"(let-values(((the-struct_34) ns_5))"
"(if(1/namespace? the-struct_34)"
"(let-values(((phase22_0) phase_25))"
"(namespace1.1"
"(namespace-mpi the-struct_34)"
"(namespace-source-name the-struct_34)"
"(namespace-root-expand-ctx the-struct_34)"
" phase22_0"
"(namespace-0-phase the-struct_34)"
"(namespace-phase-to-namespace the-struct_34)"
"(namespace-phase-level-to-definitions the-struct_34)"
"(1/namespace-module-registry the-struct_34)"
"(namespace-bulk-binding-registry the-struct_34)"
"(namespace-submodule-declarations the-struct_34)"
"(namespace-root-namespace the-struct_34)"
"(namespace-declaration-inspector the-struct_34)"
"(namespace-inspector the-struct_34)"
"(namespace-available-module-instances the-struct_34)"
"(namespace-module-instances the-struct_34)))"
"                            (raise-argument-error 'struct-copy \"namespace?\" the-struct_34)))))"
"(begin(small-hash-set!(namespace-phase-to-namespace ns_5) phase_25 p-ns_0) p-ns_0)))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_6)"
"(begin"
"(let-values(((n_20)(namespace-source-name ns_6)))"
"(let-values(((s_52)"
"(if(not n_20)"
"(let-values() 'top-level)"
"(if(symbol? n_20)"
"                          (let-values () (format \"'~s\" n_20))"
"                          (let-values () (string-append \"\\\"\" (path->string n_20) \"\\\"\"))))))"
"(let-values(((r_27)(1/resolved-module-path-name(1/module-path-index-resolve(namespace-mpi ns_6)))))"
"            (if (pair? r_27) (string-append \"(submod \" s_52 \" \" (substring (format \"~s\" (cdr r_27)) 1)) s_52)))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_7 phase-level_1)"
"(begin"
"(let-values(((d_8)(small-hash-ref(namespace-phase-level-to-definitions ns_7) phase-level_1 #f)))"
"(let-values(((or-part_48) d_8))"
"(if or-part_48"
" or-part_48"
"(let-values()"
"(let-values(((p-ns_1)"
"(namespace->namespace-at-phase ns_7(phase+(namespace-0-phase ns_7) phase-level_1))))"
"(let-values(((d_9)(definitions2.1(1/make-instance(namespace->name p-ns_1) p-ns_1)(make-hasheq))))"
"(begin(small-hash-set!(namespace-phase-level-to-definitions ns_7) phase-level_1 d_9) d_9))))))))))"
"(define-values"
"(namespace-set-variable!)"
"(let-values(((namespace-set-variable!18_0)"
"(lambda(ns14_0 phase-level15_0 name16_1 val17_0 as-constant?12_0 as-constant?13_0)"
"(begin"
" 'namespace-set-variable!18"
"(let-values(((ns_8) ns14_0))"
"(let-values(((phase-level_2) phase-level15_0))"
"(let-values(((name_18) name16_1))"
"(let-values(((val_26) val17_0))"
"(let-values(((as-constant?_0)(if as-constant?13_0 as-constant?12_0 #f)))"
"(let-values()"
"(let-values(((d_10)(namespace->definitions ns_8 phase-level_2)))"
"(1/instance-set-variable-value!"
"(definitions-variables d_10)"
" name_18"
" val_26"
"(if as-constant?_0 'constant #f)))))))))))))"
"(case-lambda"
"((ns_9 phase-level_3 name_19 val_27)(begin(namespace-set-variable!18_0 ns_9 phase-level_3 name_19 val_27 #f #f)))"
"((ns_10 phase-level_4 name_20 val_28 as-constant?12_1)"
"(namespace-set-variable!18_0 ns_10 phase-level_4 name_20 val_28 as-constant?12_1 #t)))))"
"(define-values"
"(namespace-set-consistent!)"
"(lambda(ns_11 phase-level_5 name_21 val_29)"
"(begin"
"(let-values(((d_11)(namespace->definitions ns_11 phase-level_5)))"
"(1/instance-set-variable-value!(definitions-variables d_11) name_21 val_29 'consistent)))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_12 phase-level_6 name_22)"
"(begin"
"(let-values(((d_12)(namespace->definitions ns_12 phase-level_6)))"
"(1/instance-unset-variable!(definitions-variables d_12) name_22)))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_13 phase-level_7 name_23 val_30)"
"(begin"
"(let-values(((d_13)(namespace->definitions ns_13(add1 phase-level_7))))"
"(hash-set!(definitions-transformers d_13) name_23 val_30)))))"
"(define-values"
"(namespace-unset-transformer!)"
"(lambda(ns_14 phase-level_8 name_24)"
"(begin"
"(let-values(((d_14)(namespace->definitions ns_14(add1 phase-level_8))))"
"(hash-remove!(definitions-transformers d_14) name_24)))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_15 phase-level_9 name_16 fail-k_0)"
"(begin"
"(let-values(((d_15)(namespace->definitions ns_15 phase-level_9)))"
"(1/instance-variable-value(definitions-variables d_15) name_16 fail-k_0)))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_16 phase-level_10 name_25 fail-k_1)"
"(begin"
"(let-values(((d_16)(namespace->definitions ns_16(add1 phase-level_10))))"
"(hash-ref(definitions-transformers d_16) name_25 fail-k_1)))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_17 phase-shift_2)(begin(definitions-variables(namespace->definitions ns_17 phase-shift_2)))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_0 b-ns_0)"
"(begin"
"(eq?"
"(small-hash-ref(namespace-phase-level-to-definitions a-ns_0) 0 'no-a)"
"(small-hash-ref(namespace-phase-level-to-definitions b-ns_0) 0 'no-b)))))"
"(define-values(original-property-sym)(gensym 'original))"
"(define-values"
"(syntax->list$1)"
"(lambda(s_0)"
"(begin"
" 'syntax->list"
"(let-values(((l_46)"
"((letrec-values(((loop_74)"
"(lambda(s_1)"
"(begin"
" 'loop"
"(if(pair? s_1)"
"(let-values()(cons(car s_1)(loop_74(cdr s_1))))"
"(if(syntax?$1 s_1)"
"(let-values()(loop_74(syntax-e$1 s_1)))"
"(let-values() s_1)))))))"
" loop_74)"
" s_0)))"
"(if(list? l_46) l_46 #f)))))"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin5_0)"
"(lambda(new-stx3_0 old-stx4_0 id1_0 id2_0)"
"(begin"
" 'syntax-track-origin5"
"(let-values(((new-stx_0) new-stx3_0))"
"(let-values(((old-stx_0) old-stx4_0))"
"(let-values(((id_9)"
"(if id2_0"
" id1_0"
"(if(identifier? old-stx_0)"
" old-stx_0"
"(let-values(((v_93)(syntax-e/no-taint old-stx_0)))"
"(if(pair? v_93)(car v_93) #f))))))"
"(let-values()"
"(let-values(((old-props_0)(syntax-props old-stx_0)))"
"(if(zero?(hash-count old-props_0))"
"(let-values()"
"(if id_9"
"(syntax-property$1"
" new-stx_0"
" 'origin"
"(cons id_9(hash-ref(syntax-props new-stx_0) 'origin null)))"
" new-stx_0))"
"(let-values()"
"(let-values(((new-props_0)(syntax-props new-stx_0)))"
"(if(zero?(hash-count new-props_0))"
"(let-values()"
"(if id_9"
"(let-values()"
"(let-values(((old-origin_0)"
"(plain-property-value"
"(hash-ref old-props_0 'origin missing$1))))"
"(let-values(((origin_0)"
"(if(eq? old-origin_0 missing$1)"
"(list id_9)"
"(cons id_9 old-origin_0))))"
"(let-values(((the-struct_35) new-stx_0))"
"(if(syntax?$1 the-struct_35)"
"(let-values(((props7_0)(hash-set old-props_0 'origin origin_0)))"
"(syntax1.1"
"(syntax-content the-struct_35)"
"(syntax-scopes the-struct_35)"
"(syntax-shifted-multi-scopes the-struct_35)"
"(syntax-scope-propagations+tamper the-struct_35)"
"(syntax-mpi-shifts the-struct_35)"
"(syntax-srcloc the-struct_35)"
" props7_0"
"(syntax-inspector the-struct_35)))"
"                                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_35))))))"
"(let-values()"
"(let-values(((the-struct_36) new-stx_0))"
"(if(syntax?$1 the-struct_36)"
"(let-values(((props8_0) old-props_0))"
"(syntax1.1"
"(syntax-content the-struct_36)"
"(syntax-scopes the-struct_36)"
"(syntax-shifted-multi-scopes the-struct_36)"
"(syntax-scope-propagations+tamper the-struct_36)"
"(syntax-mpi-shifts the-struct_36)"
"(syntax-srcloc the-struct_36)"
" props8_0"
"(syntax-inspector the-struct_36)))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_36))))))"
"(let-values()"
"(let-values(((old-props-with-origin_0)"
"(if id_9"
"(hash-set"
" old-props_0"
" 'origin"
"(cons id_9(hash-ref old-props_0 'origin null)))"
" old-props_0)))"
"(let-values(((updated-props_0)"
"(if(<"
"(hash-count old-props-with-origin_0)"
"(hash-count new-props_0))"
"(let-values()"
"(let-values(((ht_60) old-props-with-origin_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_60)))"
"((letrec-values(((for-loop_70)"
"(lambda(new-props_1 i_74)"
"(begin"
" 'for-loop"
"(if i_74"
"(let-values(((k_16 v_82)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_60"
" i_74)))"
"(let-values(((new-props_2)"
"(let-values(((new-props_3)"
" new-props_1))"
"(let-values(((new-props_4)"
"(let-values()"
"(let-values(((new-v_0)"
"(hash-ref"
" new-props_3"
" k_16"
" missing$1)))"
"(hash-set"
" new-props_3"
" k_16"
"(if(eq?"
" new-v_0"
" missing$1)"
" v_82"
"(cons/preserve"
" new-v_0"
" v_82)))))))"
"(values"
" new-props_4)))))"
"(if(not #f)"
"(for-loop_70"
" new-props_2"
"(unsafe-immutable-hash-iterate-next"
" ht_60"
" i_74))"
" new-props_2)))"
" new-props_1)))))"
" for-loop_70)"
" new-props_0"
"(unsafe-immutable-hash-iterate-first ht_60)))))"
"(let-values()"
"(let-values(((ht_66) new-props_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_66)))"
"((letrec-values(((for-loop_77)"
"(lambda(old-props_1 i_80)"
"(begin"
" 'for-loop"
"(if i_80"
"(let-values(((k_17 v_5)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_66"
" i_80)))"
"(let-values(((old-props_2)"
"(let-values(((old-props_3)"
" old-props_1))"
"(let-values(((old-props_4)"
"(let-values()"
"(let-values(((old-v_0)"
"(hash-ref"
" old-props_3"
" k_17"
" missing$1)))"
"(hash-set"
" old-props_3"
" k_17"
"(if(eq?"
" old-v_0"
" missing$1)"
" v_5"
"(cons/preserve"
" v_5"
" old-v_0)))))))"
"(values"
" old-props_4)))))"
"(if(not #f)"
"(for-loop_77"
" old-props_2"
"(unsafe-immutable-hash-iterate-next"
" ht_66"
" i_80))"
" old-props_2)))"
" old-props_1)))))"
" for-loop_77)"
" old-props-with-origin_0"
"(unsafe-immutable-hash-iterate-first ht_66))))))))"
"(let-values(((the-struct_37) new-stx_0))"
"(if(syntax?$1 the-struct_37)"
"(let-values(((props9_0) updated-props_0))"
"(syntax1.1"
"(syntax-content the-struct_37)"
"(syntax-scopes the-struct_37)"
"(syntax-shifted-multi-scopes the-struct_37)"
"(syntax-scope-propagations+tamper the-struct_37)"
"(syntax-mpi-shifts the-struct_37)"
"(syntax-srcloc the-struct_37)"
" props9_0"
"(syntax-inspector the-struct_37)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"syntax?\""
" the-struct_37)))))))))))))))))))"
"(case-lambda"
"((new-stx_1 old-stx_1)(begin 'syntax-track-origin(syntax-track-origin5_0 new-stx_1 old-stx_1 #f #f)))"
"((new-stx_2 old-stx_2 id1_1)(syntax-track-origin5_0 new-stx_2 old-stx_2 id1_1 #t)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_34 b_57)"
"(begin"
"(if(let-values(((or-part_31)(preserved-property-value? a_34)))"
"(if or-part_31 or-part_31(preserved-property-value? b_57)))"
"(preserved-property-value1.1(cons(plain-property-value a_34)(plain-property-value b_57)))"
"(cons a_34 b_57)))))"
"(define-values"
"(syntax-track-origin*)"
"(lambda(old-stxes_0 new-stx_3)"
"(begin"
"(let-values(((lst_54) old-stxes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_54)))"
"((letrec-values(((for-loop_78)"
"(lambda(new-stx_4 lst_55)"
"(begin"
" 'for-loop"
"(if(pair? lst_55)"
"(let-values(((old-stx_3)(unsafe-car lst_55))((rest_24)(unsafe-cdr lst_55)))"
"(let-values(((new-stx_5)"
"(let-values(((new-stx_6) new-stx_4))"
"(let-values(((new-stx_7)"
"(let-values()"
"(syntax-track-origin$1 new-stx_6 old-stx_3))))"
"(values new-stx_7)))))"
"(if(not #f)(for-loop_78 new-stx_5 rest_24) new-stx_5)))"
" new-stx_4)))))"
" for-loop_78)"
" new-stx_3"
" lst_54))))))"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax$1 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_27 make-_27 ?_27 -ref_27 -set!_27)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:exn:srclocs"
"(lambda(e_16)(filter values(map2 syntax-srcloc(1/exn:fail:syntax-exprs e_16))))))"
" #f"
" #f"
" '(0)"
"(lambda(str_1 cm_0 exprs_0 info_2)"
"(begin"
"(if(if(list? exprs_0)(andmap2 syntax?$1 exprs_0) #f)"
"(void)"
"                           (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_0)))"
"(values str_1 cm_0 exprs_0)))"
" 'exn:fail:syntax)))))"
"(values struct:_27 make-_27 ?_27(make-struct-field-accessor -ref_27 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_35 make-_35 ?_35 -ref_35 -set!_35)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))))"
"(values struct:_35 make-_35 ?_35)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error11_0)"
"(lambda(given-name9_0"
" message10_0"
" expr1_0"
" sub-expr2_0"
" extra-sources3_0"
" message-suffix4_0"
" expr5_0"
" sub-expr6_0"
" extra-sources7_0"
" message-suffix8_0)"
"(begin"
" 'raise-syntax-error11"
"(let-values(((given-name_0) given-name9_0))"
"(let-values(((message_0) message10_0))"
"(let-values(((expr_0)(if expr5_0 expr1_0 #f)))"
"(let-values(((sub-expr_0)(if sub-expr6_0 sub-expr2_0 #f)))"
"(let-values(((extra-sources_0)(if extra-sources7_0 extra-sources3_0 null)))"
"                              (let-values (((message-suffix_0) (if message-suffix8_0 message-suffix4_0 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax$1"
" given-name_0"
" message_0"
" expr_0"
" sub-expr_0"
" extra-sources_0"
" message-suffix_0))))))))))))"
"(case-lambda"
"((given-name_1 message_1)"
"(begin 'raise-syntax-error(raise-syntax-error11_0 given-name_1 message_1 #f #f #f #f #f #f #f #f)))"
"((given-name_2 message_2 expr_1 sub-expr_1 extra-sources_1 message-suffix4_1)"
"(raise-syntax-error11_0 given-name_2 message_2 expr_1 sub-expr_1 extra-sources_1 message-suffix4_1 #t #t #t #t))"
"((given-name_3 message_3 expr_2 sub-expr_2 extra-sources3_1)"
"(raise-syntax-error11_0 given-name_3 message_3 expr_2 sub-expr_2 extra-sources3_1 #f #t #t #t #f))"
"((given-name_4 message_4 expr_3 sub-expr2_1)"
"(raise-syntax-error11_0 given-name_4 message_4 expr_3 sub-expr2_1 #f #f #t #t #f #f))"
"((given-name_5 message_5 expr1_1)(raise-syntax-error11_0 given-name_5 message_5 expr1_1 #f #f #f #t #f #f #f)))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error23_0)"
"(lambda(given-name21_0"
" message22_0"
" expr13_0"
" sub-expr14_0"
" extra-sources15_0"
" message-suffix16_0"
" expr17_0"
" sub-expr18_0"
" extra-sources19_0"
" message-suffix20_0)"
"(begin"
" 'raise-unbound-syntax-error23"
"(let-values(((given-name_6) given-name21_0))"
"(let-values(((message_6) message22_0))"
"(let-values(((expr_4)(if expr17_0 expr13_0 #f)))"
"(let-values(((sub-expr_3)(if sub-expr18_0 sub-expr14_0 #f)))"
"(let-values(((extra-sources_2)(if extra-sources19_0 extra-sources15_0 null)))"
"                              (let-values (((message-suffix_1) (if message-suffix20_0 message-suffix16_0 \"\")))"
"(let-values()"
"(do-raise-syntax-error"
" make-exn:fail:syntax:unbound$1"
" given-name_6"
" message_6"
" expr_4"
" sub-expr_3"
" extra-sources_2"
" message-suffix_1))))))))))))"
"(case-lambda"
"((given-name_7 message_7)(begin(raise-unbound-syntax-error23_0 given-name_7 message_7 #f #f #f #f #f #f #f #f)))"
"((given-name_8 message_8 expr_5 sub-expr_4 extra-sources_3 message-suffix16_1)"
"(raise-unbound-syntax-error23_0"
" given-name_8"
" message_8"
" expr_5"
" sub-expr_4"
" extra-sources_3"
" message-suffix16_1"
" #t"
" #t"
" #t"
" #t))"
"((given-name_9 message_9 expr_6 sub-expr_5 extra-sources15_1)"
"(raise-unbound-syntax-error23_0 given-name_9 message_9 expr_6 sub-expr_5 extra-sources15_1 #f #t #t #t #f))"
"((given-name_10 message_10 expr_7 sub-expr14_1)"
"(raise-unbound-syntax-error23_0 given-name_10 message_10 expr_7 sub-expr14_1 #f #f #t #t #f #f))"
"((given-name_11 message_11 expr13_1)"
"(raise-unbound-syntax-error23_0 given-name_11 message_11 expr13_1 #f #f #f #t #f #f #f)))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(exn:fail:syntax_0 given-name_12 message_12 expr_8 sub-expr_6 extra-sources_4 message-suffix_2)"
"(begin"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_141)(not given-name_12)))"
"(if or-part_141 or-part_141(symbol? given-name_12)))"
"(void)"
"                        (let-values () (raise-argument-error 'raise-syntax-error \"(or/c symbol? #f)\" given-name_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_12)"
"(void)"
"                          (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_4)(andmap2 syntax?$1 extra-sources_4) #f)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'raise-syntax-error \"(listof syntax?)\" extra-sources_4)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_2)"
"(void)"
"                              (let-values () (raise-argument-error 'raise-syntax-error \"string?\" message-suffix_2)))"
"(values))))"
"(let-values(((name_26)"
"(format"
"                             \"~a\""
"(let-values(((or-part_142) given-name_12))"
"(if or-part_142"
" or-part_142"
"(let-values(((or-part_143)(extract-form-name expr_8)))"
"(if or-part_143 or-part_143 '?)))))))"
"(let-values(((at-message_0)"
"(let-values(((or-part_144)"
"(if sub-expr_6"
"(if(error-print-source-location)"
"                                                (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$1 #f sub-expr_6)))"
" #f)"
" #f)))"
"                                (if or-part_144 or-part_144 \"\"))))"
"(let-values(((in-message_0)"
"(let-values(((or-part_145)"
"(if expr_8"
"(if(error-print-source-location)"
"                                                  (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_8)))"
" #f)"
" #f)))"
"                                  (if or-part_145 or-part_145 \"\"))))"
"(let-values(((src-loc-str_0)"
"(let-values(((or-part_138)(extract-source-location sub-expr_6)))"
"(if or-part_138"
" or-part_138"
"(let-values(((or-part_146)(extract-source-location expr_8)))"
"                                        (if or-part_146 or-part_146 \"\"))))))"
"(raise"
"(exn:fail:syntax_0"
"                        (string-append src-loc-str_0 name_26 \": \" message_12 at-message_0 in-message_0 message-suffix_2)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_147) sub-expr_6))(if or-part_147 or-part_147 expr_8))"
"(cons"
"(datum->syntax$1"
" #f"
"(let-values(((or-part_57) sub-expr_6))(if or-part_57 or-part_57 expr_8)))"
" extra-sources_4)"
" extra-sources_4)))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_160)"
"(begin"
"(if(syntax?$1 s_160)"
"(let-values()"
"(let-values(((e_17)(syntax-e$1 s_160)))"
"(if(symbol? e_17)"
"(let-values() e_17)"
"(if(if(pair? e_17)(identifier?(car e_17)) #f)"
"(let-values()(syntax-e$1(car e_17)))"
"(let-values() #f)))))"
"(let-values() #f)))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_84)"
"(begin"
"(if(syntax?$1 s_84)"
"(if(syntax-srcloc s_84)"
"          (let-values (((str_2) (srcloc->string (syntax-srcloc s_84)))) (if str_2 (string-append str_2 \": \") #f))"
" #f)"
" #f))))"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()(make-struct-type 'module-use #f 2 0 #f null #f #f '(0 1) #f 'module-use)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'module)"
"(make-struct-field-accessor -ref_0 1 'phase))))"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-phase-level-linklet-info-callback"
" module-force-bulk-binding"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-is-predefined?"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module"
" #f"
" 20"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)"
" #f"
" 'module)))))"
"(values"
" struct:_1"
" make-_1"
" ?_1"
"(make-struct-field-accessor -ref_1 0 'source-name)"
"(make-struct-field-accessor -ref_1 1 'self)"
"(make-struct-field-accessor -ref_1 2 'requires)"
"(make-struct-field-accessor -ref_1 3 'provides)"
"(make-struct-field-accessor -ref_1 4 'access)"
"(make-struct-field-accessor -ref_1 5 'language-info)"
"(make-struct-field-accessor -ref_1 6 'min-phase-level)"
"(make-struct-field-accessor -ref_1 7 'max-phase-level)"
"(make-struct-field-accessor -ref_1 8 'phase-level-linklet-info-callback)"
"(make-struct-field-accessor -ref_1 9 'force-bulk-binding)"
"(make-struct-field-accessor -ref_1 10 'prepare-instance)"
"(make-struct-field-accessor -ref_1 11 'instantiate-phase)"
"(make-struct-field-accessor -ref_1 12 'primitive?)"
"(make-struct-field-accessor -ref_1 13 'is-predefined?)"
"(make-struct-field-accessor -ref_1 14 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_1 15 'no-protected?)"
"(make-struct-field-accessor -ref_1 16 'inspector)"
"(make-struct-field-accessor -ref_1 17 'submodule-names)"
"(make-struct-field-accessor -ref_1 18 'supermodule-name)"
"(make-struct-field-accessor -ref_1 19 'get-all-variables)"
"(make-struct-field-mutator -set!_1 4 'access))))"
"(define-values"
"(struct:module-linklet-info"
" module-linklet-info2.1"
" module-linklet-info?"
" module-linklet-info-linklet-or-instance"
" module-linklet-info-module-uses"
" module-linklet-info-self"
" module-linklet-info-inspector"
" module-linklet-info-extra-inspector"
" module-linklet-info-extra-inspectorsss)"
"(let-values(((struct:_36 make-_36 ?_36 -ref_36 -set!_36)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-linklet-info"
" #f"
" 6"
" 0"
" #f"
" null"
" #f"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'module-linklet-info)))))"
"(values"
" struct:_36"
" make-_36"
" ?_36"
"(make-struct-field-accessor -ref_36 0 'linklet-or-instance)"
"(make-struct-field-accessor -ref_36 1 'module-uses)"
"(make-struct-field-accessor -ref_36 2 'self)"
"(make-struct-field-accessor -ref_36 3 'inspector)"
"(make-struct-field-accessor -ref_36 4 'extra-inspector)"
"(make-struct-field-accessor -ref_36 5 'extra-inspectorsss))))"
"(define-values"
"(make-module39.1)"
"(lambda(cross-phase-persistent?16_0"
" cross-phase-persistent?34_0"
" force-bulk-binding-callback10_0"
" force-bulk-binding-callback28_0"
" get-all-variables20_0"
" get-all-variables38_0"
" instantiate-phase-callback9_0"
" language-info13_0"
" language-info31_0"
" max-phase-level8_0"
" max-phase-level26_0"
" min-phase-level7_0"
" min-phase-level25_0"
" no-protected?17_0"
" no-protected?35_0"
" phase-level-linklet-info-callback12_0"
" phase-level-linklet-info-callback30_0"
" predefined?15_0"
" predefined?33_0"
" prepare-instance-callback11_0"
" prepare-instance-callback29_0"
" primitive?14_0"
" primitive?32_0"
" provides6_0"
" requires5_0"
" requires23_0"
" self4_0"
" source-name3_0"
" source-name21_0"
" submodule-names18_0"
" submodule-names36_0"
" supermodule-name19_0"
" supermodule-name37_0)"
"(begin"
" 'make-module39"
"(let-values(((source-name_0)(if source-name21_0 source-name3_0 #f)))"
"(let-values(((self_3) self4_0))"
"(let-values(((requires_0)(if requires23_0 requires5_0 null)))"
"(let-values(((provides_3) provides6_0))"
"(let-values(((min-phase-level_0)(if min-phase-level25_0 min-phase-level7_0 0)))"
"(let-values(((max-phase-level_0)(if max-phase-level26_0 max-phase-level8_0 0)))"
"(let-values(((instantiate-phase_0) instantiate-phase-callback9_0))"
"(let-values(((force-bulk-binding_0)"
"(if force-bulk-binding-callback28_0 force-bulk-binding-callback10_0 void)))"
"(let-values(((prepare-instance_0)"
"(if prepare-instance-callback29_0 prepare-instance-callback11_0 void)))"
"(let-values(((phase-level-linklet-info-callback_0)"
"(if phase-level-linklet-info-callback30_0"
" phase-level-linklet-info-callback12_0"
"(lambda(phase-level_10 ns_18 insp_4)"
"(begin 'phase-level-linklet-info-callback #f)))))"
"(let-values(((language-info_0)(if language-info31_0 language-info13_0 #f)))"
"(let-values(((primitive?_0)(if primitive?32_0 primitive?14_0 #f)))"
"(let-values(((predefined?_0)(if predefined?33_0 predefined?15_0 #f)))"
"(let-values(((cross-phase-persistent?_0)"
"(if cross-phase-persistent?34_0"
" cross-phase-persistent?16_0"
" primitive?_0)))"
"(let-values(((no-protected?_0)(if no-protected?35_0 no-protected?17_0 #f)))"
"(let-values(((submodule-names_0)"
"(if submodule-names36_0 submodule-names18_0 null)))"
"(let-values(((supermodule-name_0)"
"(if supermodule-name37_0 supermodule-name19_0 #f)))"
"(let-values(((get-all-variables_0)"
"(if get-all-variables38_0"
" get-all-variables20_0"
"(lambda()(begin 'get-all-variables null)))))"
"(let-values()"
"(module1.1"
" source-name_0"
" self_3"
"(unresolve-requires requires_0)"
" provides_3"
" #f"
" language-info_0"
" min-phase-level_0"
" max-phase-level_0"
" phase-level-linklet-info-callback_0"
" force-bulk-binding_0"
" prepare-instance_0"
" instantiate-phase_0"
" primitive?_0"
" predefined?_0"
" cross-phase-persistent?_0"
" no-protected?_0"
"(current-code-inspector)"
" submodule-names_0"
" supermodule-name_0"
" get-all-variables_0)))))))))))))))))))))))"
"(define-values"
"(struct:module-instance"
" module-instance42.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_37 make-_37 ?_37 -ref_37 -set!_37)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance)))))"
"(values"
" struct:_37"
" make-_37"
" ?_37"
"(make-struct-field-accessor -ref_37 0 'namespace)"
"(make-struct-field-accessor -ref_37 1 'module)"
"(make-struct-field-accessor -ref_37 2 'shifted-requires)"
"(make-struct-field-accessor -ref_37 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_37 4 'made-available?)"
"(make-struct-field-accessor -ref_37 5 'attached?)"
"(make-struct-field-accessor -ref_37 6 'data-box)"
"(make-struct-field-mutator -set!_37 2 'shifted-requires)"
"(make-struct-field-mutator -set!_37 4 'made-available?)"
"(make-struct-field-mutator -set!_37 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_0 m_1)(begin(module-instance42.1 m-ns_0 m_1 #f(make-small-hasheqv) #f #f(box #f)))))"
"(define-values"
"(make-module-namespace50.1)"
"(lambda(for-submodule?45_0 mpi43_0 root-expand-context44_0 ns49_0)"
"(begin"
" 'make-module-namespace50"
"(let-values(((ns_19) ns49_0))"
"(let-values(((name-mpi_0) mpi43_0))"
"(let-values(((root-expand-ctx_1) root-expand-context44_0))"
"(let-values(((for-submodule?_0) for-submodule?45_0))"
"(let-values()"
"(let-values(((phase_26) 0))"
"(let-values(((name_27)(1/module-path-index-resolve name-mpi_0)))"
"(let-values(((m-ns_1)"
"(let-values(((the-struct_38)"
"(let-values(((root-expand-ctx161_0) root-expand-ctx_1)"
"((temp162_0) #f))"
"(new-namespace9.1 temp162_0 #t root-expand-ctx161_0 #t ns_19 #t))))"
"(if(1/namespace? the-struct_38)"
"(let-values(((mpi152_0) name-mpi_0)"
"((source-name153_0)(resolved-module-path-root-name name_27))"
"((phase154_0) phase_26)"
"((0-phase155_0) phase_26)"
"((submodule-declarations156_0)"
"(if for-submodule?_0"
"(namespace-submodule-declarations ns_19)"
"(make-small-hasheq)))"
"((available-module-instances157_0)(make-hasheqv))"
"((module-instances158_0)(make-hasheqv))"
"((declaration-inspector159_0)(current-code-inspector)))"
"(namespace1.1"
" mpi152_0"
" source-name153_0"
"(namespace-root-expand-ctx the-struct_38)"
" phase154_0"
" 0-phase155_0"
"(namespace-phase-to-namespace the-struct_38)"
"(namespace-phase-level-to-definitions the-struct_38)"
"(1/namespace-module-registry the-struct_38)"
"(namespace-bulk-binding-registry the-struct_38)"
" submodule-declarations156_0"
"(namespace-root-namespace the-struct_38)"
" declaration-inspector159_0"
"(namespace-inspector the-struct_38)"
" available-module-instances157_0"
" module-instances158_0))"
"                                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_38)))))"
"(let-values((()"
"(begin"
"(small-hash-set!(namespace-phase-to-namespace m-ns_1) phase_26 m-ns_1)"
"(values))))"
"(let-values(((at-phase_0)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_1) phase_26 at-phase_0)"
"(hash-set! at-phase_0 name_27(make-module-instance m-ns_1 #f))"
" m-ns_1))))))))))))))"
"(define-values"
"(declare-module!58.1)"
"(lambda(with-submodules?53_0 with-submodules?54_0 ns55_0 m56_0 mod-name57_0)"
"(begin"
" 'declare-module!58"
"(let-values(((ns_20) ns55_0))"
"(let-values(((m_2) m56_0))"
"(let-values(((mod-name_4) mod-name57_0))"
"(let-values(((with-submodules?_0)(if with-submodules?54_0 with-submodules?53_0 #t)))"
"(let-values()"
"(let-values(((prior-m_0)"
"(if with-submodules?_0"
"(hash-ref"
"(module-registry-declarations(1/namespace-module-registry ns_20))"
" mod-name_4"
" #f)"
" #f)))"
"(let-values(((prior-mi_0)"
"(if prior-m_0"
"(if(not(eq? m_2 prior-m_0))"
"(let-values(((ns163_0) ns_20)"
"((mod-name164_0) mod-name_4)"
"((temp165_0)(namespace-phase ns_20)))"
"(namespace->module-instance70.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns163_0"
" mod-name164_0"
" temp165_0))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_0(not(eq? m_2 prior-m_0)) #f)"
"(let-values()(check-redeclaration-ok prior-m_0 prior-mi_0 mod-name_4))"
"(void))"
"(if with-submodules?_0"
"(hash-set!(module-registry-declarations(1/namespace-module-registry ns_20)) mod-name_4 m_2)"
"(small-hash-set!(namespace-submodule-declarations ns_20) mod-name_4 m_2))"
"(if with-submodules?_0"
"(let-values()"
"(begin"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_20)"
" mod-name_4"
"(module-self m_2)"
"(module-provides m_2))"
"((1/current-module-name-resolver) mod-name_4 #f)))"
"(void))"
"(if prior-mi_0"
"(let-values()"
"(let-values(((m-ns_2)(module-instance-namespace prior-mi_0)))"
"(let-values(((states_0)(module-instance-phase-level-to-state prior-mi_0)))"
"(let-values(((phase_27)(namespace-phase ns_20)))"
"(let-values(((visit?_0)(eq? 'started(small-hash-ref states_0(add1 phase_27) #f))))"
"(let-values(((run?_0)(eq? 'started(small-hash-ref states_0 phase_27 #f))))"
"(let-values(((at-phase_1)(hash-ref(namespace-module-instances ns_20) phase_27)))"
"(begin"
"(hash-set! at-phase_1 mod-name_4(make-module-instance m-ns_2 m_2))"
"(if visit?_0"
"(let-values()"
"(let-values(((ns166_0) ns_20)"
"((temp167_0)(namespace-mpi m-ns_2))"
"((phase168_0) phase_27))"
"(namespace-module-visit!104.1 #f #f ns166_0 temp167_0 phase168_0)))"
"(void))"
"(if run?_0"
"(let-values()"
"(let-values(((ns169_0) ns_20)"
"((temp170_0)(namespace-mpi m-ns_2))"
"((phase171_0) phase_27))"
"(namespace-module-instantiate!96.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns169_0"
" temp170_0"
" phase171_0)))"
"(void))))))))))"
"(void)))))))))))))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_1 prior-mi_1 mod-name_5)"
"(begin"
"(begin"
"(if(module-cross-phase-persistent? prior-m_1)"
"(let-values()"
"            (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_5))"
"(void))"
"(if(if prior-mi_1"
"(let-values(((or-part_148)(module-instance-attached? prior-mi_1)))"
"(if or-part_148"
" or-part_148"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_1))))))"
" #f)"
"(let-values()"
"            (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_5))"
"(void))))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_8 mod-name_6) (begin (raise-arguments-error who_8 \"unknown module\" \"module name\" mod-name_6))))"
"(define-values"
"(namespace->module-linklet-info)"
"(lambda(ns_21 name_28 phase-level_11)"
"(begin"
"(let-values(((m_3)(namespace->module ns_21 name_28)))"
"(if m_3((module-phase-level-linklet-info-callback m_3) phase-level_11 ns_21(module-inspector m_3)) #f)))))"
"(define-values"
"(namespace->module-instance70.1)"
"(lambda(check-available-at-phase-level62_0"
" check-available-at-phase-level65_0"
" complain-on-failure?61_0"
" complain-on-failure?64_0"
" unavailable-callback63_0"
" unavailable-callback66_0"
" ns67_0"
" name68_0"
" 0-phase69_0)"
"(begin"
" 'namespace->module-instance70"
"(let-values(((ns_22) ns67_0))"
"(let-values(((name_29) name68_0))"
"(let-values(((0-phase_1) 0-phase69_0))"
"(let-values(((complain-on-failure?_0)(if complain-on-failure?64_0 complain-on-failure?61_0 #f)))"
"(let-values(((check-available-at-phase-level_0)"
"(if check-available-at-phase-level65_0 check-available-at-phase-level62_0 #f)))"
"(let-values(((unavailable-callback_0)(if unavailable-callback66_0 unavailable-callback63_0 void)))"
"(let-values()"
"(let-values(((mi_0)"
"(let-values(((or-part_149)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_22) 0-phase_1 '#hasheq())"
" name_29"
" #f)))"
"(if or-part_149"
" or-part_149"
"(let-values(((or-part_150)"
"(let-values(((c-ns_0)"
"(let-values(((or-part_113)"
"(namespace-root-namespace ns_22)))"
"(if or-part_113 or-part_113 ns_22))))"
"(hash-ref(namespace-module-instances c-ns_0) name_29 #f))))"
"(if or-part_150"
" or-part_150"
"(if complain-on-failure?_0"
"                                            (error \"no module instance found:\" name_29 0-phase_1)"
" #f)))))))"
"(if(if mi_0 check-available-at-phase-level_0 #f)"
"(check-availablilty mi_0 check-available-at-phase-level_0 unavailable-callback_0)"
" mi_0))))))))))))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_23 name_30 0-phase_2 m_4 existing-m-ns_0)"
"(begin"
"(let-values(((m-ns_3)"
"(let-values(((the-struct_39) ns_23))"
"(if(1/namespace? the-struct_39)"
"(let-values(((mpi172_0)(namespace-mpi existing-m-ns_0))"
"((source-name173_0)(namespace-source-name existing-m-ns_0))"
"((root-expand-ctx174_0)(box(unbox(namespace-root-expand-ctx existing-m-ns_0))))"
"((phase175_0)(namespace-phase existing-m-ns_0))"
"((0-phase176_0)(namespace-0-phase existing-m-ns_0))"
"((phase-to-namespace177_0)(make-small-hasheqv))"
"((phase-level-to-definitions178_0)"
"(if(module-cross-phase-persistent? m_4)"
"(namespace-phase-level-to-definitions existing-m-ns_0)"
"(make-small-hasheqv)))"
"((declaration-inspector179_0)(module-inspector m_4))"
"((inspector180_0)(namespace-inspector existing-m-ns_0)))"
"(namespace1.1"
" mpi172_0"
" source-name173_0"
" root-expand-ctx174_0"
" phase175_0"
" 0-phase176_0"
" phase-to-namespace177_0"
" phase-level-to-definitions178_0"
"(1/namespace-module-registry the-struct_39)"
"(namespace-bulk-binding-registry the-struct_39)"
"(namespace-submodule-declarations the-struct_39)"
"(namespace-root-namespace the-struct_39)"
" declaration-inspector179_0"
" inspector180_0"
"(namespace-available-module-instances the-struct_39)"
"(namespace-module-instances the-struct_39)))"
"                        (raise-argument-error 'struct-copy \"namespace?\" the-struct_39)))))"
"(let-values(((mi_1)(make-module-instance m-ns_3 m_4)))"
"(if(module-cross-phase-persistent? m_4)"
"(let-values()"
"(begin"
"(small-hash-set!(namespace-phase-to-namespace m-ns_3) 0 m-ns_3)"
"(small-hash-set!"
"(namespace-phase-level-to-definitions m-ns_3)"
" 0"
"(namespace->definitions existing-m-ns_0 0))"
"(small-hash-set!(namespace-phase-to-namespace m-ns_3) 1(namespace->namespace-at-phase m-ns_3 1))"
"(small-hash-set!"
"(namespace-phase-level-to-definitions m-ns_3)"
" 1"
"(namespace->definitions existing-m-ns_0 1))"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_151)(namespace-root-namespace ns_23)))(if or-part_151 or-part_151 ns_23)))"
" name_30"
" mi_1)"
"(small-hash-set!(module-instance-phase-level-to-state mi_1) 0 'started)))"
"(let-values()"
"(let-values((()"
"(begin(small-hash-set!(namespace-phase-to-namespace m-ns_3) 0-phase_2 m-ns_3)(values))))"
"(let-values((()"
"(begin"
"(small-hash-set!"
"(namespace-phase-level-to-definitions m-ns_3)"
" 0"
"(namespace->definitions existing-m-ns_0 0))"
"(values))))"
"(let-values((()"
"(begin"
"(small-hash-set!(module-instance-phase-level-to-state mi_1) 0 'started)"
"(values))))"
"(let-values(((at-phase_2)"
"(let-values(((or-part_152)"
"(hash-ref(namespace-module-instances ns_23) 0-phase_2 #f)))"
"(if or-part_152"
" or-part_152"
"(let-values(((at-phase_3)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_23) 0-phase_2 at-phase_3)"
" at-phase_3))))))"
"(hash-set! at-phase_2 name_30 mi_1))))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_24 name_31 0-phase_3 m_5 mpi_14)"
"(begin"
"(let-values(((m-ns_4)"
"(let-values(((the-struct_40) ns_24))"
"(if(1/namespace? the-struct_40)"
"(let-values(((mpi181_0) mpi_14)"
"((source-name182_0)"
"(let-values(((or-part_153)(module-source-name m_5)))"
"(if or-part_153"
" or-part_153"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_14)))))"
"((root-expand-ctx183_0)(box #f))"
"((phase184_0) 0-phase_3)"
"((0-phase185_0) 0-phase_3)"
"((phase-to-namespace186_0)(make-small-hasheqv))"
"((phase-level-to-definitions187_0)(make-small-hasheqv))"
"((declaration-inspector188_0)(module-inspector m_5))"
"((inspector189_0)(make-inspector(module-inspector m_5))))"
"(namespace1.1"
" mpi181_0"
" source-name182_0"
" root-expand-ctx183_0"
" phase184_0"
" 0-phase185_0"
" phase-to-namespace186_0"
" phase-level-to-definitions187_0"
"(1/namespace-module-registry the-struct_40)"
"(namespace-bulk-binding-registry the-struct_40)"
"(namespace-submodule-declarations the-struct_40)"
"(namespace-root-namespace the-struct_40)"
" declaration-inspector188_0"
" inspector189_0"
"(namespace-available-module-instances the-struct_40)"
"(namespace-module-instances the-struct_40)))"
"                        (raise-argument-error 'struct-copy \"namespace?\" the-struct_40)))))"
"(let-values((()(begin(small-hash-set!(namespace-phase-to-namespace m-ns_4) 0-phase_3 m-ns_4)(values))))"
"(let-values(((mi_2)(make-module-instance m-ns_4 m_5)))"
"(begin"
"(if(module-cross-phase-persistent? m_5)"
"(hash-set!(namespace-module-instances ns_24) name_31 mi_2)"
"(let-values(((at-phase_4)"
"(let-values(((or-part_154)(hash-ref(namespace-module-instances ns_24) 0-phase_3 #f)))"
"(if or-part_154"
" or-part_154"
"(let-values(((at-phase_5)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_24) 0-phase_3 at-phase_5)"
" at-phase_5))))))"
"(hash-set! at-phase_4 name_31 mi_2)))"
" mi_2)))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_3 check-available-at-phase-level_1 unavailable-callback_1)"
"(begin"
"(let-values(((m_6)(module-instance-module mi_3)))"
"(if(if m_6"
"(if(<=(module-min-phase-level m_6)(add1 check-available-at-phase-level_1)(module-max-phase-level m_6))"
"(not"
"(small-hash-ref"
"(module-instance-phase-level-to-state mi_3)"
"(add1 check-available-at-phase-level_1)"
" #f))"
" #f)"
" #f)"
"(unavailable-callback_1 mi_3)"
" mi_3)))))"
"(define-values"
"(namespace->module-namespace82.1)"
"(lambda(check-available-at-phase-level74_0"
" check-available-at-phase-level77_0"
" complain-on-failure?73_0"
" complain-on-failure?76_0"
" unavailable-callback75_0"
" unavailable-callback78_0"
" ns79_0"
" name80_0"
" 0-phase81_0)"
"(begin"
" 'namespace->module-namespace82"
"(let-values(((ns_25) ns79_0))"
"(let-values(((name_32) name80_0))"
"(let-values(((0-phase_4) 0-phase81_0))"
"(let-values(((complain-on-failure?_1)(if complain-on-failure?76_0 complain-on-failure?73_0 #f)))"
"(let-values(((check-available-at-phase-level_2)"
"(if check-available-at-phase-level77_0 check-available-at-phase-level74_0 #f)))"
"(let-values(((unavailable-callback_2)(if unavailable-callback78_0 unavailable-callback75_0 void)))"
"(let-values()"
"(let-values(((mi_4)"
"(let-values(((complain-on-failure?193_0) complain-on-failure?_1)"
"((check-available-at-phase-level194_0) check-available-at-phase-level_2)"
"((unavailable-callback195_0) unavailable-callback_2))"
"(namespace->module-instance70.1"
" check-available-at-phase-level194_0"
" #t"
" complain-on-failure?193_0"
" #t"
" unavailable-callback195_0"
" #t"
" ns_25"
" name_32"
" 0-phase_4))))"
"(if mi_4(module-instance-namespace mi_4) #f))))))))))))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_26 mod-name_7 phase_28)"
"(begin"
"(let-values(((mi_5)"
"(let-values(((ns196_0) ns_26)((mod-name197_0) mod-name_7)((phase198_0) phase_28))"
"(namespace->module-instance70.1 #f #f #f #f #f #f ns196_0 mod-name197_0 phase198_0))))"
"(set-module-instance-attached?! mi_5 #t)))))"
"(define-values"
"(module-force-bulk-binding!)"
"(lambda(m_7 ns_27)(begin((module-force-bulk-binding m_7)(namespace-bulk-binding-registry ns_27)))))"
"(define-values"
"(namespace-module-instantiate!96.1)"
"(lambda(otherwise-available?87_0"
" otherwise-available?91_0"
" run-phase85_0"
" run-phase89_0"
" seen88_0"
" seen92_0"
" skip-run?86_0"
" skip-run?90_0"
" ns93_0"
" mpi94_0"
" instance-phase95_0)"
"(begin"
" 'namespace-module-instantiate!96"
"(let-values(((ns_28) ns93_0))"
"(let-values(((mpi_15) mpi94_0))"
"(let-values(((instance-phase_0) instance-phase95_0))"
"(let-values(((run-phase_0)(if run-phase89_0 run-phase85_0(namespace-phase ns_28))))"
"(let-values(((skip-run?_0)(if skip-run?90_0 skip-run?86_0 #f)))"
"(let-values(((otherwise-available?_0)(if otherwise-available?91_0 otherwise-available?87_0 #t)))"
"(let-values(((seen_17)(if seen92_0 seen88_0 '#hasheq())))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_15)"
"(void)"
"                                        (let-values () (error \"not a module path index:\" mpi_15)))"
"(values))))"
"(let-values(((name_33)(1/module-path-index-resolve mpi_15 #t)))"
"(let-values(((m_8)(namespace->module ns_28 name_33)))"
"(let-values((()"
"(begin"
"(if m_8"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_33)))"
"(values))))"
"(let-values(((instantiate!_0)"
"(lambda(instance-phase_1 run-phase_1 ns_29)"
"(begin"
" 'instantiate!"
"(let-values(((mi_6)"
"(let-values(((or-part_155)"
"(let-values(((ns205_0) ns_29)"
"((name206_0) name_33)"
"((instance-phase207_0)"
" instance-phase_1))"
"(namespace->module-instance70.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns205_0"
" name206_0"
" instance-phase207_0))))"
"(if or-part_155"
" or-part_155"
"(namespace-create-module-instance!"
" ns_29"
" name_33"
" instance-phase_1"
" m_8"
" mpi_15)))))"
"(let-values(((run-phase201_0) run-phase_1)"
"((skip-run?202_0) skip-run?_0)"
"((otherwise-available?203_0) otherwise-available?_0)"
"((seen204_0) seen_17))"
"(run-module-instance!125.1"
" otherwise-available?203_0"
" run-phase201_0"
" seen204_0"
" #t"
" skip-run?202_0"
" mi_6"
" ns_29)))))))"
"(if(module-cross-phase-persistent? m_8)"
"(let-values()"
"(instantiate!_0"
" 0"
" 0"
"(let-values(((or-part_156)(namespace-root-namespace ns_28)))"
"(if or-part_156 or-part_156 ns_28))))"
"(let-values()(instantiate!_0 instance-phase_0 run-phase_0 ns_28)))))))))))))))))))"
"(define-values"
"(namespace-module-visit!104.1)"
"(lambda(visit-phase99_0 visit-phase100_0 ns101_0 mpi102_0 instance-phase103_0)"
"(begin"
" 'namespace-module-visit!104"
"(let-values(((ns_30) ns101_0))"
"(let-values(((mpi_16) mpi102_0))"
"(let-values(((instance-phase_2) instance-phase103_0))"
"(let-values(((visit-phase_0)(if visit-phase100_0 visit-phase99_0(namespace-phase ns_30))))"
"(let-values()"
"(let-values(((temp211_0)(add1 visit-phase_0)))"
"(namespace-module-instantiate!96.1"
" #f"
" #f"
" temp211_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns_30"
" mpi_16"
" instance-phase_2))))))))))"
"(define-values"
"(namespace-module-make-available!112.1)"
"(lambda(visit-phase107_0 visit-phase108_0 ns109_0 mpi110_0 instance-phase111_0)"
"(begin"
" 'namespace-module-make-available!112"
"(let-values(((ns_31) ns109_0))"
"(let-values(((mpi_17) mpi110_0))"
"(let-values(((instance-phase_3) instance-phase111_0))"
"(let-values(((visit-phase_1)(if visit-phase108_0 visit-phase107_0(namespace-phase ns_31))))"
"(let-values()"
"(let-values(((temp215_0)(add1 visit-phase_1))((temp216_0) #t))"
"(namespace-module-instantiate!96.1"
" #f"
" #f"
" temp215_0"
" #t"
" #f"
" #f"
" temp216_0"
" #t"
" ns_31"
" mpi_17"
" instance-phase_3))))))))))"
"(define-values"
"(run-module-instance!125.1)"
"(lambda(otherwise-available?117_0 run-phase115_0 seen118_0 seen122_0 skip-run?116_0 mi123_0 ns124_0)"
"(begin"
" 'run-module-instance!125"
"(let-values(((mi_7) mi123_0))"
"(let-values(((ns_32) ns124_0))"
"(let-values(((run-phase_2) run-phase115_0))"
"(let-values(((skip-run?_1) skip-run?116_0))"
"(let-values(((otherwise-available?_1) otherwise-available?117_0))"
"(let-values(((seen_18)(if seen122_0 seen118_0 '#hasheq())))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_5)(module-instance-namespace mi_7)))"
"(let-values(((instance-phase_4)(namespace-0-phase m-ns_5)))"
"(let-values(((run-phase-level_0)(phase- run-phase_2 instance-phase_4)))"
"(if(if(let-values(((or-part_157) skip-run?_1))"
"(if or-part_157"
" or-part_157"
"(eq?"
" 'started"
"(small-hash-ref"
"(module-instance-phase-level-to-state mi_7)"
" run-phase-level_0"
" #f))))"
"(let-values(((or-part_158)(not otherwise-available?_1)))"
"(if or-part_158 or-part_158(module-instance-made-available? mi_7)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_9)(module-instance-module mi_7)))"
"(let-values(((mpi_18)(namespace-mpi m-ns_5)))"
"(let-values(((phase-shift_3) instance-phase_4))"
"(let-values(((bulk-binding-registry_3)(namespace-bulk-binding-registry m-ns_5)))"
"(begin"
"(if(hash-ref seen_18 mi_7 #f)"
"(let-values()"
"                                              (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_7)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_7"
"(reverse$1"
"(let-values(((lst_56)(module-requires m_9)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_56)))"
"((letrec-values(((for-loop_79)"
"(lambda(fold-var_42 lst_57)"
"(begin"
" 'for-loop"
"(if(pair? lst_57)"
"(let-values(((phase+mpis_0)"
"(unsafe-car lst_57))"
"((rest_25)"
"(unsafe-cdr lst_57)))"
"(let-values(((fold-var_43)"
"(let-values(((fold-var_44)"
" fold-var_42))"
"(let-values(((fold-var_45)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_0)"
"(reverse$1"
"(let-values(((lst_58)"
"(cdr"
" phase+mpis_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_58)))"
"((letrec-values(((for-loop_80)"
"(lambda(fold-var_46"
" lst_59)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_59)"
"(let-values(((req-mpi_0)"
"(unsafe-car"
" lst_59))"
"((rest_26)"
"(unsafe-cdr"
" lst_59)))"
"(let-values(((fold-var_47)"
"(let-values(((fold-var_48)"
" fold-var_46))"
"(let-values(((fold-var_49)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" req-mpi_0"
"(module-self"
" m_9)"
" mpi_18))"
" fold-var_48))))"
"(values"
" fold-var_49)))))"
"(if(not"
" #f)"
"(for-loop_80"
" fold-var_47"
" rest_26)"
" fold-var_47)))"
" fold-var_46)))))"
" for-loop_80)"
" null"
" lst_58))))))"
" fold-var_44))))"
"(values fold-var_45)))))"
"(if(not #f)"
"(for-loop_79 fold-var_43 rest_25)"
" fold-var_43)))"
" fold-var_42)))))"
" for-loop_79)"
" null"
" lst_56)))))))"
"(let-values(((lst_60)(module-instance-shifted-requires mi_7)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_60)))"
"((letrec-values(((for-loop_81)"
"(lambda(lst_61)"
"(begin"
" 'for-loop"
"(if(pair? lst_61)"
"(let-values(((phase+mpis_1)(unsafe-car lst_61))"
"((rest_27)(unsafe-cdr lst_61)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_0)"
"(car"
" phase+mpis_1)))"
"(begin"
"(let-values(((lst_62)"
"(cdr"
" phase+mpis_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_62)))"
"((letrec-values(((for-loop_82)"
"(lambda(lst_63)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_63)"
"(let-values(((req-mpi_1)"
"(unsafe-car"
" lst_63))"
"((rest_28)"
"(unsafe-cdr"
" lst_63)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((temp219_0)"
"(phase+"
" instance-phase_4"
" req-phase_0))"
"((run-phase220_0)"
" run-phase_2)"
"((skip-run?221_0)"
" skip-run?_1)"
"((otherwise-available?222_0)"
" otherwise-available?_1)"
"((temp223_0)"
"(hash-set"
" seen_18"
" mi_7"
" #t)))"
"(namespace-module-instantiate!96.1"
" otherwise-available?222_0"
" #t"
" run-phase220_0"
" #t"
" temp223_0"
" #t"
" skip-run?221_0"
" #t"
" ns_32"
" req-mpi_1"
" temp219_0)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_82"
" rest_28)"
"(values))))"
"(values))))))"
" for-loop_82)"
" lst_62)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_81 rest_27)(values))))"
"(values))))))"
" for-loop_81)"
" lst_60)))"
"(void)"
"(if(label-phase? instance-phase_4)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((start_13)(module-max-phase-level m_9))"
"((end_9)(sub1(module-min-phase-level m_9)))"
"((inc_3) -1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_13 end_9 inc_3)))"
"((letrec-values(((for-loop_83)"
"(lambda(pos_10)"
"(begin"
" 'for-loop"
"(if(> pos_10 end_9)"
"(let-values(((phase-level_12) pos_10))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_29)"
"(phase+"
" phase-level_12"
" phase-shift_3)))"
"(if(if(not"
" skip-run?_1)"
"(eqv?"
" phase_29"
" run-phase_2)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(small-hash-ref"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_12"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(small-hash-set!"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_12"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_5"
" phase-level_12))"
"(values))))"
"(let-values(((p-ns_2)"
"(namespace->namespace-at-phase"
" m-ns_5"
" phase_29)))"
"(let-values(((insp_5)"
"(module-inspector"
" m_9)))"
"(let-values(((data-box_0)"
"(module-instance-data-box"
" mi_7)))"
"(let-values(((prep_0)"
"(module-prepare-instance"
" m_9)))"
"(let-values(((go_0)"
"(module-instantiate-phase"
" m_9)))"
"(begin"
"(prep_0"
" data-box_0"
" p-ns_2"
" phase-shift_3"
" mpi_18"
" bulk-binding-registry_3"
" insp_5)"
"(go_0"
" data-box_0"
" p-ns_2"
" phase-shift_3"
" phase-level_12"
" mpi_18"
" bulk-binding-registry_3"
" insp_5))))))))))))"
"(if(if otherwise-available?_1"
"(if(not"
"(negative?"
" run-phase_2))"
"(not"
"(small-hash-ref"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_12"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_32)"
" phase_29"
"(lambda(l_47)"
"(cons"
" mi_7"
" l_47))"
" null)"
"(small-hash-set!"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_12"
" 'available)))"
"(void)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_83(+ pos_10 inc_3))"
"(values))))"
"(values))))))"
" for-loop_83)"
" start_13)))"
"(void))))"
"(if otherwise-available?_1"
"(let-values()(set-module-instance-made-available?! mi_7 #t))"
"(void))"
"(if skip-run?_1"
"(void)"
"(let-values()"
"(small-hash-set!"
"(module-instance-phase-level-to-state mi_7)"
" run-phase-level_0"
" 'started))))))))))))))))))))))))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!131_0)"
"(lambda(ns130_0 run-phase128_0 run-phase129_0)"
"(begin"
" 'namespace-visit-available-modules!131"
"(let-values(((ns_33) ns130_0))"
"(let-values(((run-phase_3)(if run-phase129_0 run-phase128_0(namespace-phase ns_33))))"
"(let-values()(namespace-run-available-modules! ns_33(add1 run-phase_3)))))))))"
"(case-lambda"
"((ns_34)(begin(namespace-visit-available-modules!131_0 ns_34 #f #f)))"
"((ns_35 run-phase128_1)(namespace-visit-available-modules!131_0 ns_35 run-phase128_1 #t)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!136_0)"
"(lambda(ns135_0 run-phase133_0 run-phase134_0)"
"(begin"
" 'namespace-run-available-modules!136"
"(let-values(((ns_36) ns135_0))"
"(let-values(((run-phase_4)(if run-phase134_0 run-phase133_0(namespace-phase ns_36))))"
"(let-values()"
"(if(null?(hash-ref(namespace-available-module-instances ns_36) run-phase_4 null))"
"(void)"
"(let-values()"
"(registry-call-with-lock"
"(1/namespace-module-registry ns_36)"
"(lambda()"
"((letrec-values(((loop_75)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((mis_0)"
"(hash-ref"
"(namespace-available-module-instances ns_36)"
" run-phase_4"
" null)))"
"(if(null? mis_0)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_36)"
" run-phase_4"
" null)"
"(let-values(((lst_64)(reverse$1 mis_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_64)))"
"((letrec-values(((for-loop_84)"
"(lambda(lst_65)"
"(begin"
" 'for-loop"
"(if(pair? lst_65)"
"(let-values(((mi_8)"
"(unsafe-car"
" lst_65))"
"((rest_29)"
"(unsafe-cdr"
" lst_65)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((run-phase226_0)"
" run-phase_4)"
"((temp227_0)"
" #f)"
"((temp228_0)"
" #f))"
"(run-module-instance!125.1"
" temp228_0"
" run-phase226_0"
" #f"
" #f"
" temp227_0"
" mi_8"
" ns_36)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_84 rest_29)"
"(values))))"
"(values))))))"
" for-loop_84)"
" lst_64)))"
"(void)"
"(loop_75)))))))))"
" loop_75)))))))))))))"
"(case-lambda"
"((ns_37)(begin(namespace-run-available-modules!136_0 ns_37 #f #f)))"
"((ns_38 run-phase133_1)(namespace-run-available-modules!136_0 ns_38 run-phase133_1 #t)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_39 name_34)"
"(begin"
"(let-values(((mi_9)(hash-ref(namespace-module-instances ns_39)(1/make-resolved-module-path name_34))))"
"(let-values(((temp231_0) 1)((temp232_0) #f)((temp233_0) #t))"
"(run-module-instance!125.1 temp233_0 temp231_0 #f #f temp232_0 mi_9 ns_39))))))"
"(define-values"
"(namespace-module-use->module+linklet-instances146.1)"
"(lambda(phase-shift140_0 shift-from138_0 shift-from141_0 shift-to139_0 shift-to142_0 ns144_0 mu145_0)"
"(begin"
" 'namespace-module-use->module+linklet-instances146"
"(let-values(((ns_40) ns144_0))"
"(let-values(((mu_0) mu145_0))"
"(let-values(((shift-from_0)(if shift-from141_0 shift-from138_0 #f)))"
"(let-values(((shift-to_0)(if shift-to142_0 shift-to139_0 #f)))"
"(let-values(((phase-shift_4) phase-shift140_0))"
"(let-values()"
"(let-values(((mod_1)(module-use-module mu_0)))"
"(let-values(((mi_10)"
"(let-values(((temp235_0)"
"(1/module-path-index-resolve"
"(if shift-from_0"
"(module-path-index-shift mod_1 shift-from_0 shift-to_0)"
" mod_1)))"
"((phase-shift236_0) phase-shift_4)"
"((temp237_0) #t))"
"(namespace->module-instance70.1"
" #f"
" #f"
" temp237_0"
" #t"
" #f"
" #f"
" ns_40"
" temp235_0"
" phase-shift236_0))))"
"(let-values(((m-ns_6)(module-instance-namespace mi_10)))"
"(let-values(((d_17)"
"(small-hash-ref"
"(namespace-phase-level-to-definitions m-ns_6)"
"(module-use-phase mu_0)"
" #f)))"
"(if d_17"
"(values mi_10(definitions-variables d_17))"
"(error"
" 'eval"
"(string-append"
"                              \"namespace mismatch: phase level not found;\\n\""
"                              \"  module: ~a\\n\""
"                              \"  phase level: ~a\\n\""
"                              \"  found phase levels: ~a\")"
" mod_1"
"(module-use-phase mu_0)"
"(small-hash-keys(namespace-phase-level-to-definitions m-ns_6)))))))))))))))))"
"(define-values"
"(unresolve-requires)"
"(lambda(requires_1)"
"(begin"
"(reverse$1"
"(let-values(((lst_66) requires_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_66)))"
"((letrec-values(((for-loop_85)"
"(lambda(fold-var_50 lst_67)"
"(begin"
" 'for-loop"
"(if(pair? lst_67)"
"(let-values(((phase+mpis_2)(unsafe-car lst_67))((rest_30)(unsafe-cdr lst_67)))"
"(let-values(((fold-var_51)"
"(let-values(((fold-var_52) fold-var_50))"
"(let-values(((fold-var_53)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car phase+mpis_2)"
"(reverse$1"
"(let-values(((lst_68)(cdr phase+mpis_2)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_68)))"
"((letrec-values(((for-loop_86)"
"(lambda(fold-var_54"
" lst_69)"
"(begin"
" 'for-loop"
"(if(pair? lst_69)"
"(let-values(((req-mpi_2)"
"(unsafe-car"
" lst_69))"
"((rest_31)"
"(unsafe-cdr"
" lst_69)))"
"(let-values(((fold-var_55)"
"(let-values(((fold-var_56)"
" fold-var_54))"
"(let-values(((fold-var_57)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-unresolve"
" req-mpi_2))"
" fold-var_56))))"
"(values"
" fold-var_57)))))"
"(if(not #f)"
"(for-loop_86"
" fold-var_55"
" rest_31)"
" fold-var_55)))"
" fold-var_54)))))"
" for-loop_86)"
" null"
" lst_68))))))"
" fold-var_52))))"
"(values fold-var_53)))))"
"(if(not #f)(for-loop_85 fold-var_51 rest_30) fold-var_51)))"
" fold-var_50)))))"
" for-loop_85)"
" null"
" lst_66)))))))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_10)"
"(begin"
"(let-values(((access_0)"
"(let-values(((ht_67)(module-provides m_10)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_67)))"
"((letrec-values(((for-loop_87)"
"(lambda(table_87 i_81)"
"(begin"
" 'for-loop"
"(if i_81"
"(let-values(((phase_30 at-phase_6)"
"(hash-iterate-key+value ht_67 i_81)))"
"(let-values(((table_88)"
"(let-values(((table_89) table_87))"
"(let-values(((table_90)"
"(let-values()"
"(let-values(((key_38 val_31)"
"(let-values()"
"(values"
" phase_30"
"(let-values(((ht_68)"
" at-phase_6))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_68)))"
"((letrec-values(((for-loop_88)"
"(lambda(table_91"
" i_82)"
"(begin"
" 'for-loop"
"(if i_82"
"(let-values(((sym_21"
" binding/p_1)"
"(hash-iterate-key+value"
" ht_68"
" i_82)))"
"(let-values(((table_92)"
"(let-values(((table_93)"
" table_91))"
"(let-values(((table_94)"
"(let-values()"
"(let-values(((key_39"
" val_32)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_1))"
"(if(provided-as-protected?"
" binding/p_1)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_93"
" key_39"
" val_32)))))"
"(values"
" table_94)))))"
"(if(not"
" #f)"
"(for-loop_88"
" table_92"
"(hash-iterate-next"
" ht_68"
" i_82))"
" table_92)))"
" table_91)))))"
" for-loop_88)"
" '#hash()"
"(hash-iterate-first"
" ht_68))))))))"
"(hash-set"
" table_89"
" key_38"
" val_31)))))"
"(values table_90)))))"
"(if(not #f)"
"(for-loop_87 table_88(hash-iterate-next ht_67 i_81))"
" table_88)))"
" table_87)))))"
" for-loop_87)"
" '#hasheqv()"
"(hash-iterate-first ht_67))))))"
"(begin(set-module-access! m_10 access_0) access_0)))))"
"(define-values"
"(binding->module-instance)"
"(lambda(b_41 ns_41 phase_31 id_10)"
"(begin"
"(let-values(((at-phase_7)(phase- phase_31(module-binding-phase b_41))))"
"(let-values(((mi_11)"
"(let-values(((temp2_0)(1/module-path-index-resolve(module-binding-module b_41)))"
"((at-phase3_0) at-phase_7)"
"((temp4_0)(module-binding-phase b_41))"
"((temp5_0)(lambda(mi_12) 'unavailable)))"
"(namespace->module-instance70.1 temp4_0 #t #f #f temp5_0 #t ns_41 temp2_0 at-phase3_0))))"
"(begin"
"(if(eq? mi_11 'unavailable)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                   \"module mismatch;\\n\""
"                   \" attempted to use a module that is not available\\n\""
"                   \"  possible cause:\\n\""
"                   \"   using (dynamic-require .... #f)\\n\""
"                   \"   but need (dynamic-require .... 0)\\n\""
"                   \"  module: ~s\\n\""
"                   \"  phase: ~s\")"
"(module-binding-module b_41)"
"(phase+ at-phase_7(module-binding-phase b_41)))"
" id_10))"
"(void))"
"(if mi_11"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                  \"namespace mismatch; cannot locate module instance\\n\""
"                  \"  module: ~s\\n\""
"                  \"  use phase: ~a\\n\""
"                  \"  definition phase: ~a\\n\""
"                  \"  for identifier: ~s\")"
"(module-binding-module b_41)"
" phase_31"
"(module-binding-phase b_41)"
" id_10)))"
" mi_11))))))"
"(define-values"
"(check-access)"
"(lambda(b_41 mi_13 id_11 in-s_0 what_0)"
"(begin"
"(let-values(((m_11)(module-instance-module mi_13)))"
"(if(if m_11(not(module-no-protected? m_11)) #f)"
"(let-values()"
"(let-values(((access_1)"
"(let-values(((or-part_27)(module-access m_11)))"
"(if or-part_27 or-part_27(module-compute-access! m_11)))))"
"(let-values(((a_35)"
"(hash-ref"
"(hash-ref access_1(module-binding-phase b_41) '#hasheq())"
"(module-binding-sym b_41)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_35 'unexported)))"
"(if or-part_10 or-part_10(eq? a_35 'protected)))"
"(let-values()"
"(if(let-values(((or-part_159)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_11)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_13)))))"
"(if or-part_159"
" or-part_159"
"(if(module-binding-extra-inspector b_41)"
"(inspector-superior?"
"(module-binding-extra-inspector b_41)"
"(namespace-inspector(module-instance-namespace mi_13)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_0)"
"(let-values(((c-id_0)"
"(let-values(((or-part_3) in-s_0))"
"(if or-part_3 or-part_3(module-binding-sym b_41)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_0)(syntax-content c-id_0) c-id_0)"
"(syntax-content id_11)))"
" c-id_0"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                            \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_35"
" what_0"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_13))))"
" complain-id_0"
" id_11"
" null)))))"
"(void)))))"
"(void))))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_12 phase_32 ns_42)"
"(begin"
"((letrec-values(((loop_76)"
"(lambda(id_13 in-s_1)"
"(begin"
" 'loop"
"(let-values(((b_58)"
"(let-values(((temp3_0) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f temp3_0 #t #f #f id_13 phase_32))))"
"(let-values(((c1_22)(binding-free=id b_58)))"
"(if c1_22"
"((lambda(next-id_0)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_58)"
"(not"
"(top-level-module-path-index?(module-binding-module b_58)))"
" #f)"
"(let-values()"
"(let-values(((mi_14)"
"(binding->module-instance"
" b_58"
" ns_42"
" phase_32"
" id_13)))"
"                                                           (check-access b_58 mi_14 id_13 in-s_1 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_0)"
"(loop_76"
" next-id_0"
"(let-values(((or-part_160) in-s_1))"
"(if or-part_160 or-part_160 id_13)))))"
"(if(not next-b_0)"
"(let-values() b_58)"
"(if(if(module-binding? next-b_0)"
"(if(not(module-binding-extra-inspector next-b_0))"
"(syntax-inspector id_13)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((temp5_1)(syntax-inspector id_13)))"
"(module-binding-update48.1"
" temp5_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" next-b_0)))"
"(let-values() next-b_0))))))"
" c1_22)"
"(let-values() b_58))))))))"
" loop_76)"
" id_12"
" #f))))"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_26 info_1)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_11)"
"(if(procedure? v_26)"
"(let-values(((or-part_2)(procedure-arity-includes? v_26 1)))"
"(if or-part_2 or-part_2(procedure-arity-includes? v_26 2)))"
" #f)))"
"(if or-part_11 or-part_11(exact-nonnegative-integer? v_26)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_26)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_26)"
"(let-values()"
"(begin"
"(if(<= v_26(list-ref info_1 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_26"
"                                  \"initialized-field count\""
"(list-ref info_1 1))))"
"(if(member v_26(list-ref info_1 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_26)))))"
"(void))"
"(values))))"
"(let-values(((ref_0)(list-ref info_1 3)))"
"(if(integer? v_26)"
"(let-values()"
"(lambda(t_33)"
"(let-values(((p_30)(ref_0 t_33 v_26)))"
"(if(if(procedure? p_30)(procedure-arity-includes? p_30 1) #f)"
" p_30"
"                     (lambda (s_3) (error \"bad syntax:\" s_3))))))"
"(let-values()(lambda(t_13) v_26)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_0 set!-transformer1_0 set!-transformer?_0 set!-transformer-proc_0)"
"(let-values(((struct:_38 make-_38 ?_38 -ref_38 -set!_38)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))))"
"(values struct:_38 make-_38 ?_38(make-struct-field-accessor -ref_38 0 'proc)))))"
"(lambda(proc_3)"
"(begin"
" 'make-set!-transformer"
"(begin"
"(if(if(procedure? proc_3)(procedure-arity-includes? proc_3 1) #f)"
"(void)"
"              (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_3)))"
"(set!-transformer1_0 proc_3)))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_36)"
"(begin"
" 'set!-transformer-procedure"
"(let-values(((v_94)((set!-transformer-value t_36) t_36)))"
"(if(procedure-arity-includes? v_94 1) v_94(lambda(s_161)(v_94 t_36 s_161)))))))"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_0 key_40 val_19)(begin(hash-set env_0 key_40 val_19))))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_13)"
"(begin(let-values(((or-part_10)(eq? t_13 variable)))(if or-part_10 or-part_10(local-variable? t_13))))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_28 make-_28 ?_28 -ref_28 -set!_28)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'local-variable"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'local-variable)))))"
"(values struct:_28 make-_28 ?_28(make-struct-field-accessor -ref_28 0 'id))))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_0 id4_0 t5_0)"
"(begin"
" 'substitute-variable6"
"(let-values(((id_14) id4_0))"
"(let-values(((t_37) t5_0))"
"(let-values(((no-stops?_0) no-stops?2_0))"
"(let-values()"
"(if(if no-stops?_0(local-variable? t_37) #f)"
"(let-values(((bind-id_0)(local-variable-id t_37)))"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 bind-id_0)(syntax-e$1 bind-id_0) id_14 id_14)"
" id_14))"
" id_14))))))))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_38)"
"(begin"
"(let-values(((or-part_21)(procedure? t_38)))"
"(if or-part_21"
" or-part_21"
"(let-values(((or-part_161)(1/set!-transformer? t_38)))"
"(if or-part_161 or-part_161(1/rename-transformer? t_38))))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_18)"
"(begin"
"(if(1/set!-transformer? t_18)"
"(let-values()(1/set!-transformer-procedure t_18))"
"(if(1/rename-transformer? t_18)(let-values()(lambda(s_162) s_162))(let-values() t_18))))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_20 make-_20 ?_20 -ref_20 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'core-form"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
" #f"
" #f"
" '(0 1)"
" #f"
" 'core-form)))))"
"(values"
" struct:_20"
" make-_20"
" ?_20"
"(make-struct-field-accessor -ref_20 0 'expander)"
"(make-struct-field-accessor -ref_20 1 'name))))"
"(define-values"
"(add-binding!17.1)"
"(lambda(in10_0 in12_0 just-for-nominal?11_0 just-for-nominal?13_0 id14_0 binding15_0 phase16_0)"
"(begin"
" 'add-binding!17"
"(let-values(((id_15) id14_0))"
"(let-values(((binding_9) binding15_0))"
"(let-values(((phase_33) phase16_0))"
"(let-values(((in-s_2)(if in12_0 in10_0 #f)))"
"(let-values(((just-for-nominal?_2)(if just-for-nominal?13_0 just-for-nominal?11_0 #f)))"
"(let-values()"
"(begin"
"(check-id-taint id_15 in-s_2)"
"(let-values(((temp53_0)(syntax-scope-set id_15 phase_33))"
"((temp54_0)(syntax-e$1 id_15))"
"((binding55_0) binding_9)"
"((just-for-nominal?56_0) just-for-nominal?_2))"
"(add-binding-in-scopes!20.1 just-for-nominal?56_0 #t temp53_0 temp54_0 binding55_0))))))))))))"
"(define-values"
"(add-bulk-binding!25.1)"
"(lambda(in20_0 in21_0 s22_0 binding23_0 phase24_0)"
"(begin"
" 'add-bulk-binding!25"
"(let-values(((s_28) s22_0))"
"(let-values(((binding_10) binding23_0))"
"(let-values(((phase_34) phase24_0))"
"(let-values(((in-s_3)(if in21_0 in20_0 #f)))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_28)"
"                    (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_3 s_28))"
"(void))"
"(add-bulk-binding-in-scopes!(syntax-scope-set s_28 phase_34) binding_10))))))))))"
"(define-values"
"(add-local-binding!35.1)"
"(lambda(frame-id28_0 frame-id30_0 in29_0 in31_0 id32_0 phase33_0 counter34_0)"
"(begin"
" 'add-local-binding!35"
"(let-values(((id_16) id32_0))"
"(let-values(((phase_35) phase33_0))"
"(let-values(((counter_1) counter34_0))"
"(let-values(((frame-id_5)(if frame-id30_0 frame-id28_0 #f)))"
"(let-values(((in-s_4)(if in31_0 in29_0 #f)))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_16 in-s_4)(values))))"
"(let-values((()(begin(set-box! counter_1(add1(unbox counter_1)))(values))))"
"(let-values(((key_41)"
"                                    (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_16) (unbox counter_1)))))"
"(begin"
"(let-values(((temp57_0)(syntax-scope-set id_16 phase_35))"
"((temp58_1)(syntax-e$1 id_16))"
"((temp59_1)"
"(let-values(((frame-id61_0) frame-id_5))"
"(make-local-binding7.1 frame-id61_0 #t #f #f key_41))))"
"(add-binding-in-scopes!20.1 #f #f temp57_0 temp58_1 temp59_1))"
" key_41)))))))))))))"
"(define-values"
"(check-id-taint)"
"(lambda(id_17 in-s_5)"
"(begin"
"(if(syntax-tainted?$1 id_17)"
"        (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_5 id_17))"
"(void)))))"
"(define-values"
"(binding-lookup48.1)"
"(lambda(in38_0"
" in40_0"
" out-of-context-as-variable?39_0"
" out-of-context-as-variable?41_0"
" b42_0"
" env43_0"
" lift-envs44_0"
" ns45_0"
" phase46_0"
" id47_0)"
"(begin"
" 'binding-lookup48"
"(let-values(((b_59) b42_0))"
"(let-values(((env_1) env43_0))"
"(let-values(((lift-envs_0) lift-envs44_0))"
"(let-values(((ns_14) ns45_0))"
"(let-values(((phase_36) phase46_0))"
"(let-values(((id_18) id47_0))"
"(let-values(((in-s_6)(if in40_0 in38_0 #f)))"
"(let-values(((out-of-context-as-variable?_0)"
"(if out-of-context-as-variable?41_0 out-of-context-as-variable?39_0 #f)))"
"(let-values()"
"(if(module-binding? b_59)"
"(let-values()"
"(let-values(((top-level?_0)(top-level-module-path-index?(module-binding-module b_59))))"
"(let-values(((mi_15)"
"(if(not top-level?_0)"
"(binding->module-instance b_59 ns_14 phase_36 id_18)"
" #f)))"
"(let-values(((m_12)(if mi_15(module-instance-module mi_15) #f)))"
"(let-values(((primitive?_1)(if m_12(module-primitive? m_12) #f)))"
"(let-values(((m-ns_7)"
"(if top-level?_0"
" ns_14"
"(if mi_15(module-instance-namespace mi_15) #f))))"
"(let-values((()(begin(check-taint id_18)(values))))"
"(let-values(((t_39)"
"(namespace-get-transformer"
" m-ns_7"
"(module-binding-phase b_59)"
"(module-binding-sym b_59)"
" variable)))"
"(let-values((()"
"(begin"
"(if mi_15"
"(let-values()"
"(check-access"
" b_59"
" mi_15"
" id_18"
" in-s_6"
"                                                               (if (variable? t_39) \"variable\" \"transformer\")))"
"(void))"
"(values))))"
"(let-values(((insp_6)"
"(if mi_15"
"(if(module-instance-module mi_15)"
"(module-inspector(module-instance-module mi_15))"
" #f)"
" #f)))"
"(values t_39 primitive?_1 insp_6)))))))))))"
"(if(local-binding? b_59)"
"(let-values()"
"(let-values(((t_40)(hash-ref env_1(local-binding-key b_59) missing)))"
"(if(eq? t_40 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_95)"
"(let-values(((lst_70) lift-envs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_70)))"
"((letrec-values(((for-loop_89)"
"(lambda(result_57 lst_32)"
"(begin"
" 'for-loop"
"(if(pair? lst_32)"
"(let-values(((lift-env_0)"
"(unsafe-car lst_32))"
"((rest_32)"
"(unsafe-cdr lst_32)))"
"(let-values(((result_58)"
"(let-values()"
"(let-values(((result_59)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_0)"
"(local-binding-key"
" b_59)"
" #f)))))"
"(values"
" result_59)))))"
"(if(if(not"
"((lambda x_40 result_58)"
" lift-env_0))"
"(not #f)"
" #f)"
"(for-loop_89 result_58 rest_32)"
" result_58)))"
" result_57)))))"
" for-loop_89)"
" #f"
" lst_70)))))"
"(if or-part_95"
" or-part_95"
"(if out-of-context-as-variable?_0"
" variable"
"                                           (error \"identifier used out of context:\" id_18))))"
" #f"
" #f))"
"(let-values()(begin(check-taint id_18)(values t_40 #f #f))))))"
"                            (let-values () (error \"internal error: unknown binding for lookup:\" b_59))))))))))))))))"
"(define-values"
"(check-taint)"
"(lambda(id_19)"
"(begin"
"(if(syntax-tainted?$1 id_19)"
"        (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_19))"
"(void)))))"
"(define-values(cons-ish)(lambda(a_36 b_60)(begin(if(null? b_60) a_36(cons a_36 b_60)))))"
"(define-values"
"(free-id-set)"
"(lambda(phase_37 ids_0)"
"(begin"
"(let-values(((lst_71) ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_71)))"
"((letrec-values(((for-loop_90)"
"(lambda(ht_69 lst_72)"
"(begin"
" 'for-loop"
"(if(pair? lst_72)"
"(let-values(((id_20)(unsafe-car lst_72))((rest_33)(unsafe-cdr lst_72)))"
"(let-values(((ht_70)"
"(let-values(((ht_71) ht_69))"
"(let-values(((ht_72)"
"(let-values()"
"(let-values(((sym_22)"
"(identifier-binding-symbol$1"
" id_20"
" phase_37)))"
"(hash-set"
" ht_71"
" sym_22"
"(cons-ish"
" id_20"
"(hash-ref ht_71 sym_22 null)))))))"
"(values ht_72)))))"
"(if(not #f)(for-loop_90 ht_70 rest_33) ht_70)))"
" ht_69)))))"
" for-loop_90)"
" '#hasheq()"
" lst_71))))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values(free-id-set-empty?)(lambda(fs_0)(begin(eq? fs_0 empty-free-id-set))))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_1 phase_15 given-id_0)"
"(begin"
"(if(zero?(hash-count fs_1))"
" #f"
"(let-values(((lst_73)(hash-ref fs_1(identifier-binding-symbol$1 given-id_0 phase_15) null)))"
"(begin"
"(void)"
"((letrec-values(((for-loop_91)"
"(lambda(result_3 lst_74)"
"(begin"
" 'for-loop"
"(if(not(null? lst_74))"
"(let-values(((id_21)(if(pair? lst_74)(car lst_74) lst_74))"
"((rest_34)(if(pair? lst_74)(cdr lst_74) null)))"
"(let-values(((result_60)"
"(let-values()"
"(let-values(((result_61)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_21"
" given-id_0"
" phase_15"
" phase_15)))))"
"(values result_61)))))"
"(if(if(not((lambda x_41 result_60) id_21))(not #f) #f)"
"(for-loop_91 result_60 rest_34)"
" result_60)))"
" result_3)))))"
" for-loop_91)"
" #f"
" lst_73)))))))"
"(define-values"
"(free-id-set-empty-or-just-module*?)"
"(lambda(fs_2)(begin(let-values(((c_17)(hash-count fs_2)))(<= c_17 1)))))"
"(define-values"
"(struct:expand-context/outer"
" expand-context/outer1.1"
" expand-context/outer?"
" expand-context/outer-context"
" expand-context/outer-env"
" expand-context/outer-post-expansion-scope-action"
" expand-context/outer-scopes"
" expand-context/outer-def-ctx-scopes"
" expand-context/outer-binding-layer"
" expand-context/outer-reference-records"
" expand-context/outer-only-immediate?"
" expand-context/outer-need-eventually-defined"
" expand-context/outer-current-introduction-scopes"
" expand-context/outer-name)"
"(let-values(((struct:_39 make-_39 ?_39 -ref_39 -set!_39)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context/outer"
" 11"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'expand-context/outer)))))"
"(values"
" struct:_39"
" make-_39"
" ?_39"
"(make-struct-field-accessor -ref_39 0 'context)"
"(make-struct-field-accessor -ref_39 1 'env)"
"(make-struct-field-accessor -ref_39 2 'post-expansion-scope-action)"
"(make-struct-field-accessor -ref_39 3 'scopes)"
"(make-struct-field-accessor -ref_39 4 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_39 5 'binding-layer)"
"(make-struct-field-accessor -ref_39 6 'reference-records)"
"(make-struct-field-accessor -ref_39 7 'only-immediate?)"
"(make-struct-field-accessor -ref_39 8 'need-eventually-defined)"
"(make-struct-field-accessor -ref_39 9 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_39 10 'name))))"
"(define-values"
"(struct:expand-context/inner"
" expand-context/inner2.1"
" expand-context/inner?"
" expand-context/inner-to-parsed?"
" expand-context/inner-phase"
" expand-context/inner-namespace"
" expand-context/inner-just-once?"
" expand-context/inner-module-begin-k"
" expand-context/inner-allow-unbound?"
" expand-context/inner-in-local-expand?"
" expand-context/inner-stops"
" expand-context/inner-declared-submodule-names"
" expand-context/inner-lifts"
" expand-context/inner-lift-envs"
" expand-context/inner-module-lifts"
" expand-context/inner-require-lifts"
" expand-context/inner-to-module-lifts"
" expand-context/inner-requires+provides"
" expand-context/inner-observer"
" expand-context/inner-for-serializable?"
" expand-context/inner-should-not-encounter-macros?)"
"(let-values(((struct:_40 make-_40 ?_40 -ref_40 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context/inner"
" struct:root-expand-context/inner"
" 18"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)"
" #f"
" 'expand-context/inner)))))"
"(values"
" struct:_40"
" make-_40"
" ?_40"
"(make-struct-field-accessor -ref_40 0 'to-parsed?)"
"(make-struct-field-accessor -ref_40 1 'phase)"
"(make-struct-field-accessor -ref_40 2 'namespace)"
"(make-struct-field-accessor -ref_40 3 'just-once?)"
"(make-struct-field-accessor -ref_40 4 'module-begin-k)"
"(make-struct-field-accessor -ref_40 5 'allow-unbound?)"
"(make-struct-field-accessor -ref_40 6 'in-local-expand?)"
"(make-struct-field-accessor -ref_40 7 'stops)"
"(make-struct-field-accessor -ref_40 8 'declared-submodule-names)"
"(make-struct-field-accessor -ref_40 9 'lifts)"
"(make-struct-field-accessor -ref_40 10 'lift-envs)"
"(make-struct-field-accessor -ref_40 11 'module-lifts)"
"(make-struct-field-accessor -ref_40 12 'require-lifts)"
"(make-struct-field-accessor -ref_40 13 'to-module-lifts)"
"(make-struct-field-accessor -ref_40 14 'requires+provides)"
"(make-struct-field-accessor -ref_40 15 'observer)"
"(make-struct-field-accessor -ref_40 16 'for-serializable?)"
"(make-struct-field-accessor -ref_40 17 'should-not-encounter-macros?))))"
"(define-values"
"(expand-context/make)"
"(lambda(module-scopes_2"
" post-expansion-scope_2"
" top-level-bind-scope_1"
" all-scopes-stx_2"
" use-site-scopes_1"
" defined-syms_1"
" frame-id_6"
" counter_2"
" lift-key_1"
" to-parsed?_0"
" context_0"
" phase_38"
" namespace_0"
" env_2"
" post-expansion-scope-action_0"
" scopes_18"
" def-ctx-scopes_0"
" binding-layer_0"
" reference-records_0"
" only-immediate?_0"
" just-once?_0"
" module-begin-k_0"
" need-eventually-defined_0"
" allow-unbound?_0"
" in-local-expand?_0"
" stops_0"
" current-introduction-scopes_0"
" declared-submodule-names_0"
" lifts_0"
" lift-envs_1"
" module-lifts_0"
" require-lifts_0"
" to-module-lifts_0"
" requires+provides_0"
" name_35"
" observer_0"
" for-serializable?_0"
" should-not-encounter-macros?_0)"
"(begin"
"(expand-context/outer1.1"
"(expand-context/inner2.1"
" module-scopes_2"
" top-level-bind-scope_1"
" all-scopes-stx_2"
" defined-syms_1"
" counter_2"
" lift-key_1"
" to-parsed?_0"
" phase_38"
" namespace_0"
" just-once?_0"
" module-begin-k_0"
" allow-unbound?_0"
" in-local-expand?_0"
" stops_0"
" declared-submodule-names_0"
" lifts_0"
" lift-envs_1"
" module-lifts_0"
" require-lifts_0"
" to-module-lifts_0"
" requires+provides_0"
" observer_0"
" for-serializable?_0"
" should-not-encounter-macros?_0)"
" post-expansion-scope_2"
" use-site-scopes_1"
" frame-id_6"
" context_0"
" env_2"
" post-expansion-scope-action_0"
" scopes_18"
" def-ctx-scopes_0"
" binding-layer_0"
" reference-records_0"
" only-immediate?_0"
" need-eventually-defined_0"
" current-introduction-scopes_0"
" name_35))))"
"(define-values(expand-context-context)(lambda(v_95)(begin(expand-context/outer-context v_95))))"
"(define-values(expand-context-env)(lambda(v_96)(begin(expand-context/outer-env v_96))))"
"(define-values"
"(expand-context-post-expansion-scope-action)"
"(lambda(v_97)(begin(expand-context/outer-post-expansion-scope-action v_97))))"
"(define-values(expand-context-scopes)(lambda(v_98)(begin(expand-context/outer-scopes v_98))))"
"(define-values(expand-context-def-ctx-scopes)(lambda(v_99)(begin(expand-context/outer-def-ctx-scopes v_99))))"
"(define-values(expand-context-binding-layer)(lambda(v_100)(begin(expand-context/outer-binding-layer v_100))))"
"(define-values"
"(expand-context-reference-records)"
"(lambda(v_101)(begin(expand-context/outer-reference-records v_101))))"
"(define-values(expand-context-only-immediate?)(lambda(v_102)(begin(expand-context/outer-only-immediate? v_102))))"
"(define-values"
"(expand-context-need-eventually-defined)"
"(lambda(v_103)(begin(expand-context/outer-need-eventually-defined v_103))))"
"(define-values"
"(expand-context-current-introduction-scopes)"
"(lambda(v_104)(begin(expand-context/outer-current-introduction-scopes v_104))))"
"(define-values(expand-context-name)(lambda(v_105)(begin(expand-context/outer-name v_105))))"
"(define-values"
"(expand-context-to-parsed?)"
"(lambda(v_106)(begin(expand-context/inner-to-parsed?(root-expand-context/outer-inner v_106)))))"
"(define-values"
"(expand-context-phase)"
"(lambda(v_107)(begin(expand-context/inner-phase(root-expand-context/outer-inner v_107)))))"
"(define-values"
"(expand-context-namespace)"
"(lambda(v_108)(begin(expand-context/inner-namespace(root-expand-context/outer-inner v_108)))))"
"(define-values"
"(expand-context-just-once?)"
"(lambda(v_109)(begin(expand-context/inner-just-once?(root-expand-context/outer-inner v_109)))))"
"(define-values"
"(expand-context-module-begin-k)"
"(lambda(v_110)(begin(expand-context/inner-module-begin-k(root-expand-context/outer-inner v_110)))))"
"(define-values"
"(expand-context-allow-unbound?)"
"(lambda(v_111)(begin(expand-context/inner-allow-unbound?(root-expand-context/outer-inner v_111)))))"
"(define-values"
"(expand-context-in-local-expand?)"
"(lambda(v_112)(begin(expand-context/inner-in-local-expand?(root-expand-context/outer-inner v_112)))))"
"(define-values"
"(expand-context-stops)"
"(lambda(v_113)(begin(expand-context/inner-stops(root-expand-context/outer-inner v_113)))))"
"(define-values"
"(expand-context-declared-submodule-names)"
"(lambda(v_114)(begin(expand-context/inner-declared-submodule-names(root-expand-context/outer-inner v_114)))))"
"(define-values"
"(expand-context-lifts)"
"(lambda(v_115)(begin(expand-context/inner-lifts(root-expand-context/outer-inner v_115)))))"
"(define-values"
"(expand-context-lift-envs)"
"(lambda(v_116)(begin(expand-context/inner-lift-envs(root-expand-context/outer-inner v_116)))))"
"(define-values"
"(expand-context-module-lifts)"
"(lambda(v_117)(begin(expand-context/inner-module-lifts(root-expand-context/outer-inner v_117)))))"
"(define-values"
"(expand-context-require-lifts)"
"(lambda(v_118)(begin(expand-context/inner-require-lifts(root-expand-context/outer-inner v_118)))))"
"(define-values"
"(expand-context-to-module-lifts)"
"(lambda(v_119)(begin(expand-context/inner-to-module-lifts(root-expand-context/outer-inner v_119)))))"
"(define-values"
"(expand-context-requires+provides)"
"(lambda(v_120)(begin(expand-context/inner-requires+provides(root-expand-context/outer-inner v_120)))))"
"(define-values"
"(expand-context-observer)"
"(lambda(v_121)(begin(expand-context/inner-observer(root-expand-context/outer-inner v_121)))))"
"(define-values"
"(expand-context-for-serializable?)"
"(lambda(v_122)(begin(expand-context/inner-for-serializable?(root-expand-context/outer-inner v_122)))))"
"(define-values"
"(expand-context-should-not-encounter-macros?)"
"(lambda(v_123)(begin(expand-context/inner-should-not-encounter-macros?(root-expand-context/outer-inner v_123)))))"
"(define-values"
"(make-expand-context10.1)"
"(lambda(for-serializable?4_0 for-serializable?7_0 observable?5_0 observable?8_0 to-parsed?3_0 to-parsed?6_0 ns9_0)"
"(begin"
" 'make-expand-context10"
"(let-values(((ns_43) ns9_0))"
"(let-values(((to-parsed?_1)(if to-parsed?6_0 to-parsed?3_0 #f)))"
"(let-values(((for-serializable?_1)(if for-serializable?7_0 for-serializable?4_0 #f)))"
"(let-values(((observable?_0)(if observable?8_0 observable?5_0 #f)))"
"(let-values()"
"(let-values(((root-ctx_1)(namespace-get-root-expand-ctx ns_43)))"
"(expand-context/make"
"(root-expand-context-module-scopes root-ctx_1)"
"(root-expand-context-post-expansion-scope root-ctx_1)"
"(root-expand-context-top-level-bind-scope root-ctx_1)"
"(root-expand-context-all-scopes-stx root-ctx_1)"
"(root-expand-context-use-site-scopes root-ctx_1)"
"(root-expand-context-defined-syms root-ctx_1)"
"(root-expand-context-frame-id root-ctx_1)"
"(root-expand-context-counter root-ctx_1)"
"(root-expand-context-lift-key root-ctx_1)"
" to-parsed?_1"
" 'top-level"
"(namespace-phase ns_43)"
" ns_43"
" empty-env"
" push-scope"
" null"
" #f"
"(root-expand-context-frame-id root-ctx_1)"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" empty-free-id-set"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
"(if observable?_0(current-expand-observe) #f)"
" for-serializable?_1"
" #f))))))))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_1 root-ctx_2)"
"(begin"
"(let-values(((v_124) ctx_1))"
"(let-values(((the-struct_41) v_124))"
"(if(expand-context/outer? the-struct_41)"
"(let-values(((post-expansion-scope28_0)(root-expand-context-post-expansion-scope root-ctx_2))"
"((use-site-scopes29_0)(root-expand-context-use-site-scopes root-ctx_2))"
"((frame-id30_1)(root-expand-context-frame-id root-ctx_2))"
"((binding-layer31_0)(root-expand-context-frame-id root-ctx_2))"
"((inner32_0)"
"(let-values(((the-struct_42)(root-expand-context/outer-inner v_124)))"
"(if(expand-context/inner? the-struct_42)"
"(let-values(((module-scopes33_0)(root-expand-context-module-scopes root-ctx_2))"
"((top-level-bind-scope34_0)"
"(root-expand-context-top-level-bind-scope root-ctx_2))"
"((all-scopes-stx35_0)(root-expand-context-all-scopes-stx root-ctx_2))"
"((defined-syms36_0)(root-expand-context-defined-syms root-ctx_2))"
"((counter37_0)(root-expand-context-counter root-ctx_2))"
"((lift-key38_0)(root-expand-context-lift-key root-ctx_2)))"
"(expand-context/inner2.1"
" module-scopes33_0"
" top-level-bind-scope34_0"
" all-scopes-stx35_0"
" defined-syms36_0"
" counter37_0"
" lift-key38_0"
"(expand-context/inner-to-parsed? the-struct_42)"
"(expand-context/inner-phase the-struct_42)"
"(expand-context/inner-namespace the-struct_42)"
"(expand-context/inner-just-once? the-struct_42)"
"(expand-context/inner-module-begin-k the-struct_42)"
"(expand-context/inner-allow-unbound? the-struct_42)"
"(expand-context/inner-in-local-expand? the-struct_42)"
"(expand-context/inner-stops the-struct_42)"
"(expand-context/inner-declared-submodule-names the-struct_42)"
"(expand-context/inner-lifts the-struct_42)"
"(expand-context/inner-lift-envs the-struct_42)"
"(expand-context/inner-module-lifts the-struct_42)"
"(expand-context/inner-require-lifts the-struct_42)"
"(expand-context/inner-to-module-lifts the-struct_42)"
"(expand-context/inner-requires+provides the-struct_42)"
"(expand-context/inner-observer the-struct_42)"
"(expand-context/inner-for-serializable? the-struct_42)"
"(expand-context/inner-should-not-encounter-macros? the-struct_42)))"
"                              (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_42)))))"
"(expand-context/outer1.1"
" inner32_0"
" post-expansion-scope28_0"
" use-site-scopes29_0"
" frame-id30_1"
"(expand-context/outer-context the-struct_41)"
"(expand-context/outer-env the-struct_41)"
"(expand-context/outer-post-expansion-scope-action the-struct_41)"
"(expand-context/outer-scopes the-struct_41)"
"(expand-context/outer-def-ctx-scopes the-struct_41)"
" binding-layer31_0"
"(expand-context/outer-reference-records the-struct_41)"
"(expand-context/outer-only-immediate? the-struct_41)"
"(expand-context/outer-need-eventually-defined the-struct_41)"
"(expand-context/outer-current-introduction-scopes the-struct_41)"
"(expand-context/outer-name the-struct_41)))"
"            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_41)))))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context17.1)"
"(lambda(fail-ok?13_0 fail-ok?14_0 who15_0 who16_0)"
"(begin"
" 'get-current-expand-context17"
"(let-values(((who_9)(if who16_0 who15_0 'unexpected)))"
"(let-values(((fail-ok?_0)(if fail-ok?14_0 fail-ok?13_0 #f)))"
"(let-values()"
"(let-values(((or-part_162)(force(current-expand-context))))"
"(if or-part_162"
" or-part_162"
"                (if fail-ok?_0 #f (raise-arguments-error who_9 \"not currently expanding\"))))))))))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_125)"
"(begin"
"(if(let-values(((or-part_163)(not v_125)))"
"(if or-part_163 or-part_163(if(procedure? v_125)(procedure-arity-includes? v_125 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_125)))"
" v_125))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_2)"
"(begin"
"(if(if(eq? 'expression(expand-context-context ctx_2))(not(expand-context-name ctx_2)) #f)"
"(let-values() ctx_2)"
"(let-values()"
"(let-values(((v_126) ctx_2))"
"(let-values(((the-struct_43) v_126))"
"(if(expand-context/outer? the-struct_43)"
"(let-values(((context39_0) 'expression)"
"((name40_0) #f)"
"((post-expansion-scope41_0) #f)"
"((inner42_0)(root-expand-context/outer-inner v_126)))"
"(expand-context/outer1.1"
" inner42_0"
" post-expansion-scope41_0"
"(root-expand-context/outer-use-site-scopes the-struct_43)"
"(root-expand-context/outer-frame-id the-struct_43)"
" context39_0"
"(expand-context/outer-env the-struct_43)"
"(expand-context/outer-post-expansion-scope-action the-struct_43)"
"(expand-context/outer-scopes the-struct_43)"
"(expand-context/outer-def-ctx-scopes the-struct_43)"
"(expand-context/outer-binding-layer the-struct_43)"
"(expand-context/outer-reference-records the-struct_43)"
"(expand-context/outer-only-immediate? the-struct_43)"
"(expand-context/outer-need-eventually-defined the-struct_43)"
"(expand-context/outer-current-introduction-scopes the-struct_43)"
" name40_0))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_43)))))))))"
"(define-values"
"(as-begin-expression-context)"
"(lambda(ctx_3)"
"(begin"
"(if(not(expand-context-name ctx_3))"
"(let-values() ctx_3)"
"(let-values()"
"(let-values(((v_127) ctx_3))"
"(let-values(((the-struct_44) v_127))"
"(if(expand-context/outer? the-struct_44)"
"(let-values(((name43_0) #f)((inner44_0)(root-expand-context/outer-inner v_127)))"
"(expand-context/outer1.1"
" inner44_0"
"(root-expand-context/outer-post-expansion-scope the-struct_44)"
"(root-expand-context/outer-use-site-scopes the-struct_44)"
"(root-expand-context/outer-frame-id the-struct_44)"
"(expand-context/outer-context the-struct_44)"
"(expand-context/outer-env the-struct_44)"
"(expand-context/outer-post-expansion-scope-action the-struct_44)"
"(expand-context/outer-scopes the-struct_44)"
"(expand-context/outer-def-ctx-scopes the-struct_44)"
"(expand-context/outer-binding-layer the-struct_44)"
"(expand-context/outer-reference-records the-struct_44)"
"(expand-context/outer-only-immediate? the-struct_44)"
"(expand-context/outer-need-eventually-defined the-struct_44)"
"(expand-context/outer-current-introduction-scopes the-struct_44)"
" name43_0))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_44)))))))))"
"(define-values"
"(as-tail-context23.1)"
"(lambda(wrt20_0 ctx22_0)"
"(begin"
" 'as-tail-context23"
"(let-values(((ctx_4) ctx22_0))"
"(let-values(((wrt-ctx_0) wrt20_0))"
"(let-values()"
"(if(expand-context-name wrt-ctx_0)"
"(let-values()"
"(let-values(((v_128) ctx_4))"
"(let-values(((the-struct_45) v_128))"
"(if(expand-context/outer? the-struct_45)"
"(let-values(((name45_0)(expand-context-name wrt-ctx_0))"
"((inner46_0)(root-expand-context/outer-inner v_128)))"
"(expand-context/outer1.1"
" inner46_0"
"(root-expand-context/outer-post-expansion-scope the-struct_45)"
"(root-expand-context/outer-use-site-scopes the-struct_45)"
"(root-expand-context/outer-frame-id the-struct_45)"
"(expand-context/outer-context the-struct_45)"
"(expand-context/outer-env the-struct_45)"
"(expand-context/outer-post-expansion-scope-action the-struct_45)"
"(expand-context/outer-scopes the-struct_45)"
"(expand-context/outer-def-ctx-scopes the-struct_45)"
"(expand-context/outer-binding-layer the-struct_45)"
"(expand-context/outer-reference-records the-struct_45)"
"(expand-context/outer-only-immediate? the-struct_45)"
"(expand-context/outer-need-eventually-defined the-struct_45)"
"(expand-context/outer-current-introduction-scopes the-struct_45)"
" name45_0))"
"                      (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_45)))))"
"(let-values() ctx_4))))))))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_5 ids_1)"
"(begin"
"(if(if(pair? ids_1)(null?(cdr ids_1)) #f)"
"(let-values()"
"(let-values(((v_129) ctx_5))"
"(let-values(((the-struct_46) v_129))"
"(if(expand-context/outer? the-struct_46)"
"(let-values(((name47_0)(car ids_1))((inner48_0)(root-expand-context/outer-inner v_129)))"
"(expand-context/outer1.1"
" inner48_0"
"(root-expand-context/outer-post-expansion-scope the-struct_46)"
"(root-expand-context/outer-use-site-scopes the-struct_46)"
"(root-expand-context/outer-frame-id the-struct_46)"
"(expand-context/outer-context the-struct_46)"
"(expand-context/outer-env the-struct_46)"
"(expand-context/outer-post-expansion-scope-action the-struct_46)"
"(expand-context/outer-scopes the-struct_46)"
"(expand-context/outer-def-ctx-scopes the-struct_46)"
"(expand-context/outer-binding-layer the-struct_46)"
"(expand-context/outer-reference-records the-struct_46)"
"(expand-context/outer-only-immediate? the-struct_46)"
"(expand-context/outer-need-eventually-defined the-struct_46)"
"(expand-context/outer-current-introduction-scopes the-struct_46)"
" name47_0))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_46)))))"
"(let-values() ctx_5)))))"
"(define-values"
"(as-to-parsed-context)"
"(lambda(ctx_6)"
"(begin"
"(let-values(((v_130) ctx_6))"
"(let-values(((the-struct_47) v_130))"
"(if(expand-context/outer? the-struct_47)"
"(let-values(((inner49_0)"
"(let-values(((the-struct_48)(root-expand-context/outer-inner v_130)))"
"(if(expand-context/inner? the-struct_48)"
"(let-values(((to-parsed?50_0) #t)"
"((observer51_0) #f)"
"((should-not-encounter-macros?52_0) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_48)"
"(root-expand-context/inner-top-level-bind-scope the-struct_48)"
"(root-expand-context/inner-all-scopes-stx the-struct_48)"
"(root-expand-context/inner-defined-syms the-struct_48)"
"(root-expand-context/inner-counter the-struct_48)"
"(root-expand-context/inner-lift-key the-struct_48)"
" to-parsed?50_0"
"(expand-context/inner-phase the-struct_48)"
"(expand-context/inner-namespace the-struct_48)"
"(expand-context/inner-just-once? the-struct_48)"
"(expand-context/inner-module-begin-k the-struct_48)"
"(expand-context/inner-allow-unbound? the-struct_48)"
"(expand-context/inner-in-local-expand? the-struct_48)"
"(expand-context/inner-stops the-struct_48)"
"(expand-context/inner-declared-submodule-names the-struct_48)"
"(expand-context/inner-lifts the-struct_48)"
"(expand-context/inner-lift-envs the-struct_48)"
"(expand-context/inner-module-lifts the-struct_48)"
"(expand-context/inner-require-lifts the-struct_48)"
"(expand-context/inner-to-module-lifts the-struct_48)"
"(expand-context/inner-requires+provides the-struct_48)"
" observer51_0"
"(expand-context/inner-for-serializable? the-struct_48)"
" should-not-encounter-macros?52_0))"
"                              (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_48)))))"
"(expand-context/outer1.1"
" inner49_0"
"(root-expand-context/outer-post-expansion-scope the-struct_47)"
"(root-expand-context/outer-use-site-scopes the-struct_47)"
"(root-expand-context/outer-frame-id the-struct_47)"
"(expand-context/outer-context the-struct_47)"
"(expand-context/outer-env the-struct_47)"
"(expand-context/outer-post-expansion-scope-action the-struct_47)"
"(expand-context/outer-scopes the-struct_47)"
"(expand-context/outer-def-ctx-scopes the-struct_47)"
"(expand-context/outer-binding-layer the-struct_47)"
"(expand-context/outer-reference-records the-struct_47)"
"(expand-context/outer-only-immediate? the-struct_47)"
"(expand-context/outer-need-eventually-defined the-struct_47)"
"(expand-context/outer-current-introduction-scopes the-struct_47)"
"(expand-context/outer-name the-struct_47)))"
"            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_47)))))))"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_102)"
"(begin"
" 'to-syntax-list"
"(if(list? s_102)"
"(let-values() s_102)"
"(if(pair? s_102)"
"(let-values()(let-values(((r_28)(to-syntax-list.1(cdr s_102))))(if r_28(cons(car s_102) r_28) #f)))"
"(if(syntax?$1 s_102)(let-values()(to-syntax-list.1(syntax-e$1 s_102)))(let-values() #f)))))))"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(id-cache-0)(make-hasheq))"
"(define-values(id-cache-1)(make-hasheq))"
"(define-values"
"(core-id)"
"(lambda(sym_8 phase_32)"
"(begin"
"(if(eqv? phase_32 0)"
"(let-values()"
"(let-values(((or-part_6)(hash-ref id-cache-0 sym_8 #f)))"
"(if or-part_6"
" or-part_6"
"(let-values(((s_147)(datum->syntax$1 core-stx sym_8)))"
"(begin(hash-set! id-cache-0 sym_8 s_147) s_147)))))"
"(if(eq? phase_32 1)"
"(let-values()"
"(let-values(((or-part_28)(hash-ref id-cache-1 sym_8 #f)))"
"(if or-part_28"
" or-part_28"
"(let-values(((s_10)(datum->syntax$1(syntax-shift-phase-level$1 core-stx 1) sym_8)))"
"(begin(hash-set! id-cache-1 sym_8 s_10) s_10)))))"
"(let-values()(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_32) sym_8)))))))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!*)"
"(lambda(sym_23 proc_4)"
"(begin(begin(add-core-binding! sym_23)(set! core-forms(hash-set core-forms sym_23 proc_4))))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_13 val_33)"
"(begin(begin(add-core-binding! sym_13)(set! core-primitives(hash-set core-primitives sym_13 val_33))))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_24)"
"(begin"
"(let-values(((temp1_0)(datum->syntax$1 core-stx sym_24))"
"((temp2_1)"
"(let-values(((core-mpi4_0) core-mpi)((temp5_2) 0)((sym6_0) sym_24))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi4_0"
" temp5_2"
" sym6_0)))"
"((temp3_1) 0))"
"(add-binding!17.1 #f #f #f #f temp1_0 temp2_1 temp3_1)))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_44)"
"(begin"
"(let-values(((ns7_0) ns_44)"
"((temp8_0)"
"(let-values(((temp10_0) #t)"
"((temp11_0) #t)"
"((temp12_0) #t)"
"((core-mpi13_0) core-mpi)"
"((temp14_1)"
"(hasheqv"
" 0"
"(let-values(((lst_75)(list core-primitives core-forms))((lst_76) '(#f #t)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_75)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_76)))"
"((letrec-values(((for-loop_92)"
"(lambda(table_95 lst_77 lst_78)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_77)(pair? lst_78) #f)"
"(let-values(((syms_12)(unsafe-car lst_77))"
"((rest_35)(unsafe-cdr lst_77))"
"((syntax?_2)(unsafe-car lst_78))"
"((rest_36)(unsafe-cdr lst_78)))"
"(let-values(((table_96)"
"(let-values(((table_97) table_95))"
"(let-values(((ht_73) syms_12))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-keys ht_73)))"
"((letrec-values(((for-loop_93)"
"(lambda(table_98"
" i_83)"
"(begin"
" 'for-loop"
"(if i_83"
"(let-values(((sym_10)"
"(hash-iterate-key"
" ht_73"
" i_83)))"
"(let-values(((table_99)"
"(let-values(((table_100)"
" table_98))"
"(let-values(((table_101)"
"(let-values()"
"(let-values(((key_33"
" val_34)"
"(let-values()"
"(let-values(((b_61)"
"(let-values(((core-mpi17_0)"
" core-mpi)"
"((temp18_2)"
" 0)"
"((sym19_0)"
" sym_10))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" core-mpi17_0"
" temp18_2"
" sym19_0))))"
"(values"
" sym_10"
"(if syntax?_2"
"(provided1.1"
" b_61"
" #f"
" #t)"
" b_61))))))"
"(hash-set"
" table_100"
" key_33"
" val_34)))))"
"(values"
" table_101)))))"
"(if(not"
" #f)"
"(for-loop_93"
" table_99"
"(hash-iterate-next"
" ht_73"
" i_83))"
" table_99)))"
" table_98)))))"
" for-loop_93)"
" table_97"
"(hash-iterate-first ht_73)))))))"
"(if(not #f)"
"(for-loop_92 table_96 rest_35 rest_36)"
" table_96)))"
" table_95)))))"
" for-loop_92)"
" '#hasheq()"
" lst_75"
" lst_76)))))"
"((temp15_1)"
"(lambda(phase-level_13 ns_45 insp_7)"
"(if(zero? phase-level_13)"
"(let-values(((ns_46)"
"(let-values(((ns20_0) ns_45)"
"((core-module-name21_0) core-module-name)"
"((temp22_1) 0))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns20_0"
" core-module-name21_0"
" temp22_1))))"
"(if ns_46"
"(module-linklet-info2.1(namespace->instance ns_46 0) #f core-mpi #f #f #f)"
" #f))"
" #f)))"
"((temp16_2)"
"(lambda(data-box_1"
" ns_47"
" phase_39"
" phase-level_14"
" self_4"
" bulk-binding-registry_4"
" insp_8)"
"(let-values(((tmp_14) phase-level_14))"
"(if(equal? tmp_14 0)"
"(let-values()"
"(begin"
"(let-values(((ht_74) core-primitives))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_74)))"
"((letrec-values(((for-loop_94)"
"(lambda(i_84)"
"(begin"
" 'for-loop"
"(if i_84"
"(let-values(((sym_25 val_35)"
"(hash-iterate-key+value"
" ht_74"
" i_84)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-consistent!"
" ns_47"
" 0"
" sym_25"
" val_35))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_94"
"(hash-iterate-next ht_74 i_84))"
"(values))))"
"(values))))))"
" for-loop_94)"
"(hash-iterate-first ht_74))))"
"(void)"
"(let-values(((ht_75) core-forms))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_75)))"
"((letrec-values(((for-loop_53)"
"(lambda(i_27)"
"(begin"
" 'for-loop"
"(if i_27"
"(let-values(((sym_26 proc_5)"
"(hash-iterate-key+value"
" ht_75"
" i_27)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_47"
" 0"
" sym_26"
"(core-form9.1"
" proc_5"
" sym_26)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_53"
"(hash-iterate-next ht_75 i_27))"
"(values))))"
"(values))))))"
" for-loop_53)"
"(hash-iterate-first ht_75))))"
"(void)))"
"(let-values()(void)))))))"
"(make-module39.1"
" temp10_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp16_2"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp11_0"
" #t"
" temp15_1"
" #t"
" temp12_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp14_1"
" #f"
" #f"
" core-mpi13_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((core-module-name9_0) core-module-name))"
"(declare-module!58.1 #f #f ns7_0 temp8_0 core-module-name9_0)))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_22 phase_33)"
"(begin"
"(let-values(((ok?_0 id23_0 _24_0)"
"(let-values(((s_163) s_22))"
"(if(let-values(((s_164)(if(syntax?$1 s_163)(syntax-e$1 s_163) s_163)))"
"(if(pair? s_164)"
"(if(let-values(((s_68)(car s_164)))"
"(let-values(((or-part_137)(if(syntax?$1 s_68)(symbol?(syntax-e$1 s_68)) #f)))"
"(if or-part_137 or-part_137(symbol? s_68))))"
"(let-values(((s_165)(cdr s_164))) #t)"
" #f)"
" #f))"
"(let-values()"
"(let-values(((id23_1 _24_1)"
"(let-values(((s_166)(if(syntax?$1 s_163)(syntax-e$1 s_163) s_163)))"
"(let-values(((id25_0)(let-values(((s_167)(car s_166))) s_167))"
"((_26_0)(let-values(((s_168)(cdr s_166))) s_168)))"
"(values id25_0 _26_0)))))"
"(values #t id23_1 _24_1)))"
"(values #f #f #f)))))"
"(if ok?_0"
"(let-values(((b_62)"
"(let-values(((temp27_1) id23_0)((phase28_0) phase_33))"
"(resolve+shift30.1 #f #f #f #f #f #f #f #f #f #f temp27_1 phase28_0))))"
"(if(module-binding? b_62)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_62)))"
"(module-binding-sym b_62)"
" #f)"
" #f))"
" #f)))))"
"(define-values"
"(taint-dispatch)"
"(lambda(s_0 proc_6 phase_31)"
"(begin"
"((letrec-values(((loop_33)"
"(lambda(s_169 mode_10)"
"(begin"
" 'loop"
"(let-values(((tmp_4) mode_10))"
"(if(equal? tmp_4 'none)"
"(let-values() s_169)"
"(if(equal? tmp_4 'opaque)"
"(let-values()(proc_6 s_169))"
"(if(equal? tmp_4 'transparent)"
"(let-values()"
"(let-values(((c_18)"
"(let-values(((s_170)"
"(let-values(((or-part_13)(syntax->list$1 s_169)))"
"(if or-part_13 or-part_13(syntax-e$1 s_169))))"
"((f_35)(lambda(tail?_39 d_18)(begin 'f d_18)))"
"((s->_3)"
"(lambda(s_171)"
"(begin"
" 's->"
"(loop_33"
" s_171"
"(syntax-taint-mode-property s_171)))))"
"((seen_19) #f))"
"(let-values(((s_146) s_170)"
"((f_36)"
"(lambda(tail?_40 v_62)"
"(begin"
" 'f"
"(if(syntax?$1 v_62)"
"(let-values()(s->_3 v_62))"
"(let-values()(f_35 tail?_40 v_62))))))"
"((seen_20) seen_19))"
"((letrec-values(((loop_7)"
"(lambda(tail?_41 s_172 prev-depth_8)"
"(begin"
" 'loop"
"(let-values(((depth_8)"
"(add1 prev-depth_8)))"
"(if(if seen_20(> depth_8 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_41"
" s_172"
"(lambda(tail?_42 s_173)"
"(f_36 tail?_42 s_173))"
" seen_20))"
"(if(null? s_172)"
"(let-values()"
"(f_36 tail?_41 s_172))"
"(if(pair? s_172)"
"(let-values()"
"(f_36"
" tail?_41"
"(cons"
"(loop_7"
" #f"
"(car s_172)"
" depth_8)"
"(loop_7"
" #t"
"(cdr s_172)"
" depth_8))))"
"(if(let-values(((or-part_164)"
"(symbol?"
" s_172)))"
"(if or-part_164"
" or-part_164"
"(let-values(((or-part_76)"
"(boolean?"
" s_172)))"
"(if or-part_76"
" or-part_76"
"(number? s_172)))))"
"(let-values()(f_36 #f s_172))"
"(if(let-values(((or-part_77)"
"(vector?"
" s_172)))"
"(if or-part_77"
" or-part_77"
"(let-values(((or-part_29)"
"(box?"
" s_172)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_78)"
"(prefab-struct-key"
" s_172)))"
"(if or-part_78"
" or-part_78"
"(hash?"
" s_172)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_41"
" s_172"
"(lambda(tail?_43 s_174)"
"(f_36 tail?_43 s_174))"
" seen_20))"
"(let-values()"
"(f_36 #f s_172))))))))))))"
" loop_7)"
" #f"
" s_146"
" 0)))))"
"(datum->syntax$1"
" #f"
" c_18"
" s_169"
"(if(syntax-any-macro-scopes? s_169)"
"(syntax-property-remove s_169 original-property-sym)"
" s_169))))"
"(if(equal? tmp_4 'transparent-binding)"
"(let-values()"
"(let-values(((c_19)(syntax-e$1 s_169)))"
"(if(pair? c_19)"
"(let-values()"
"(let-values(((cd_0)(cdr c_19)))"
"(if(let-values(((or-part_71)(pair? cd_0)))"
"(if or-part_71"
" or-part_71"
"(if(syntax?$1 cd_0)(pair?(syntax-e$1 cd_0)) #f)))"
"(let-values()"
"(let-values(((d_19)(if(syntax?$1 cd_0)(syntax-e$1 cd_0) cd_0)))"
"(datum->syntax$1"
" #f"
"(cons"
"(loop_33(car c_19)(syntax-taint-mode-property(car c_19)))"
"(cons"
"(loop_33(car d_19) 'transparent)"
"(let-values(((s_175)"
"(let-values(((or-part_165)"
"(syntax->list$1(cdr d_19))))"
"(if or-part_165 or-part_165(cdr d_19))))"
"((f_7)(lambda(tail?_44 d_20)(begin 'f d_20)))"
"((s->_4)"
"(lambda(s_176)"
"(begin"
" 's->"
"(loop_33"
" s_176"
"(syntax-taint-mode-property s_176)))))"
"((seen_21) #f))"
"(let-values(((s_80) s_175)"
"((f_8)"
"(lambda(tail?_45 v_39)"
"(begin"
" 'f"
"(if(syntax?$1 v_39)"
"(let-values()(s->_4 v_39))"
"(let-values()(f_7 tail?_45 v_39))))))"
"((seen_22) seen_21))"
"((letrec-values(((loop_77)"
"(lambda(tail?_46 s_177 prev-depth_9)"
"(begin"
" 'loop"
"(let-values(((depth_9)"
"(add1 prev-depth_9)))"
"(if(if seen_22(> depth_9 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_46"
" s_177"
"(lambda(tail?_47 s_178)"
"(f_8 tail?_47 s_178))"
" seen_22))"
"(if(null? s_177)"
"(let-values()"
"(f_8 tail?_46 s_177))"
"(if(pair? s_177)"
"(let-values()"
"(f_8"
" tail?_46"
"(cons"
"(loop_77"
" #f"
"(car s_177)"
" depth_9)"
"(loop_77"
" #t"
"(cdr s_177)"
" depth_9))))"
"(if(let-values(((or-part_166)"
"(symbol?"
" s_177)))"
"(if or-part_166"
" or-part_166"
"(let-values(((or-part_167)"
"(boolean?"
" s_177)))"
"(if or-part_167"
" or-part_167"
"(number?"
" s_177)))))"
"(let-values()"
"(f_8 #f s_177))"
"(if(let-values(((or-part_168)"
"(vector?"
" s_177)))"
"(if or-part_168"
" or-part_168"
"(let-values(((or-part_169)"
"(box?"
" s_177)))"
"(if or-part_169"
" or-part_169"
"(let-values(((or-part_33)"
"(prefab-struct-key"
" s_177)))"
"(if or-part_33"
" or-part_33"
"(hash?"
" s_177)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_46"
" s_177"
"(lambda(tail?_48"
" s_179)"
"(f_8"
" tail?_48"
" s_179))"
" seen_22))"
"(let-values()"
"(f_8"
" #f"
" s_177))))))))))))"
" loop_77)"
" #f"
" s_80"
" 0)))))"
" s_169"
"(if(syntax-any-macro-scopes? s_169)"
"(syntax-property-remove s_169 original-property-sym)"
" s_169))))"
"(let-values()(loop_33 s_169 'transparent)))))"
"(let-values()(loop_33 s_169 'transparent)))))"
"(let-values()"
"(let-values(((c_20)(syntax-e$1 s_169)))"
"(let-values(((tmp_15)(core-form-sym c_20 phase_31)))"
"(if(if(equal? tmp_15 'begin)"
" #t"
"(if(equal? tmp_15 'begin-for-syntax)"
" #t"
"(equal? tmp_15 '#%module-begin)))"
"(let-values()(loop_33 s_169 'transparent))"
"(if(if(equal? tmp_15 'define-values)"
" #t"
"(equal? tmp_15 'define-syntaxes))"
"(let-values()(loop_33 s_169 'transparent-binding))"
"(let-values()(loop_33 s_169 'opaque))))))))))))))))"
" loop_33)"
" s_0"
"(syntax-taint-mode-property s_0)))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_180)"
"(begin"
"(let-values(((or-part_170)(syntax-property$1 s_180 'taint-mode)))"
"(if or-part_170 or-part_170(syntax-property$1 s_180 'certify-mode))))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_181)(begin(syntax-property-remove(syntax-property-remove s_181 'taint-mode) 'certify-mode))))"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_0 phase_40 all-bindings?_0)"
"(begin"
" 'syntax-debug-info"
"(let-values(((hts_0)"
"(reverse$1"
"(let-values(((lst_72)(fallback->list(syntax-shifted-multi-scopes s_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_72)))"
"((letrec-values(((for-loop_95)"
"(lambda(fold-var_58 lst_79)"
"(begin"
" 'for-loop"
"(if(pair? lst_79)"
"(let-values(((smss_26)(unsafe-car lst_79))"
"((rest_37)(unsafe-cdr lst_79)))"
"(let-values(((fold-var_59)"
"(let-values(((fold-var_60) fold-var_58))"
"(let-values(((fold-var_61)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_0)"
"(if(identifier?"
" s_0)"
"(hasheq"
" 'name"
"(syntax-e$1 s_0))"
" '#hasheq())))"
"(let-values(((s-scs_0)"
"(scope-set-at-fallback"
" s_0"
" smss_26"
" phase_40)))"
"(let-values(((context_1)"
"(scope-set->context"
" s-scs_0)))"
"(let-values(((context-ht_0)"
"(hash-set"
" init-ht_0"
" 'context"
" context_1)))"
"(let-values(((sym_17)"
"(syntax-e$1"
" s_0)))"
"(let-values(((bindings_0)"
"(if(identifier?"
" s_0)"
"(let-values()"
"(let-values(((bindings_1"
" covered-scopess_0)"
"(let-values(((ht_76)"
" s-scs_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys"
" ht_76)))"
"((letrec-values(((for-loop_96)"
"(lambda(bindings_2"
" covered-scope-sets_0"
" i_85)"
"(begin"
" 'for-loop"
"(if i_85"
"(let-values(((sc_23)"
"(unsafe-immutable-hash-iterate-key"
" ht_76"
" i_85)))"
"(let-values(((bindings_3"
" covered-scope-sets_1)"
"(let-values(((ht_77"
" bulk-bindings_3)"
"(let-values(((table_102)"
"(scope-binding-table"
" sc_23)))"
"(if(hash?"
" table_102)"
"(values"
"(hash-ref"
" table_102"
" sym_17"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_102)"
" sym_17"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_102)))))"
"((s_182)"
" s_0)"
"((extra-shifts_5)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_97)"
"(lambda(bindings_4"
" covered-scope-sets_2"
" i_86)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" i_86))"
"(let-values(((scs_15)"
"(if(pair?"
" i_86)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_86)))"
"(let-values()"
"(hash-iterate-key"
" ht_77"
" i_86))))"
"((b_63)"
"(if(pair?"
" i_86)"
"(let-values()"
"(let-values(((bulk_4)"
"(bulk-binding-at-bulk"
"(car"
" i_86))))"
"(let-values(((b-info_1)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_4"
" s_182"
" extra-shifts_5)"
" sym_17"
" #f)))"
"(if b-info_1"
"((bulk-binding-create"
" bulk_4)"
" bulk_4"
" b-info_1"
" sym_17)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_77"
" i_86)))))"
"(let-values(((bindings_5"
" covered-scope-sets_3)"
"(let-values(((bindings_6)"
" bindings_4)"
"((covered-scope-sets_4)"
" covered-scope-sets_2))"
"(if(if scs_15"
"(if b_63"
"(if(let-values(((or-part_30)"
" all-bindings?_0))"
"(if or-part_30"
" or-part_30"
"(subset?"
" scs_15"
" s-scs_0)))"
"(not"
"(set-member?"
" covered-scope-sets_4"
" scs_15))"
" #f)"
" #f)"
" #f)"
"(let-values(((bindings_7)"
" bindings_6)"
"((covered-scope-sets_5)"
" covered-scope-sets_4))"
"(let-values(((bindings_8"
" covered-scope-sets_6)"
"(let-values()"
"(values"
"(cons"
"(hash"
" 'name"
"(syntax-e$1"
" s_0)"
" 'context"
"(scope-set->context"
" scs_15)"
" 'match?"
"(subset?"
" scs_15"
" s-scs_0)"
"(if(local-binding?"
" b_63)"
" 'local"
" 'module)"
"(if(local-binding?"
" b_63)"
"(local-binding-key"
" b_63)"
"(vector"
"(module-binding-sym"
" b_63)"
"(module-binding-module"
" b_63)"
"(module-binding-phase"
" b_63))))"
" bindings_7)"
"(set-add"
" covered-scope-sets_5"
" scs_15)))))"
"(values"
" bindings_8"
" covered-scope-sets_6)))"
"(values"
" bindings_6"
" covered-scope-sets_4)))))"
"(if(not"
" #f)"
"(for-loop_97"
" bindings_5"
" covered-scope-sets_3"
"(if(pair?"
" i_86)"
"(let-values()"
"(cdr"
" i_86))"
"(let-values()"
"(let-values(((or-part_7)"
"(hash-iterate-next"
" ht_77"
" i_86)))"
"(if or-part_7"
" or-part_7"
" bulk-bindings_3)))))"
"(values"
" bindings_5"
" covered-scope-sets_3))))"
"(values"
" bindings_4"
" covered-scope-sets_2))))))"
" for-loop_97)"
" bindings_2"
" covered-scope-sets_0"
"(let-values(((or-part_8)"
"(hash-iterate-first"
" ht_77)))"
"(if or-part_8"
" or-part_8"
" bulk-bindings_3)))))))"
"(if(not"
" #f)"
"(for-loop_96"
" bindings_3"
" covered-scope-sets_1"
"(unsafe-immutable-hash-iterate-next"
" ht_76"
" i_85))"
"(values"
" bindings_3"
" covered-scope-sets_1))))"
"(values"
" bindings_2"
" covered-scope-sets_0))))))"
" for-loop_96)"
" null"
"(set)"
"(unsafe-immutable-hash-iterate-first"
" ht_76))))))"
" bindings_1))"
"(let-values()"
" null))))"
"(if(null? bindings_0)"
" context-ht_0"
"(hash-set"
" context-ht_0"
" 'bindings"
" bindings_0)))))))))"
" fold-var_60))))"
"(values fold-var_61)))))"
"(if(not #f)(for-loop_95 fold-var_59 rest_37) fold-var_59)))"
" fold-var_58)))))"
" for-loop_95)"
" null"
" lst_72))))))"
"(let-values(((ht_69)(car hts_0)))(if(null?(cdr hts_0)) ht_69(hash-set ht_69 'fallbacks(cdr hts_0))))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_16)"
"(begin"
"(let-values(((temp1_1)"
"(reverse$1"
"(let-values(((ht_78) scs_16))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_78)))"
"((letrec-values(((for-loop_27)"
"(lambda(fold-var_17 i_87)"
"(begin"
" 'for-loop"
"(if i_87"
"(let-values(((sc_24)(unsafe-immutable-hash-iterate-key ht_78 i_87)))"
"(let-values(((fold-var_18)"
"(let-values(((fold-var_19) fold-var_17))"
"(let-values(((fold-var_20)"
"(let-values()"
"(cons"
"(let-values()"
"(if(representative-scope? sc_24)"
"(vector"
"(scope-id sc_24)"
"(scope-kind sc_24)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_24)))"
"(vector"
"(scope-id sc_24)"
"(scope-kind sc_24))))"
" fold-var_19))))"
"(values fold-var_20)))))"
"(if(not #f)"
"(for-loop_27"
" fold-var_18"
"(unsafe-immutable-hash-iterate-next ht_78 i_87))"
" fold-var_18)))"
" fold-var_17)))))"
" for-loop_27)"
" null"
"(unsafe-immutable-hash-iterate-first ht_78))))))"
"((<2_0) <)"
"((temp3_2)(lambda(v_131)(vector-ref v_131 0))))"
"(sort7.1 #f #f temp3_2 #t temp1_1 <2_0)))))"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_22 ctx_7)"
"(begin"
"(raise-syntax-error$1"
" #f"
"       \"identifier's binding is ambiguous\""
" id_22"
" #f"
" null"
"(syntax-debug-info-string id_22 ctx_7)))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_158 ctx_8)"
"(begin"
"(let-values(((info_3)(syntax-debug-info$1 s_158(expand-context-phase ctx_8) #t)))"
"(if(not"
"(let-values(((or-part_26)(pair?(hash-ref info_3 'bindings null))))"
"(if or-part_26"
" or-part_26"
"(let-values(((lst_6)(hash-ref info_3 'fallbacks null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_6)))"
"((letrec-values(((for-loop_98)"
"(lambda(result_62 lst_80)"
"(begin"
" 'for-loop"
"(if(pair? lst_80)"
"(let-values(((fb-info_0)(unsafe-car lst_80))"
"((rest_38)(unsafe-cdr lst_80)))"
"(let-values(((result_1)"
"(let-values()"
"(let-values(((result_63)"
"(let-values()"
"(let-values()"
"(pair?"
"(hash-ref"
" fb-info_0"
" 'bindings"
" null))))))"
"(values result_63)))))"
"(if(if(not((lambda x_28 result_1) fb-info_0))(not #f) #f)"
"(for-loop_98 result_1 rest_38)"
" result_1)))"
" result_62)))))"
" for-loop_98)"
" #f"
" lst_6))))))"
"          (let-values () \"\")"
"(let-values()"
"(let-values(((relevant-scope-sets_0)"
"((letrec-values(((loop_76)"
"(lambda(info_4 layer_0)"
"(begin"
" 'loop"
"(apply"
" append"
"(cons"
"(hash-ref info_4 'context)"
"(reverse$1"
"(let-values(((lst_81)(hash-ref info_4 'bindings null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_81)))"
"((letrec-values(((for-loop_99)"
"(lambda(fold-var_62 lst_82)"
"(begin"
" 'for-loop"
"(if(pair? lst_82)"
"(let-values(((b_26)(unsafe-car lst_82))"
"((rest_39)"
"(unsafe-cdr lst_82)))"
"(let-values(((fold-var_33)"
"(let-values(((fold-var_34)"
" fold-var_62))"
"(let-values(((fold-var_63)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" b_26"
" 'context))"
" fold-var_34))))"
"(values"
" fold-var_63)))))"
"(if(not #f)"
"(for-loop_99 fold-var_33 rest_39)"
" fold-var_33)))"
" fold-var_62)))))"
" for-loop_99)"
" null"
" lst_81)))))"
"(let-values(((fallbacks_0)(hash-ref info_4 'fallbacks null)))"
"(reverse$1"
"(let-values(((lst_83) fallbacks_0)((start_14)(add1 layer_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_83)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_14)))"
"((letrec-values(((for-loop_100)"
"(lambda(fold-var_64 lst_84 pos_11)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_84) #t #f)"
"(let-values(((fallback_0)"
"(unsafe-car lst_84))"
"((rest_40)"
"(unsafe-cdr lst_84))"
"((layer_1) pos_11))"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_65)"
" fold-var_64))"
"(let-values(((fold-var_66)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_76"
" fallback_0"
" layer_1))"
" fold-var_65))))"
"(values"
" fold-var_66)))))"
"(if(not #f)"
"(for-loop_100"
" fold-var_9"
" rest_40"
"(+ pos_11 1))"
" fold-var_9)))"
" fold-var_64)))))"
" for-loop_100)"
" null"
" lst_83"
" start_14))))))))))"
" loop_76)"
" info_3"
" 0)))"
"(let-values(((common-scopes_0)"
"(if(null? relevant-scope-sets_0)"
"(set)"
"(let-values(((lst_75) relevant-scope-sets_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_75)))"
"((letrec-values(((for-loop_101)"
"(lambda(s_183 lst_85)"
"(begin"
" 'for-loop"
"(if(pair? lst_85)"
"(let-values(((l_48)(unsafe-car lst_85))"
"((rest_41)(unsafe-cdr lst_85)))"
"(let-values(((s_81)"
"(let-values(((s_184) s_183))"
"(let-values(((s_185)"
"(let-values()"
"(set-intersect"
" s_184"
"(list->set l_48)))))"
"(values s_185)))))"
"(if(not #f)(for-loop_101 s_81 rest_41) s_81)))"
" s_183)))))"
" for-loop_101)"
"(list->set(car relevant-scope-sets_0))"
" lst_75))))))"
"(string-append"
"((letrec-values(((loop_77)"
"(lambda(info_5 layer_2)"
"(begin"
" 'loop"
"(string-append"
"                                        \"\\n  context\""
"(layer->string layer_2)"
"                                        \"...:\""
"(describe-context(hash-ref info_5 'context) common-scopes_0)"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_86)"
"(let-values(((temp1_2)(hash-ref info_5 'bindings null))"
"((temp2_2)"
"(lambda(a_37 b_64)"
"(begin"
" 'temp2"
"(if(hash-ref a_37 'match? #f)"
"(not(hash-ref b_64 'match? #f))"
" #f)))))"
"(sort7.1 #f #f #f #f temp1_2 temp2_2))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_86)))"
"((letrec-values(((for-loop_102)"
"(lambda(fold-var_67 lst_87)"
"(begin"
" 'for-loop"
"(if(pair? lst_87)"
"(let-values(((b_23)(unsafe-car lst_87))"
"((rest_42)(unsafe-cdr lst_87)))"
"(let-values(((fold-var_20)"
"(let-values(((fold-var_68)"
" fold-var_67))"
"(let-values(((fold-var_69)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
"                                                                                                            \"\\n  \""
"(if(hash-ref"
" b_23"
" 'match?"
" #f)"
"                                                                                                              \"matching\""
"                                                                                                              \"other\")"
"                                                                                                            \" binding\""
"(layer->string"
" layer_2)"
"                                                                                                            \"...:\""
"                                                                                                            \"\\n   \""
"(if(hash-ref"
" b_23"
" 'local"
" #f)"
"                                                                                                              \"local\""
"(format"
"                                                                                                               \"~a\""
"(hash-ref"
" b_23"
" 'module"
" #f)))"
"(describe-context"
"(hash-ref"
" b_23"
" 'context)"
" common-scopes_0)))"
" fold-var_68))))"
"(values fold-var_69)))))"
"(if(not #f)"
"(for-loop_102 fold-var_20 rest_42)"
" fold-var_20)))"
" fold-var_67)))))"
" for-loop_102)"
" null"
" lst_86)))))"
"(let-values(((fallbacks_1)(hash-ref info_5 'fallbacks null)))"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_88) fallbacks_1)((start_15)(add1 layer_2)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_88)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_15)))"
"((letrec-values(((for-loop_103)"
"(lambda(fold-var_70 lst_89 pos_12)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_89) #t #f)"
"(let-values(((fallback_1)(unsafe-car lst_89))"
"((rest_0)(unsafe-cdr lst_89))"
"((layer_3) pos_12))"
"(let-values(((fold-var_71)"
"(let-values(((fold-var_72)"
" fold-var_70))"
"(let-values(((fold-var_73)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_77"
" fallback_1"
" layer_3))"
" fold-var_72))))"
"(values fold-var_73)))))"
"(if(not #f)"
"(for-loop_103"
" fold-var_71"
" rest_0"
"(+ pos_12 1))"
" fold-var_71)))"
" fold-var_70)))))"
" for-loop_103)"
" null"
" lst_88"
" start_15)))))))))))"
" loop_77)"
" info_3"
" 0)"
"(if(set-empty? common-scopes_0)"
"                   \"\""
"(string-append"
"                    \"\\n  common scopes...:\""
"(describe-context"
"(reverse$1"
"(let-values(((lst_9)(hash-ref info_3 'context)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_9)))"
"((letrec-values(((for-loop_1)"
"(lambda(fold-var_74 lst_10)"
"(begin"
" 'for-loop"
"(if(pair? lst_10)"
"(let-values(((s_186)(unsafe-car lst_10))"
"((rest_1)(unsafe-cdr lst_10)))"
"(let-values(((fold-var_75)"
"(let-values(((fold-var_76) fold-var_74))"
"(if(set-member? common-scopes_0 s_186)"
"(let-values(((fold-var_5) fold-var_76))"
"(let-values(((fold-var_6)"
"(let-values()"
"(cons"
"(let-values() s_186)"
" fold-var_5))))"
"(values fold-var_6)))"
" fold-var_76))))"
"(if(not #f)(for-loop_1 fold-var_75 rest_1) fold-var_75)))"
" fold-var_74)))))"
" for-loop_1)"
" null"
" lst_9))))"
"(set)))))))))))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_19 common-scopes_1)"
"(begin"
"(let-values(((strs_0)"
"((letrec-values(((loop_55)"
"(lambda(strs_1 scopes_20)"
"(begin"
" 'loop"
"(if(null? scopes_20)"
"(let-values()(reverse$1 strs_1))"
"(let-values()"
"                                              (let-values (((str_3) (format \" ~a\" (car scopes_20))))"
"(if(if(pair? strs_1)"
"(<(+(string-length str_3)(string-length(car strs_1))) 72)"
" #f)"
"(loop_55"
"(cons(string-append(car strs_1) str_3)(cdr strs_1))"
"(cdr scopes_20))"
"(loop_55(cons str_3 strs_1)(cdr scopes_20))))))))))"
" loop_55)"
" null"
"(if(set-empty? common-scopes_1)"
" scopes_19"
"(append"
"(reverse$1"
"(let-values(((lst_90) scopes_19))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_90)))"
"((letrec-values(((for-loop_104)"
"(lambda(fold-var_77 lst_91)"
"(begin"
" 'for-loop"
"(if(pair? lst_91)"
"(let-values(((s_187)(unsafe-car lst_91))"
"((rest_43)(unsafe-cdr lst_91)))"
"(let-values(((fold-var_78)"
"(let-values(((fold-var_79) fold-var_77))"
"(if(not(set-member? common-scopes_1 s_187))"
"(let-values(((fold-var_80) fold-var_79))"
"(let-values(((fold-var_81)"
"(let-values()"
"(cons"
"(let-values() s_187)"
" fold-var_80))))"
"(values fold-var_81)))"
" fold-var_79))))"
"(if(not #f)(for-loop_104 fold-var_78 rest_43) fold-var_78)))"
" fold-var_77)))))"
" for-loop_104)"
" null"
" lst_90))))"
"                        (list \"[common scopes]\"))))))"
"(if(null? strs_0)"
"          (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_92) strs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_92)))"
"((letrec-values(((for-loop_105)"
"(lambda(fold-var_82 lst_93)"
"(begin"
" 'for-loop"
"(if(pair? lst_93)"
"(let-values(((str_4)(unsafe-car lst_93))((rest_44)(unsafe-cdr lst_93)))"
"(let-values(((fold-var_83)"
"(let-values(((fold-var_84) fold-var_82))"
"(let-values(((fold-var_14)"
"(let-values()"
"(cons"
"(let-values()"
"                                                                               (string-append \"\\n  \" str_4))"
" fold-var_84))))"
"(values fold-var_14)))))"
"(if(not #f)(for-loop_105 fold-var_83 rest_44) fold-var_83)))"
" fold-var_82)))))"
" for-loop_105)"
" null"
" lst_92)))))))))))"
" (define-values (layer->string) (lambda (layer_4) (begin (if (zero? layer_4) \"\" (format \" at layer ~a\" layer_4)))))"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_0 sym_27 trigger-id_0 ctx_8)"
"(begin"
"(let-values(((phase_41)(expand-context-phase ctx_8)))"
"(let-values(((what_1)"
"(let-values(((tmp_16) sym_27))"
"(if(equal? tmp_16 '#%app)"
"                          (let-values () \"function application\")"
"(if(equal? tmp_16 '#%datum)"
"                            (let-values () \"literal data\")"
"(if(equal? tmp_16 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_8)"
"                                  \"reference to a top-level identifier\""
"                                  \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_0)"
"(if trigger-id_0"
"(not"
"(let-values(((trigger-id1_0) trigger-id_0)((phase2_0) phase_41))"
"(resolve33.1 #f #f #f #f #f #f #f #f trigger-id1_0 phase2_0)))"
" #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_0"
"                \"unbound identifier;\\n also, no ~a transformer is bound~a\""
"                (string-append what_1 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_27"
"(let-values(((tmp_17) phase_41))"
"(if(equal? tmp_17 0)"
"                  (let-values () \"\")"
"(if(equal? tmp_17 1)"
"                    (let-values () \" in the transformer phase\")"
"                    (let-values () (format \" at phase ~a\" phase_41))))))"
"(if unbound?_0 trigger-id_0 #f)"
"(if unbound?_0(if(not(eq?(syntax-e$1 s_0)(syntax-e$1 trigger-id_0))) s_0 #f) #f)"
" null"
"             (if unbound?_0 (syntax-debug-info-string trigger-id_0 ctx_8) \"\"))))))))"
"(define-values(make-check-no-duplicate-table)(lambda()(begin '#hasheq())))"
"(define-values"
"(check-no-duplicate-ids8.1)"
"(lambda(what1_0 what2_0 ids5_0 phase6_0 s7_1 ht3_0 ht4_0)"
"(begin"
" 'check-no-duplicate-ids8"
"(let-values(((ids_2) ids5_0))"
"(let-values(((phase_42) phase6_0))"
"(let-values(((s_145) s7_1))"
"(let-values(((ht_72)(if ht4_0 ht3_0(make-check-no-duplicate-table))))"
"              (let-values (((what_2) (if what2_0 what1_0 \"binding name\")))"
"(let-values()"
"((letrec-values(((loop_78)"
"(lambda(v_132 ht_79)"
"(begin"
" 'loop"
"(if(identifier? v_132)"
"(let-values()"
"(let-values(((l_7)(hash-ref ht_79(syntax-e$1 v_132) null)))"
"(begin"
"(let-values(((lst_73) l_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_73)))"
"((letrec-values(((for-loop_91)"
"(lambda(lst_94)"
"(begin"
" 'for-loop"
"(if(pair? lst_94)"
"(let-values(((id_13)(unsafe-car lst_94))"
"((rest_45)"
"(unsafe-cdr lst_94)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_13"
" v_132"
" phase_42)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                        \"duplicate \""
" what_2)"
" s_145"
" v_132))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_91 rest_45)"
"(values))))"
"(values))))))"
" for-loop_91)"
" lst_73)))"
"(void)"
"(hash-set ht_79(syntax-e$1 v_132)(cons v_132 l_7)))))"
"(if(pair? v_132)"
"(let-values()(loop_78(cdr v_132)(loop_78(car v_132) ht_79)))"
"(let-values() ht_79)))))))"
" loop_78)"
" ids_2"
" ht_72))))))))))"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_0 ctx_7)"
"(begin"
"(let-values(((use-sites_0)(root-expand-context-use-site-scopes ctx_7)))"
"(if(if use-sites_0(pair?(unbox use-sites_0)) #f)"
"(if(syntax?$1 s_0)"
"(remove-scopes s_0(unbox use-sites_0))"
"(reverse$1"
"(let-values(((lst_95) s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_95)))"
"((letrec-values(((for-loop_106)"
"(lambda(fold-var_85 lst_6)"
"(begin"
" 'for-loop"
"(if(pair? lst_6)"
"(let-values(((id_9)(unsafe-car lst_6))((rest_46)(unsafe-cdr lst_6)))"
"(let-values(((fold-var_86)"
"(let-values(((fold-var_87) fold-var_85))"
"(let-values(((fold-var_59)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_9(unbox use-sites_0)))"
" fold-var_87))))"
"(values fold-var_59)))))"
"(if(not #f)(for-loop_106 fold-var_86 rest_46) fold-var_86)))"
" fold-var_85)))))"
" for-loop_106)"
" null"
" lst_95)))))"
" s_0)))))"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compile-context"
" #f"
" 7"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'compile-context)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'namespace)"
"(make-struct-field-accessor -ref_0 1 'phase)"
"(make-struct-field-accessor -ref_0 2 'self)"
"(make-struct-field-accessor -ref_0 3 'module-self)"
"(make-struct-field-accessor -ref_0 4 'full-module-name)"
"(make-struct-field-accessor -ref_0 5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_0 6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_0"
" full-module-name12_0"
" lazy-syntax-literals?7_0"
" lazy-syntax-literals?13_0"
" module-self5_0"
" module-self11_0"
" namespace2_0"
" namespace8_0"
" phase3_0"
" phase9_0"
" self4_1"
" self10_0)"
"(begin"
" 'make-compile-context14"
"(let-values(((namespace_1)(if namespace8_0 namespace2_0(1/current-namespace))))"
"(let-values(((phase_43)(if phase9_0 phase3_0(namespace-phase namespace_1))))"
"(let-values(((self_5)(if self10_0 self4_1(namespace-mpi namespace_1))))"
"(let-values(((module-self_0)(if module-self11_0 module-self5_0 #f)))"
"(let-values(((full-module-name_0)(if full-module-name12_0 full-module-name6_0 #f)))"
"(let-values(((lazy-syntax-literals?_0)"
"(if lazy-syntax-literals?13_0 lazy-syntax-literals?7_0(if module-self_0 #t #f))))"
"(let-values()"
"(begin"
"(if(if module-self_0(not full-module-name_0) #f)"
"                        (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_1"
" phase_43"
" self_5"
" module-self_0"
" full-module-name_0"
" lazy-syntax-literals?_0"
" #f))))))))))))"
"(define-values"
"(struct:mpi-intern-table mpi-intern-table1.1 mpi-intern-table? mpi-intern-table-normal mpi-intern-table-fast)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'mpi-intern-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'mpi-intern-table)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'normal)"
"(make-struct-field-accessor -ref_0 1 'fast))))"
"(define-values"
"(make-module-path-index-intern-table)"
"(lambda()(begin(mpi-intern-table1.1(make-hash)(make-hasheq)))))"
"(define-values"
"(intern-module-path-index!)"
"(lambda(t_41 mpi_19)"
"(begin"
"(let-values(((or-part_160)(hash-ref(mpi-intern-table-fast t_41) mpi_19 #f)))"
"(if or-part_160"
" or-part_160"
"(let-values(((name_2 base_15)(1/module-path-index-split mpi_19)))"
"(if(not name_2)"
"(let-values()(begin(hash-set!(mpi-intern-table-fast t_41) mpi_19 mpi_19) mpi_19))"
"(let-values()"
"(let-values(((interned-base_0)(if base_15(intern-module-path-index! t_41 base_15) #f)))"
"(let-values(((at-name_0)"
"(let-values(((or-part_79)(hash-ref(mpi-intern-table-normal t_41) name_2 #f)))"
"(if or-part_79"
" or-part_79"
"(let-values(((at-name_1)(make-hasheq)))"
"(begin(hash-set!(mpi-intern-table-normal t_41) name_2 at-name_1) at-name_1))))))"
"(let-values(((i-mpi_0)"
"(let-values(((or-part_81)(hash-ref at-name_0 interned-base_0 #f)))"
"(if or-part_81"
" or-part_81"
"(let-values(((mpi_20)"
"(if(eq? base_15 interned-base_0)"
" mpi_19"
"(let-values(((the-struct_49) mpi_19))"
"(if(1/module-path-index? the-struct_49)"
"(let-values(((base3_0) interned-base_0))"
"(module-path-index2.1"
"(module-path-index-path the-struct_49)"
" base3_0"
"(module-path-index-resolved the-struct_49)"
"(module-path-index-shift-cache the-struct_49)))"
"(raise-argument-error"
" 'struct-copy"
"                                                           \"module-path-index?\""
" the-struct_49))))))"
"(begin(hash-set! at-name_0 interned-base_0 mpi_20) mpi_20))))))"
"(begin(hash-set!(mpi-intern-table-fast t_41) mpi_19 i-mpi_0) i-mpi_0))))))))))))"
"(define-values"
"(unsafe-vector-ref-id)"
"(if(eq?(system-type 'vm) 'chez-scheme)(let-values() 'unsafe-vector*-ref)(let-values() 'vector*-ref)))"
"(define-values"
"(struct:module-path-index-table"
" module-path-index-table1.1"
" module-path-index-table?"
" module-path-index-table-positions"
" module-path-index-table-intern)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index-table)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'positions)"
"(make-struct-field-accessor -ref_0 1 'intern))))"
"(define-values"
"(make-module-path-index-table)"
"(lambda()(begin(module-path-index-table1.1(make-hasheq)(make-module-path-index-intern-table)))))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_0 mpi_19)"
"(begin"
"(let-values(((pos_13)(add-module-path-index!/pos mpis_0 mpi_19)))"
"(if pos_13(list unsafe-vector-ref-id mpi-vector-id pos_13) #f)))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_1 mpi_21)"
"(begin"
"(if(not mpi_21)"
"(let-values() #f)"
"(if mpi_21"
"(let-values()"
"(let-values(((mpi_22)(intern-module-path-index!(module-path-index-table-intern mpis_1) mpi_21))"
"((positions_0)(module-path-index-table-positions mpis_1)))"
"(let-values(((or-part_78)(hash-ref positions_0 mpi_22 #f)))"
"(if or-part_78"
" or-part_78"
"(let-values(((pos_14)(hash-count positions_0)))"
"(begin(hash-set! positions_0 mpi_22 pos_14) pos_14))))))"
"(void))))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_2)"
"(begin"
"(let-values(((positions_1)(module-path-index-table-positions mpis_2)))"
"(let-values(((gen-order_0)(make-hasheqv)))"
"(let-values(((rev-positions_0)"
"(let-values(((ht_80) positions_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_80)))"
"((letrec-values(((for-loop_107)"
"(lambda(table_103 i_88)"
"(begin"
" 'for-loop"
"(if i_88"
"(let-values(((k_18 v_133)(hash-iterate-key+value ht_80 i_88)))"
"(let-values(((table_95)"
"(let-values(((table_104) table_103))"
"(let-values(((table_105)"
"(let-values()"
"(let-values(((key_42 val_36)"
"(let-values()"
"(values"
" v_133"
" k_18))))"
"(hash-set"
" table_104"
" key_42"
" val_36)))))"
"(values table_105)))))"
"(if(not #f)"
"(for-loop_107 table_95(hash-iterate-next ht_80 i_88))"
" table_95)))"
" table_103)))))"
" for-loop_107)"
" '#hasheqv()"
"(hash-iterate-first ht_80))))))"
"(let-values((()"
"(begin"
"(let-values(((start_16) 0)((end_10)(hash-count rev-positions_0))((inc_4) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_16 end_10 inc_4)))"
"((letrec-values(((for-loop_21)"
"(lambda(pos_15)"
"(begin"
" 'for-loop"
"(if(< pos_15 end_10)"
"(let-values(((i_89) pos_15))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_23)"
"(hash-ref"
" rev-positions_0"
" i_89)))"
"((letrec-values(((loop_79)"
"(lambda(mpi_24)"
"(begin"
" 'loop"
"(if(hash-ref"
" gen-order_0"
" mpi_24"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_36"
" base_16)"
"(1/module-path-index-split"
" mpi_24)))"
"(begin"
"(if base_16"
"(let-values()"
"(loop_79"
" base_16))"
"(void))"
"(hash-set!"
" gen-order_0"
" mpi_24"
"(hash-count"
" gen-order_0))))))))))"
" loop_79)"
" mpi_23)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_21(+ pos_15 inc_4))(values))))"
"(values))))))"
" for-loop_21)"
" start_16)))"
"(values))))"
"(let-values()"
"(let-values(((rev-gen-order_0)"
"(let-values(((ht_81) gen-order_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_81)))"
"((letrec-values(((for-loop_108)"
"(lambda(table_106 i_90)"
"(begin"
" 'for-loop"
"(if i_90"
"(let-values(((k_19 v_134)"
"(hash-iterate-key+value ht_81 i_90)))"
"(let-values(((table_15)"
"(let-values(((table_55) table_106))"
"(let-values(((table_56)"
"(let-values()"
"(let-values(((key_43"
" val_37)"
"(let-values()"
"(values"
" v_134"
" k_19))))"
"(hash-set"
" table_55"
" key_43"
" val_37)))))"
"(values table_56)))))"
"(if(not #f)"
"(for-loop_108 table_15(hash-iterate-next ht_81 i_90))"
" table_15)))"
" table_106)))))"
" for-loop_108)"
" '#hasheqv()"
"(hash-iterate-first ht_81))))))"
"(let-values(((gens_0)"
"(let-values(((len_11)(hash-count gen-order_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_11)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_11)))"
"(let-values(((v_36)(make-vector len_11 0)))"
"(begin"
"(if(zero? len_11)"
"(void)"
"(let-values()"
"(let-values(((start_17) 0)((end_11)(hash-count gen-order_0))((inc_5) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_17 end_11 inc_5)))"
"((letrec-values(((for-loop_29)"
"(lambda(i_91 pos_16)"
"(begin"
" 'for-loop"
"(if(< pos_16 end_11)"
"(let-values(((i_92) pos_16))"
"(let-values(((i_93)"
"(let-values(((i_26) i_91))"
"(let-values(((i_94)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_36"
" i_26"
"(let-values()"
"(let-values(((mpi_25)"
"(hash-ref"
" rev-gen-order_0"
" i_92)))"
"(let-values(((path_6"
" base_17)"
"(1/module-path-index-split"
" mpi_25)))"
"(if(top-level-module-path-index?"
" mpi_25)"
"(let-values()"
" 'top)"
"(if(not"
" path_6)"
"(let-values()"
"(box"
"(let-values(((or-part_34)"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_25))))"
"(if or-part_34"
" or-part_34"
" 'self))))"
"(if(not"
" base_17)"
"(let-values()"
"(vector"
" path_6))"
"(if base_17"
"(let-values()"
"(vector"
" path_6"
"(hash-ref"
" gen-order_0"
" base_17)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_26)))))"
"(values i_94)))))"
"(if(if(not"
"((lambda x_42"
"(unsafe-fx= i_93 len_11))"
" i_92))"
"(not #f)"
" #f)"
"(for-loop_29 i_93(+ pos_16 inc_5))"
" i_93)))"
" i_91)))))"
" for-loop_29)"
" 0"
" start_17)))))"
" v_36))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_0)"
"(list"
" 'quote"
"(let-values(((vec_25 i_27)"
"(let-values(((start_18) 0)((end_12)(hash-count rev-positions_0))((inc_6) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_18 end_12 inc_6)))"
"((letrec-values(((for-loop_109)"
"(lambda(vec_13 i_95 pos_17)"
"(begin"
" 'for-loop"
"(if(< pos_17 end_12)"
"(let-values(((i_96) pos_17))"
"(let-values(((vec_26 i_97)"
"(let-values(((vec_27) vec_13)"
"((i_98) i_95))"
"(let-values(((vec_28 i_99)"
"(let-values()"
"(let-values(((new-vec_2)"
"(if(eq?"
" i_98"
"(unsafe-vector*-length"
" vec_27))"
"(grow-vector"
" vec_27)"
" vec_27)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_2"
" i_98"
"(let-values()"
"(hash-ref"
" gen-order_0"
"(hash-ref"
" rev-positions_0"
" i_96))))"
"(values"
" new-vec_2"
"(unsafe-fx+"
" i_98"
" 1)))))))"
"(values vec_28 i_99)))))"
"(if(not #f)"
"(for-loop_109 vec_26 i_97(+ pos_17 inc_6))"
"(values vec_26 i_97))))"
"(values vec_13 i_95))))))"
" for-loop_109)"
"(make-vector 16)"
" 0"
" start_18)))))"
"(shrink-vector vec_25 i_27))))))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_0 order-vec_0)"
"(begin"
"(let-values(((gen_0)(make-vector(vector-length gen-vec_0) #f)))"
"(begin"
"(let-values(((vec_29 len_12)"
"(let-values(((vec_30) gen-vec_0))"
"(begin(check-vector vec_30)(values vec_30(unsafe-vector-length vec_30)))))"
"((start_19) 0))"
"(begin"
" #f"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_19)))"
"((letrec-values(((for-loop_110)"
"(lambda(pos_18 pos_19)"
"(begin"
" 'for-loop"
"(if(if(unsafe-fx< pos_18 len_12) #t #f)"
"(let-values(((d_21)(unsafe-vector-ref vec_29 pos_18))((i_100) pos_19))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_0"
" i_100"
"(if(eq? d_21 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_21)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_21)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector*-ref d_21 0)"
"(if(>(vector*-length d_21) 1)"
"(vector*-ref"
" gen_0"
"(vector*-ref d_21 1))"
" #f)))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_110(unsafe-fx+ 1 pos_18)(+ pos_19 1))(values))))"
"(values))))))"
" for-loop_110)"
" 0"
" start_19)))"
"(void)"
"(let-values(((len_13)(vector-length order-vec_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_13)"
"(void)"
"                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_13)))"
"(let-values(((v_135)(make-vector len_13 0)))"
"(begin"
"(if(zero? len_13)"
"(void)"
"(let-values()"
"(let-values(((vec_31 len_14)"
"(let-values(((vec_32) order-vec_0))"
"(begin(check-vector vec_32)(values vec_32(unsafe-vector-length vec_32))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_111)"
"(lambda(i_101 pos_20)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_20 len_14)"
"(let-values(((p_26)(unsafe-vector-ref vec_31 pos_20)))"
"(let-values(((i_102)"
"(let-values(((i_103) i_101))"
"(let-values(((i_23)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_135"
" i_103"
"(let-values()"
"(vector*-ref gen_0 p_26)))"
"(unsafe-fx+ 1 i_103)))))"
"(values i_23)))))"
"(if(if(not((lambda x_43(unsafe-fx= i_102 len_13)) p_26))"
"(not #f)"
" #f)"
"(for-loop_111 i_102(unsafe-fx+ 1 pos_20))"
" i_102)))"
" i_101)))))"
" for-loop_111)"
" 0"
" 0)))))"
" v_135)))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_3)"
"(begin"
"(let-values(((positions_2)(module-path-index-table-positions mpis_3)))"
"(let-values(((vec_33)(make-vector(hash-count positions_2) #f)))"
"(begin"
"(let-values(((ht_82) positions_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_82)))"
"((letrec-values(((for-loop_112)"
"(lambda(i_46)"
"(begin"
" 'for-loop"
"(if i_46"
"(let-values(((mpi_2 pos_21)(hash-iterate-key+value ht_82 i_46)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_33 pos_21 mpi_2))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_112(hash-iterate-next ht_82 i_46))(values))))"
"(values))))))"
" for-loop_112)"
"(hash-iterate-first ht_82))))"
"(void)"
" vec_33))))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_0 mpis_4)"
"(begin"
"(reverse$1"
"(let-values(((lst_96) mus_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_96)))"
"((letrec-values(((for-loop_6)"
"(lambda(fold-var_0 lst_97)"
"(begin"
" 'for-loop"
"(if(pair? lst_97)"
"(let-values(((mu_1)(unsafe-car lst_97))((rest_47)(unsafe-cdr lst_97)))"
"(let-values(((fold-var_2)"
"(let-values(((fold-var_3) fold-var_0))"
"(let-values(((fold-var_88)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_4"
"(module-use-module mu_1))"
"(module-use-phase mu_1)))"
" fold-var_3))))"
"(values fold-var_88)))))"
"(if(not #f)(for-loop_6 fold-var_2 rest_47) fold-var_2)))"
" fold-var_0)))))"
" for-loop_6)"
" null"
" lst_96)))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_38)"
"(begin"
"(let-values(((or-part_139)(null? v_38)))"
"(if or-part_139"
" or-part_139"
"(let-values(((or-part_171)(boolean? v_38)))"
"(if or-part_171"
" or-part_171"
"(let-values(((or-part_172)"
"(if(fixnum? v_38)(if(< v_38(sub1(expt 2 30)))(> v_38(-(expt 2 30))) #f) #f)))"
"(if or-part_172"
" or-part_172"
"(let-values(((or-part_140)(symbol? v_38)))"
"(if or-part_140"
" or-part_140"
"(let-values(((or-part_173)(char? v_38)))"
"(if or-part_173 or-part_173(keyword? v_38))))))))))))))"
"(define-values"
"(serialize-phase-to-link-module-uses)"
"(lambda(phase-to-link-module-uses_0 mpis_5)"
"(begin"
"(let-values(((phases-in-order_0)"
"(let-values(((temp10_1)(hash-keys phase-to-link-module-uses_0))((<11_0) <))"
"(sort7.1 #f #f #f #f temp10_1 <11_0))))"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(reverse$1"
"(let-values(((lst_98) phases-in-order_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_98)))"
"((letrec-values(((for-loop_113)"
"(lambda(fold-var_38 lst_99)"
"(begin"
" 'for-loop"
"(if(pair? lst_99)"
"(let-values(((phase_44)(unsafe-car lst_99))((rest_48)(unsafe-cdr lst_99)))"
"(let-values(((fold-var_89)"
"(let-values(((fold-var_90) fold-var_38))"
"(let-values(((fold-var_91)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_44"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_0"
" phase_44)"
" mpis_5))))"
" fold-var_90))))"
"(values fold-var_91)))))"
"(if(not #f)(for-loop_113 fold-var_89 rest_48) fold-var_89)))"
" fold-var_38)))))"
" for-loop_113)"
" null"
" lst_98))))))))))"
"(define-values"
"(generate-deserialize6.1)"
"(lambda(syntax-support?2_0 syntax-support?3_0 v4_0 mpis5_0)"
"(begin"
" 'generate-deserialize6"
"(let-values(((v_136) v4_0))"
"(let-values(((mpis_6) mpis5_0))"
"(let-values(((syntax-support?_0)(if syntax-support?3_0 syntax-support?2_0 #t)))"
"(let-values()"
"(let-values(((reachable-scopes_6)(find-reachable-scopes v_136)))"
"(let-values(((state_22)(make-serialize-state reachable-scopes_6)))"
"(let-values(((mutables_0)(make-hasheq)))"
"(let-values(((objs_0)(make-hasheq)))"
"(let-values(((shares_0)(make-hasheq)))"
"(let-values(((obj-step_0) 0))"
"(let-values(((frontier_0) null))"
"(letrec-values(((add-frontier!_0)"
"(case-lambda"
"((v_137)(begin 'add-frontier!(set! frontier_0(cons v_137 frontier_0))))"
"((kind_3 v_73)(add-frontier!_0 v_73)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_0)"
"(lambda(v_138)"
"(begin"
" 'frontier-loop"
"(begin"
"((letrec-values(((loop_80)"
"(lambda(v_96)"
"(begin"
" 'loop"
"(if(let-values(((or-part_174)"
"(interned-literal?"
" v_96)))"
"(if or-part_174"
" or-part_174"
"(1/module-path-index?"
" v_96)))"
"(let-values()(void))"
"(if(hash-ref"
" objs_0"
" v_96"
" #f)"
"(let-values()"
"(if(hash-ref"
" mutables_0"
" v_96"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_0"
" v_96"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_96)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_0"
" v_96"
"(hash-count"
" mutables_0))"
"((serialize-fill!-ref"
" v_96)"
" v_96"
" add-frontier!_0"
" state_22)))"
"(if(serialize?"
" v_96)"
"(let-values()"
"((serialize-ref"
" v_96)"
" v_96"
"(case-lambda"
"((sub-v_0)"
"(loop_80"
" sub-v_0))"
"((kind_4"
" sub-v_1)"
"(loop_80"
" sub-v_1)))"
" state_22))"
"(if(pair? v_96)"
"(let-values()"
"(begin"
"(loop_80"
"(car"
" v_96))"
"(loop_80"
"(cdr"
" v_96))))"
"(if(vector?"
" v_96)"
"(let-values()"
"(if(let-values(((or-part_92)"
"(immutable?"
" v_96)))"
"(if or-part_92"
" or-part_92"
"(zero?"
"(vector-length"
" v_96))))"
"(begin"
"(let-values(((vec_34"
" len_15)"
"(let-values(((vec_35)"
" v_96))"
"(begin"
"(check-vector"
" vec_35)"
"(values"
" vec_35"
"(unsafe-vector-length"
" vec_35))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_114)"
"(lambda(pos_22)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_22"
" len_15)"
"(let-values(((e_18)"
"(unsafe-vector-ref"
" vec_34"
" pos_22)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_80"
" e_18))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_114"
"(unsafe-fx+"
" 1"
" pos_22))"
"(values))))"
"(values))))))"
" for-loop_114)"
" 0)))"
"(void))"
"(begin"
"(hash-set!"
" mutables_0"
" v_96"
"(hash-count"
" mutables_0))"
"(begin"
"(let-values(((vec_36"
" len_16)"
"(let-values(((vec_37)"
" v_96))"
"(begin"
"(check-vector"
" vec_37)"
"(values"
" vec_37"
"(unsafe-vector-length"
" vec_37))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_115)"
"(lambda(pos_23)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_23"
" len_16)"
"(let-values(((e_19)"
"(unsafe-vector-ref"
" vec_36"
" pos_23)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_0"
" e_19))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_115"
"(unsafe-fx+"
" 1"
" pos_23))"
"(values))))"
"(values))))))"
" for-loop_115)"
" 0)))"
"(void)))))"
"(if(box?"
" v_96)"
"(let-values()"
"(if(immutable?"
" v_96)"
"(loop_80"
"(unbox"
" v_96))"
"(begin"
"(hash-set!"
" mutables_0"
" v_96"
"(hash-count"
" mutables_0))"
"(add-frontier!_0"
"(unbox"
" v_96)))))"
"(if(hash?"
" v_96)"
"(let-values()"
"(if(immutable?"
" v_96)"
"(begin"
"(let-values(((lst_100)"
"(sorted-hash-keys"
" v_96)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_100)))"
"((letrec-values(((for-loop_116)"
"(lambda(lst_101)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_101)"
"(let-values(((k_20)"
"(unsafe-car"
" lst_101))"
"((rest_49)"
"(unsafe-cdr"
" lst_101)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_80"
" k_20)"
"(loop_80"
"(hash-ref"
" v_96"
" k_20))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_116"
" rest_49)"
"(values))))"
"(values))))))"
" for-loop_116)"
" lst_100)))"
"(void))"
"(begin"
"(hash-set!"
" mutables_0"
" v_96"
"(hash-count"
" mutables_0))"
"(begin"
"(let-values(((lst_102)"
"(sorted-hash-keys"
" v_96)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_102)))"
"((letrec-values(((for-loop_117)"
"(lambda(lst_103)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_103)"
"(let-values(((k_21)"
"(unsafe-car"
" lst_103))"
"((rest_50)"
"(unsafe-cdr"
" lst_103)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_0"
" k_21)"
"(add-frontier!_0"
"(hash-ref"
" v_96"
" k_21))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_117"
" rest_50)"
"(values))))"
"(values))))))"
" for-loop_117)"
" lst_102)))"
"(void)))))"
"(if(prefab-struct-key"
" v_96)"
"(let-values()"
"(begin"
"(let-values(((v*_2"
" start*_1"
" stop*_2"
" step*_1)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                     \"vector\""
"(lambda(x_44)"
"(vector?"
" x_44))"
"(lambda(x_45)"
"(unsafe-vector-length"
" x_45))"
"(struct->vector"
" v_96)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_72)"
"(lambda(idx_1)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" idx_1"
" stop*_2)"
"(let-values(((e_20)"
"(unsafe-vector-ref"
" v*_2"
" idx_1)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_80"
" e_20))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_72"
"(unsafe-fx+"
" idx_1"
" 1))"
"(values))))"
"(values))))))"
" for-loop_72)"
" start*_1)))"
"(void)))"
"(if(srcloc?"
" v_96)"
"(let-values()"
"(begin"
"(let-values(((v*_3"
" start*_2"
" stop*_3"
" step*_2)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                       \"vector\""
"(lambda(x_46)"
"(vector?"
" x_46))"
"(lambda(x_47)"
"(unsafe-vector-length"
" x_47))"
"(struct->vector"
" v_96)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_118)"
"(lambda(idx_2)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" idx_2"
" stop*_3)"
"(let-values(((e_21)"
"(unsafe-vector-ref"
" v*_3"
" idx_2)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_80"
" e_21))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_118"
"(unsafe-fx+"
" idx_2"
" 1))"
"(values))))"
"(values))))))"
" for-loop_118)"
" start*_2)))"
"(void)))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_0"
" v_96"
" obj-step_0)"
"(set! obj-step_0"
"(add1"
" obj-step_0))))))))))"
" loop_80)"
" v_138)"
"(if(null? frontier_0)"
"(void)"
"(let-values()"
"(let-values(((l_49) frontier_0))"
"(begin"
"(set! frontier_0 null)"
"(let-values(((lst_104) l_49))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_104)))"
"((letrec-values(((for-loop_119)"
"(lambda(lst_105)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_105)"
"(let-values(((v_139)"
"(unsafe-car"
" lst_105))"
"((rest_51)"
"(unsafe-cdr"
" lst_105)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_0"
" v_139))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_119"
" rest_51)"
"(values))))"
"(values))))))"
" for-loop_119)"
" lst_104)))"
"(void))))))))))"
" frontier-loop_0)"
" v_136)"
"(values))))"
"(let-values(((num-mutables_0)(hash-count mutables_0)))"
"(let-values(((share-step-positions_0)"
"(let-values(((share-steps_0)"
"(reverse$1"
"(let-values(((ht_83) shares_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_83)))"
"((letrec-values(((for-loop_120)"
"(lambda(fold-var_92 i_104)"
"(begin"
" 'for-loop"
"(if i_104"
"(let-values(((obj_0)"
"(hash-iterate-key"
" ht_83"
" i_104)))"
"(let-values(((fold-var_93)"
"(let-values(((fold-var_94)"
" fold-var_92))"
"(let-values(((fold-var_95)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" objs_0"
" obj_0))"
" fold-var_94))))"
"(values"
" fold-var_95)))))"
"(if(not #f)"
"(for-loop_120"
" fold-var_93"
"(hash-iterate-next"
" ht_83"
" i_104))"
" fold-var_93)))"
" fold-var_92)))))"
" for-loop_120)"
" null"
"(hash-iterate-first ht_83)))))))"
"(let-values(((lst_106)"
"(let-values(((share-steps12_0) share-steps_0)"
"((<13_0) <))"
"(sort7.1 #f #f #f #f share-steps12_0 <13_0)))"
"((start_20) num-mutables_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_106)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_20)))"
"((letrec-values(((for-loop_121)"
"(lambda(table_107 lst_107 pos_24)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_107) #t #f)"
"(let-values(((step_3)"
"(unsafe-car lst_107))"
"((rest_52)"
"(unsafe-cdr lst_107))"
"((pos_25) pos_24))"
"(let-values(((table_108)"
"(let-values(((table_109)"
" table_107))"
"(let-values(((table_110)"
"(let-values()"
"(let-values(((key_44"
" val_38)"
"(let-values()"
"(values"
" step_3"
" pos_25))))"
"(hash-set"
" table_109"
" key_44"
" val_38)))))"
"(values table_110)))))"
"(if(not #f)"
"(for-loop_121"
" table_108"
" rest_52"
"(+ pos_24 1))"
" table_108)))"
" table_107)))))"
" for-loop_121)"
" '#hasheqv()"
" lst_106"
" start_20))))))"
"(let-values(((stream_0) null))"
"(let-values(((stream-size_0) 0))"
"(let-values(((next-push-position_0)"
"(lambda()(begin 'next-push-position stream-size_0))))"
"(let-values(((quoted?_0)"
"(lambda(pos_26)"
"(begin"
" 'quoted?"
"(let-values(((v_140)"
"(list-ref"
" stream_0"
"(- stream-size_0(add1 pos_26)))))"
"(let-values(((or-part_175)(not(keyword? v_140))))"
"(if or-part_175 or-part_175(eq? '#:quote v_140))))))))"
"(let-values(((ser-reset!_0)"
"(lambda(pos_27)"
"(begin"
" 'ser-reset!"
"(begin"
"(set! stream_0"
"(list-tail stream_0(- stream-size_0 pos_27)))"
"(set! stream-size_0 pos_27))))))"
"(let-values(((reap-stream!_0)"
"(lambda()"
"(begin"
" 'reap-stream!"
"(begin0"
"(list->vector(reverse$1 stream_0))"
"(set! stream_0 null)"
"(set! stream-size_0 0))))))"
"(letrec-values(((ser-push!_15)"
"(case-lambda"
"((v_141)"
"(begin"
" 'ser-push!"
"(if(hash-ref shares_0 v_141 #f)"
"(let-values()"
"(let-values(((n_21)"
"(hash-ref"
" share-step-positions_0"
"(hash-ref objs_0 v_141))))"
"(begin"
"(ser-push!_15 'tag '#:ref)"
"(ser-push!_15 'exact n_21))))"
"(let-values(((c1_23)"
"(hash-ref mutables_0 v_141 #f)))"
"(if c1_23"
"((lambda(n_22)"
"(begin"
"(ser-push!_15 'tag '#:ref)"
"(ser-push!_15 'exact n_22)))"
" c1_23)"
"(let-values()"
"(ser-push-encoded!_0 v_141)))))))"
"((kind_5 v_142)"
"(let-values(((tmp_18) kind_5))"
"(if(equal? tmp_18 'exact)"
"(let-values()"
"(begin"
"(set! stream_0(cons v_142 stream_0))"
"(set! stream-size_0(add1 stream-size_0))))"
"(if(equal? tmp_18 'tag)"
"(let-values()(ser-push!_15 'exact v_142))"
"(if(equal? tmp_18 'reference)"
"(let-values()"
"(if(hash-ref shares_0 v_142 #f)"
"(let-values()"
"(let-values(((n_23)"
"(hash-ref"
" share-step-positions_0"
"(hash-ref"
" objs_0"
" v_142))))"
"(ser-push!_15 'exact n_23)))"
"(let-values(((c2_1)"
"(hash-ref"
" mutables_0"
" v_142"
" #f)))"
"(if c2_1"
"((lambda(n_24)"
"(ser-push!_15 'exact n_24))"
" c2_1)"
"(let-values()"
"(ser-push!_15 v_142))))))"
"(let-values()(ser-push!_15 v_142)))))))))"
"((ser-push-encoded!_0)"
"(lambda(v_143)"
"(begin"
" 'ser-push-encoded!"
"(if(keyword? v_143)"
"(let-values()"
"(begin"
"(ser-push!_15 'tag '#:quote)"
"(ser-push!_15 'exact v_143)))"
"(if(1/module-path-index? v_143)"
"(let-values()"
"(begin"
"(ser-push!_15 'tag '#:mpi)"
"(ser-push!_15"
" 'exact"
"(add-module-path-index!/pos"
" mpis_6"
" v_143))))"
"(if(serialize? v_143)"
"(let-values()"
"((serialize-ref v_143)"
" v_143"
" ser-push!_15"
" state_22))"
"(if(if(list? v_143)"
"(if(pair? v_143)"
"(pair?(cdr v_143))"
" #f)"
" #f)"
"(let-values()"
"(let-values(((start-pos_0)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'tag"
" '#:list)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'exact"
"(length v_143))"
"(values))))"
"(let-values(((all-quoted?_0)"
"(let-values(((lst_108)"
" v_143))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_108)))"
"((letrec-values(((for-loop_122)"
"(lambda(all-quoted?_1"
" lst_42)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_42)"
"(let-values(((i_105)"
"(unsafe-car"
" lst_42))"
"((rest_53)"
"(unsafe-cdr"
" lst_42)))"
"(let-values(((all-quoted?_2)"
"(let-values(((all-quoted?_3)"
" all-quoted?_1))"
"(let-values(((all-quoted?_4)"
"(let-values()"
"(let-values(((i-pos_0)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_15"
" i_105)"
"(if all-quoted?_3"
"(quoted?_0"
" i-pos_0)"
" #f))))))"
"(values"
" all-quoted?_4)))))"
"(if(not"
" #f)"
"(for-loop_122"
" all-quoted?_2"
" rest_53)"
" all-quoted?_2)))"
" all-quoted?_1)))))"
" for-loop_122)"
" #t"
" lst_108)))))"
"(if all-quoted?_0"
"(let-values()"
"(begin"
"(ser-reset!_0 start-pos_0)"
"(ser-push-optional-quote!_0)"
"(ser-push!_15"
" 'exact"
" v_143)))"
"(void)))))))"
"(if(pair? v_143)"
"(let-values()"
"(let-values(((start-pos_1)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'tag"
" '#:cons)"
"(values))))"
"(let-values(((a-pos_0)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_15"
"(car v_143))"
"(values))))"
"(let-values(((d-pos_0)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_15(cdr v_143))"
"(if(if(quoted?_0 a-pos_0)"
"(quoted?_0 d-pos_0)"
" #f)"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_1)"
"(ser-push-optional-quote!_0)"
"(ser-push!_15"
" 'exact"
" v_143)))"
"(void)))))))))"
"(if(box? v_143)"
"(let-values()"
"(let-values(((start-pos_2)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'tag"
" '#:box)"
"(values))))"
"(let-values(((v-pos_0)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_15(unbox v_143))"
"(if(quoted?_0 v-pos_0)"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_2)"
"(ser-push-optional-quote!_0)"
"(ser-push!_15"
" 'exact"
" v_143)))"
"(void)))))))"
"(if(vector? v_143)"
"(let-values()"
"(let-values(((start-pos_3)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'tag"
" '#:vector)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'exact"
"(vector-length"
" v_143))"
"(values))))"
"(let-values(((all-quoted?_5)"
"(let-values(((vec_38"
" len_17)"
"(let-values(((vec_39)"
" v_143))"
"(begin"
"(check-vector"
" vec_39)"
"(values"
" vec_39"
"(unsafe-vector-length"
" vec_39))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_123)"
"(lambda(all-quoted?_6"
" pos_28)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_28"
" len_17)"
"(let-values(((i_106)"
"(unsafe-vector-ref"
" vec_38"
" pos_28)))"
"(let-values(((all-quoted?_7)"
"(let-values(((all-quoted?_8)"
" all-quoted?_6))"
"(let-values(((all-quoted?_9)"
"(let-values()"
"(let-values(((i-pos_1)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_15"
" i_106)"
"(if all-quoted?_8"
"(quoted?_0"
" i-pos_1)"
" #f))))))"
"(values"
" all-quoted?_9)))))"
"(if(not"
" #f)"
"(for-loop_123"
" all-quoted?_7"
"(unsafe-fx+"
" 1"
" pos_28))"
" all-quoted?_7)))"
" all-quoted?_6)))))"
" for-loop_123)"
" #t"
" 0)))))"
"(if all-quoted?_5"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_3)"
"(ser-push-optional-quote!_0)"
"(ser-push!_15"
" 'exact"
" v_143)))"
"(void)))))))"
"(if(hash? v_143)"
"(let-values()"
"(let-values(((start-pos_4)"
"(next-push-position_0)))"
"(let-values(((as-set?_0)"
"(let-values(((ht_84)"
" v_143))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-values"
" ht_84)))"
"((letrec-values(((for-loop_124)"
"(lambda(result_64"
" i_107)"
"(begin"
" 'for-loop"
"(if i_107"
"(let-values(((val_39)"
"(hash-iterate-value"
" ht_84"
" i_107)))"
"(let-values(((result_65)"
"(let-values()"
"(let-values(((result_66)"
"(let-values()"
"(let-values()"
"(eq?"
" val_39"
" #t)))))"
"(values"
" result_66)))))"
"(if(if(not"
"((lambda x_48"
"(not"
" result_65))"
" val_39))"
"(not"
" #f)"
" #f)"
"(for-loop_124"
" result_65"
"(hash-iterate-next"
" ht_84"
" i_107))"
" result_65)))"
" result_64)))))"
" for-loop_124)"
" #t"
"(hash-iterate-first"
" ht_84))))))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'tag"
"(if as-set?_0"
"(if(hash-eq?"
" v_143)"
"(let-values()"
" '#:seteq)"
"(if(hash-eqv?"
" v_143)"
"(let-values()"
" '#:seteqv)"
"(let-values()"
" '#:set)))"
"(if(hash-eq?"
" v_143)"
"(let-values()"
" '#:hasheq)"
"(if(hash-eqv?"
" v_143)"
"(let-values()"
" '#:hasheqv)"
"(let-values()"
" '#:hash)))))"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'exact"
"(hash-count"
" v_143))"
"(values))))"
"(let-values(((ks_0)"
"(sorted-hash-keys"
" v_143)))"
"(let-values(((all-quoted?_10)"
"(let-values(((lst_109)"
" ks_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_109)))"
"((letrec-values(((for-loop_125)"
"(lambda(all-quoted?_11"
" lst_110)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_110)"
"(let-values(((k_22)"
"(unsafe-car"
" lst_110))"
"((rest_54)"
"(unsafe-cdr"
" lst_110)))"
"(let-values(((all-quoted?_12)"
"(let-values(((all-quoted?_13)"
" all-quoted?_11))"
"(let-values(((all-quoted?_14)"
"(let-values()"
"(let-values(((k-pos_0)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" k_22)"
"(values))))"
"(let-values(((v-pos_1)"
"(next-push-position_0)))"
"(begin"
"(if as-set?_0"
"(void)"
"(let-values()"
"(ser-push!_15"
"(hash-ref"
" v_143"
" k_22))))"
"(if all-quoted?_13"
"(if(quoted?_0"
" k-pos_0)"
"(let-values(((or-part_176)"
" as-set?_0))"
"(if or-part_176"
" or-part_176"
"(quoted?_0"
" v-pos_1)))"
" #f)"
" #f))))))))"
"(values"
" all-quoted?_14)))))"
"(if(not"
" #f)"
"(for-loop_125"
" all-quoted?_12"
" rest_54)"
" all-quoted?_12)))"
" all-quoted?_11)))))"
" for-loop_125)"
" #t"
" lst_109)))))"
"(if all-quoted?_10"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_4)"
"(ser-push-optional-quote!_0)"
"(ser-push!_15"
" 'exact"
" v_143)))"
"(void)))))))))"
"(let-values(((c3_0)"
"(prefab-struct-key"
" v_143)))"
"(if c3_0"
"((lambda(k_23)"
"(let-values(((vec_40)"
"(struct->vector"
" v_143)))"
"(let-values(((start-pos_5)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'tag"
" '#:prefab)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'exact"
" k_23)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'exact"
"(sub1"
"(vector-length"
" vec_40)))"
"(values))))"
"(let-values(((all-quoted?_15)"
"(let-values(((v*_4"
" start*_3"
" stop*_4"
" step*_3)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                   \"vector\""
"(lambda(x_49)"
"(vector?"
" x_49))"
"(lambda(x_50)"
"(unsafe-vector-length"
" x_50))"
" vec_40"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_126)"
"(lambda(all-quoted?_16"
" idx_3)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" idx_3"
" stop*_4)"
"(let-values(((i_108)"
"(unsafe-vector-ref"
" v*_4"
" idx_3)))"
"(let-values(((all-quoted?_17)"
"(let-values(((all-quoted?_18)"
" all-quoted?_16))"
"(let-values(((all-quoted?_19)"
"(let-values()"
"(let-values(((i-pos_2)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_15"
" i_108)"
"(if all-quoted?_18"
"(quoted?_0"
" i-pos_2)"
" #f))))))"
"(values"
" all-quoted?_19)))))"
"(if(not"
" #f)"
"(for-loop_126"
" all-quoted?_17"
"(unsafe-fx+"
" idx_3"
" 1))"
" all-quoted?_17)))"
" all-quoted?_16)))))"
" for-loop_126)"
" #t"
" start*_3)))))"
"(if all-quoted?_15"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_5)"
"(ser-push-optional-quote!_0)"
"(ser-push!_15"
" 'exact"
" v_143)))"
"(void)))))))))"
" c3_0)"
"(if(srcloc? v_143)"
"(let-values()"
"(begin"
"(ser-push!_15"
" 'tag"
" '#:srcloc)"
"(ser-push!_15"
"(srcloc-source v_143))"
"(ser-push!_15"
"(srcloc-line v_143))"
"(ser-push!_15"
"(srcloc-column v_143))"
"(ser-push!_15"
"(srcloc-position v_143))"
"(ser-push!_15"
"(srcloc-span v_143))))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_0)"
"(ser-push!_15"
" 'exact"
" v_143)))))))))))))))))"
"((ser-push-optional-quote!_0)"
"(lambda()(begin 'ser-push-optional-quote!(void)))))"
"(let-values(((ser-shell!_0)"
"(lambda(v_144)"
"(begin"
" 'ser-shell!"
"(if(serialize-fill!? v_144)"
"(let-values()"
"((serialize-ref v_144)"
" v_144"
" ser-push!_15"
" state_22))"
"(if(box? v_144)"
"(let-values()(ser-push!_15 'tag '#:box))"
"(if(vector? v_144)"
"(let-values()"
"(begin"
"(ser-push!_15 'tag '#:vector)"
"(ser-push!_15"
" 'exact"
"(vector-length v_144))))"
"(if(hash? v_144)"
"(let-values()"
"(ser-push!_15"
" 'tag"
"(if(hash-eq? v_144)"
"(let-values() '#:hasheq)"
"(if(hash-eqv? v_144)"
"(let-values() '#:hasheqv)"
"(let-values() '#:hash)))))"
"(let-values()"
"(error"
" 'ser-shell"
"                                                                               \"unknown mutable: ~e\""
" v_144))))))))))"
"(let-values(((ser-shell-fill!_0)"
"(lambda(v_145)"
"(begin"
" 'ser-shell-fill!"
"(if(serialize-fill!? v_145)"
"(let-values()"
"((serialize-fill!-ref v_145)"
" v_145"
" ser-push!_15"
" state_22))"
"(if(box? v_145)"
"(let-values()"
"(begin"
"(ser-push!_15 'tag '#:set-box!)"
"(ser-push!_15(unbox v_145))))"
"(if(vector? v_145)"
"(let-values()"
"(begin"
"(ser-push!_15 'tag '#:set-vector!)"
"(ser-push!_15"
" 'exact"
"(vector-length v_145))"
"(let-values(((vec_41 len_18)"
"(let-values(((vec_42)"
" v_145))"
"(begin"
"(check-vector vec_42)"
"(values"
" vec_42"
"(unsafe-vector-length"
" vec_42))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_127)"
"(lambda(pos_29)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_29"
" len_18)"
"(let-values(((v_146)"
"(unsafe-vector-ref"
" vec_41"
" pos_29)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push!_15"
" v_146))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_127"
"(unsafe-fx+"
" 1"
" pos_29))"
"(values))))"
"(values))))))"
" for-loop_127)"
" 0)))"
"(void)))"
"(if(hash? v_145)"
"(let-values()"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'tag"
" '#:set-hash!)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_15"
" 'exact"
"(hash-count v_145))"
"(values))))"
"(let-values(((ks_1)"
"(sorted-hash-keys"
" v_145)))"
"(begin"
"(let-values(((lst_111) ks_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_111)))"
"((letrec-values(((for-loop_128)"
"(lambda(lst_112)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_112)"
"(let-values(((k_24)"
"(unsafe-car"
" lst_112))"
"((rest_55)"
"(unsafe-cdr"
" lst_112)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(ser-push!_15"
" k_24)"
"(ser-push!_15"
"(hash-ref"
" v_145"
" k_24))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_128"
" rest_55)"
"(values))))"
"(values))))))"
" for-loop_128)"
" lst_111)))"
"(void))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                                 \"unknown mutable: ~e\""
" v_145))))))))))"
"(let-values(((rev-mutables_0)"
"(let-values(((ht_85) mutables_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_85)))"
"((letrec-values(((for-loop_129)"
"(lambda(table_111 i_109)"
"(begin"
" 'for-loop"
"(if i_109"
"(let-values(((k_25"
" v_147)"
"(hash-iterate-key+value"
" ht_85"
" i_109)))"
"(let-values(((table_112)"
"(let-values(((table_113)"
" table_111))"
"(let-values(((table_114)"
"(let-values()"
"(let-values(((key_45"
" val_40)"
"(let-values()"
"(values"
" v_147"
" k_25))))"
"(hash-set"
" table_113"
" key_45"
" val_40)))))"
"(values"
" table_114)))))"
"(if(not #f)"
"(for-loop_129"
" table_112"
"(hash-iterate-next"
" ht_85"
" i_109))"
" table_112)))"
" table_111)))))"
" for-loop_129)"
" '#hasheqv()"
"(hash-iterate-first ht_85))))))"
"(let-values(((mutable-shell-bindings_0)"
"(begin"
"(begin"
"(let-values(((start_21) 0)"
"((end_13)"
"(hash-count mutables_0))"
"((inc_7) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range start_21 end_13 inc_7)))"
"((letrec-values(((for-loop_130)"
"(lambda(pos_30)"
"(begin"
" 'for-loop"
"(if(<"
" pos_30"
" end_13)"
"(let-values(((i_8)"
" pos_30))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell!_0"
"(hash-ref"
" rev-mutables_0"
" i_8)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_130"
"(+"
" pos_30"
" inc_7))"
"(values))))"
"(values))))))"
" for-loop_130)"
" start_21)))"
"(void))"
"(reap-stream!_0))))"
"(let-values(((rev-shares_0)"
"(let-values(((ht_86) shares_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-keys ht_86)))"
"((letrec-values(((for-loop_131)"
"(lambda(table_115 i_110)"
"(begin"
" 'for-loop"
"(if i_110"
"(let-values(((obj_1)"
"(hash-iterate-key"
" ht_86"
" i_110)))"
"(let-values(((table_116)"
"(let-values(((table_117)"
" table_115))"
"(let-values(((table_118)"
"(let-values()"
"(let-values(((key_46"
" val_41)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_0"
"(hash-ref"
" objs_0"
" obj_1))"
" obj_1))))"
"(hash-set"
" table_117"
" key_46"
" val_41)))))"
"(values"
" table_118)))))"
"(if(not #f)"
"(for-loop_131"
" table_116"
"(hash-iterate-next"
" ht_86"
" i_110))"
" table_116)))"
" table_115)))))"
" for-loop_131)"
" '#hasheqv()"
"(hash-iterate-first ht_86))))))"
"(let-values(((shared-bindings_0)"
"(begin"
"(begin"
"(let-values(((start_22) num-mutables_0)"
"((end_14)"
"(+"
" num-mutables_0"
"(hash-count shares_0)))"
"((inc_8) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range"
" start_22"
" end_14"
" inc_8)))"
"((letrec-values(((for-loop_132)"
"(lambda(pos_31)"
"(begin"
" 'for-loop"
"(if(<"
" pos_31"
" end_14)"
"(let-values(((i_111)"
" pos_31))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push-encoded!_0"
"(hash-ref"
" rev-shares_0"
" i_111)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_132"
"(+"
" pos_31"
" inc_8))"
"(values))))"
"(values))))))"
" for-loop_132)"
" start_22)))"
"(void))"
"(reap-stream!_0))))"
"(let-values(((mutable-fills_0)"
"(begin"
"(begin"
"(let-values(((start_23) 0)"
"((end_15)"
"(hash-count mutables_0))"
"((inc_9) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range"
" start_23"
" end_15"
" inc_9)))"
"((letrec-values(((for-loop_133)"
"(lambda(pos_32)"
"(begin"
" 'for-loop"
"(if(<"
" pos_32"
" end_15)"
"(let-values(((i_112)"
" pos_32))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell-fill!_0"
"(hash-ref"
" rev-mutables_0"
" i_112)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_133"
"(+"
" pos_32"
" inc_9))"
"(values))))"
"(values))))))"
" for-loop_133)"
" start_23)))"
"(void))"
"(reap-stream!_0))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_0 inspector-id #f)"
"(if syntax-support?_0 bulk-binding-registry-id #f)"
"(list 'quote(hash-count mutables_0))"
"(list 'quote mutable-shell-bindings_0)"
"(list 'quote(hash-count shares_0))"
"(list 'quote shared-bindings_0)"
"(list 'quote mutable-fills_0)"
"(list"
" 'quote"
"(begin"
"(ser-push!_15 v_136)"
"(reap-stream!_0))))))))))))))))))))))))))))))))))))"
"(define-values"
"(sorted-hash-keys)"
"(lambda(ht_87)"
"(begin"
"(let-values(((ks_2)(hash-keys ht_87)))"
"(if(null? ks_2)"
"(let-values() ks_2)"
"(if(null?(cdr ks_2))"
"(let-values() ks_2)"
"(if(andmap2 symbol? ks_2)"
"(let-values()"
"(let-values(((ks14_0) ks_2)((symbol<?15_0) symbol<?))(sort7.1 #f #f #f #f ks14_0 symbol<?15_0)))"
"(if(andmap2 scope? ks_2)"
"(let-values()"
"(let-values(((ks16_0) ks_2)((scope<?17_0) scope<?))(sort7.1 #f #f #f #f ks16_0 scope<?17_0)))"
"(if(andmap2 shifted-multi-scope? ks_2)"
"(let-values()"
"(let-values(((ks18_0) ks_2)((shifted-multi-scope<?19_0) shifted-multi-scope<?))"
"(sort7.1 #f #f #f #f ks18_0 shifted-multi-scope<?19_0)))"
"(if(andmap2 real? ks_2)"
"(let-values()(let-values(((ks20_0) ks_2)((<21_0) <))(sort7.1 #f #f #f #f ks20_0 <21_0)))"
"(let-values() ks_2)))))))))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_7"
" inspector_5"
" bulk-binding-registry_5"
" num-mutables_1"
" mutable-vec_0"
" num-shared_0"
" shared-vec_0"
" mutable-fill-vec_0"
" result-vec_0)"
"(begin"
"(let-values(((shared_0)(make-vector(+ num-mutables_1 num-shared_0) 'uninit)))"
"(let-values((()"
"(begin"
"(let-values(((start_24) 0)((end_16) num-mutables_1)((inc_10) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_24 end_16 inc_10)))"
"((letrec-values(((for-loop_134)"
"(lambda(pos_33 pos_34)"
"(begin"
" 'for-loop"
"(if(< pos_34 end_16)"
"(let-values(((i_113) pos_34))"
"(let-values(((pos_35)"
"(let-values(((pos_36) pos_33))"
"(let-values(((pos_37)"
"(let-values()"
"(let-values(((d_22 next-pos_0)"
"(decode-shell"
" mutable-vec_0"
" pos_36"
" mpis_7"
" inspector_5"
" bulk-binding-registry_5"
" shared_0)))"
"(begin"
"(vector-set!"
" shared_0"
" i_113"
" d_22)"
" next-pos_0)))))"
"(values pos_37)))))"
"(if(not #f)(for-loop_134 pos_35(+ pos_34 inc_10)) pos_35)))"
" pos_33)))))"
" for-loop_134)"
" 0"
" start_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_25) num-mutables_1)"
"((end_17)(+ num-mutables_1 num-shared_0))"
"((inc_11) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_25 end_17 inc_11)))"
"((letrec-values(((for-loop_135)"
"(lambda(pos_38 pos_39)"
"(begin"
" 'for-loop"
"(if(< pos_39 end_17)"
"(let-values(((i_114) pos_39))"
"(let-values(((pos_40)"
"(let-values(((pos_41) pos_38))"
"(let-values(((pos_42)"
"(let-values()"
"(let-values(((d_23 next-pos_1)"
"(decode"
" shared-vec_0"
" pos_41"
" mpis_7"
" inspector_5"
" bulk-binding-registry_5"
" shared_0)))"
"(begin"
"(vector-set!"
" shared_0"
" i_114"
" d_23)"
" next-pos_1)))))"
"(values pos_42)))))"
"(if(not #f)(for-loop_135 pos_40(+ pos_39 inc_11)) pos_40)))"
" pos_38)))))"
" for-loop_135)"
" 0"
" start_25)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_26) 0)"
"((end_18) num-mutables_1)"
"((inc_12) 1)"
"((vec_43 len_19)"
"(let-values(((vec_44) shared_0))"
"(begin"
"(check-vector vec_44)"
"(values vec_44(unsafe-vector-length vec_44))))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_26 end_18 inc_12)))"
" #f"
"((letrec-values(((for-loop_136)"
"(lambda(pos_43 pos_44 pos_45)"
"(begin"
" 'for-loop"
"(if(if(< pos_44 end_18)(unsafe-fx< pos_45 len_19) #f)"
"(let-values(((v_148)(unsafe-vector-ref vec_43 pos_45)))"
"(let-values(((pos_46)"
"(let-values(((pos_47) pos_43))"
"(let-values(((pos_48)"
"(let-values()"
"(decode-fill!"
" v_148"
" mutable-fill-vec_0"
" pos_47"
" mpis_7"
" inspector_5"
" bulk-binding-registry_5"
" shared_0))))"
"(values pos_48)))))"
"(if(not #f)"
"(for-loop_136"
" pos_46"
"(+ pos_44 inc_12)"
"(unsafe-fx+ 1 pos_45))"
" pos_46)))"
" pos_43)))))"
" for-loop_136)"
" 0"
" start_26"
" 0)))"
"(values))))"
"(let-values(((result_67 done-pos_0)"
"(decode result-vec_0 0 mpis_7 inspector_5 bulk-binding-registry_5 shared_0)))"
" result_67))))))))"
"(define-values"
"(decode-shell)"
"(lambda(vec_4 pos_49 mpis_8 inspector_6 bulk-binding-registry_6 shared_1)"
"(begin"
"(let-values(((tmp_19)(vector*-ref vec_4 pos_49)))"
"(if(equal? tmp_19 '#:box)"
"(let-values()(values(box #f)(add1 pos_49)))"
"(if(equal? tmp_19 '#:vector)"
"(let-values()(values(make-vector(vector*-ref vec_4(add1 pos_49)))(+ pos_49 2)))"
"(if(equal? tmp_19 '#:hash)"
"(let-values()(values(make-hasheq)(add1 pos_49)))"
"(if(equal? tmp_19 '#:hasheq)"
"(let-values()(values(make-hasheq)(add1 pos_49)))"
"(if(equal? tmp_19 '#:hasheqv)"
"(let-values()(values(make-hasheqv)(add1 pos_49)))"
"(let-values()(decode vec_4 pos_49 mpis_8 inspector_6 bulk-binding-registry_6 shared_1)))))))))))"
"(define-values"
"(decode)"
"(lambda(vec_45 pos_50 mpis_9 inspector_7 bulk-binding-registry_7 shared_2)"
"(begin"
"(let-values()"
"(let-values(((tmp_20)(vector*-ref vec_45 pos_50)))"
"(let-values(((index_0)"
"(if(keyword? tmp_20)"
"(hash-ref"
" '#hasheq((#:scope+kind . 17)"
"(#:seteqv . 14)"
"(#:ref . 1)"
"(#:list . 12)"
"(#:vector . 12)"
"(#:module-binding . 23)"
"(#:set . 14)"
"(#:srcloc . 7)"
"(#:bulk-binding-at . 21)"
"(#:multi-scope . 18)"
"(#:hasheq . 13)"
"(#:simple-module-binding . 24)"
"(#:scope . 16)"
"(#:bulk-binding-registry . 3)"
"(#:hash . 13)"
"(#:shifted-multi-scope . 19)"
"(#:mpi . 9)"
"(#:quote . 8)"
"(#:prefab . 15)"
"(#:box . 10)"
"(#:local-binding . 25)"
"(#:bulk-binding . 26)"
"(#:inspector . 2)"
"(#:table-with-bulk-bindings . 20)"
"(#:seteq . 14)"
"(#:provided . 27)"
"(#:syntax . 4)"
"(#:cons . 11)"
"(#:hasheqv . 13)"
"(#:datum->syntax . 5)"
"(#:syntax+props . 6)"
"(#:representative-scope . 22))"
" tmp_20"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_0 13)"
"(if(unsafe-fx< index_0 6)"
"(if(unsafe-fx< index_0 2)"
"(if(unsafe-fx< index_0 1)"
"(let-values()(values(vector*-ref vec_45 pos_50)(add1 pos_50)))"
"(let-values()(values(vector*-ref shared_2(vector*-ref vec_45(add1 pos_50)))(+ pos_50 2))))"
"(if(unsafe-fx< index_0 3)"
"(let-values()(values inspector_7(add1 pos_50)))"
"(if(unsafe-fx< index_0 4)"
"(let-values()(values bulk-binding-registry_7(add1 pos_50)))"
"(if(unsafe-fx< index_0 5)"
"(let-values()"
"(let-values(((content_7 next-pos_2)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((context_2 next-pos_3)"
"(let-values(((i_115)(vector*-ref vec_45 next-pos_2)))"
"(if(exact-integer? i_115)"
"(values(vector*-ref shared_2 i_115)(add1 next-pos_2))"
"(decode"
" vec_45"
" next-pos_2"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))))"
"(let-values(((srcloc_3 next-pos_4)"
"(let-values(((i_116)(vector*-ref vec_45 next-pos_3)))"
"(if(exact-integer? i_116)"
"(values(vector*-ref shared_2 i_116)(add1 next-pos_3))"
"(decode"
" vec_45"
" next-pos_3"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))))"
"(values"
"(deserialize-syntax content_7 context_2 srcloc_3 #f #f inspector_7)"
" next-pos_4)))))"
"(let-values()"
"(let-values(((content_8 next-pos_5)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((context_3 next-pos_6)"
"(let-values(((i_117)(vector*-ref vec_45 next-pos_5)))"
"(if(exact-integer? i_117)"
"(values(vector*-ref shared_2 i_117)(add1 next-pos_5))"
"(decode"
" vec_45"
" next-pos_5"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))))"
"(let-values(((srcloc_4 next-pos_7)"
"(let-values(((i_118)(vector*-ref vec_45 next-pos_6)))"
"(if(exact-integer? i_118)"
"(values(vector*-ref shared_2 i_118)(add1 next-pos_6))"
"(decode"
" vec_45"
" next-pos_6"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))))"
"(values"
"(deserialize-datum->syntax content_8 context_3 srcloc_4 inspector_7)"
" next-pos_7)))))))))"
"(if(unsafe-fx< index_0 9)"
"(if(unsafe-fx< index_0 7)"
"(let-values()"
"(let-values(((content_9 next-pos_8)"
"(decode vec_45(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_7 shared_2)))"
"(let-values(((context_4 next-pos_9)"
"(let-values(((i_119)(vector*-ref vec_45 next-pos_8)))"
"(if(exact-integer? i_119)"
"(values(vector*-ref shared_2 i_119)(add1 next-pos_8))"
"(decode"
" vec_45"
" next-pos_8"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))))"
"(let-values(((srcloc_5 next-pos_10)"
"(let-values(((i_120)(vector*-ref vec_45 next-pos_9)))"
"(if(exact-integer? i_120)"
"(values(vector*-ref shared_2 i_120)(add1 next-pos_9))"
"(decode"
" vec_45"
" next-pos_9"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))))"
"(let-values(((props_1 next-pos_11)"
"(decode"
" vec_45"
" next-pos_10"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((tamper_2 next-pos_12)"
"(decode"
" vec_45"
" next-pos_11"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(deserialize-syntax content_9 context_4 srcloc_5 props_1 tamper_2 inspector_7)"
" next-pos_12)))))))"
"(if(unsafe-fx< index_0 8)"
"(let-values()"
"(let-values(((source_0 next-pos_13)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((line_0 next-pos_14)"
"(decode"
" vec_45"
" next-pos_13"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((column_0 next-pos_15)"
"(decode"
" vec_45"
" next-pos_14"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((position_0 next-pos_16)"
"(decode"
" vec_45"
" next-pos_15"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((span_0 next-pos_17)"
"(decode"
" vec_45"
" next-pos_16"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values(srcloc source_0 line_0 column_0 position_0 span_0) next-pos_17)))))))"
"(let-values()(values(vector*-ref vec_45(add1 pos_50))(+ pos_50 2)))))"
"(if(unsafe-fx< index_0 10)"
"(let-values()(values(vector*-ref mpis_9(vector*-ref vec_45(add1 pos_50)))(+ pos_50 2)))"
"(if(unsafe-fx< index_0 11)"
"(let-values()"
"(let-values(((v_149 next-pos_18)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values(box-immutable v_149) next-pos_18)))"
"(if(unsafe-fx< index_0 12)"
"(let-values()"
"(let-values(((a_38 next-pos_19)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((d_24 next-pos_20)"
"(decode"
" vec_45"
" next-pos_19"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values(cons a_38 d_24) next-pos_20))))"
"(let-values()"
"(let-values(((len_20)(vector*-ref vec_45(add1 pos_50))))"
"(let-values(((r_29)(make-vector len_20)))"
"(let-values(((next-pos_21)"
"(let-values(((start_27) 0)((end_19) len_20)((inc_13) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_27 end_19 inc_13)))"
"((letrec-values(((for-loop_137)"
"(lambda(pos_51 pos_52)"
"(begin"
" 'for-loop"
"(if(< pos_52 end_19)"
"(let-values(((i_121) pos_52))"
"(let-values(((pos_53)"
"(let-values(((pos_54) pos_51))"
"(let-values(((pos_55)"
"(let-values()"
"(let-values(((v_150"
" next-pos_22)"
"(let-values(((v_151"
" next-pos_23)"
"(decode"
" vec_45"
" pos_54"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
" v_151"
" next-pos_23))))"
"(begin"
"(vector-set!"
" r_29"
" i_121"
" v_150)"
" next-pos_22)))))"
"(values pos_55)))))"
"(if(not #f)"
"(for-loop_137 pos_53(+ pos_52 inc_13))"
" pos_53)))"
" pos_51)))))"
" for-loop_137)"
"(+ pos_50 2)"
" start_27)))))"
"(values"
"(if(eq?(vector*-ref vec_45 pos_50) '#:list)"
"(vector->list r_29)"
"(vector->immutable-vector r_29))"
" next-pos_21))))))))))"
"(if(unsafe-fx< index_0 20)"
"(if(unsafe-fx< index_0 16)"
"(if(unsafe-fx< index_0 14)"
"(let-values()"
"(let-values(((ht_88)"
"(let-values(((tmp_21)(vector*-ref vec_45 pos_50)))"
"(if(equal? tmp_21 '#:hash)"
"(let-values()(hash))"
"(if(equal? tmp_21 '#:hasheq)"
"(let-values()(hasheq))"
"(if(equal? tmp_21 '#:hasheqv)"
"(let-values()(hasheqv))"
"(let-values()(void))))))))"
"(let-values(((len_21)(vector*-ref vec_45(add1 pos_50))))"
"(let-values(((start_28) 0)((end_20) len_21)((inc_14) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_28 end_20 inc_14)))"
"((letrec-values(((for-loop_138)"
"(lambda(ht_89 pos_56 pos_57)"
"(begin"
" 'for-loop"
"(if(< pos_57 end_20)"
"(let-values()"
"(let-values(((ht_90 pos_58)"
"(let-values(((ht_91) ht_89)((pos_59) pos_56))"
"(let-values(((ht_92 pos_60)"
"(let-values()"
"(let-values(((k_26 next-pos_24)"
"(decode"
" vec_45"
" pos_59"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((v_152"
" next-pos_25)"
"(decode"
" vec_45"
" next-pos_24"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(hash-set ht_91 k_26 v_152)"
" next-pos_25))))))"
"(values ht_92 pos_60)))))"
"(if(not #f)"
"(for-loop_138 ht_90 pos_58(+ pos_57 inc_14))"
"(values ht_90 pos_58))))"
"(values ht_89 pos_56))))))"
" for-loop_138)"
" ht_88"
"(+ pos_50 2)"
" start_28))))))"
"(if(unsafe-fx< index_0 15)"
"(let-values()"
"(let-values(((s_137)"
"(let-values(((tmp_22)(vector*-ref vec_45 pos_50)))"
"(if(equal? tmp_22 '#:set)"
"(let-values()(set))"
"(if(equal? tmp_22 '#:seteq)"
"(let-values()(seteq))"
"(if(equal? tmp_22 '#:seteqv)"
"(let-values()(seteqv))"
"(let-values()(void))))))))"
"(let-values(((len_22)(vector*-ref vec_45(add1 pos_50))))"
"(let-values(((start_29) 0)((end_21) len_22)((inc_15) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_29 end_21 inc_15)))"
"((letrec-values(((for-loop_139)"
"(lambda(s_188 pos_61 pos_62)"
"(begin"
" 'for-loop"
"(if(< pos_62 end_21)"
"(let-values()"
"(let-values(((s_139 pos_63)"
"(let-values(((s_189) s_188)((pos_64) pos_61))"
"(let-values(((s_190 pos_65)"
"(let-values()"
"(let-values(((k_27"
" next-pos_26)"
"(decode"
" vec_45"
" pos_64"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(set-add s_189 k_27)"
" next-pos_26)))))"
"(values s_190 pos_65)))))"
"(if(not #f)"
"(for-loop_139 s_139 pos_63(+ pos_62 inc_15))"
"(values s_139 pos_63))))"
"(values s_188 pos_61))))))"
" for-loop_139)"
" s_137"
"(+ pos_50 2)"
" start_29))))))"
"(let-values()"
"(let-values(((key_47 next-pos_27)"
"(let-values(((k_28 next-pos_28)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values k_28 next-pos_28))))"
"(let-values(((len_23)(vector*-ref vec_45 next-pos_27)))"
"(let-values(((r_30 done-pos_1)"
"(let-values(((start_30) 0)((end_22) len_23)((inc_16) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_30 end_22 inc_16)))"
"((letrec-values(((for-loop_140)"
"(lambda(r_31 pos_66 pos_67)"
"(begin"
" 'for-loop"
"(if(< pos_67 end_22)"
"(let-values()"
"(let-values(((r_32 pos_68)"
"(let-values(((r_33) r_31)"
"((pos_69) pos_66))"
"(let-values(((r_34 pos_70)"
"(let-values()"
"(let-values(((v_153"
" next-pos_29)"
"(decode"
" vec_45"
" pos_69"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(cons"
" v_153"
" r_33)"
" next-pos_29)))))"
"(values r_34 pos_70)))))"
"(if(not #f)"
"(for-loop_140 r_32 pos_68(+ pos_67 inc_16))"
"(values r_32 pos_68))))"
"(values r_31 pos_66))))))"
" for-loop_140)"
" null"
"(add1 next-pos_27)"
" start_30)))))"
"(values(apply make-prefab-struct key_47(reverse$1 r_30)) done-pos_1)))))))"
"(if(unsafe-fx< index_0 17)"
"(let-values()(values(deserialize-scope)(add1 pos_50)))"
"(if(unsafe-fx< index_0 18)"
"(let-values()"
"(let-values(((kind_6 next-pos_30)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-scope kind_6) next-pos_30)))"
"(if(unsafe-fx< index_0 19)"
"(let-values()"
"(let-values(((name_37 next-pos_31)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((scopes_21 next-pos_32)"
"(decode"
" vec_45"
" next-pos_31"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-multi-scope name_37 scopes_21) next-pos_32))))"
"(let-values()"
"(let-values(((phase_45 next-pos_33)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((multi-scope_2 next-pos_34)"
"(decode"
" vec_45"
" next-pos_33"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-shifted-multi-scope phase_45 multi-scope_2) next-pos_34))))))))"
"(if(unsafe-fx< index_0 23)"
"(if(unsafe-fx< index_0 21)"
"(let-values()"
"(let-values(((syms_13 next-pos_35)"
"(decode vec_45(add1 pos_50) mpis_9 inspector_7 bulk-binding-registry_7 shared_2)))"
"(let-values(((bulk-bindings_4 next-pos_36)"
"(decode vec_45 next-pos_35 mpis_9 inspector_7 bulk-binding-registry_7 shared_2)))"
"(values(deserialize-table-with-bulk-bindings syms_13 bulk-bindings_4) next-pos_36))))"
"(if(unsafe-fx< index_0 22)"
"(let-values()"
"(let-values(((scopes_22 next-pos_37)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((bulk_5 next-pos_38)"
"(decode"
" vec_45"
" next-pos_37"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-bulk-binding-at scopes_22 bulk_5) next-pos_38))))"
"(let-values()"
"(let-values(((kind_7 next-pos_39)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((phase_46 next-pos_40)"
"(decode"
" vec_45"
" next-pos_39"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-representative-scope kind_7 phase_46) next-pos_40))))))"
"(if(unsafe-fx< index_0 25)"
"(if(unsafe-fx< index_0 24)"
"(let-values()"
"(let-values(((module_4 next-pos_41)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((sym_28 next-pos_42)"
"(decode"
" vec_45"
" next-pos_41"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((phase_47 next-pos_43)"
"(decode"
" vec_45"
" next-pos_42"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((nominal-module_4 next-pos_44)"
"(decode"
" vec_45"
" next-pos_43"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((nominal-phase_3 next-pos_45)"
"(decode"
" vec_45"
" next-pos_44"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((nominal-sym_3 next-pos_46)"
"(decode"
" vec_45"
" next-pos_45"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((nominal-require-phase_3 next-pos_47)"
"(decode"
" vec_45"
" next-pos_46"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((free=id_8 next-pos_48)"
"(decode"
" vec_45"
" next-pos_47"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((extra-inspector_3 next-pos_49)"
"(decode"
" vec_45"
" next-pos_48"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((extra-nominal-bindings_3 next-pos_50)"
"(decode"
" vec_45"
" next-pos_49"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(deserialize-full-module-binding"
" module_4"
" sym_28"
" phase_47"
" nominal-module_4"
" nominal-phase_3"
" nominal-sym_3"
" nominal-require-phase_3"
" free=id_8"
" extra-inspector_3"
" extra-nominal-bindings_3)"
" next-pos_50))))))))))))"
"(let-values()"
"(let-values(((module_5 next-pos_51)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((sym_29 next-pos_52)"
"(decode"
" vec_45"
" next-pos_51"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((phase_48 next-pos_53)"
"(decode"
" vec_45"
" next-pos_52"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((nominal-module_5 next-pos_54)"
"(decode"
" vec_45"
" next-pos_53"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(deserialize-simple-module-binding module_5 sym_29 phase_48 nominal-module_5)"
" next-pos_54)))))))"
"(if(unsafe-fx< index_0 26)"
"(let-values()"
"(let-values(((key_48 next-pos_55)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((free=id_9 next-pos_56)"
"(decode"
" vec_45"
" next-pos_55"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-full-local-binding key_48 free=id_9) next-pos_56))))"
"(if(unsafe-fx< index_0 27)"
"(let-values()"
"(let-values(((prefix_3 next-pos_57)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((excepts_3 next-pos_58)"
"(decode"
" vec_45"
" next-pos_57"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((mpi_26 next-pos_59)"
"(decode"
" vec_45"
" next-pos_58"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((provide-phase-level_2 next-pos_60)"
"(decode"
" vec_45"
" next-pos_59"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((phase-shift_3 next-pos_61)"
"(decode"
" vec_45"
" next-pos_60"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((bulk-binding-registry_8 next-pos_62)"
"(decode"
" vec_45"
" next-pos_61"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(deserialize-bulk-binding"
" prefix_3"
" excepts_3"
" mpi_26"
" provide-phase-level_2"
" phase-shift_3"
" bulk-binding-registry_8)"
" next-pos_62))))))))"
"(let-values()"
"(let-values(((binding_11 next-pos_63)"
"(decode"
" vec_45"
"(add1 pos_50)"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((protected?_1 next-pos_64)"
"(decode"
" vec_45"
" next-pos_63"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((syntax?_3 next-pos_65)"
"(decode"
" vec_45"
" next-pos_64"
" mpis_9"
" inspector_7"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(deserialize-provided binding_11 protected?_1 syntax?_3)"
" next-pos_65)))))))))))))))))"
"(define-values"
"(decode-fill!)"
"(lambda(v_154 vec_46 pos_71 mpis_10 inspector_8 bulk-binding-registry_9 shared_3)"
"(begin"
"(let-values(((tmp_23)(vector*-ref vec_46 pos_71)))"
"(if(equal? tmp_23 #f)"
"(let-values()(add1 pos_71))"
"(if(equal? tmp_23 '#:set-box!)"
"(let-values()"
"(let-values(((c_21 next-pos_66)"
"(decode vec_46(add1 pos_71) mpis_10 inspector_8 bulk-binding-registry_9 shared_3)))"
"(begin(set-box! v_154 c_21) next-pos_66)))"
"(if(equal? tmp_23 '#:set-vector!)"
"(let-values()"
"(let-values(((len_24)(vector*-ref vec_46(add1 pos_71))))"
"(let-values(((start_31) 0)((end_23) len_24)((inc_17) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_31 end_23 inc_17)))"
"((letrec-values(((for-loop_141)"
"(lambda(pos_72 pos_73)"
"(begin"
" 'for-loop"
"(if(< pos_73 end_23)"
"(let-values(((i_122) pos_73))"
"(let-values(((pos_74)"
"(let-values(((pos_75) pos_72))"
"(let-values(((pos_76)"
"(let-values()"
"(let-values(((c_22 next-pos_67)"
"(decode"
" vec_46"
" pos_75"
" mpis_10"
" inspector_8"
" bulk-binding-registry_9"
" shared_3)))"
"(begin"
"(vector-set! v_154 i_122 c_22)"
" next-pos_67)))))"
"(values pos_76)))))"
"(if(not #f)(for-loop_141 pos_74(+ pos_73 inc_17)) pos_74)))"
" pos_72)))))"
" for-loop_141)"
"(+ pos_71 2)"
" start_31)))))"
"(if(equal? tmp_23 '#:set-hash!)"
"(let-values()"
"(let-values(((len_25)(vector*-ref vec_46(add1 pos_71))))"
"(let-values(((start_32) 0)((end_24) len_25)((inc_18) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_32 end_24 inc_18)))"
"((letrec-values(((for-loop_142)"
"(lambda(pos_77 pos_78)"
"(begin"
" 'for-loop"
"(if(< pos_78 end_24)"
"(let-values()"
"(let-values(((pos_79)"
"(let-values(((pos_80) pos_77))"
"(let-values(((pos_81)"
"(let-values()"
"(let-values(((key_49 next-pos_68)"
"(decode"
" vec_46"
" pos_80"
" mpis_10"
" inspector_8"
" bulk-binding-registry_9"
" shared_3)))"
"(let-values(((val_42 done-pos_2)"
"(decode"
" vec_46"
" next-pos_68"
" mpis_10"
" inspector_8"
" bulk-binding-registry_9"
" shared_3)))"
"(begin"
"(hash-set! v_154 key_49 val_42)"
" done-pos_2))))))"
"(values pos_81)))))"
"(if(not #f)(for-loop_142 pos_79(+ pos_78 inc_18)) pos_79)))"
" pos_77)))))"
" for-loop_142)"
"(+ pos_71 2)"
" start_32)))))"
"(if(equal? tmp_23 '#:scope-fill!)"
"(let-values()"
"(let-values(((c_23 next-pos_69)"
"(decode vec_46(add1 pos_71) mpis_10 inspector_8 bulk-binding-registry_9 shared_3)))"
"(begin(deserialize-scope-fill! v_154 c_23) next-pos_69)))"
"(if(equal? tmp_23 '#:representative-scope-fill!)"
"(let-values()"
"(let-values(((a_39 next-pos_70)"
"(decode vec_46(add1 pos_71) mpis_10 inspector_8 bulk-binding-registry_9 shared_3)))"
"(let-values(((d_25 done-pos_3)"
"(decode vec_46 next-pos_70 mpis_10 inspector_8 bulk-binding-registry_9 shared_3)))"
"(begin(deserialize-representative-scope-fill! v_154 a_39 d_25) done-pos_3))))"
"                    (let-values () (error 'deserialize \"bad fill encoding: ~v\" (vector*-ref vec_46 pos_71)))))))))))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_155)"
"(begin"
"(let-values(((seen_23)(make-hasheq)))"
"(let-values(((reachable-scopes_7)(seteq)))"
"(let-values(((scope-triggers_0)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_81)"
"(lambda(v_156)"
"(begin"
" 'loop"
"(if(interned-literal? v_156)"
"(let-values()(void))"
"(if(hash-ref seen_23 v_156 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_23 v_156 #t)"
"(if(scope-with-bindings? v_156)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! reachable-scopes_7"
"(set-add reachable-scopes_7 v_156))"
"(values))))"
"(let-values((()"
"(begin"
"((reach-scopes-ref v_156) v_156 loop_81)"
"(values))))"
"(let-values(((l_50)(hash-ref scope-triggers_0 v_156 null)))"
"(begin"
"(let-values(((lst_113) l_50))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_113)))"
"((letrec-values(((for-loop_143)"
"(lambda(lst_114)"
"(begin"
" 'for-loop"
"(if(pair? lst_114)"
"(let-values(((v_157)"
"(unsafe-car lst_114))"
"((rest_56)"
"(unsafe-cdr lst_114)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_81"
" v_157))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_143 rest_56)"
"(values))))"
"(values))))))"
" for-loop_143)"
" lst_113)))"
"(void)"
"((scope-with-bindings-ref v_156)"
" v_156"
" reachable-scopes_7"
" loop_81"
"(lambda(sc-unreachable_0 b_65)"
"(hash-update!"
" scope-triggers_0"
" sc-unreachable_0"
"(lambda(l_51)(cons b_65 l_51))"
" null))))))))"
"(if(reach-scopes? v_156)"
"(let-values()((reach-scopes-ref v_156) v_156 loop_81))"
"(if(pair? v_156)"
"(let-values()(begin(loop_81(car v_156))(loop_81(cdr v_156))))"
"(if(vector? v_156)"
"(let-values()"
"(begin"
"(let-values(((vec_47 len_26)"
"(let-values(((vec_48) v_156))"
"(begin"
"(check-vector vec_48)"
"(values"
" vec_48"
"(unsafe-vector-length vec_48))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_144)"
"(lambda(pos_82)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_82 len_26)"
"(let-values(((e_22)"
"(unsafe-vector-ref"
" vec_47"
" pos_82)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_81"
" e_22))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_144"
"(unsafe-fx+ 1 pos_82))"
"(values))))"
"(values))))))"
" for-loop_144)"
" 0)))"
"(void)))"
"(if(box? v_156)"
"(let-values()(loop_81(unbox v_156)))"
"(if(hash? v_156)"
"(let-values()"
"(begin"
"(let-values(((ht_93) v_156))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_93)))"
"((letrec-values(((for-loop_145)"
"(lambda(i_123)"
"(begin"
" 'for-loop"
"(if i_123"
"(let-values(((k_29 v_158)"
"(hash-iterate-key+value"
" ht_93"
" i_123)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_81"
" k_29)"
"(loop_81"
" v_158)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_145"
"(hash-iterate-next"
" ht_93"
" i_123))"
"(values))))"
"(values))))))"
" for-loop_145)"
"(hash-iterate-first ht_93))))"
"(void)))"
"(if(prefab-struct-key v_156)"
"(let-values()"
"(begin"
"(let-values(((v*_5 start*_4 stop*_5 step*_4)"
"(normalise-inputs"
" 'in-vector"
"                                                                             \"vector\""
"(lambda(x_51)(vector? x_51))"
"(lambda(x_52)(unsafe-vector-length x_52))"
"(struct->vector v_156)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_146)"
"(lambda(idx_4)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< idx_4 stop*_5)"
"(let-values(((e_23)"
"(unsafe-vector-ref"
" v*_5"
" idx_4)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_81"
" e_23))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_146"
"(unsafe-fx+ idx_4 1))"
"(values))))"
"(values))))))"
" for-loop_146)"
" start*_4)))"
"(void)))"
"(if(srcloc? v_156)"
"(let-values()(loop_81(srcloc-source v_156)))"
"(let-values()(void))))))))))))))))))"
" loop_81)"
" v_155)"
" reachable-scopes_7)))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(syntax-module-path-index-shift/no-keywords)"
"(let-values(((syntax-module-path-index-shift_0)"
"(let-values(((core27_0)"
"(lambda(s24_0 from-mpi25_0 to-mpi26_0 inspector22_0 inspector23_0)"
"(begin"
" 'core27"
"(let-values(((s_191) s24_0))"
"(let-values(((from-mpi_4) from-mpi25_0))"
"(let-values(((to-mpi_3) to-mpi26_0))"
"(let-values(((inspector_9)(if inspector23_0 inspector22_0 #f)))"
"(let-values()"
"(let-values(((s29_0) s_191)"
"((from-mpi30_0) from-mpi_4)"
"((to-mpi31_0) to-mpi_3)"
"((inspector32_0) inspector_9))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s29_0"
" from-mpi30_0"
" to-mpi31_0"
" inspector32_0"
" #t)))))))))))"
"(case-lambda"
"((s_192 from-mpi_5 to-mpi_4)"
"(begin 'syntax-module-path-index-shift(core27_0 s_192 from-mpi_5 to-mpi_4 #f #f)))"
"((s_193 from-mpi_6 to-mpi_5 inspector22_1)(core27_0 s_193 from-mpi_6 to-mpi_5 inspector22_1 #t))))))"
" syntax-module-path-index-shift_0))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'constant"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift/no-keywords"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(define-values"
"(struct:parsed parsed1.1 parsed? parsed-s)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'parsed #f 1 0 #f(list(cons prop:authentic #t)) #f #f '(0) #f 'parsed)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 's))))"
"(define-values"
"(struct:parsed-id parsed-id2.1 parsed-id? parsed-id-binding parsed-id-inspector)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-id"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-id)))))"
"(values"
" struct:_1"
" make-_1"
" ?_1"
"(make-struct-field-accessor -ref_1 0 'binding)"
"(make-struct-field-accessor -ref_1 1 'inspector))))"
"(define-values"
"(struct:parsed-primitive-id parsed-primitive-id3.1 parsed-primitive-id?)"
"(let-values(((struct:_41 make-_41 ?_41 -ref_41 -set!_41)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-primitive-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-primitive-id)))))"
"(values struct:_41 make-_41 ?_41)))"
"(define-values"
"(struct:parsed-top-id parsed-top-id4.1 parsed-top-id?)"
"(let-values(((struct:_10 make-_10 ?_10 -ref_10 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-top-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-top-id)))))"
"(values struct:_10 make-_10 ?_10)))"
"(define-values"
"(struct:parsed-lambda parsed-lambda5.1 parsed-lambda? parsed-lambda-keys parsed-lambda-body)"
"(let-values(((struct:_40 make-_40 ?_40 -ref_40 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-lambda"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-lambda)))))"
"(values"
" struct:_40"
" make-_40"
" ?_40"
"(make-struct-field-accessor -ref_40 0 'keys)"
"(make-struct-field-accessor -ref_40 1 'body))))"
"(define-values"
"(struct:parsed-case-lambda parsed-case-lambda6.1 parsed-case-lambda? parsed-case-lambda-clauses)"
"(let-values(((struct:_42 make-_42 ?_42 -ref_42 -set!_42)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-case-lambda"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-case-lambda)))))"
"(values struct:_42 make-_42 ?_42(make-struct-field-accessor -ref_42 0 'clauses))))"
"(define-values"
"(struct:parsed-app parsed-app7.1 parsed-app? parsed-app-rator parsed-app-rands)"
"(let-values(((struct:_43 make-_43 ?_43 -ref_43 -set!_43)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-app"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-app)))))"
"(values"
" struct:_43"
" make-_43"
" ?_43"
"(make-struct-field-accessor -ref_43 0 'rator)"
"(make-struct-field-accessor -ref_43 1 'rands))))"
"(define-values"
"(struct:parsed-if parsed-if8.1 parsed-if? parsed-if-tst parsed-if-thn parsed-if-els)"
"(let-values(((struct:_4 make-_4 ?_4 -ref_4 -set!_4)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-if"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-if)))))"
"(values"
" struct:_4"
" make-_4"
" ?_4"
"(make-struct-field-accessor -ref_4 0 'tst)"
"(make-struct-field-accessor -ref_4 1 'thn)"
"(make-struct-field-accessor -ref_4 2 'els))))"
"(define-values"
"(struct:parsed-set! parsed-set!9.1 parsed-set!? parsed-set!-id parsed-set!-rhs)"
"(let-values(((struct:_44 make-_44 ?_44 -ref_44 -set!_44)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-set!"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-set!)))))"
"(values"
" struct:_44"
" make-_44"
" ?_44"
"(make-struct-field-accessor -ref_44 0 'id)"
"(make-struct-field-accessor -ref_44 1 'rhs))))"
"(define-values"
"(struct:parsed-with-continuation-mark"
" parsed-with-continuation-mark10.1"
" parsed-with-continuation-mark?"
" parsed-with-continuation-mark-key"
" parsed-with-continuation-mark-val"
" parsed-with-continuation-mark-body)"
"(let-values(((struct:_45 make-_45 ?_45 -ref_45 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-with-continuation-mark"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-with-continuation-mark)))))"
"(values"
" struct:_45"
" make-_45"
" ?_45"
"(make-struct-field-accessor -ref_45 0 'key)"
"(make-struct-field-accessor -ref_45 1 'val)"
"(make-struct-field-accessor -ref_45 2 'body))))"
"(define-values"
"(struct:parsed-#%variable-reference"
" parsed-#%variable-reference11.1"
" parsed-#%variable-reference?"
" parsed-#%variable-reference-id)"
"(let-values(((struct:_46 make-_46 ?_46 -ref_46 -set!_46)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%variable-reference"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%variable-reference)))))"
"(values struct:_46 make-_46 ?_46(make-struct-field-accessor -ref_46 0 'id))))"
"(define-values"
"(struct:parsed-begin parsed-begin12.1 parsed-begin? parsed-begin-body)"
"(let-values(((struct:_47 make-_47 ?_47 -ref_47 -set!_47)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin)))))"
"(values struct:_47 make-_47 ?_47(make-struct-field-accessor -ref_47 0 'body))))"
"(define-values"
"(struct:parsed-begin0 parsed-begin013.1 parsed-begin0? parsed-begin0-body)"
"(let-values(((struct:_48 make-_48 ?_48 -ref_48 -set!_48)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin0"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin0)))))"
"(values struct:_48 make-_48 ?_48(make-struct-field-accessor -ref_48 0 'body))))"
"(define-values"
"(struct:parsed-quote parsed-quote14.1 parsed-quote? parsed-quote-datum)"
"(let-values(((struct:_49 make-_49 ?_49 -ref_49 -set!_49)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote)))))"
"(values struct:_49 make-_49 ?_49(make-struct-field-accessor -ref_49 0 'datum))))"
"(define-values"
"(struct:parsed-quote-syntax parsed-quote-syntax15.1 parsed-quote-syntax? parsed-quote-syntax-datum)"
"(let-values(((struct:_50 make-_50 ?_50 -ref_50 -set!_50)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote-syntax)))))"
"(values struct:_50 make-_50 ?_50(make-struct-field-accessor -ref_50 0 'datum))))"
"(define-values"
"(struct:parsed-let_-values"
" parsed-let_-values16.1"
" parsed-let_-values?"
" parsed-let_-values-idss"
" parsed-let_-values-clauses"
" parsed-let_-values-body)"
"(let-values(((struct:_51 make-_51 ?_51 -ref_51 -set!_51)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let_-values"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-let_-values)))))"
"(values"
" struct:_51"
" make-_51"
" ?_51"
"(make-struct-field-accessor -ref_51 0 'idss)"
"(make-struct-field-accessor -ref_51 1 'clauses)"
"(make-struct-field-accessor -ref_51 2 'body))))"
"(define-values"
"(struct:parsed-let-values parsed-let-values17.1 parsed-let-values?)"
"(let-values(((struct:_52 make-_52 ?_52 -ref_52 -set!_52)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-let-values)))))"
"(values struct:_52 make-_52 ?_52)))"
"(define-values"
"(struct:parsed-letrec-values parsed-letrec-values18.1 parsed-letrec-values?)"
"(let-values(((struct:_53 make-_53 ?_53 -ref_53 -set!_53)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-letrec-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-letrec-values)))))"
"(values struct:_53 make-_53 ?_53)))"
"(define-values"
"(struct:parsed-define-values"
" parsed-define-values19.1"
" parsed-define-values?"
" parsed-define-values-ids"
" parsed-define-values-syms"
" parsed-define-values-rhs)"
"(let-values(((struct:_54 make-_54 ?_54 -ref_54 -set!_54)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-values"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-values)))))"
"(values"
" struct:_54"
" make-_54"
" ?_54"
"(make-struct-field-accessor -ref_54 0 'ids)"
"(make-struct-field-accessor -ref_54 1 'syms)"
"(make-struct-field-accessor -ref_54 2 'rhs))))"
"(define-values"
"(struct:parsed-define-syntaxes"
" parsed-define-syntaxes20.1"
" parsed-define-syntaxes?"
" parsed-define-syntaxes-ids"
" parsed-define-syntaxes-syms"
" parsed-define-syntaxes-rhs)"
"(let-values(((struct:_55 make-_55 ?_55 -ref_55 -set!_55)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-syntaxes"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-syntaxes)))))"
"(values"
" struct:_55"
" make-_55"
" ?_55"
"(make-struct-field-accessor -ref_55 0 'ids)"
"(make-struct-field-accessor -ref_55 1 'syms)"
"(make-struct-field-accessor -ref_55 2 'rhs))))"
"(define-values"
"(struct:parsed-begin-for-syntax parsed-begin-for-syntax21.1 parsed-begin-for-syntax? parsed-begin-for-syntax-body)"
"(let-values(((struct:_56 make-_56 ?_56 -ref_56 -set!_56)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin-for-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin-for-syntax)))))"
"(values struct:_56 make-_56 ?_56(make-struct-field-accessor -ref_56 0 'body))))"
"(define-values"
"(struct:parsed-#%declare parsed-#%declare22.1 parsed-#%declare?)"
"(let-values(((struct:_57 make-_57 ?_57 -ref_57 -set!_57)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%declare"
" struct:parsed"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-#%declare)))))"
"(values struct:_57 make-_57 ?_57)))"
"(define-values"
"(struct:parsed-require parsed-require23.1 parsed-require?)"
"(let-values(((struct:_58 make-_58 ?_58 -ref_58 -set!_58)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-require"
" struct:parsed"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-require)))))"
"(values struct:_58 make-_58 ?_58)))"
"(define-values"
"(struct:parsed-#%module-begin parsed-#%module-begin24.1 parsed-#%module-begin? parsed-#%module-begin-body)"
"(let-values(((struct:_59 make-_59 ?_59 -ref_59 -set!_59)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%module-begin"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%module-begin)))))"
"(values struct:_59 make-_59 ?_59(make-struct-field-accessor -ref_59 0 'body))))"
"(define-values"
"(struct:parsed-module"
" parsed-module25.1"
" parsed-module?"
" parsed-module-star?"
" parsed-module-name-id"
" parsed-module-self"
" parsed-module-requires"
" parsed-module-provides"
" parsed-module-root-ctx-simple?"
" parsed-module-encoded-root-ctx"
" parsed-module-body"
" parsed-module-compiled-module"
" parsed-module-compiled-submodules)"
"(let-values(((struct:_60 make-_60 ?_60 -ref_60 -set!_60)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-module"
" struct:parsed"
" 10"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'parsed-module)))))"
"(values"
" struct:_60"
" make-_60"
" ?_60"
"(make-struct-field-accessor -ref_60 0 'star?)"
"(make-struct-field-accessor -ref_60 1 'name-id)"
"(make-struct-field-accessor -ref_60 2 'self)"
"(make-struct-field-accessor -ref_60 3 'requires)"
"(make-struct-field-accessor -ref_60 4 'provides)"
"(make-struct-field-accessor -ref_60 5 'root-ctx-simple?)"
"(make-struct-field-accessor -ref_60 6 'encoded-root-ctx)"
"(make-struct-field-accessor -ref_60 7 'body)"
"(make-struct-field-accessor -ref_60 8 'compiled-module)"
"(make-struct-field-accessor -ref_60 9 'compiled-submodules))))"
"(define-values"
"(module-path->mpi5.1)"
"(lambda(declared-submodule-names1_0 declared-submodule-names2_0 mod-path3_0 self4_2)"
"(begin"
" 'module-path->mpi5"
"(let-values(((mod-path_4) mod-path3_0))"
"(let-values(((self_6) self4_2))"
"(let-values(((declared-submodule-names_1)"
"(if declared-submodule-names2_0 declared-submodule-names1_0 '#hasheq())))"
"(let-values()"
"(if(if(list? mod-path_4)"
"(if(= 2(length mod-path_4))"
"(if(eq? 'quote(car mod-path_4))"
"(if(symbol?(cadr mod-path_4))(hash-ref declared-submodule-names_1(cadr mod-path_4) #f) #f)"
" #f)"
" #f)"
" #f)"
"                (let-values () (1/module-path-index-join (list 'submod \".\" (cadr mod-path_4)) self_6))"
"(if(if(list? mod-path_4)"
"(if(eq? 'submod(car mod-path_4))"
"(let-values(((mod-path_5)(cadr mod-path_4)))"
"(if(list? mod-path_5)"
"(if(= 2(length mod-path_5))"
"(if(eq? 'quote(car mod-path_5))"
"(if(symbol?(cadr mod-path_5))"
"(hash-ref declared-submodule-names_1(cadr mod-path_5) #f)"
" #f)"
" #f)"
" #f)"
" #f))"
" #f)"
" #f)"
"(let-values()"
"                    (1/module-path-index-join (list* 'submod \".\" (cadr (cadr mod-path_4)) (cddr mod-path_4)) self_6))"
"(let-values()(1/module-path-index-join mod-path_4 self_6)))))))))))"
"(define-values"
"(module-path->mpi/context)"
"(lambda(mod-path_6 ctx_9)"
"(begin"
"(let-values(((temp9_0)(namespace-mpi(expand-context-namespace ctx_9)))"
"((temp10_2)(expand-context-declared-submodule-names ctx_9)))"
"(module-path->mpi5.1 temp10_2 #t mod-path_6 temp9_0)))))"
"(define-values"
"(syntax-mapped-names)"
"(lambda(s_0 phase_40)"
"(begin"
"(let-values(((s-scs_1)(syntax-scope-set s_0 phase_40)))"
"(let-values(((ht_94) s-scs_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_94)))"
"((letrec-values(((for-loop_106)"
"(lambda(syms_14 i_124)"
"(begin"
" 'for-loop"
"(if i_124"
"(let-values(((sc_25)(unsafe-immutable-hash-iterate-key ht_94 i_124)))"
"(let-values(((syms_15)"
"(let-values(((syms_16) syms_14))"
"(let-values(((syms_17)"
"(let-values()"
"(set-union"
" syms_16"
"(binding-table-symbols"
"(scope-binding-table sc_25)"
" s-scs_1"
" s_0"
" null)))))"
"(values syms_17)))))"
"(if(not #f)"
"(for-loop_106 syms_15(unsafe-immutable-hash-iterate-next ht_94 i_124))"
" syms_15)))"
" syms_14)))))"
" for-loop_106)"
"(seteq)"
"(unsafe-immutable-hash-iterate-first ht_94))))))))"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_33 make-_33 ?_33 -ref_33 -set!_33)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'requires+provides"
" #f"
" 8"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'requires+provides)))))"
"(values"
" struct:_33"
" make-_33"
" ?_33"
"(make-struct-field-accessor -ref_33 0 'self)"
"(make-struct-field-accessor -ref_33 1 'require-mpis)"
"(make-struct-field-accessor -ref_33 2 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_33 3 'requires)"
"(make-struct-field-accessor -ref_33 4 'provides)"
"(make-struct-field-accessor -ref_33 5 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_33 6 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_33 7 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_33 6 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_33 7 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_61 make-_61 ?_61 -ref_61 -set!_61)"
"(let-values()"
"(let-values()"
"(make-struct-type 'required #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'required)))))"
"(values"
" struct:_61"
" make-_61"
" ?_61"
"(make-struct-field-accessor -ref_61 0 'id)"
"(make-struct-field-accessor -ref_61 1 'phase)"
"(make-struct-field-accessor -ref_61 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_61 3 'as-transformer?))))"
"(define-values"
"(struct:nominal nominal3.1 nominal? nominal-module nominal-provide-phase nominal-require-phase nominal-sym)"
"(let-values(((struct:_3 make-_3 ?_3 -ref_3 -set!_3)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'nominal"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'nominal)))))"
"(values"
" struct:_3"
" make-_3"
" ?_3"
"(make-struct-field-accessor -ref_3 0 'module)"
"(make-struct-field-accessor -ref_3 1 'provide-phase)"
"(make-struct-field-accessor -ref_3 2 'require-phase)"
"(make-struct-field-accessor -ref_3 3 'sym))))"
"(define-values"
"(struct:bulk-required"
" bulk-required4.1"
" bulk-required?"
" bulk-required-provides"
" bulk-required-prefix-len"
" bulk-required-s"
" bulk-required-provide-phase-level"
" bulk-required-can-be-shadowed?)"
"(let-values(((struct:_5 make-_5 ?_5 -ref_5 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-required"
" #f"
" 5"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'bulk-required)))))"
"(values"
" struct:_5"
" make-_5"
" ?_5"
"(make-struct-field-accessor -ref_5 0 'provides)"
"(make-struct-field-accessor -ref_5 1 'prefix-len)"
"(make-struct-field-accessor -ref_5 2 's)"
"(make-struct-field-accessor -ref_5 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_5 4 'can-be-shadowed?))))"
"(define-values"
"(make-requires+provides8.1)"
"(lambda(copy-requires5_0 copy-requires6_0 self7_0)"
"(begin"
" 'make-requires+provides8"
"(let-values(((self_7) self7_0))"
"(let-values(((copy-r+p_0)(if copy-requires6_0 copy-requires5_0 #f)))"
"(let-values()"
"(requires+provides1.1"
" self_7"
"(if copy-r+p_0(requires+provides-require-mpis copy-r+p_0)(make-module-path-index-intern-table))"
"(if copy-r+p_0(hash-copy(requires+provides-require-mpis-in-order copy-r+p_0))(make-hasheqv))"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
" #t"
" #t)))))))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_0)"
"(begin"
"(begin"
"(hash-clear!(requires+provides-requires r+p_0))"
"(hash-clear!(requires+provides-provides r+p_0))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_0))))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_1 mpi_27)(begin(intern-module-path-index!(requires+provides-require-mpis r+p_1) mpi_27))))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_2 mod-name_8 phase-shift_5 is-cross-phase-persistent?_0)"
"(begin"
"(let-values(((mpi_28)(intern-mpi r+p_2 mod-name_8)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_2) mpi_28 '#hasheqv()) phase-shift_5 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_2)"
" phase-shift_5"
"(lambda(l_52)(cons mpi_28 l_52))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_2) mpi_28 make-hasheqv)"
" phase-shift_5"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_0"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_2 #f)))"
" mpi_28)))))"
"(define-values"
"(add-defined-or-required-id!19.1)"
"(lambda(as-transformer?12_0 can-be-shadowed?11_0 can-be-shadowed?13_0 r+p15_0 id16_0 phase17_0 binding18_0)"
"(begin"
" 'add-defined-or-required-id!19"
"(let-values(((r+p_3) r+p15_0))"
"(let-values(((id_23) id16_0))"
"(let-values(((phase_49) phase17_0))"
"(let-values(((binding_12) binding18_0))"
"(let-values(((can-be-shadowed?_0)(if can-be-shadowed?13_0 can-be-shadowed?11_0 #f)))"
"(let-values(((as-transformer?_0) as-transformer?12_0))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_49"
"(phase+"
"(module-binding-nominal-phase binding_12)"
"(module-binding-nominal-require-phase binding_12)))"
"(void)"
"                        (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((temp117_0)(module-binding-nominal-module binding_12))"
"((temp118_0)(module-binding-nominal-require-phase binding_12))"
"((can-be-shadowed?119_0) can-be-shadowed?_0)"
"((as-transformer?120_0) as-transformer?_0))"
"(add-defined-or-required-id-at-nominal!33.1"
" as-transformer?120_0"
" can-be-shadowed?119_0"
" temp117_0"
" temp118_0"
" r+p_3"
" id_23"
" phase_49)))))))))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!33.1)"
"(lambda(as-transformer?25_0"
" can-be-shadowed?24_0"
" nominal-module22_0"
" nominal-require-phase23_0"
" r+p30_0"
" id31_0"
" phase32_1)"
"(begin"
" 'add-defined-or-required-id-at-nominal!33"
"(let-values(((r+p_4) r+p30_0))"
"(let-values(((id_24) id31_0))"
"(let-values(((phase_50) phase32_1))"
"(let-values(((nominal-module_6) nominal-module22_0))"
"(let-values(((nominal-require-phase_4) nominal-require-phase23_0))"
"(let-values(((can-be-shadowed?_1) can-be-shadowed?24_0))"
"(let-values(((as-transformer?_1) as-transformer?25_0))"
"(let-values()"
"(let-values(((at-mod_0)"
"(hash-ref!"
"(requires+provides-requires r+p_4)"
"(intern-mpi r+p_4 nominal-module_6)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_0)(hash-ref! at-mod_0 nominal-require-phase_4 make-hasheq)))"
"(let-values(((sym_30)(syntax-e$1 id_24)))"
"(hash-set!"
" sym-to-reqds_0"
" sym_30"
"(cons-ish"
"(required2.1 id_24 phase_50 can-be-shadowed?_1 as-transformer?_1)"
"(hash-ref sym-to-reqds_0 sym_30 null)))))))))))))))))"
"(define-values"
"(add-bulk-required-ids!59.1)"
"(lambda(accum-update-nominals42_0"
" can-be-shadowed?40_0"
" check-and-remove?41_0"
" excepts37_0"
" in39_0"
" prefix36_0"
" symbols-accum38_0"
" who43_0"
" r+p52_0"
" s53_0"
" self54_0"
" nominal-module55_0"
" phase-shift56_0"
" provides57_0"
" provide-phase-level58_0)"
"(begin"
" 'add-bulk-required-ids!59"
"(let-values(((r+p_5) r+p52_0))"
"(let-values(((s_194) s53_0))"
"(let-values(((self_8) self54_0))"
"(let-values(((nominal-module_7) nominal-module55_0))"
"(let-values(((phase-shift_6) phase-shift56_0))"
"(let-values(((provides_4) provides57_0))"
"(let-values(((provide-phase-level_3) provide-phase-level58_0))"
"(let-values(((bulk-prefix_0) prefix36_0))"
"(let-values(((bulk-excepts_0) excepts37_0))"
"(let-values(((symbols-accum_0) symbols-accum38_0))"
"(let-values(((orig-s_0) in39_0))"
"(let-values(((can-be-shadowed?_2) can-be-shadowed?40_0))"
"(let-values(((check-and-remove?_0) check-and-remove?41_0))"
"(let-values(((accum-update-nominals_0) accum-update-nominals42_0))"
"(let-values(((who_10) who43_0))"
"(let-values()"
"(let-values(((phase_51)(phase+ provide-phase-level_3 phase-shift_6)))"
"(let-values(((shortcut-table_0)"
"(if check-and-remove?_0"
"(if(>(hash-count provides_4) 64)"
"(syntax-mapped-names s_194 phase_51)"
" #f)"
" #f)))"
"(let-values(((mpi_29)(intern-mpi r+p_5 nominal-module_7)))"
"(let-values(((at-mod_1)"
"(hash-ref!"
"(requires+provides-requires r+p_5)"
" mpi_29"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_1)"
"(hash-ref! at-mod_1 phase-shift_6 make-hasheq)))"
"(let-values(((prefix-len_0)"
"(if bulk-prefix_0"
"(string-length(symbol->string bulk-prefix_0))"
" 0)))"
"(let-values(((br_0)"
"(bulk-required4.1"
" provides_4"
" prefix-len_0"
" s_194"
" provide-phase-level_3"
" can-be-shadowed?_2)))"
"(begin"
"(let-values(((ht_95) provides_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_95)))"
"((letrec-values(((for-loop_147)"
"(lambda(i_125)"
"(begin"
" 'for-loop"
"(if i_125"
"(let-values(((out-sym_0 binding/p_2)"
"(hash-iterate-key+value"
" ht_95"
" i_125)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if symbols-accum_0"
"(let-values()"
"(hash-set!"
" symbols-accum_0"
" out-sym_0"
" #t))"
"(void))"
"(if(hash-ref"
" bulk-excepts_0"
" out-sym_0"
" #f)"
"(void)"
"(let-values()"
"(let-values(((sym_31)"
"(if(not"
" bulk-prefix_0)"
"(let-values()"
" out-sym_0)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                                  \"~a~a\""
" bulk-prefix_0"
" out-sym_0))))))"
"(begin"
"(if(if check-and-remove?_0"
"(let-values(((or-part_177)"
"(not"
" shortcut-table_0)))"
"(if or-part_177"
" or-part_177"
"(hash-ref"
" shortcut-table_0"
" sym_31"
" #f)))"
" #f)"
"(let-values()"
"(let-values(((temp121_0)"
" #t)"
"((r+p122_0)"
" r+p_5)"
"((temp123_0)"
"(datum->syntax$1"
" s_194"
" sym_31"
" s_194))"
"((phase124_0)"
" phase_51)"
"((orig-s125_0)"
" orig-s_0)"
"((temp126_0)"
"(lambda()"
"(let-values(((self132_0)"
" self_8)"
"((mpi133_0)"
" mpi_29)"
"((provide-phase-level134_0)"
" provide-phase-level_3)"
"((phase-shift135_0)"
" phase-shift_6))"
"(provide-binding-to-require-binding11.1"
" mpi133_0"
" phase-shift135_0"
" provide-phase-level134_0"
" self132_0"
" binding/p_2"
" sym_31))))"
"((temp127_0)"
" #t)"
"((accum-update-nominals128_0)"
" accum-update-nominals_0)"
"((who129_0)"
" who_10))"
"(check-not-defined93.1"
" accum-update-nominals128_0"
" #t"
" temp121_0"
" #t"
" orig-s125_0"
" temp127_0"
" #t"
" temp126_0"
" #t"
" who129_0"
" r+p122_0"
" temp123_0"
" phase124_0)))"
"(void))"
"(hash-set!"
" sym-to-reqds_1"
" sym_31"
"(cons-ish"
" br_0"
"(hash-ref"
" sym-to-reqds_1"
" sym_31"
" null)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_147"
"(hash-iterate-next"
" ht_95"
" i_125))"
"(values))))"
"(values))))))"
" for-loop_147)"
"(hash-iterate-first ht_95))))"
"(void))))))))))))))))))))))))))))"
"(define-values"
"(bulk-required->required)"
"(lambda(br_1 nominal-module_8 phase_52 sym_32)"
"(begin"
"(let-values(((prefix-len_1)(bulk-required-prefix-len br_1)))"
"(let-values(((out-sym_1)"
"(if(zero? prefix-len_1)"
" sym_32"
"(string->symbol(substring(symbol->string sym_32) prefix-len_1)))))"
"(let-values(((binding/p_3)(hash-ref(bulk-required-provides br_1) out-sym_1)))"
"(required2.1"
"(datum->syntax$1(bulk-required-s br_1) sym_32)"
"(phase+ phase_52(bulk-required-provide-phase-level br_1))"
"(bulk-required-can-be-shadowed? br_1)"
"(provided-as-transformer? binding/p_3))))))))"
"(define-values"
"(normalize-required)"
"(lambda(r_35 mod-name_9 phase_53 sym_33)"
"(begin(if(bulk-required? r_35)(bulk-required->required r_35 mod-name_9 phase_53 sym_33) r_35))))"
"(define-values"
"(add-enclosing-module-defined-and-required!67.1)"
"(lambda(enclosing-requires+provides62_0 r+p64_0 enclosing-mod65_0 phase-shift66_0)"
"(begin"
" 'add-enclosing-module-defined-and-required!67"
"(let-values(((r+p_6) r+p64_0))"
"(let-values(((enclosing-r+p_0) enclosing-requires+provides62_0))"
"(let-values(((enclosing-mod_0) enclosing-mod65_0))"
"(let-values(((phase-shift_7) phase-shift66_0))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_6 #f)"
"(let-values(((ht_96)(requires+provides-requires enclosing-r+p_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_96)))"
"((letrec-values(((for-loop_148)"
"(lambda(i_126)"
"(begin"
" 'for-loop"
"(if i_126"
"(let-values(((mod-name_10 at-mod_2)"
"(hash-iterate-key+value ht_96 i_126)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((ht_4) at-mod_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_4)))"
"((letrec-values(((for-loop_134)"
"(lambda(i_127)"
"(begin"
" 'for-loop"
"(if i_127"
"(let-values(((phase_54"
" at-phase_8)"
"(hash-iterate-key+value"
" ht_4"
" i_127)))"
"(let-values((()"
"(let-values(((ht_6)"
" at-phase_8))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_6)))"
"((letrec-values(((for-loop_149)"
"(lambda(i_128)"
"(begin"
" 'for-loop"
"(if i_128"
"(let-values(((sym_34"
" reqds_0)"
"(hash-iterate-key+value"
" ht_6"
" i_128)))"
"(let-values((()"
"(let-values(((lst_115)"
" reqds_0))"
"(begin"
"(void)"
"((letrec-values(((for-loop_150)"
"(lambda(lst_116)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" lst_116))"
"(let-values(((reqd/maybe-bulk_0)"
"(if(pair?"
" lst_116)"
"(car"
" lst_116)"
" lst_116))"
"((rest_57)"
"(if(pair?"
" lst_116)"
"(cdr"
" lst_116)"
" null)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((reqd_0)"
"(normalize-required"
" reqd/maybe-bulk_0"
" mod-name_10"
" phase_54"
" sym_34)))"
"(let-values(((temp137_0)"
"(syntax-shift-phase-level$1"
"(let-values(((temp143_0)"
"(required-id"
" reqd_0))"
"((temp144_0)"
"(requires+provides-self"
" enclosing-r+p_0))"
"((enclosing-mod145_0)"
" enclosing-mod_0))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" temp143_0"
" temp144_0"
" enclosing-mod145_0"
" #f"
" #f))"
" phase-shift_7))"
"((temp138_0)"
"(phase+"
"(required-phase"
" reqd_0)"
" phase-shift_7))"
"((enclosing-mod139_0)"
" enclosing-mod_0)"
"((phase-shift140_1)"
" phase-shift_7)"
"((temp141_0)"
" #t)"
"((temp142_0)"
"(required-as-transformer?"
" reqd_0)))"
"(add-defined-or-required-id-at-nominal!33.1"
" temp142_0"
" temp141_0"
" enclosing-mod139_0"
" phase-shift140_1"
" r+p_6"
" temp137_0"
" temp138_0))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_150"
" rest_57)"
"(values))))"
"(values))))))"
" for-loop_150)"
" lst_115)))))"
"(if(not"
" #f)"
"(for-loop_149"
"(hash-iterate-next"
" ht_6"
" i_128))"
"(values))))"
"(values))))))"
" for-loop_149)"
"(hash-iterate-first"
" ht_6))))))"
"(if(not"
" #f)"
"(for-loop_134"
"(hash-iterate-next"
" ht_4"
" i_127))"
"(values))))"
"(values))))))"
" for-loop_134)"
"(hash-iterate-first ht_4))))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_148(hash-iterate-next ht_96 i_126))"
"(values))))"
"(values))))))"
" for-loop_148)"
"(hash-iterate-first ht_96))))"
"(void))))))))))"
"(define-values"
"(remove-required-id!75.1)"
"(lambda(unless-matches70_0 r+p72_0 id73_0 phase74_0)"
"(begin"
" 'remove-required-id!75"
"(let-values(((r+p_7) r+p72_0))"
"(let-values(((id_25) id73_0))"
"(let-values(((phase_55) phase74_0))"
"(let-values(((binding_13) unless-matches70_0))"
"(let-values()"
"(let-values(((b_66)"
"(let-values(((temp148_0) #t))"
"(resolve+shift30.1 #f #f temp148_0 #t #f #f #f #f #f #f id_25 phase_55))))"
"(if b_66"
"(let-values()"
"(let-values(((mpi_30)(intern-mpi r+p_7(module-binding-nominal-module b_66))))"
"(let-values(((at-mod_3)(hash-ref(requires+provides-requires r+p_7) mpi_30 #f)))"
"(if at-mod_3"
"(let-values()"
"(let-values(((nominal-phase_4)(module-binding-nominal-require-phase b_66)))"
"(let-values(((sym-to-reqds_2)(hash-ref at-mod_3 nominal-phase_4 #f)))"
"(if sym-to-reqds_2"
"(let-values()"
"(let-values(((sym_35)(syntax-e$1 id_25)))"
"(let-values(((l_53)(hash-ref sym-to-reqds_2 sym_35 null)))"
"(if(null? l_53)"
"(void)"
"(let-values()"
"(if(same-binding? b_66 binding_13)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_2"
" sym_35"
"(remove-non-matching-requireds"
" l_53"
" id_25"
" phase_55"
" mpi_30"
" nominal-phase_4"
" sym_35)))))))))"
"(void)))))"
"(void)))))"
"(void)))))))))))"
"(define-values"
"(remove-non-matching-requireds)"
"(lambda(reqds_1 id_26 phase_56 mpi_31 nominal-phase_5 sym_36)"
"(begin"
"(reverse$1"
"(let-values(((lst_117) reqds_1))"
"(begin"
"(void)"
"((letrec-values(((for-loop_151)"
"(lambda(fold-var_96 lst_118)"
"(begin"
" 'for-loop"
"(if(not(null? lst_118))"
"(let-values(((r_36)(if(pair? lst_118)(car lst_118) lst_118))"
"((rest_58)(if(pair? lst_118)(cdr lst_118) null)))"
"(let-values(((fold-var_97)"
"(let-values(((r_37)"
"(normalize-required"
" r_36"
" mpi_31"
" nominal-phase_5"
" sym_36)))"
"(begin"
" #t"
"((letrec-values(((for-loop_152)"
"(lambda(fold-var_98)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_99)"
"(let-values(((fold-var_100)"
" fold-var_98))"
"(if(if(eqv?"
" phase_56"
"(required-phase"
" r_37))"
"(free-identifier=?$1"
"(required-id r_37)"
" id_26"
" phase_56"
" phase_56)"
" #f)"
" fold-var_100"
"(let-values(((fold-var_101)"
" fold-var_100))"
"(let-values(((fold-var_102)"
"(let-values()"
"(cons"
"(let-values()"
" r_37)"
" fold-var_101))))"
"(values"
" fold-var_102)))))))"
" fold-var_99))))))"
" for-loop_152)"
" fold-var_96)))))"
"(if(not #f)(for-loop_151 fold-var_97 rest_58) fold-var_97)))"
" fold-var_96)))))"
" for-loop_151)"
" null"
" lst_117)))))))"
"(define-values"
"(check-not-defined93.1)"
"(lambda(accum-update-nominals82_0"
" accum-update-nominals88_0"
" check-not-required?78_0"
" check-not-required?84_0"
" in79_0"
" remove-shadowed!?81_0"
" remove-shadowed!?87_0"
" unless-matches80_0"
" unless-matches86_0"
" who83_0"
" r+p90_0"
" id91_0"
" phase92_0)"
"(begin"
" 'check-not-defined93"
"(let-values(((check-not-required?_0)(if check-not-required?84_0 check-not-required?78_0 #f)))"
"(let-values(((r+p_8) r+p90_0))"
"(let-values(((id_27) id91_0))"
"(let-values(((phase_57) phase92_0))"
"(let-values(((orig-s_1) in79_0))"
"(let-values(((ok-binding/delayed_0)(if unless-matches86_0 unless-matches80_0 #f)))"
"(let-values(((remove-shadowed!?_0)(if remove-shadowed!?87_0 remove-shadowed!?81_0 #f)))"
"(let-values(((accum-update-nominals_1)"
"(if accum-update-nominals88_0 accum-update-nominals82_0 #f)))"
"(let-values(((who_11) who83_0))"
"(let-values()"
"(let-values(((b_67)"
"(let-values(((temp151_0) #t))"
"(resolve+shift30.1 #f #f temp151_0 #t #f #f #f #f #f #f id_27 phase_57))))"
"(if(not b_67)"
"(let-values()(void))"
"(if(not(module-binding? b_67))"
"                                (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_27))"
"(let-values()"
"(let-values(((defined?_0)"
"(if b_67"
"(eq?(requires+provides-self r+p_8)(module-binding-module b_67))"
" #f)))"
"(if(if(not defined?_0)(not check-not-required?_0) #f)"
"(let-values()(set-requires+provides-all-bindings-simple?! r+p_8 #f))"
"(if(if defined?_0"
"(not"
"(hash-ref"
"(hash-ref"
"(requires+provides-phase-to-defined-syms r+p_8)"
" phase_57"
" '#hasheq())"
"(module-binding-sym b_67)"
" #f))"
" #f)"
"(let-values()(void))"
"(let-values()"
"(let-values(((mpi_32)"
"(intern-mpi r+p_8(module-binding-nominal-module b_67))))"
"(let-values(((at-mod_4)"
"(hash-ref(requires+provides-requires r+p_8) mpi_32 #f)))"
"(let-values(((ok-binding_0)"
"(if(procedure? ok-binding/delayed_0)"
"(ok-binding/delayed_0)"
" ok-binding/delayed_0)))"
"(if(not at-mod_4)"
"(let-values()(void))"
"(if(if ok-binding_0(same-binding? b_67 ok-binding_0) #f)"
"(let-values()"
"(if(same-binding-nominals? b_67 ok-binding_0)"
"(void)"
"(let-values()"
"(let-values(((update!_0)"
"(lambda()"
"(begin"
" 'update!"
"(let-values(((temp152_0) #t)"
"((id153_0) id_27)"
"((temp154_0)"
"(let-values(((temp157_0)"
"(cons"
" ok-binding_0"
"(module-binding-extra-nominal-bindings"
" b_67))))"
"(module-binding-update48.1"
" #f"
" #f"
" temp157_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" b_67)))"
"((phase155_0) phase_57))"
"(add-binding!17.1"
" #f"
" #f"
" temp152_0"
" #t"
" id153_0"
" temp154_0"
" phase155_0))))))"
"(if accum-update-nominals_1"
"(let-values()"
"(set-box!"
" accum-update-nominals_1"
"(cons update!_0(unbox accum-update-nominals_1))))"
"(let-values()(update!_0)))))))"
"(let-values()"
"(let-values(((nominal-phase_6)"
"(module-binding-nominal-require-phase b_67)))"
"(let-values(((sym-to-reqds_3)"
"(hash-ref at-mod_4 nominal-phase_6 '#hasheq())))"
"(let-values(((reqds_2)"
"(hash-ref"
" sym-to-reqds_3"
"(syntax-e$1 id_27)"
" null)))"
"(begin"
"(let-values(((lst_119) reqds_2))"
"(begin"
"(void)"
"((letrec-values(((for-loop_62)"
"(lambda(lst_120)"
"(begin"
" 'for-loop"
"(if(not(null? lst_120))"
"(let-values(((r_38)"
"(if(pair?"
" lst_120)"
"(car lst_120)"
" lst_120))"
"((rest_59)"
"(if(pair?"
" lst_120)"
"(cdr lst_120)"
" null)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(if(bulk-required?"
" r_38)"
"(bulk-required-can-be-shadowed?"
" r_38)"
"(required-can-be-shadowed?"
" r_38))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" r+p_8"
" #f))"
"(let-values()"
"(raise-syntax-error$1"
" who_11"
"(string-append"
"                                                                                                                                      \"identifier already \""
"(if defined?_0"
"                                                                                                                                        \"defined\""
"                                                                                                                                        \"required\")"
"(if(zero-phase?"
" phase_57)"
"(let-values()"
"                                                                                                                                          \"\")"
"(if(label-phase?"
" phase_57)"
"(let-values()"
"                                                                                                                                            \" for label\")"
"(if(="
" 1"
" phase_57)"
"(let-values()"
"                                                                                                                                              \" for syntax\")"
"(let-values()"
"(format"
"                                                                                                                                               \" for phase ~a\""
" phase_57))))))"
" orig-s_1"
" id_27))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_62 rest_59)"
"(values))))"
"(values))))))"
" for-loop_62)"
" lst_119)))"
"(void)"
"(if(if remove-shadowed!?_0(not(null? reqds_2)) #f)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_3"
"(syntax-e$1 id_27)"
"(remove-non-matching-requireds"
" reqds_2"
" id_27"
" phase_57"
" mpi_32"
" nominal-phase_6"
"(syntax-e$1 id_27))))"
"(void)))))))))))))))))))))))))))))))))"
"(define-values"
"(add-defined-syms!)"
"(lambda(r+p_9 syms_18 phase_58)"
"(begin"
"(let-values(((phase-to-defined-syms_0)(requires+provides-phase-to-defined-syms r+p_9)))"
"(let-values(((defined-syms_2)(hash-ref phase-to-defined-syms_0 phase_58 '#hasheq())))"
"(let-values(((new-defined-syms_0)"
"(let-values(((lst_121) syms_18))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_121)))"
"((letrec-values(((for-loop_153)"
"(lambda(defined-syms_3 lst_122)"
"(begin"
" 'for-loop"
"(if(pair? lst_122)"
"(let-values(((sym_37)(unsafe-car lst_122))"
"((rest_60)(unsafe-cdr lst_122)))"
"(let-values(((defined-syms_4)"
"(let-values(((defined-syms_5) defined-syms_3))"
"(let-values(((defined-syms_6)"
"(let-values()"
"(hash-set"
" defined-syms_5"
" sym_37"
" #t))))"
"(values defined-syms_6)))))"
"(if(not #f)"
"(for-loop_153 defined-syms_4 rest_60)"
" defined-syms_4)))"
" defined-syms_3)))))"
" for-loop_153)"
" defined-syms_2"
" lst_121)))))"
"(hash-set! phase-to-defined-syms_0 phase_58 new-defined-syms_0)))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_10 mod-name_11 phase_59)"
"(begin"
"(let-values(((mpi_33)(intern-mpi r+p_10 mod-name_11)))"
"(let-values(((at-mod_5)(hash-ref(requires+provides-requires r+p_10) mpi_33 #f)))"
"(if at-mod_5"
"(reverse$1"
"(let-values(((ht_97)(hash-ref at-mod_5 phase_59 '#hasheq())))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_97)))"
"((letrec-values(((for-loop_154)"
"(lambda(fold-var_103 i_129)"
"(begin"
" 'for-loop"
"(if i_129"
"(let-values(((sym_38 reqds_3)(hash-iterate-key+value ht_97 i_129)))"
"(let-values(((fold-var_104)"
"(let-values(((lst_123) reqds_3))"
"(begin"
"(void)"
"((letrec-values(((for-loop_155)"
"(lambda(fold-var_105 lst_124)"
"(begin"
" 'for-loop"
"(if(not(null? lst_124))"
"(let-values(((reqd_1)"
"(if(pair? lst_124)"
"(car lst_124)"
" lst_124))"
"((rest_61)"
"(if(pair? lst_124)"
"(cdr lst_124)"
" null)))"
"(let-values(((fold-var_106)"
"(let-values(((fold-var_107)"
" fold-var_105))"
"(let-values(((fold-var_108)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_1"
" mpi_33"
" phase_59"
" sym_38))"
" fold-var_107))))"
"(values"
" fold-var_108)))))"
"(if(not #f)"
"(for-loop_155"
" fold-var_106"
" rest_61)"
" fold-var_106)))"
" fold-var_105)))))"
" for-loop_155)"
" fold-var_103"
" lst_123)))))"
"(if(not #f)"
"(for-loop_154 fold-var_104(hash-iterate-next ht_97 i_129))"
" fold-var_104)))"
" fold-var_103)))))"
" for-loop_154)"
" null"
"(hash-iterate-first ht_97)))))"
" #f))))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_11)"
"(begin"
"(let-values(((or-part_178)(extract-module-requires r+p_11(requires+provides-self r+p_11) 0)))"
"(if or-part_178 or-part_178 null)))))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_12 mod-name_12 phase_60)"
"(begin"
"(let-values(((self_9)(requires+provides-self r+p_12)))"
"(let-values(((requires_2)(requires+provides-requires r+p_12)))"
"(call/ec"
"(lambda(esc_0)"
"(reverse$1"
"(let-values(((lst_125)(if mod-name_12(list(intern-mpi r+p_12 mod-name_12))(hash-keys requires_2))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_125)))"
"((letrec-values(((for-loop_140)"
"(lambda(fold-var_109 lst_126)"
"(begin"
" 'for-loop"
"(if(pair? lst_126)"
"(let-values(((mod-name_13)(unsafe-car lst_126))"
"((rest_62)(unsafe-cdr lst_126)))"
"(let-values(((fold-var_110)"
"(let-values(((fold-var_111) fold-var_109))"
"(if(eq? mod-name_13 self_9)"
" fold-var_111"
"(let-values(((phase-to-requireds_0)"
"(hash-ref"
" requires_2"
" mod-name_13"
" '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_156)"
"(lambda(fold-var_112)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_113)"
"(let-values(((lst_127)"
"(if(eq?"
" phase_60"
" 'all)"
"(hash-keys"
" phase-to-requireds_0)"
"(list"
" phase_60))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_127)))"
"((letrec-values(((for-loop_157)"
"(lambda(fold-var_114"
" lst_128)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_128)"
"(let-values(((phase_61)"
"(unsafe-car"
" lst_128))"
"((rest_63)"
"(unsafe-cdr"
" lst_128)))"
"(let-values(((fold-var_115)"
"(let-values(((ht_98)"
"(hash-ref"
" phase-to-requireds_0"
" phase_61"
"(lambda()"
"(esc_0"
" #f)))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_98)))"
"((letrec-values(((for-loop_158)"
"(lambda(fold-var_116"
" i_130)"
"(begin"
" 'for-loop"
"(if i_130"
"(let-values(((sym_39"
" reqds_4)"
"(hash-iterate-key+value"
" ht_98"
" i_130)))"
"(let-values(((fold-var_117)"
"(let-values(((lst_129)"
" reqds_4))"
"(begin"
"(void)"
"((letrec-values(((for-loop_159)"
"(lambda(fold-var_118"
" lst_130)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" lst_130))"
"(let-values(((reqd_2)"
"(if(pair?"
" lst_130)"
"(car"
" lst_130)"
" lst_130))"
"((rest_64)"
"(if(pair?"
" lst_130)"
"(cdr"
" lst_130)"
" null)))"
"(let-values(((fold-var_119)"
"(let-values(((fold-var_120)"
" fold-var_118))"
"(let-values(((fold-var_121)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_2"
" mod-name_13"
" phase_61"
" sym_39))"
" fold-var_120))))"
"(values"
" fold-var_121)))))"
"(if(not"
" #f)"
"(for-loop_159"
" fold-var_119"
" rest_64)"
" fold-var_119)))"
" fold-var_118)))))"
" for-loop_159)"
" fold-var_116"
" lst_129)))))"
"(if(not"
" #f)"
"(for-loop_158"
" fold-var_117"
"(hash-iterate-next"
" ht_98"
" i_130))"
" fold-var_117)))"
" fold-var_116)))))"
" for-loop_158)"
" fold-var_114"
"(hash-iterate-first"
" ht_98))))))"
"(if(not"
" #f)"
"(for-loop_157"
" fold-var_115"
" rest_63)"
" fold-var_115)))"
" fold-var_114)))))"
" for-loop_157)"
" fold-var_112"
" lst_127)))))"
" fold-var_113))))))"
" for-loop_156)"
" fold-var_111)))))))"
"(if(not #f)(for-loop_140 fold-var_110 rest_62) fold-var_110)))"
" fold-var_109)))))"
" for-loop_140)"
" null"
" lst_125)))))))))))"
"(define-values"
"(add-provide!107.1)"
"(lambda(as-protected?96_0"
" as-transformer?97_0"
" r+p100_0"
" sym101_0"
" phase102_0"
" binding103_0"
" immed-binding104_0"
" id105_0"
" orig-s106_0)"
"(begin"
" 'add-provide!107"
"(let-values(((r+p_13) r+p100_0))"
"(let-values(((sym_40) sym101_0))"
"(let-values(((phase_62) phase102_0))"
"(let-values(((binding_14) binding103_0))"
"(let-values(((immed-binding_0) immed-binding104_0))"
"(let-values(((id_28) id105_0))"
"(let-values(((orig-s_2) orig-s106_0))"
"(let-values(((as-protected?_0) as-protected?96_0))"
"(let-values(((as-transformer?_2) as-transformer?97_0))"
"(let-values()"
"(begin"
"(if(if as-protected?_0"
"(not(eq?(module-binding-module immed-binding_0)(requires+provides-self r+p_13)))"
" #f)"
"(let-values()"
"                                (raise-syntax-error$1 #f \"cannot protect required identifier in re-provide\" sym_40))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_13)"
" phase_62"
"(lambda(at-phase_9)"
"(let-values(((b/p_0)(hash-ref at-phase_9 sym_40 #f)))"
"(let-values(((b_68)(provided-as-binding b/p_0)))"
"(if(not b_68)"
"(let-values()"
"(let-values(((plain-binding_0)"
"(if(binding-free=id binding_14)"
"(let-values(((temp159_0) #f))"
"(module-binding-update48.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp159_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" binding_14))"
" binding_14)))"
"(hash-set"
" at-phase_9"
" sym_40"
"(if(let-values(((or-part_179) as-protected?_0))"
"(if or-part_179 or-part_179 as-transformer?_2))"
"(provided1.1 plain-binding_0 as-protected?_0 as-transformer?_2)"
" plain-binding_0))))"
"(if(same-binding? b_68 binding_14)"
"(let-values() at-phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                          \"identifier already provided (as a different binding)\""
" orig-s_2"
" id_28)))))))"
" '#hasheq())))))))))))))))"
"(define-values"
"(extract-requires-and-provides)"
"(lambda(r+p_14 old-self_0 new-self_1)"
"(begin"
"(let-values(((extract-requires_0)"
"(lambda()"
"(begin"
" 'extract-requires"
"(let-values(((phase-to-mpis-in-order_0)(requires+provides-require-mpis-in-order r+p_14)))"
"(let-values(((phases-in-order_1)"
"(let-values(((temp160_0)(hash-keys phase-to-mpis-in-order_0))"
"((phase<?161_0) phase<?))"
"(sort7.1 #f #f #f #f temp160_0 phase<?161_0))))"
"(reverse$1"
"(let-values(((lst_131) phases-in-order_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_131)))"
"((letrec-values(((for-loop_160)"
"(lambda(fold-var_122 lst_132)"
"(begin"
" 'for-loop"
"(if(pair? lst_132)"
"(let-values(((phase_63)(unsafe-car lst_132))"
"((rest_65)(unsafe-cdr lst_132)))"
"(let-values(((fold-var_123)"
"(let-values(((fold-var_124) fold-var_122))"
"(let-values(((fold-var_125)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_63"
"(reverse$1"
"(let-values(((lst_133)"
"(reverse$1"
"(hash-ref"
" phase-to-mpis-in-order_0"
" phase_63))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_133)))"
"((letrec-values(((for-loop_161)"
"(lambda(fold-var_126"
" lst_134)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_134)"
"(let-values(((mpi_34)"
"(unsafe-car"
" lst_134))"
"((rest_66)"
"(unsafe-cdr"
" lst_134)))"
"(let-values(((fold-var_127)"
"(let-values(((fold-var_128)"
" fold-var_126))"
"(if(eq?"
" mpi_34"
" old-self_0)"
" fold-var_128"
"(let-values(((fold-var_129)"
" fold-var_128))"
"(let-values(((fold-var_130)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_34"
" old-self_0"
" new-self_1))"
" fold-var_129))))"
"(values"
" fold-var_130)))))))"
"(if(not"
" #f)"
"(for-loop_161"
" fold-var_127"
" rest_66)"
" fold-var_127)))"
" fold-var_126)))))"
" for-loop_161)"
" null"
" lst_133))))))"
" fold-var_124))))"
"(values fold-var_125)))))"
"(if(not #f)"
"(for-loop_160 fold-var_123 rest_65)"
" fold-var_123)))"
" fold-var_122)))))"
" for-loop_160)"
" null"
" lst_131))))))))))"
"(let-values(((extract-provides_0)"
"(lambda()"
"(begin"
" 'extract-provides"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_14)"
" old-self_0"
" new-self_1)))))"
"(values(extract-requires_0)(extract-provides_0)))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_5 from-mpi_7 to-mpi_6)"
"(begin"
"(let-values(((ht_99) provides_5))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_99)))"
"((letrec-values(((for-loop_162)"
"(lambda(table_119 i_131)"
"(begin"
" 'for-loop"
"(if i_131"
"(let-values(((phase_64 at-phase_10)(hash-iterate-key+value ht_99 i_131)))"
"(let-values(((table_120)"
"(let-values(((table_121) table_119))"
"(let-values(((table_122)"
"(let-values()"
"(let-values(((key_50 val_43)"
"(let-values()"
"(values"
" phase_64"
"(let-values(((ht_100)"
" at-phase_10))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_100)))"
"((letrec-values(((for-loop_163)"
"(lambda(table_123"
" i_132)"
"(begin"
" 'for-loop"
"(if i_132"
"(let-values(((sym_41"
" binding_15)"
"(hash-iterate-key+value"
" ht_100"
" i_132)))"
"(let-values(((table_124)"
"(let-values(((table_125)"
" table_123))"
"(if(symbol-interned?"
" sym_41)"
"(let-values(((table_126)"
" table_125))"
"(let-values(((table_127)"
"(let-values()"
"(let-values(((key_51"
" val_44)"
"(let-values()"
"(values"
" sym_41"
"(if(eq?"
" from-mpi_7"
" to-mpi_6)"
"(let-values()"
" binding_15)"
"(let-values()"
"((letrec-values(((loop_82)"
"(lambda(binding_16)"
"(begin"
" 'loop"
"(if(provided?"
" binding_16)"
"(let-values()"
"(provided1.1"
"(loop_82"
"(provided-binding"
" binding_16))"
"(provided-protected?"
" binding_16)"
"(provided-syntax?"
" binding_16)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_16"
" from-mpi_7"
" to-mpi_6)))))))"
" loop_82)"
" binding_15)))))))"
"(hash-set"
" table_126"
" key_51"
" val_44)))))"
"(values"
" table_127)))"
" table_125))))"
"(if(not"
" #f)"
"(for-loop_163"
" table_124"
"(hash-iterate-next"
" ht_100"
" i_132))"
" table_124)))"
" table_123)))))"
" for-loop_163)"
" '#hasheq()"
"(hash-iterate-first"
" ht_100))))))))"
"(hash-set table_121 key_50 val_43)))))"
"(values table_122)))))"
"(if(not #f)(for-loop_162 table_120(hash-iterate-next ht_99 i_131)) table_120)))"
" table_119)))))"
" for-loop_162)"
" '#hasheqv()"
"(hash-iterate-first ht_99)))))))"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))))"
"(values struct:_1 make-_1 ?_1(make-struct-field-accessor -ref_1 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_9 make-_9 ?_9 -ref_9 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))))"
"(values struct:_9 make-_9 ?_9(make-struct-field-accessor -ref_9 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_10 make-_10 ?_10 -ref_10 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))))"
"(values"
" struct:_10"
" make-_10"
" ?_10"
"(make-struct-field-accessor -ref_10 0 'prefix-sym)"
"(make-struct-field-accessor -ref_10 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_18 make-_18 ?_18 -ref_18 -set!_18)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))))"
"(values"
" struct:_18"
" make-_18"
" ?_18"
"(make-struct-field-accessor -ref_18 0 'to-id)"
"(make-struct-field-accessor -ref_18 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!30.1)"
"(lambda(copy-variable-as-constant?11_0"
" copy-variable-as-constant?21_0"
" copy-variable-phase-level10_0"
" copy-variable-phase-level20_0"
" declared-submodule-names9_0"
" declared-submodule-names19_0"
" initial-require?13_0"
" initial-require?23_0"
" run-phase6_0"
" run-phase16_0"
" run?7_0"
" run?17_0"
" self5_0"
" self15_0"
" skip-variable-phase-level12_0"
" skip-variable-phase-level22_0"
" visit?8_0"
" visit?18_0"
" who14_0"
" reqs25_0"
" orig-s26_0"
" m-ns27_0"
" phase-shift28_0"
" requires+provides29_0)"
"(begin"
" 'parse-and-perform-requires!30"
"(let-values(((reqs_0) reqs25_0))"
"(let-values(((orig-s_3) orig-s26_0))"
"(let-values(((m-ns_8) m-ns27_0))"
"(let-values(((phase-shift_8) phase-shift28_0))"
"(let-values(((requires+provides_1) requires+provides29_0))"
"(let-values(((self_10)(if self15_0 self5_0 #f)))"
"(let-values(((run-phase_5)(if run-phase16_0 run-phase6_0(namespace-phase m-ns_8))))"
"(let-values(((run?_1)(if run?17_0 run?7_0 #f)))"
"(let-values(((visit?_1)(if visit?18_0 visit?8_0 #t)))"
"(let-values(((declared-submodule-names_2)"
"(if declared-submodule-names19_0 declared-submodule-names9_0 '#hasheq())))"
"(let-values(((copy-variable-phase-level_0)"
"(if copy-variable-phase-level20_0 copy-variable-phase-level10_0 #f)))"
"(let-values(((copy-variable-as-constant?_0)"
"(if copy-variable-as-constant?21_0 copy-variable-as-constant?11_0 #f)))"
"(let-values(((skip-variable-phase-level_0)"
"(if skip-variable-phase-level22_0 skip-variable-phase-level12_0 #f)))"
"(let-values(((initial-require?_0)(if initial-require?23_0 initial-require?13_0 #f)))"
"(let-values(((who_12) who14_0))"
"(let-values()"
"((letrec-values(((loop_83)"
"(lambda(reqs_1"
" top-req_0"
" phase-shift_9"
" just-meta_0"
" adjust_0"
" for-meta-ok?_0"
" just-meta-ok?_0"
" layer_5)"
"(begin"
" 'loop"
"(let-values(((lst_135) reqs_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_135)))"
"((letrec-values(((for-loop_37)"
"(lambda(result_29 lst_13)"
"(begin"
" 'for-loop"
"(if(pair? lst_13)"
"(let-values(((req_0)"
"(unsafe-car"
" lst_13))"
"((rest_67)"
"(unsafe-cdr"
" lst_13)))"
"(let-values(((result_68)"
"(let-values()"
"(let-values(((result_69)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_0)"
"(let-values(((check-nested115_0)"
"(lambda(want-layer114_0"
" ok?112_0"
" ok?113_0)"
"(begin"
" 'check-nested115"
"(let-values(((want-layer_0)"
" want-layer114_0))"
"(let-values(((ok?_1)"
"(if ok?113_0"
" ok?112_0"
" #t)))"
"(let-values()"
"(if(if ok?_1"
"(member"
" want-layer_0"
"(member"
" layer_5"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"invalid nesting\""
" orig-s_3"
" req_0))))))))))"
"(case-lambda"
"((want-layer_1)"
"(begin"
" 'check-nested"
"(check-nested115_0"
" want-layer_1"
" #f"
" #f)))"
"((want-layer_2"
" ok?112_1)"
"(check-nested115_0"
" want-layer_2"
" ok?112_1"
" #t))))))"
"(let-values(((fm_0)"
"(if(pair?"
"(syntax-e$1"
" req_0))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_0)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_0)))"
" #f)"
" #f)))"
"(let-values(((tmp_24)"
" fm_0))"
"(if(equal?"
" tmp_24"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_2"
" for-meta117_0"
" phase-level118_0"
" spec119_0)"
"(let-values(((s_195)"
" req_0))"
"(let-values(((orig-s_4)"
" s_195))"
"(let-values(((for-meta117_1"
" phase-level118_1"
" spec119_1)"
"(let-values(((s_196)"
"(if(syntax?$1"
" s_195)"
"(syntax-e$1"
" s_195)"
" s_195)))"
"(if(pair?"
" s_196)"
"(let-values(((for-meta120_0)"
"(let-values(((s_197)"
"(car"
" s_196)))"
" s_197))"
"((phase-level121_0"
" spec122_0)"
"(let-values(((s_198)"
"(cdr"
" s_196)))"
"(let-values(((s_61)"
"(if(syntax?$1"
" s_198)"
"(syntax-e$1"
" s_198)"
" s_198)))"
"(if(pair?"
" s_61)"
"(let-values(((phase-level123_0)"
"(let-values(((s_199)"
"(car"
" s_61)))"
" s_199))"
"((spec124_0)"
"(let-values(((s_62)"
"(cdr"
" s_61)))"
"(let-values(((s_200)"
"(if(syntax?$1"
" s_62)"
"(syntax-e$1"
" s_62)"
" s_62)))"
"(let-values(((flat-s_0)"
"(to-syntax-list.1"
" s_200)))"
"(if(not"
" flat-s_0)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_4))"
"(let-values()"
" flat-s_0)))))))"
"(values"
" phase-level123_0"
" spec124_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_4))))))"
"(values"
" for-meta120_0"
" phase-level121_0"
" spec122_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_4)))))"
"(values"
" #t"
" for-meta117_1"
" phase-level118_1"
" spec119_1))))))"
"(let-values(((p_31)"
"(syntax-e$1"
" phase-level118_0)))"
"(begin"
"(if(phase?"
" p_31)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad phase\""
" orig-s_3"
" req_0)))"
"(loop_83"
" spec119_0"
"(let-values(((or-part_93)"
" top-req_0))"
"(if or-part_93"
" or-part_93"
" req_0))"
"(phase+"
" phase-shift_9"
" p_31)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))))"
"(if(equal?"
" tmp_24"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_3"
" for-syntax125_0"
" spec126_0)"
"(let-values(((s_65)"
" req_0))"
"(let-values(((orig-s_5)"
" s_65))"
"(let-values(((for-syntax125_1"
" spec126_1)"
"(let-values(((s_201)"
"(if(syntax?$1"
" s_65)"
"(syntax-e$1"
" s_65)"
" s_65)))"
"(if(pair?"
" s_201)"
"(let-values(((for-syntax127_0)"
"(let-values(((s_202)"
"(car"
" s_201)))"
" s_202))"
"((spec128_0)"
"(let-values(((s_203)"
"(cdr"
" s_201)))"
"(let-values(((s_204)"
"(if(syntax?$1"
" s_203)"
"(syntax-e$1"
" s_203)"
" s_203)))"
"(let-values(((flat-s_1)"
"(to-syntax-list.1"
" s_204)))"
"(if(not"
" flat-s_1)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_5))"
"(let-values()"
" flat-s_1)))))))"
"(values"
" for-syntax127_0"
" spec128_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_5)))))"
"(values"
" #t"
" for-syntax125_1"
" spec126_1))))))"
"(loop_83"
" spec126_0"
"(let-values(((or-part_180)"
" top-req_0))"
"(if or-part_180"
" or-part_180"
" req_0))"
"(phase+"
" phase-shift_9"
" 1)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_24"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_4"
" for-template129_0"
" spec130_0)"
"(let-values(((s_205)"
" req_0))"
"(let-values(((orig-s_6)"
" s_205))"
"(let-values(((for-template129_1"
" spec130_1)"
"(let-values(((s_206)"
"(if(syntax?$1"
" s_205)"
"(syntax-e$1"
" s_205)"
" s_205)))"
"(if(pair?"
" s_206)"
"(let-values(((for-template131_0)"
"(let-values(((s_207)"
"(car"
" s_206)))"
" s_207))"
"((spec132_0)"
"(let-values(((s_208)"
"(cdr"
" s_206)))"
"(let-values(((s_92)"
"(if(syntax?$1"
" s_208)"
"(syntax-e$1"
" s_208)"
" s_208)))"
"(let-values(((flat-s_2)"
"(to-syntax-list.1"
" s_92)))"
"(if(not"
" flat-s_2)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_6))"
"(let-values()"
" flat-s_2)))))))"
"(values"
" for-template131_0"
" spec132_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_6)))))"
"(values"
" #t"
" for-template129_1"
" spec130_1))))))"
"(loop_83"
" spec130_0"
"(let-values(((or-part_181)"
" top-req_0))"
"(if or-part_181"
" or-part_181"
" req_0))"
"(phase+"
" phase-shift_9"
" -1)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_24"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_5"
" for-label133_0"
" spec134_0)"
"(let-values(((s_209)"
" req_0))"
"(let-values(((orig-s_7)"
" s_209))"
"(let-values(((for-label133_1"
" spec134_1)"
"(let-values(((s_210)"
"(if(syntax?$1"
" s_209)"
"(syntax-e$1"
" s_209)"
" s_209)))"
"(if(pair?"
" s_210)"
"(let-values(((for-label135_0)"
"(let-values(((s_67)"
"(car"
" s_210)))"
" s_67))"
"((spec136_0)"
"(let-values(((s_211)"
"(cdr"
" s_210)))"
"(let-values(((s_98)"
"(if(syntax?$1"
" s_211)"
"(syntax-e$1"
" s_211)"
" s_211)))"
"(let-values(((flat-s_3)"
"(to-syntax-list.1"
" s_98)))"
"(if(not"
" flat-s_3)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_7))"
"(let-values()"
" flat-s_3)))))))"
"(values"
" for-label135_0"
" spec136_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_7)))))"
"(values"
" #t"
" for-label133_1"
" spec134_1))))))"
"(loop_83"
" spec134_0"
"(let-values(((or-part_182)"
" top-req_0))"
"(if or-part_182"
" or-part_182"
" req_0))"
"(phase+"
" phase-shift_9"
" #f)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_24"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" just-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_6"
" just-meta137_0"
" phase-level138_0"
" spec139_0)"
"(let-values(((s_104)"
" req_0))"
"(let-values(((orig-s_8)"
" s_104))"
"(let-values(((just-meta137_1"
" phase-level138_1"
" spec139_1)"
"(let-values(((s_106)"
"(if(syntax?$1"
" s_104)"
"(syntax-e$1"
" s_104)"
" s_104)))"
"(if(pair?"
" s_106)"
"(let-values(((just-meta140_0)"
"(let-values(((s_109)"
"(car"
" s_106)))"
" s_109))"
"((phase-level141_0"
" spec142_0)"
"(let-values(((s_212)"
"(cdr"
" s_106)))"
"(let-values(((s_110)"
"(if(syntax?$1"
" s_212)"
"(syntax-e$1"
" s_212)"
" s_212)))"
"(if(pair?"
" s_110)"
"(let-values(((phase-level143_0)"
"(let-values(((s_213)"
"(car"
" s_110)))"
" s_213))"
"((spec144_0)"
"(let-values(((s_214)"
"(cdr"
" s_110)))"
"(let-values(((s_215)"
"(if(syntax?$1"
" s_214)"
"(syntax-e$1"
" s_214)"
" s_214)))"
"(let-values(((flat-s_4)"
"(to-syntax-list.1"
" s_215)))"
"(if(not"
" flat-s_4)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_8))"
"(let-values()"
" flat-s_4)))))))"
"(values"
" phase-level143_0"
" spec144_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_8))))))"
"(values"
" just-meta140_0"
" phase-level141_0"
" spec142_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_8)))))"
"(values"
" #t"
" just-meta137_1"
" phase-level138_1"
" spec139_1))))))"
"(let-values(((p_32)"
"(syntax-e$1"
" phase-level138_0)))"
"(begin"
"(if(phase?"
" p_32)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad phase\""
" orig-s_3"
" req_0)))"
"(loop_83"
" spec139_0"
"(let-values(((or-part_183)"
" top-req_0))"
"(if or-part_183"
" or-part_183"
" req_0))"
" phase-shift_9"
" p_32"
" adjust_0"
" for-meta-ok?_0"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_24"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_7"
" only145_0"
" spec146_0"
" id147_0)"
"(let-values(((s_216)"
" req_0))"
"(let-values(((orig-s_9)"
" s_216))"
"(let-values(((only145_1"
" spec146_1"
" id147_1)"
"(let-values(((s_217)"
"(if(syntax?$1"
" s_216)"
"(syntax-e$1"
" s_216)"
" s_216)))"
"(if(pair?"
" s_217)"
"(let-values(((only148_0)"
"(let-values(((s_218)"
"(car"
" s_217)))"
" s_218))"
"((spec149_0"
" id150_0)"
"(let-values(((s_219)"
"(cdr"
" s_217)))"
"(let-values(((s_220)"
"(if(syntax?$1"
" s_219)"
"(syntax-e$1"
" s_219)"
" s_219)))"
"(if(pair?"
" s_220)"
"(let-values(((spec151_0)"
"(let-values(((s_221)"
"(car"
" s_220)))"
" s_221))"
"((id152_0)"
"(let-values(((s_222)"
"(cdr"
" s_220)))"
"(let-values(((s_223)"
"(if(syntax?$1"
" s_222)"
"(syntax-e$1"
" s_222)"
" s_222)))"
"(let-values(((flat-s_5)"
"(to-syntax-list.1"
" s_223)))"
"(if(not"
" flat-s_5)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_9))"
"(let-values()"
"(let-values(((id_29)"
"(let-values(((lst_136)"
" flat-s_5))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_136)))"
"((letrec-values(((for-loop_164)"
"(lambda(id_30"
" lst_0)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_0)"
"(let-values(((s_224)"
"(unsafe-car"
" lst_0))"
"((rest_68)"
"(unsafe-cdr"
" lst_0)))"
"(let-values(((id_31)"
"(let-values(((id_32)"
" id_30))"
"(let-values(((id_33)"
"(let-values()"
"(let-values(((id153_1)"
"(let-values()"
"(if(let-values(((or-part_184)"
"(if(syntax?$1"
" s_224)"
"(symbol?"
"(syntax-e$1"
" s_224))"
" #f)))"
"(if or-part_184"
" or-part_184"
"(symbol?"
" s_224)))"
" s_224"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_9"
" s_224)))))"
"(cons"
" id153_1"
" id_32)))))"
"(values"
" id_33)))))"
"(if(not"
" #f)"
"(for-loop_164"
" id_31"
" rest_68)"
" id_31)))"
" id_30)))))"
" for-loop_164)"
" null"
" lst_136)))))"
"(reverse$1"
" id_29)))))))))"
"(values"
" spec151_0"
" id152_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_9))))))"
"(values"
" only148_0"
" spec149_0"
" id150_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_9)))))"
"(values"
" #t"
" only145_1"
" spec146_1"
" id147_1))))))"
"(loop_83"
"(list"
" spec146_0)"
"(let-values(((or-part_177)"
" top-req_0))"
"(if or-part_177"
" or-part_177"
" req_0))"
" phase-shift_9"
" just-meta_0"
"(adjust-only1.1"
"(ids->sym-set"
" id147_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_24"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_8"
" prefix154_0"
" id:prefix155_0"
" spec156_0)"
"(let-values(((s_225)"
" req_0))"
"(let-values(((orig-s_10)"
" s_225))"
"(let-values(((prefix154_1"
" id:prefix155_1"
" spec156_1)"
"(let-values(((s_226)"
"(if(syntax?$1"
" s_225)"
"(syntax-e$1"
" s_225)"
" s_225)))"
"(if(pair?"
" s_226)"
"(let-values(((prefix157_0)"
"(let-values(((s_227)"
"(car"
" s_226)))"
" s_227))"
"((id:prefix158_0"
" spec159_0)"
"(let-values(((s_228)"
"(cdr"
" s_226)))"
"(let-values(((s_229)"
"(if(syntax?$1"
" s_228)"
"(syntax-e$1"
" s_228)"
" s_228)))"
"(if(pair?"
" s_229)"
"(let-values(((id:prefix160_0)"
"(let-values(((s_230)"
"(car"
" s_229)))"
"(if(let-values(((or-part_185)"
"(if(syntax?$1"
" s_230)"
"(symbol?"
"(syntax-e$1"
" s_230))"
" #f)))"
"(if or-part_185"
" or-part_185"
"(symbol?"
" s_230)))"
" s_230"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_10"
" s_230))))"
"((spec161_0)"
"(let-values(((s_231)"
"(cdr"
" s_229)))"
"(let-values(((s_232)"
"(if(syntax?$1"
" s_231)"
"(syntax-e$1"
" s_231)"
" s_231)))"
"(if(pair?"
" s_232)"
"(let-values(((spec162_0)"
"(let-values(((s_233)"
"(car"
" s_232)))"
" s_233))"
"(()"
"(let-values(((s_234)"
"(cdr"
" s_232)))"
"(let-values(((s_235)"
"(if(syntax?$1"
" s_234)"
"(syntax-e$1"
" s_234)"
" s_234)))"
"(if(null?"
" s_235)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_10))))))"
"(values"
" spec162_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_10))))))"
"(values"
" id:prefix160_0"
" spec161_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_10))))))"
"(values"
" prefix157_0"
" id:prefix158_0"
" spec159_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_10)))))"
"(values"
" #t"
" prefix154_1"
" id:prefix155_1"
" spec156_1))))))"
"(loop_83"
"(list"
" spec156_0)"
"(let-values(((or-part_186)"
" top-req_0))"
"(if or-part_186"
" or-part_186"
" req_0))"
" phase-shift_9"
" just-meta_0"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix155_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_24"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_9"
" all-except163_0"
" spec164_0"
" id165_0)"
"(let-values(((s_236)"
" req_0))"
"(let-values(((orig-s_11)"
" s_236))"
"(let-values(((all-except163_1"
" spec164_1"
" id165_1)"
"(let-values(((s_237)"
"(if(syntax?$1"
" s_236)"
"(syntax-e$1"
" s_236)"
" s_236)))"
"(if(pair?"
" s_237)"
"(let-values(((all-except166_0)"
"(let-values(((s_238)"
"(car"
" s_237)))"
" s_238))"
"((spec167_0"
" id168_0)"
"(let-values(((s_239)"
"(cdr"
" s_237)))"
"(let-values(((s_240)"
"(if(syntax?$1"
" s_239)"
"(syntax-e$1"
" s_239)"
" s_239)))"
"(if(pair?"
" s_240)"
"(let-values(((spec169_0)"
"(let-values(((s_241)"
"(car"
" s_240)))"
" s_241))"
"((id170_0)"
"(let-values(((s_242)"
"(cdr"
" s_240)))"
"(let-values(((s_243)"
"(if(syntax?$1"
" s_242)"
"(syntax-e$1"
" s_242)"
" s_242)))"
"(let-values(((flat-s_6)"
"(to-syntax-list.1"
" s_243)))"
"(if(not"
" flat-s_6)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_11))"
"(let-values()"
"(let-values(((id_34)"
"(let-values(((lst_137)"
" flat-s_6))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_137)))"
"((letrec-values(((for-loop_165)"
"(lambda(id_35"
" lst_138)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_138)"
"(let-values(((s_244)"
"(unsafe-car"
" lst_138))"
"((rest_69)"
"(unsafe-cdr"
" lst_138)))"
"(let-values(((id_36)"
"(let-values(((id_37)"
" id_35))"
"(let-values(((id_38)"
"(let-values()"
"(let-values(((id171_0)"
"(let-values()"
"(if(let-values(((or-part_187)"
"(if(syntax?$1"
" s_244)"
"(symbol?"
"(syntax-e$1"
" s_244))"
" #f)))"
"(if or-part_187"
" or-part_187"
"(symbol?"
" s_244)))"
" s_244"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_11"
" s_244)))))"
"(cons"
" id171_0"
" id_37)))))"
"(values"
" id_38)))))"
"(if(not"
" #f)"
"(for-loop_165"
" id_36"
" rest_69)"
" id_36)))"
" id_35)))))"
" for-loop_165)"
" null"
" lst_137)))))"
"(reverse$1"
" id_34)))))))))"
"(values"
" spec169_0"
" id170_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_11))))))"
"(values"
" all-except166_0"
" spec167_0"
" id168_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_11)))))"
"(values"
" #t"
" all-except163_1"
" spec164_1"
" id165_1))))))"
"(loop_83"
"(list"
" spec164_0)"
"(let-values(((or-part_188)"
" top-req_0))"
"(if or-part_188"
" or-part_188"
" req_0))"
" phase-shift_9"
" just-meta_0"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id165_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_24"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_10"
" prefix-all-except172_0"
" id:prefix173_0"
" spec174_0"
" id175_0)"
"(let-values(((s_245)"
" req_0))"
"(let-values(((orig-s_12)"
" s_245))"
"(let-values(((prefix-all-except172_1"
" id:prefix173_1"
" spec174_1"
" id175_1)"
"(let-values(((s_246)"
"(if(syntax?$1"
" s_245)"
"(syntax-e$1"
" s_245)"
" s_245)))"
"(if(pair?"
" s_246)"
"(let-values(((prefix-all-except176_0)"
"(let-values(((s_247)"
"(car"
" s_246)))"
" s_247))"
"((id:prefix177_0"
" spec178_0"
" id179_0)"
"(let-values(((s_248)"
"(cdr"
" s_246)))"
"(let-values(((s_249)"
"(if(syntax?$1"
" s_248)"
"(syntax-e$1"
" s_248)"
" s_248)))"
"(if(pair?"
" s_249)"
"(let-values(((id:prefix180_0)"
"(let-values(((s_250)"
"(car"
" s_249)))"
"(if(let-values(((or-part_189)"
"(if(syntax?$1"
" s_250)"
"(symbol?"
"(syntax-e$1"
" s_250))"
" #f)))"
"(if or-part_189"
" or-part_189"
"(symbol?"
" s_250)))"
" s_250"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_12"
" s_250))))"
"((spec181_0"
" id182_0)"
"(let-values(((s_251)"
"(cdr"
" s_249)))"
"(let-values(((s_252)"
"(if(syntax?$1"
" s_251)"
"(syntax-e$1"
" s_251)"
" s_251)))"
"(if(pair?"
" s_252)"
"(let-values(((spec183_0)"
"(let-values(((s_253)"
"(car"
" s_252)))"
" s_253))"
"((id184_0)"
"(let-values(((s_254)"
"(cdr"
" s_252)))"
"(let-values(((s_255)"
"(if(syntax?$1"
" s_254)"
"(syntax-e$1"
" s_254)"
" s_254)))"
"(let-values(((flat-s_7)"
"(to-syntax-list.1"
" s_255)))"
"(if(not"
" flat-s_7)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_12))"
"(let-values()"
"(let-values(((id_39)"
"(let-values(((lst_139)"
" flat-s_7))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_139)))"
"((letrec-values(((for-loop_166)"
"(lambda(id_40"
" lst_140)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_140)"
"(let-values(((s_256)"
"(unsafe-car"
" lst_140))"
"((rest_70)"
"(unsafe-cdr"
" lst_140)))"
"(let-values(((id_41)"
"(let-values(((id_42)"
" id_40))"
"(let-values(((id_43)"
"(let-values()"
"(let-values(((id185_0)"
"(let-values()"
"(if(let-values(((or-part_190)"
"(if(syntax?$1"
" s_256)"
"(symbol?"
"(syntax-e$1"
" s_256))"
" #f)))"
"(if or-part_190"
" or-part_190"
"(symbol?"
" s_256)))"
" s_256"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_12"
" s_256)))))"
"(cons"
" id185_0"
" id_42)))))"
"(values"
" id_43)))))"
"(if(not"
" #f)"
"(for-loop_166"
" id_41"
" rest_70)"
" id_41)))"
" id_40)))))"
" for-loop_166)"
" null"
" lst_139)))))"
"(reverse$1"
" id_39)))))))))"
"(values"
" spec183_0"
" id184_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_12))))))"
"(values"
" id:prefix180_0"
" spec181_0"
" id182_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_12))))))"
"(values"
" prefix-all-except176_0"
" id:prefix177_0"
" spec178_0"
" id179_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_12)))))"
"(values"
" #t"
" prefix-all-except172_1"
" id:prefix173_1"
" spec174_1"
" id175_1))))))"
"(loop_83"
"(list"
" spec174_0)"
"(let-values(((or-part_191)"
" top-req_0))"
"(if or-part_191"
" or-part_191"
" req_0))"
" phase-shift_9"
" just-meta_0"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix173_0)"
"(ids->sym-set"
" id175_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_24"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_11"
" rename186_0"
" spec187_0"
" id:to188_0"
" id:from189_0)"
"(let-values(((s_257)"
" req_0))"
"(let-values(((orig-s_13)"
" s_257))"
"(let-values(((rename186_1"
" spec187_1"
" id:to188_1"
" id:from189_1)"
"(let-values(((s_258)"
"(if(syntax?$1"
" s_257)"
"(syntax-e$1"
" s_257)"
" s_257)))"
"(if(pair?"
" s_258)"
"(let-values(((rename190_0)"
"(let-values(((s_259)"
"(car"
" s_258)))"
" s_259))"
"((spec191_0"
" id:to192_0"
" id:from193_0)"
"(let-values(((s_260)"
"(cdr"
" s_258)))"
"(let-values(((s_261)"
"(if(syntax?$1"
" s_260)"
"(syntax-e$1"
" s_260)"
" s_260)))"
"(if(pair?"
" s_261)"
"(let-values(((spec194_0)"
"(let-values(((s_262)"
"(car"
" s_261)))"
" s_262))"
"((id:to195_0"
" id:from196_0)"
"(let-values(((s_263)"
"(cdr"
" s_261)))"
"(let-values(((s_264)"
"(if(syntax?$1"
" s_263)"
"(syntax-e$1"
" s_263)"
" s_263)))"
"(if(pair?"
" s_264)"
"(let-values(((id:to197_0)"
"(let-values(((s_265)"
"(car"
" s_264)))"
"(if(let-values(((or-part_192)"
"(if(syntax?$1"
" s_265)"
"(symbol?"
"(syntax-e$1"
" s_265))"
" #f)))"
"(if or-part_192"
" or-part_192"
"(symbol?"
" s_265)))"
" s_265"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_13"
" s_265))))"
"((id:from198_0)"
"(let-values(((s_266)"
"(cdr"
" s_264)))"
"(let-values(((s_267)"
"(if(syntax?$1"
" s_266)"
"(syntax-e$1"
" s_266)"
" s_266)))"
"(if(pair?"
" s_267)"
"(let-values(((id:from199_0)"
"(let-values(((s_268)"
"(car"
" s_267)))"
"(if(let-values(((or-part_193)"
"(if(syntax?$1"
" s_268)"
"(symbol?"
"(syntax-e$1"
" s_268))"
" #f)))"
"(if or-part_193"
" or-part_193"
"(symbol?"
" s_268)))"
" s_268"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_13"
" s_268))))"
"(()"
"(let-values(((s_269)"
"(cdr"
" s_267)))"
"(let-values(((s_270)"
"(if(syntax?$1"
" s_269)"
"(syntax-e$1"
" s_269)"
" s_269)))"
"(if(null?"
" s_270)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_13))))))"
"(values"
" id:from199_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_13))))))"
"(values"
" id:to197_0"
" id:from198_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_13))))))"
"(values"
" spec194_0"
" id:to195_0"
" id:from196_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_13))))))"
"(values"
" rename190_0"
" spec191_0"
" id:to192_0"
" id:from193_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_13)))))"
"(values"
" #t"
" rename186_1"
" spec187_1"
" id:to188_1"
" id:from189_1))))))"
"(loop_83"
"(list"
" spec187_0)"
"(let-values(((or-part_194)"
" top-req_0))"
"(if or-part_194"
" or-part_194"
" req_0))"
" phase-shift_9"
" just-meta_0"
"(adjust-rename4.1"
" id:to188_0"
"(syntax-e$1"
" id:from189_0))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_0)"
"(syntax->datum$1"
" req_0)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_195)"
"(1/module-path?"
" maybe-mp_0)))"
"(if or-part_195"
" or-part_195"
"(1/resolved-module-path?"
" maybe-mp_0)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad require spec\""
" orig-s_3"
" req_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_196)"
" adjust_0))"
"(if or-part_196"
" or-part_196"
"(not"
"(eq?"
" just-meta_0"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_1"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_0)"
"(if(1/resolved-module-path?"
" maybe-mp_0)"
"(resolved-module-path->module-path"
" maybe-mp_0)"
" maybe-mp_0)))"
"(let-values(((mpi_35)"
"(let-values(((declared-submodule-names219_0)"
" declared-submodule-names_2))"
"(module-path->mpi5.1"
" declared-submodule-names219_0"
" #t"
" mp_0"
" self_10))))"
"(begin"
"(let-values(((temp203_0)"
"(let-values(((or-part_197)"
" req_0))"
"(if or-part_197"
" or-part_197"
" top-req_0)))"
"((m-ns204_0)"
" m-ns_8)"
"((phase-shift205_0)"
" phase-shift_9)"
"((run-phase206_0)"
" run-phase_5)"
"((just-meta207_0)"
" just-meta_0)"
"((adjust208_0)"
" adjust_0)"
"((requires+provides209_0)"
" requires+provides_1)"
"((run?210_0)"
" run?_1)"
"((visit?211_0)"
" visit?_1)"
"((copy-variable-phase-level212_0)"
" copy-variable-phase-level_0)"
"((copy-variable-as-constant?213_0)"
" copy-variable-as-constant?_0)"
"((skip-variable-phase-level214_0)"
" skip-variable-phase-level_0)"
"((initial-require?215_0)"
" initial-require?_0)"
"((who216_0)"
" who_12))"
"(perform-require!78.1"
" adjust208_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" copy-variable-as-constant?213_0"
" #t"
" copy-variable-phase-level212_0"
" #t"
" initial-require?215_0"
" #t"
" just-meta207_0"
" #t"
" phase-shift205_0"
" requires+provides209_0"
" #t"
" run-phase206_0"
" run?210_0"
" #t"
" skip-variable-phase-level214_0"
" #t"
" visit?211_0"
" #t"
" who216_0"
" mpi_35"
" req_0"
" self_10"
" temp203_0"
" m-ns204_0))"
"(set! initial-require?_0"
" #f)))))))))))))))))))))))))"
"(values"
" result_69)))))"
"(if(if(not"
"((lambda x_53"
"(not result_68))"
" req_0))"
"(not #f)"
" #f)"
"(for-loop_37"
" result_68"
" rest_67)"
" result_68)))"
" result_29)))))"
" for-loop_37)"
" #t"
" lst_135)))))))"
" loop_83)"
" reqs_0"
" #f"
" phase-shift_8"
" 'all"
" #f"
" #t"
" #t"
" 'raw))))))))))))))))))))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_3)"
"(begin"
"(let-values(((lst_141) ids_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_141)))"
"((letrec-values(((for-loop_167)"
"(lambda(table_128 lst_142)"
"(begin"
" 'for-loop"
"(if(pair? lst_142)"
"(let-values(((id_44)(unsafe-car lst_142))((rest_71)(unsafe-cdr lst_142)))"
"(let-values(((table_129)"
"(let-values(((table_130) table_128))"
"(let-values(((table_131)"
"(let-values()"
"(let-values(((key_52 val_45)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_44))"
" #t))))"
"(hash-set table_130 key_52 val_45)))))"
"(values table_131)))))"
"(if(not #f)(for-loop_167 table_129 rest_71) table_129)))"
" table_128)))))"
" for-loop_167)"
" '#hash()"
" lst_141))))))"
"(define-values"
"(perform-initial-require!42.1)"
"(lambda(bind?33_0 who34_0 mod-path37_0 self38_0 in-stx39_0 m-ns40_0 requires+provides41_0)"
"(begin"
" 'perform-initial-require!42"
"(let-values(((mod-path_7) mod-path37_0))"
"(let-values(((self_11) self38_0))"
"(let-values(((in-stx_0) in-stx39_0))"
"(let-values(((m-ns_9) m-ns40_0))"
"(let-values(((requires+provides_2) requires+provides41_0))"
"(let-values(((bind?_0) bind?33_0))"
"(let-values(((who_13) who34_0))"
"(let-values()"
"(let-values(((temp220_0)"
"(let-values(((mod-path232_0) mod-path_7)((self233_0) self_11))"
"(module-path->mpi5.1 #f #f mod-path232_0 self233_0)))"
"((temp221_0) #f)"
"((self222_0) self_11)"
"((in-stx223_0) in-stx_0)"
"((m-ns224_0) m-ns_9)"
"((temp225_0) 0)"
"((temp226_0) 0)"
"((requires+provides227_0) requires+provides_2)"
"((temp228_1) #t)"
"((temp229_0) #t)"
"((bind?230_0) bind?_0)"
"((who231_0) who_13))"
"(perform-require!78.1"
" #f"
" #f"
" bind?230_0"
" #t"
" temp228_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp229_0"
" #t"
" #f"
" #f"
" temp225_0"
" requires+provides227_0"
" #t"
" temp226_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" who231_0"
" temp220_0"
" temp221_0"
" self222_0"
" in-stx223_0"
" m-ns224_0)))))))))))))"
"(define-values"
"(perform-require!78.1)"
"(lambda(adjust48_0"
" adjust62_0"
" bind?57_0"
" bind?71_0"
" can-be-shadowed?52_0"
" can-be-shadowed?66_0"
" copy-variable-as-constant?55_0"
" copy-variable-as-constant?69_0"
" copy-variable-phase-level54_0"
" copy-variable-phase-level68_0"
" initial-require?53_0"
" initial-require?67_0"
" just-meta47_0"
" just-meta61_0"
" phase-shift45_0"
" requires+provides49_0"
" requires+provides63_0"
" run-phase46_0"
" run?51_0"
" run?65_0"
" skip-variable-phase-level56_0"
" skip-variable-phase-level70_0"
" visit?50_0"
" visit?64_0"
" who58_0"
" mpi73_0"
" orig-s74_0"
" self75_0"
" in-stx76_0"
" m-ns77_0)"
"(begin"
" 'perform-require!78"
"(let-values(((mpi_36) mpi73_0))"
"(let-values(((orig-s_14) orig-s74_0))"
"(let-values()"
"(let-values(((in-stx_1) in-stx76_0))"
"(let-values(((m-ns_10) m-ns77_0))"
"(let-values(((phase-shift_10) phase-shift45_0))"
"(let-values(((run-phase_6) run-phase46_0))"
"(let-values(((just-meta_1)(if just-meta61_0 just-meta47_0 'all)))"
"(let-values(((adjust_1)(if adjust62_0 adjust48_0 #f)))"
"(let-values(((requires+provides_3)(if requires+provides63_0 requires+provides49_0 #f)))"
"(let-values(((visit?_2)(if visit?64_0 visit?50_0 #t)))"
"(let-values(((run?_2)(if run?65_0 run?51_0 #f)))"
"(let-values(((can-be-shadowed?_3)(if can-be-shadowed?66_0 can-be-shadowed?52_0 #f)))"
"(let-values(((initial-require?_1)(if initial-require?67_0 initial-require?53_0 #f)))"
"(let-values(((copy-variable-phase-level_1)"
"(if copy-variable-phase-level68_0 copy-variable-phase-level54_0 #f)))"
"(let-values(((copy-variable-as-constant?_1)"
"(if copy-variable-as-constant?69_0"
" copy-variable-as-constant?55_0"
" #f)))"
"(let-values(((skip-variable-phase-level_1)"
"(if skip-variable-phase-level70_0"
" skip-variable-phase-level56_0"
" #f)))"
"(let-values(((bind?_1)(if bind?71_0 bind?57_0 #t)))"
"(let-values(((who_14) who58_0))"
"(let-values()"
"(let-values()"
"(let-values(((module-name_0)(1/module-path-index-resolve mpi_36 #t)))"
"(let-values(((bind-in-stx_0)"
"(if(adjust-rename? adjust_1)"
"(adjust-rename-to-id adjust_1)"
" in-stx_1)))"
"(let-values(((done-syms_0)(if adjust_1(make-hash) #f)))"
"(let-values(((m_13)(namespace->module m-ns_10 module-name_0)))"
"(let-values((()"
"(begin"
"(if m_13"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'require"
" module-name_0)))"
"(values))))"
"(let-values(((interned-mpi_0)"
"(if requires+provides_3"
"(add-required-module!"
" requires+provides_3"
" mpi_36"
" phase-shift_10"
"(module-cross-phase-persistent? m_13))"
" mpi_36)))"
"(let-values((()"
"(begin"
"(if visit?_2"
"(let-values()"
"(let-values(((run-phase252_0)"
" run-phase_6))"
"(namespace-module-visit!104.1"
" run-phase252_0"
" #t"
" m-ns_10"
" interned-mpi_0"
" phase-shift_10)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_2"
"(let-values()"
"(let-values(((run-phase256_0)"
" run-phase_6))"
"(namespace-module-instantiate!96.1"
" #f"
" #f"
" run-phase256_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" m-ns_10"
" interned-mpi_0"
" phase-shift_10)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_198)"
" visit?_2))"
"(if or-part_198"
" or-part_198"
" run?_2)))"
"(let-values()"
"(let-values(((run-phase260_0)"
" run-phase_6))"
"(namespace-module-make-available!112.1"
" run-phase260_0"
" #t"
" m-ns_10"
" interned-mpi_0"
" phase-shift_10)))"
"(void))"
"(values))))"
"(let-values(((can-bulk-bind?_0)"
"(if(let-values(((or-part_199)"
"(not adjust_1)))"
"(if or-part_199"
" or-part_199"
"(let-values(((or-part_200)"
"(adjust-prefix?"
" adjust_1)))"
"(if or-part_200"
" or-part_200"
"(adjust-all-except?"
" adjust_1)))))"
"(not skip-variable-phase-level_1)"
" #f)))"
"(let-values(((bulk-prefix_1)"
"(if(adjust-prefix? adjust_1)"
"(let-values()"
"(adjust-prefix-sym adjust_1))"
"(if(adjust-all-except? adjust_1)"
"(let-values()"
"(adjust-all-except-prefix-sym"
" adjust_1))"
"(let-values() #f)))))"
"(let-values(((bulk-excepts_1)"
"(if(adjust-all-except? adjust_1)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_1))"
"(let-values() '#hasheq()))))"
"(let-values(((update-nominals-box_0)"
"(if can-bulk-bind?_0"
"(box null)"
" #f)))"
"(let-values((()"
"(begin"
"(let-values(((orig-s240_0)"
" orig-s_14)"
"((temp241_0)"
"(if(adjust-only?"
" adjust_1)"
"(let-values()"
"(set->list"
"(adjust-only-syms"
" adjust_1)))"
"(if(adjust-rename?"
" adjust_1)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_1)))"
"(let-values()"
" #f))))"
"((just-meta242_0)"
" just-meta_1)"
"((bind?243_0)"
" bind?_1)"
"((can-bulk-bind?244_0)"
" can-bulk-bind?_0)"
"((bulk-prefix245_0)"
" bulk-prefix_1)"
"((bulk-excepts246_0)"
" bulk-excepts_1)"
"((temp247_0)"
"(if requires+provides_3"
"(if can-bulk-bind?_0"
"(lambda(provides_6"
" provide-phase-level_4)"
"(begin"
" 'temp247"
"(let-values(((temp263_0)"
"(module-self"
" m_13))"
"((mpi264_0)"
" mpi_36)"
"((phase-shift265_0)"
" phase-shift_10)"
"((provides266_0)"
" provides_6)"
"((provide-phase-level267_0)"
" provide-phase-level_4)"
"((bulk-prefix268_0)"
" bulk-prefix_1)"
"((bulk-excepts269_0)"
" bulk-excepts_1)"
"((temp270_0)"
"(if(positive?"
"(hash-count"
" bulk-excepts_1))"
" done-syms_0"
" #f))"
"((can-be-shadowed?271_0)"
" can-be-shadowed?_3)"
"((temp272_0)"
"(not"
" initial-require?_1))"
"((orig-s273_0)"
" orig-s_14)"
"((update-nominals-box274_0)"
" update-nominals-box_0)"
"((who275_0)"
" who_14))"
"(add-bulk-required-ids!59.1"
" update-nominals-box274_0"
" can-be-shadowed?271_0"
" temp272_0"
" bulk-excepts269_0"
" orig-s273_0"
" bulk-prefix268_0"
" temp270_0"
" who275_0"
" requires+provides_3"
" bind-in-stx_0"
" temp263_0"
" mpi264_0"
" phase-shift265_0"
" provides266_0"
" provide-phase-level267_0))))"
" #f)"
" #f))"
"((temp248_0)"
"(if(let-values(((or-part_201)"
"(not"
" can-bulk-bind?_0)))"
"(if or-part_201"
" or-part_201"
" copy-variable-phase-level_1))"
"(lambda(binding_17"
" as-transformer?_3)"
"(begin"
" 'temp248"
"(let-values(((sym_42)"
"(module-binding-nominal-sym"
" binding_17)))"
"(let-values(((provide-phase_0)"
"(module-binding-nominal-phase"
" binding_17)))"
"(let-values(((adjusted-sym_0)"
"(if(if skip-variable-phase-level_1"
"(if(not"
" as-transformer?_3)"
"(equal?"
" provide-phase_0"
" skip-variable-phase-level_1)"
" #f)"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_1)"
"(let-values()"
" sym_42)"
"(if(adjust-only?"
" adjust_1)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_1)"
" sym_42)"
"(if(hash-set!"
" done-syms_0"
" sym_42"
" #t)"
" sym_42"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_1)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                            \"~a~a\""
"(adjust-prefix-sym"
" adjust_1)"
" sym_42)))"
"(if(adjust-all-except?"
" adjust_1)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_1)"
" sym_42)"
"(hash-set!"
" done-syms_0"
" sym_42"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                                                \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_1)"
" sym_42))"
" #f))"
"(if(adjust-rename?"
" adjust_1)"
"(let-values()"
"(if(eq?"
" sym_42"
"(adjust-rename-from-sym"
" adjust_1))"
"(if(hash-set!"
" done-syms_0"
" sym_42"
" #t)"
"(adjust-rename-to-id"
" adjust_1)"
" #f)"
" #f))"
"(void)))))))))"
"(begin"
"(if(if adjusted-sym_0"
" requires+provides_3"
" #f)"
"(let-values()"
"(let-values(((s_271)"
"(datum->syntax$1"
" bind-in-stx_0"
" adjusted-sym_0)))"
"(let-values(((bind-phase_0)"
"(phase+"
" phase-shift_10"
" provide-phase_0)))"
"(begin"
"(if initial-require?_1"
"(void)"
"(let-values()"
"(let-values(((temp282_0)"
" #t)"
"((requires+provides283_0)"
" requires+provides_3)"
"((s284_0)"
" s_271)"
"((bind-phase285_0)"
" bind-phase_0)"
"((binding286_0)"
" binding_17)"
"((orig-s287_0)"
" orig-s_14)"
"((temp288_0)"
" #t)"
"((who289_0)"
" who_14))"
"(check-not-defined93.1"
" #f"
" #f"
" temp282_0"
" #t"
" orig-s287_0"
" temp288_0"
" #t"
" binding286_0"
" #t"
" who289_0"
" requires+provides283_0"
" s284_0"
" bind-phase285_0))))"
"(let-values(((can-be-shadowed?280_0)"
" can-be-shadowed?_3)"
"((as-transformer?281_0)"
" as-transformer?_3))"
"(add-defined-or-required-id!19.1"
" as-transformer?281_0"
" can-be-shadowed?280_0"
" #t"
" requires+provides_3"
" s_271"
" bind-phase_0"
" binding_17))))))"
"(void))"
"(if(if adjusted-sym_0"
"(if copy-variable-phase-level_1"
"(if(not"
" as-transformer?_3)"
"(equal?"
" provide-phase_0"
" copy-variable-phase-level_1)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(copy-namespace-value"
" m-ns_10"
" adjusted-sym_0"
" binding_17"
" copy-variable-phase-level_1"
" phase-shift_10"
" copy-variable-as-constant?_1))"
"(void))"
" adjusted-sym_0))))))"
" #f)))"
"(bind-all-provides!105.1"
" bind?243_0"
" temp247_0"
" bulk-excepts246_0"
" bulk-prefix245_0"
" can-bulk-bind?244_0"
" temp248_0"
" orig-s240_0"
" just-meta242_0"
" temp241_0"
" m_13"
" bind-in-stx_0"
" phase-shift_10"
" m-ns_10"
" interned-mpi_0"
" module-name_0))"
"(values))))"
"(let-values((()"
"(begin"
"(if update-nominals-box_0"
"(let-values()"
"(begin"
"(let-values(((lst_143)"
"(unbox"
" update-nominals-box_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_143)))"
"((letrec-values(((for-loop_168)"
"(lambda(lst_144)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_144)"
"(let-values(((update!_1)"
"(unsafe-car"
" lst_144))"
"((rest_72)"
"(unsafe-cdr"
" lst_144)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(update!_1))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_168"
" rest_72)"
"(values))))"
"(values))))))"
" for-loop_168)"
" lst_143)))"
"(void)))"
"(void))"
"(values))))"
"(let-values(((need-syms_0)"
"(if(adjust-only? adjust_1)"
"(let-values()"
"(adjust-only-syms"
" adjust_1))"
"(if(adjust-all-except?"
" adjust_1)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_1))"
"(if(adjust-rename?"
" adjust_1)"
"(let-values()"
"(set"
"(adjust-rename-from-sym"
" adjust_1)))"
"(let-values()"
" #f))))))"
"(if(if need-syms_0"
"(not"
"(="
"(set-count need-syms_0)"
"(hash-count done-syms_0)))"
" #f)"
"(let-values()"
"(begin"
"(let-values(((ht_93)"
" need-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys"
" ht_93)))"
"((letrec-values(((for-loop_145)"
"(lambda(i_123)"
"(begin"
" 'for-loop"
"(if i_123"
"(let-values(((sym_43)"
"(unsafe-immutable-hash-iterate-key"
" ht_93"
" i_123)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_0"
" sym_43"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" who_14"
"                                                                                                                                                             \"not in nested spec\""
" orig-s_14"
" sym_43))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_145"
"(unsafe-immutable-hash-iterate-next"
" ht_93"
" i_123))"
"(values))))"
"(values))))))"
" for-loop_145)"
"(unsafe-immutable-hash-iterate-first"
" ht_93))))"
"(void)))"
"(void))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(bind-all-provides!105.1)"
"(lambda(bind?84_0"
" bulk-callback89_0"
" bulk-excepts87_0"
" bulk-prefix86_0"
" can-bulk?85_0"
" filter88_0"
" in81_0"
" just-meta83_0"
" only82_0"
" m99_0"
" in-stx100_0"
" phase-shift101_0"
" ns102_0"
" mpi103_0"
" module-name104_0)"
"(begin"
" 'bind-all-provides!105"
"(let-values(((m_14) m99_0))"
"(let-values(((in-stx_2) in-stx100_0))"
"(let-values(((phase-shift_11) phase-shift101_0))"
"(let-values(((ns_48) ns102_0))"
"(let-values(((mpi_37) mpi103_0))"
"(let-values(((module-name_1) module-name104_0))"
"(let-values(((orig-s_15) in81_0))"
"(let-values(((only-syms_0) only82_0))"
"(let-values(((just-meta_2) just-meta83_0))"
"(let-values(((bind?_2) bind?84_0))"
"(let-values(((can-bulk?_0) can-bulk?85_0))"
"(let-values(((bulk-prefix_2) bulk-prefix86_0))"
"(let-values(((bulk-excepts_2) bulk-excepts87_0))"
"(let-values(((filter_0) filter88_0))"
"(let-values(((bulk-callback_0) bulk-callback89_0))"
"(let-values()"
"(let-values(((self_12)(module-self m_14)))"
"(begin"
"(let-values(((ht_101)(module-provides m_14)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_101)))"
"((letrec-values(((for-loop_169)"
"(lambda(i_133)"
"(begin"
" 'for-loop"
"(if i_133"
"(let-values(((provide-phase-level_5 provides_7)"
"(hash-iterate-key+value"
" ht_101"
" i_133)))"
"(let-values((()"
"(let-values()"
"(if(let-values(((or-part_202)"
"(eq?"
" just-meta_2"
" 'all)))"
"(if or-part_202"
" or-part_202"
"(eqv?"
" just-meta_2"
" provide-phase-level_5)))"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_65)"
"(phase+"
" phase-shift_11"
" provide-phase-level_5)))"
"(begin"
"(if bulk-callback_0"
"(let-values()"
"(bulk-callback_0"
" provides_7"
" provide-phase-level_5))"
"(void))"
"(if bind?_2"
"(let-values()"
"(begin"
"(if filter_0"
"(let-values()"
"(begin"
"(let-values(((lst_145)"
"(let-values(((or-part_203)"
" only-syms_0))"
"(if or-part_203"
" or-part_203"
"(hash-keys"
" provides_7)))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_145)))"
"((letrec-values(((for-loop_170)"
"(lambda(lst_146)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_146)"
"(let-values(((sym_44)"
"(unsafe-car"
" lst_146))"
"((rest_73)"
"(unsafe-cdr"
" lst_146)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_4)"
"(hash-ref"
" provides_7"
" sym_44"
" #f)))"
"(if binding/p_4"
"(let-values()"
"(let-values(((b_69)"
"(let-values(((self292_0)"
" self_12)"
"((mpi293_0)"
" mpi_37)"
"((provide-phase-level294_0)"
" provide-phase-level_5)"
"((phase-shift295_0)"
" phase-shift_11))"
"(provide-binding-to-require-binding11.1"
" mpi293_0"
" phase-shift295_0"
" provide-phase-level294_0"
" self292_0"
" binding/p_4"
" sym_44))))"
"(let-values(((sym_45)"
"(filter_0"
" b_69"
"(provided-as-transformer?"
" binding/p_4))))"
"(if(if sym_45"
"(not"
" can-bulk?_0)"
" #f)"
"(let-values()"
"(let-values(((temp296_0)"
"(datum->syntax$1"
" in-stx_2"
" sym_45))"
"((b297_0)"
" b_69)"
"((phase298_0)"
" phase_65))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" temp296_0"
" b297_0"
" phase298_0)))"
"(void)))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_170"
" rest_73)"
"(values))))"
"(values))))))"
" for-loop_170)"
" lst_145)))"
"(void)))"
"(void))"
"(if can-bulk?_0"
"(let-values()"
"(let-values(((bulk-binding-registry_10)"
"(namespace-bulk-binding-registry"
" ns_48)))"
"(let-values(((temp300_0)"
"(bulk-binding14.1"
"(let-values(((or-part_204)"
"(if(not"
" bulk-prefix_2)"
"(if(zero?"
"(hash-count"
" bulk-excepts_2))"
" provides_7"
" #f)"
" #f)))"
"(if or-part_204"
" or-part_204"
"(if(not"
"(registered-bulk-provide?"
" bulk-binding-registry_10"
" module-name_1))"
"(bulk-provides-add-prefix-remove-exceptions"
" provides_7"
" bulk-prefix_2"
" bulk-excepts_2)"
" #f)))"
" bulk-prefix_2"
" bulk-excepts_2"
" self_12"
" mpi_37"
" provide-phase-level_5"
" phase-shift_11"
" bulk-binding-registry_10))"
"((phase301_0)"
" phase_65)"
"((orig-s302_0)"
" orig-s_15))"
"(add-bulk-binding!25.1"
" orig-s302_0"
" #t"
" in-stx_2"
" temp300_0"
" phase301_0))))"
"(void))))"
"(void)))))"
"(values)))))"
"(values)))"
"(values)))))"
"(if(not #f)"
"(for-loop_169"
"(hash-iterate-next ht_101 i_133))"
"(values))))"
"(values))))))"
" for-loop_169)"
"(hash-iterate-first ht_101))))"
"(void))))))))))))))))))))))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_1)"
"(begin"
"(let-values(((rebuild-req_0)"
"(lambda(req_2 new-req_0)(begin 'rebuild-req(datum->syntax$1 req_2 new-req_0 req_2 req_2)))))"
"(letrec-values(((loop_84)"
"(lambda(shifted?_0)"
"(begin"
" 'loop"
"(lambda(req_3)"
"(let-values(((fm_1)"
"(if(pair?(syntax-e$1 req_3))"
"(if(identifier?(car(syntax-e$1 req_3)))"
"(syntax-e$1(car(syntax-e$1 req_3)))"
" #f)"
" #f)))"
"(let-values(((tmp_25) fm_1))"
"(if(equal? tmp_25 'for-meta)"
"(let-values()"
"(let-values(((ok?_12 for-meta303_0 phase-level304_0 spec305_0)"
"(let-values(((s_272) req_3))"
"(let-values(((orig-s_16) s_272))"
"(let-values(((for-meta303_1 phase-level304_1 spec305_1)"
"(let-values(((s_273)"
"(if(syntax?$1 s_272)"
"(syntax-e$1 s_272)"
" s_272)))"
"(if(pair? s_273)"
"(let-values(((for-meta306_0)"
"(let-values(((s_274)"
"(car s_273)))"
" s_274))"
"((phase-level307_0 spec308_0)"
"(let-values(((s_275)"
"(cdr s_273)))"
"(let-values(((s_276)"
"(if(syntax?$1"
" s_275)"
"(syntax-e$1"
" s_275)"
" s_275)))"
"(if(pair? s_276)"
"(let-values(((phase-level309_0)"
"(let-values(((s_277)"
"(car"
" s_276)))"
" s_277))"
"((spec310_0)"
"(let-values(((s_278)"
"(cdr"
" s_276)))"
"(let-values(((s_279)"
"(if(syntax?$1"
" s_278)"
"(syntax-e$1"
" s_278)"
" s_278)))"
"(let-values(((flat-s_8)"
"(to-syntax-list.1"
" s_279)))"
"(if(not"
" flat-s_8)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_16))"
"(let-values()"
" flat-s_8)))))))"
"(values"
" phase-level309_0"
" spec310_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_16))))))"
"(values"
" for-meta306_0"
" phase-level307_0"
" spec308_0))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_16)))))"
"(values #t for-meta303_1 phase-level304_1 spec305_1))))))"
"(let-values(((p_33)(syntax-e$1 phase-level304_0)))"
"(begin"
"(if(phase? p_33)"
"(void)"
"                                               (let-values () (raise-syntax-error$1 #f \"bad phase\" req_3)))"
"(rebuild-req_0"
" req_3"
"(list* for-meta303_0(phase+ p_33 1)(map2(loop_84 #t) spec305_0)))))))"
"(if(equal? tmp_25 'for-syntax)"
"(let-values()"
"(let-values(((ok?_13 for-syntax311_0 spec312_0)"
"(let-values(((s_280) req_3))"
"(let-values(((orig-s_17) s_280))"
"(let-values(((for-syntax311_1 spec312_1)"
"(let-values(((s_281)"
"(if(syntax?$1 s_280)"
"(syntax-e$1 s_280)"
" s_280)))"
"(if(pair? s_281)"
"(let-values(((for-syntax313_0)"
"(let-values(((s_282)"
"(car s_281)))"
" s_282))"
"((spec314_0)"
"(let-values(((s_283)"
"(cdr s_281)))"
"(let-values(((s_284)"
"(if(syntax?$1"
" s_283)"
"(syntax-e$1"
" s_283)"
" s_283)))"
"(let-values(((flat-s_9)"
"(to-syntax-list.1"
" s_284)))"
"(if(not flat-s_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_17))"
"(let-values()"
" flat-s_9)))))))"
"(values for-syntax313_0 spec314_0))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_17)))))"
"(values #t for-syntax311_1 spec312_1))))))"
"(rebuild-req_0 req_3(list* 'for-meta 2(map2(loop_84 #t) spec312_0)))))"
"(if(equal? tmp_25 'for-template)"
"(let-values()"
"(let-values(((ok?_14 for-template315_0 spec316_0)"
"(let-values(((s_285) req_3))"
"(let-values(((orig-s_18) s_285))"
"(let-values(((for-template315_1 spec316_1)"
"(let-values(((s_286)"
"(if(syntax?$1 s_285)"
"(syntax-e$1 s_285)"
" s_285)))"
"(if(pair? s_286)"
"(let-values(((for-template317_0)"
"(let-values(((s_287)"
"(car s_286)))"
" s_287))"
"((spec318_0)"
"(let-values(((s_288)"
"(cdr s_286)))"
"(let-values(((s_289)"
"(if(syntax?$1"
" s_288)"
"(syntax-e$1"
" s_288)"
" s_288)))"
"(let-values(((flat-s_10)"
"(to-syntax-list.1"
" s_289)))"
"(if(not flat-s_10)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_18))"
"(let-values()"
" flat-s_10)))))))"
"(values for-template317_0 spec318_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_18)))))"
"(values #t for-template315_1 spec316_1))))))"
"(rebuild-req_0 req_3(list* 'for-meta 0(map2(loop_84 #t) spec316_0)))))"
"(if(equal? tmp_25 'for-label)"
"(let-values()"
"(let-values(((ok?_15 for-label319_0 spec320_0)"
"(let-values(((s_290) req_3))"
"(let-values(((orig-s_19) s_290))"
"(let-values(((for-label319_1 spec320_1)"
"(let-values(((s_291)"
"(if(syntax?$1 s_290)"
"(syntax-e$1 s_290)"
" s_290)))"
"(if(pair? s_291)"
"(let-values(((for-label321_0)"
"(let-values(((s_292)"
"(car"
" s_291)))"
" s_292))"
"((spec322_0)"
"(let-values(((s_293)"
"(cdr"
" s_291)))"
"(let-values(((s_294)"
"(if(syntax?$1"
" s_293)"
"(syntax-e$1"
" s_293)"
" s_293)))"
"(let-values(((flat-s_11)"
"(to-syntax-list.1"
" s_294)))"
"(if(not flat-s_11)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_19))"
"(let-values()"
" flat-s_11)))))))"
"(values for-label321_0 spec322_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                  \"bad syntax\""
" orig-s_19)))))"
"(values #t for-label319_1 spec320_1))))))"
"(rebuild-req_0"
" req_3"
"(list* for-label319_0(map2(loop_84 #t) spec320_0)))))"
"(if(equal? tmp_25 'just-meta)"
"(let-values()"
"(let-values(((ok?_16 just-meta323_0 phase-level324_0 spec325_0)"
"(let-values(((s_295) req_3))"
"(let-values(((orig-s_20) s_295))"
"(let-values(((just-meta323_1"
" phase-level324_1"
" spec325_1)"
"(let-values(((s_296)"
"(if(syntax?$1 s_295)"
"(syntax-e$1 s_295)"
" s_295)))"
"(if(pair? s_296)"
"(let-values(((just-meta326_0)"
"(let-values(((s_297)"
"(car"
" s_296)))"
" s_297))"
"((phase-level327_0"
" spec328_0)"
"(let-values(((s_298)"
"(cdr"
" s_296)))"
"(let-values(((s_299)"
"(if(syntax?$1"
" s_298)"
"(syntax-e$1"
" s_298)"
" s_298)))"
"(if(pair? s_299)"
"(let-values(((phase-level329_0)"
"(let-values(((s_300)"
"(car"
" s_299)))"
" s_300))"
"((spec330_0)"
"(let-values(((s_301)"
"(cdr"
" s_299)))"
"(let-values(((s_302)"
"(if(syntax?$1"
" s_301)"
"(syntax-e$1"
" s_301)"
" s_301)))"
"(let-values(((flat-s_12)"
"(to-syntax-list.1"
" s_302)))"
"(if(not"
" flat-s_12)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_20))"
"(let-values()"
" flat-s_12)))))))"
"(values"
" phase-level329_0"
" spec330_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_20))))))"
"(values"
" just-meta326_0"
" phase-level327_0"
" spec328_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                    \"bad syntax\""
" orig-s_20)))))"
"(values"
" #t"
" just-meta323_1"
" phase-level324_1"
" spec325_1))))))"
"(rebuild-req_0"
" req_3"
"(list*"
" just-meta323_0"
" phase-level324_0"
"(map2(loop_84 #f) spec325_0)))))"
"(let-values()"
"(if shifted?_0"
" req_3"
"(datum->syntax$1 #f(list 'for-syntax req_3))))))))))))))))"
"((loop_84 #f) req_1))))))"
"(define-values"
"(copy-namespace-value)"
"(lambda(m-ns_11 adjusted-sym_1 binding_18 phase-level_15 phase-shift_12 as-constant?_1)"
"(begin"
"(let-values(((i-ns_0)"
"(let-values(((temp332_0)(1/module-path-index-resolve(module-binding-module binding_18)))"
"((temp333_0)(phase-(module-binding-phase binding_18) phase-level_15))"
"((temp334_0) #t))"
"(namespace->module-namespace82.1 #f #f temp334_0 #t #f #f m-ns_11 temp332_0 temp333_0))))"
"(let-values(((val_46)"
"(namespace-get-variable"
" i-ns_0"
"(module-binding-phase binding_18)"
"(module-binding-sym binding_18)"
"(lambda()"
"(error"
" 'namespace-require/copy"
"(format"
"(string-append"
"                            \"namespace mismatch;\\n\""
"                            \" variable not found\\n\""
"                            \"  module: ~a\\n\""
"                            \"  variable name: ~s\\n\""
"                            \"  phase level: ~s\")"
"(module-binding-module binding_18)"
"(module-binding-sym binding_18)"
"(module-binding-phase binding_18)))))))"
"(namespace-set-variable!"
" m-ns_11"
"(phase+ phase-shift_12 phase-level_15)"
" adjusted-sym_1"
" val_46"
" as-constant?_1))))))"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" 'constant"
" top-level-bind!-id"
"(lambda(id_22 mpi_38 orig-phase_0 phase-shift_13 ns_49 sym_46 trans?_0 trans-val_0)"
"(let-values(((phase_42)(phase+ orig-phase_0 phase-shift_13)))"
"(let-values(((b_70)"
"(let-values(((temp7_0)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_49))))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" temp7_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi_38"
" phase_42"
" sym_46))))"
"(begin"
"(let-values(((id1_2) id_22)((b2_4) b_70)((phase3_1) phase_42))"
"(add-binding!17.1 #f #f #f #f id1_2 b2_4 phase3_1))"
"(if trans?_0"
"(let-values()(if trans-val_0(let-values()(maybe-install-free=id! trans-val_0 id_22 phase_42))(void)))"
"(let-values()(namespace-unset-transformer! ns_49 phase_42 sym_46)))))))"
" top-level-require!-id"
"(lambda(stx_11 ns_50)"
"(let-values(((reqs_2)(cdr(syntax->list$1 stx_11))))"
"(let-values(((temp8_1) #t)"
"((temp9_1) #f)"
"((reqs10_0) reqs_2)"
"((temp11_1) #f)"
"((ns12_0) ns_50)"
"((temp13_0)(namespace-phase ns_50))"
"((temp14_2)(let-values(((temp17_0) #f))(make-requires+provides8.1 #f #f temp17_0)))"
"((temp15_2) 'require)"
"((temp16_3) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp16_3"
" #t"
" #f"
" #f"
" temp8_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp9_1"
" #t"
" temp15_2"
" reqs10_0"
" temp11_1"
" ns12_0"
" temp13_0"
" temp14_2))))))"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-original-self"
" compiled-in-memory-requires"
" compiled-in-memory-provides"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literals"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys"
" compiled-in-memory-namespace-scopes"
" compiled-in-memory-purely-functional?)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 13"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_0 port_10 mode_11)(write(compiled-in-memory-linklet-directory cim_0) port_10))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12)"
" #f"
" 'compiled-in-memory)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'linklet-directory)"
"(make-struct-field-accessor -ref_0 1 'original-self)"
"(make-struct-field-accessor -ref_0 2 'requires)"
"(make-struct-field-accessor -ref_0 3 'provides)"
"(make-struct-field-accessor -ref_0 4 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_0 5 'compile-time-inspector)"
"(make-struct-field-accessor -ref_0 6 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_0 7 'mpis)"
"(make-struct-field-accessor -ref_0 8 'syntax-literals)"
"(make-struct-field-accessor -ref_0 9 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_0 10 'post-compiled-in-memorys)"
"(make-struct-field-accessor -ref_0 11 'namespace-scopes)"
"(make-struct-field-accessor -ref_0 12 'purely-functional?))))"
"(define-values"
"(struct:namespace-scopes namespace-scopes1.1 namespace-scopes? namespace-scopes-post namespace-scopes-other)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'namespace-scopes #f 2 0 #f null 'prefab #f '(0 1) #f 'namespace-scopes)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'post)"
"(make-struct-field-accessor -ref_0 1 'other))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_303 original-scopes-s_0 new-ns_0)"
"(begin"
"(let-values(((old-scs-post_0 old-scs-other_0)"
"(if(namespace-scopes? original-scopes-s_0)"
"(values(namespace-scopes-post original-scopes-s_0)(namespace-scopes-other original-scopes-s_0))"
"(decode-namespace-scopes original-scopes-s_0))))"
"(let-values(((new-scs-post_0 new-scs-other_0)(extract-namespace-scopes/values new-ns_0)))"
"(syntax-swap-scopes"
"(syntax-swap-scopes s_303 old-scs-post_0 new-scs-post_0)"
" old-scs-other_0"
" new-scs-other_0))))))"
"(define-values"
"(extract-namespace-scopes/values)"
"(lambda(ns_44)"
"(begin"
"(let-values(((root-ctx_3)(namespace-get-root-expand-ctx ns_44)))"
"(let-values(((post-expansion-sc_0)(root-expand-context-post-expansion-scope root-ctx_3)))"
"(values"
"(seteq post-expansion-sc_0)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_3)) post-expansion-sc_0)))))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_51)"
"(begin"
"(let-values(((scs-post_0 scs-other_0)(extract-namespace-scopes/values ns_51)))"
"(namespace-scopes1.1 scs-post_0 scs-other_0)))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_52)"
"(begin"
"(let-values(((post-expansion-scs_0 other-scs_0)(extract-namespace-scopes/values ns_52)))"
"(let-values(((post-expansion-s_0)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_0))))"
"(let-values(((other-s_0)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_0))))"
"(datum->syntax$1 #f(vector post-expansion-s_0 other-s_0))))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_12)"
"(begin"
"(let-values(((vec_49)(syntax-e$1 stx_12)))"
"(values(syntax-scope-set(vector-ref vec_49 0) 0)(syntax-scope-set(vector-ref vec_49 1) 0))))))"
"(define-values"
"(namespace-scopes=?)"
"(lambda(nss1_0 nss2_0)"
"(begin"
"(if(set=?(namespace-scopes-post nss1_0)(namespace-scopes-post nss2_0))"
"(set=?(namespace-scopes-other nss1_0)(namespace-scopes-other nss2_0))"
" #f))))"
"(define-values"
"(struct:syntax-literals"
" syntax-literals1.1"
" syntax-literals?"
" syntax-literals-stxes"
" syntax-literals-count"
" set-syntax-literals-stxes!"
" set-syntax-literals-count!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax-literals"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'syntax-literals)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'stxes)"
"(make-struct-field-accessor -ref_0 1 'count)"
"(make-struct-field-mutator -set!_0 0 'stxes)"
"(make-struct-field-mutator -set!_0 1 'count))))"
"(define-values"
"(struct:header"
" header2.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!)"
"(let-values(((struct:_62 make-_62 ?_62 -ref_62 -set!_62)"
"(let-values()"
"(let-values()"
"(make-struct-type 'header #f 8 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))))"
"(values"
" struct:_62"
" make-_62"
" ?_62"
"(make-struct-field-accessor -ref_62 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_62 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_62 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_62 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_62 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_62 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_62 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_62 7 'syntax-literals)"
"(make-struct-field-mutator -set!_62 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_62 5 'require-vars-in-order))))"
"(define-values"
"(struct:variable-use variable-use3.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_63 make-_63 ?_63 -ref_63 -set!_63)"
"(let-values()"
"(let-values()(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))))"
"(values"
" struct:_63"
" make-_63"
" ?_63"
"(make-struct-field-accessor -ref_63 0 'module-use)"
"(make-struct-field-accessor -ref_63 1 'sym))))"
"(define-values(make-syntax-literals)(lambda()(begin(syntax-literals1.1 null 0))))"
"(define-values"
"(make-header)"
"(lambda(mpis_11 syntax-literals_0)"
"(begin"
"(header2.1 mpis_11(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq) syntax-literals_0))))"
"(define-values(make-variable-uses)(lambda()(begin(make-hash))))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header-or-literals_0 q_0)"
"(begin"
"(let-values(((sl_0)"
"(if(header? header-or-literals_0)"
"(header-syntax-literals header-or-literals_0)"
" header-or-literals_0)))"
"(let-values(((pos_83)(syntax-literals-count sl_0)))"
"(begin"
"(set-syntax-literals-count! sl_0(add1 pos_83))"
"(set-syntax-literals-stxes! sl_0(cons q_0(syntax-literals-stxes sl_0)))"
" pos_83))))))"
"(define-values"
"(add-syntax-literals!)"
"(lambda(sl_1 vec_50)"
"(begin"
"(let-values(((pos_84)(syntax-literals-count sl_1)))"
"(begin"
"(let-values(((vec_51 len_27)"
"(let-values(((vec_52) vec_50))"
"(begin(check-vector vec_52)(values vec_52(unsafe-vector-length vec_52))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_171)"
"(lambda(pos_85)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_85 len_27)"
"(let-values(((e_12)(unsafe-vector-ref vec_51 pos_85)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(add-syntax-literal! sl_1 e_12))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_171(unsafe-fx+ 1 pos_85))(values))))"
"(values))))))"
" for-loop_171)"
" 0)))"
"(void)"
"(cons pos_84(vector-length vec_50)))))))"
"(define-values(syntax-literals-empty?)(lambda(sl_2)(begin(null?(syntax-literals-stxes sl_2)))))"
"(define-values"
"(generate-lazy-syntax-literals!9.1)"
"(lambda(skip-deserialize?4_0 skip-deserialize?5_0 sl6_0 mpis7_0 self8_0)"
"(begin"
" 'generate-lazy-syntax-literals!9"
"(let-values(((sl_3) sl6_0))"
"(let-values(((mpis_12) mpis7_0))"
"(let-values(((self_13) self8_0))"
"(let-values(((skip-deserialize?_0)(if skip-deserialize?5_0 skip-deserialize?4_0 #f)))"
"(let-values()"
"(list"
"(list 'define-values(list syntax-literals-id)(list* 'make-vector(syntax-literals-count sl_3) '(#f)))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(pos)"
"(list"
" 'let-values"
"(list(list '(ready-stx)(list* unsafe-vector-ref-id syntax-literals-id '(pos))))"
"(list"
" 'if"
" 'ready-stx"
" 'ready-stx"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_0"
" null"
"(list"
"(list"
" 'if"
"(list* unsafe-vector-ref-id deserialized-syntax-vector-id '(0))"
" '(void)"
"(list deserialize-syntax-id bulk-binding-registry-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* unsafe-vector-ref-id deserialized-syntax-vector-id '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_12 self_13)"
" self-id"
" inspector-id)))"
"(list"
" 'begin"
"(list* 'vector-cas! syntax-literals-id '(pos #f stx))"
"(list* unsafe-vector-ref-id syntax-literals-id '(pos))))))))))))))))))))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(sl_4 mpis_4)"
"(begin"
"(if(syntax-literals-empty? sl_4)"
"(let-values()(list(list* 'define-values(list deserialize-syntax-id) '(#f))))"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
"(list bulk-binding-registry-id)"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(list"
" 'let-values"
"(list(list*(list inspector-id) '(#f)))"
"(let-values(((temp25_1)"
"(vector->immutable-vector(list->vector(reverse$1(syntax-literals-stxes sl_4)))))"
"((mpis26_0) mpis_4))"
"(generate-deserialize6.1 #f #f temp25_1 mpis26_0))))"
"(list* 'set! deserialize-syntax-id '(#f)))))))))))"
"(define-values(generate-lazy-syntax-literal-lookup)(lambda(pos_86)(begin(list get-syntax-literal!-id pos_86))))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(sl_5 mpis_13 base-phase_0 self_14 ns_53)"
"(begin"
"(if(syntax-literals-empty? sl_5)"
"(let-values() #f)"
"(let-values()"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp27_2)(cons(encode-namespace-scopes ns_53)(reverse$1(syntax-literals-stxes sl_5))))"
"((mpis28_0) mpis_13))"
"(generate-deserialize6.1 #f #f temp27_2 mpis28_0))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_0 dest-phase-id))"
"(add-module-path-index! mpis_13 self_14)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '((cdr ns+stxss)))))))))))"
"(define-values"
"(generate-eager-syntax-literal-lookup)"
"(lambda(pos_87)(begin(list unsafe-vector-ref-id syntax-literals-id pos_87))))"
"(define-values"
"(syntax-literals-as-vector)"
"(lambda(sl_6)(begin(list->vector(reverse$1(syntax-literals-stxes sl_6))))))"
"(define-values"
"(select-fresh)"
"(lambda(sym_4 header_0)"
"(begin"
"(if(symbol-conflicts? sym_4 header_0)"
"((letrec-values(((loop_85)"
"(lambda(pos_88)"
"(begin"
" 'loop"
"                              (let-values (((new-sym_0) (string->symbol (format \"~a/~a\" pos_88 sym_4))))"
"(if(symbol-conflicts? new-sym_0 header_0)(loop_85(add1 pos_88)) new-sym_0))))))"
" loop_85)"
" 1)"
" sym_4))))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_47 header_1)"
"(begin"
"(let-values(((or-part_46)(built-in-symbol? sym_47)))"
"(if or-part_46 or-part_46(hash-ref(header-define-and-import-syms header_1) sym_47 #f))))))"
"(define-values"
"(register-required-variable-use!19.1)"
"(lambda(defined?12_0 defined?13_0 header14_0 mpi15_0 phase16_1 sym17_0 extra-inspector18_0)"
"(begin"
" 'register-required-variable-use!19"
"(let-values(((header_2) header14_0))"
"(let-values(((mpi_39) mpi15_0))"
"(let-values(((phase_3) phase16_1))"
"(let-values(((sym_48) sym17_0))"
"(let-values(((extra-inspector_4) extra-inspector18_0))"
"(let-values(((defined?_1)(if defined?13_0 defined?12_0 #f)))"
"(let-values()"
"(let-values(((key_53)(variable-use3.1(module-use1.1 mpi_39 phase_3) sym_48)))"
"(let-values(((variable-uses_0)(header-require-var-to-import-sym header_2)))"
"(let-values(((prev-var-sym_0)(hash-ref variable-uses_0 key_53 #f)))"
"(let-values(((var-sym_0)"
"(let-values(((or-part_60) prev-var-sym_0))"
"(if or-part_60"
" or-part_60"
"(let-values(((sym_49)(select-fresh(variable-use-sym key_53) header_2)))"
"(begin"
"(hash-set! variable-uses_0 key_53 sym_49)"
"(set-header-require-vars-in-order!"
" header_2"
"(cons key_53(header-require-vars-in-order header_2)))"
"(hash-set!"
"(header-define-and-import-syms header_2)"
" sym_49"
"(if defined?_1 'defined 'required))"
" sym_49))))))"
"(begin"
"(if(if extra-inspector_4(not prev-var-sym_0) #f)"
"(let-values()"
"(let-values(((extra-inspectors_0)(header-import-sym-to-extra-inspectors header_2)))"
"(hash-update!"
" extra-inspectors_0"
" var-sym_0"
"(lambda(s_304)(set-add s_304 extra-inspector_4))"
" '#hasheq())))"
"(void))"
" var-sym_0)))))))))))))))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_3 def-sym_0)(begin(hash-set!(header-define-and-import-syms header_3) def-sym_0 'defined))))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_4 var-sym_1)"
"(begin(eq? 'required(hash-ref(header-define-and-import-syms header_4) var-sym_1 #f)))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_5 phase_66 cctx_0 cross-linklet-inlining?_0)"
"(begin"
"(let-values(((mod-use-ht_0)"
"(let-values(((lst_147)(header-require-vars-in-order header_5)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_147)))"
"((letrec-values(((for-loop_172)"
"(lambda(ht_102 lst_148)"
"(begin"
" 'for-loop"
"(if(pair? lst_148)"
"(let-values(((vu_0)(unsafe-car lst_148))"
"((rest_74)(unsafe-cdr lst_148)))"
"(let-values(((ht_103)"
"(let-values(((ht_104) ht_102))"
"(let-values(((ht_105)"
"(let-values()"
"(let-values(((mu_2)"
"(variable-use-module-use"
" vu_0)))"
"(if(let-values(((or-part_205)"
"(hash-ref"
" ht_104"
" mu_2"
" #f)))"
"(if or-part_205"
" or-part_205"
"(let-values(((or-part_206)"
"(eq?"
"(module-use-module"
" mu_2)"
"(compile-context-self"
" cctx_0))))"
"(if or-part_206"
" or-part_206"
"(top-level-module-path-index?"
"(module-use-module"
" mu_2))))))"
" ht_104"
"(hash-set ht_104 mu_2 #t))))))"
"(values ht_105)))))"
"(if(not #f)(for-loop_172 ht_103 rest_74) ht_103)))"
" ht_102)))))"
" for-loop_172)"
" '#hash()"
" lst_147)))))"
"(let-values(((link-mod-uses_0)(hash-keys mod-use-ht_0)))"
"(values"
" link-mod-uses_0"
"(reverse$1"
"(let-values(((lst_102) link-mod-uses_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_102)))"
"((letrec-values(((for-loop_117)"
"(lambda(fold-var_25 lst_149)"
"(begin"
" 'for-loop"
"(if(pair? lst_149)"
"(let-values(((mu_3)(unsafe-car lst_149))((rest_75)(unsafe-cdr lst_149)))"
"(let-values(((fold-var_131)"
"(let-values(((fold-var_132) fold-var_25))"
"(let-values(((fold-var_133)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_50)"
"(header-require-vars-in-order"
" header_5)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_50)))"
"((letrec-values(((for-loop_44)"
"(lambda(fold-var_134"
" lst_150)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_150)"
"(let-values(((vu_1)"
"(unsafe-car"
" lst_150))"
"((rest_76)"
"(unsafe-cdr"
" lst_150)))"
"(let-values(((fold-var_135)"
"(let-values(((fold-var_136)"
" fold-var_134))"
"(if(equal?"
" mu_3"
"(variable-use-module-use"
" vu_1))"
"(let-values(((fold-var_137)"
" fold-var_136))"
"(let-values(((fold-var_138)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_2)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_5)"
" vu_1)))"
"(let-values(((ex-sym_0)"
"(variable-use-sym"
" vu_1)))"
"(if(eq?"
" var-sym_2"
" ex-sym_0)"
" var-sym_2"
"(list"
" ex-sym_0"
" var-sym_2)))))"
" fold-var_137))))"
"(values"
" fold-var_138)))"
" fold-var_136))))"
"(if(not"
" #f)"
"(for-loop_44"
" fold-var_135"
" rest_76)"
" fold-var_135)))"
" fold-var_134)))))"
" for-loop_44)"
" null"
" lst_50)))))"
" fold-var_132))))"
"(values fold-var_133)))))"
"(if(not #f)(for-loop_117 fold-var_131 rest_75) fold-var_131)))"
" fold-var_25)))))"
" for-loop_117)"
" null"
" lst_102))))"
"(reverse$1"
"(let-values(((lst_151) link-mod-uses_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_151)))"
"((letrec-values(((for-loop_173)"
"(lambda(fold-var_139 lst_104)"
"(begin"
" 'for-loop"
"(if(pair? lst_104)"
"(let-values(((mu_4)(unsafe-car lst_104))((rest_77)(unsafe-cdr lst_104)))"
"(let-values(((fold-var_140)"
"(let-values(((fold-var_141) fold-var_139))"
"(let-values(((fold-var_142)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_0)"
"(let-values(((lst_152)"
"(header-require-vars-in-order"
" header_5)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_152)))"
"((letrec-values(((for-loop_174)"
"(lambda(table_132"
" lst_153)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_153)"
"(let-values(((vu_2)"
"(unsafe-car"
" lst_153))"
"((rest_78)"
"(unsafe-cdr"
" lst_153)))"
"(let-values(((table_133)"
"(let-values(((table_134)"
" table_132))"
"(if(equal?"
" mu_4"
"(variable-use-module-use"
" vu_2))"
"(let-values(((var-sym_3)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_5)"
" vu_2)))"
"(begin"
" #t"
"((letrec-values(((for-loop_33)"
"(lambda(table_29)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_135)"
"(let-values(((extra-inspectors_1)"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_5)"
" var-sym_3"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_175)"
"(lambda(table_30)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_31)"
"(let-values(((table_32)"
" table_30))"
"(if(let-values(((or-part_207)"
" extra-inspectors_1))"
"(if or-part_207"
" or-part_207"
" cross-linklet-inlining?_0))"
"(let-values(((table_108)"
" table_32))"
"(let-values(((table_109)"
"(let-values()"
"(let-values(((key_54"
" val_47)"
"(let-values()"
"(values"
" var-sym_3"
" extra-inspectors_1))))"
"(hash-set"
" table_108"
" key_54"
" val_47)))))"
"(values"
" table_109)))"
" table_32))))"
" table_31))))))"
" for-loop_175)"
" table_29)))))"
" table_135))))))"
" for-loop_33)"
" table_134)))"
" table_134))))"
"(if(not"
" #f)"
"(for-loop_174"
" table_133"
" rest_78)"
" table_133)))"
" table_132)))))"
" for-loop_174)"
" '#hash()"
" lst_152)))))"
"(if(hash-count extra-inspectorss_0)"
" extra-inspectorss_0"
" #f)))"
" fold-var_141))))"
"(values fold-var_142)))))"
"(if(not #f)(for-loop_173 fold-var_140 rest_77) fold-var_140)))"
" fold-var_139)))))"
" for-loop_173)"
" null"
" lst_151))))"
"(reverse$1"
"(let-values(((lst_41)(header-require-vars-in-order header_5)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_41)))"
"((letrec-values(((for-loop_176)"
"(lambda(fold-var_143 lst_154)"
"(begin"
" 'for-loop"
"(if(pair? lst_154)"
"(let-values(((vu_3)(unsafe-car lst_154))((rest_79)(unsafe-cdr lst_154)))"
"(let-values(((fold-var_144)"
"(let-values(((fold-var_145) fold-var_143))"
"(if(let-values(((mod_2)"
"(module-use-module"
"(variable-use-module-use vu_3))))"
"(let-values(((or-part_208)"
"(eq?"
" mod_2"
"(compile-context-self cctx_0))))"
"(if or-part_208"
" or-part_208"
"(top-level-module-path-index? mod_2))))"
"(let-values(((fold-var_146) fold-var_145))"
"(let-values(((fold-var_147)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_4)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_5)"
" vu_3)))"
"(let-values(((ex-sym_1)"
"(variable-use-sym"
" vu_3)))"
"(if(eq? var-sym_4 ex-sym_1)"
" var-sym_4"
"(list var-sym_4 ex-sym_1)))))"
" fold-var_146))))"
"(values fold-var_147)))"
" fold-var_145))))"
"(if(not #f)(for-loop_176 fold-var_144 rest_79) fold-var_144)))"
" fold-var_143)))))"
" for-loop_176)"
" null"
" lst_41))))))))))"
"(define-values"
"(instance-imports)"
"(list ns-id phase-shift-id self-id inspector-id bulk-binding-registry-id set-transformer!-id))"
"(define-values"
"(make-instance-instance13.1)"
"(lambda(bulk-binding-registry5_0 inspector4_0 namespace1_0 phase-shift2_0 self3_0 set-transformer!6_0)"
"(begin"
" 'make-instance-instance13"
"(let-values(((ns_54) namespace1_0))"
"(let-values(((phase-shift_14) phase-shift2_0))"
"(let-values(((self_15) self3_0))"
"(let-values(((inspector_10) inspector4_0))"
"(let-values(((bulk-binding-registry_11) bulk-binding-registry5_0))"
"(let-values(((set-transformer!_0) set-transformer!6_0))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" 'constant"
" ns-id"
" ns_54"
" phase-shift-id"
" phase-shift_14"
" self-id"
" self_15"
" inspector-id"
" inspector_10"
" bulk-binding-registry-id"
" bulk-binding-registry_11"
" set-transformer!-id"
" set-transformer!_0)))))))))))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lambda(set-transformer!16_0)"
"(begin"
" 'make-module-body-instance-instance18"
"(let-values(((set-transformer!_1) set-transformer!16_0))"
"(let-values()(1/make-instance 'body-instance #f 'constant set-transformer!-id set-transformer!_1))))))"
"(define-values"
"(empty-syntax-literals-instance)"
"(1/make-instance 'empty-stx #f 'constant get-syntax-literal!-id(lambda(pos_89) #f) 'get-encoded-root-expand-ctx #f))"
"(define-values"
"(empty-module-body-instance)"
"(let-values(((temp21_0)(lambda(name_38 val_48)(void))))(make-module-body-instance-instance18.1 temp21_0)))"
"(define-values"
"(empty-top-syntax-literal-instance)"
"(1/make-instance 'top-syntax-literal #f 'constant mpi-vector-id #f syntax-literals-id #f))"
"(define-values"
"(empty-syntax-literals-data-instance)"
"(1/make-instance 'empty-stx-data #f 'constant deserialized-syntax-vector-id(vector) deserialize-syntax-id void))"
"(define-values"
"(empty-instance-instance)"
"(let-values(((temp22_2) #f)((temp23_2) #f)((temp24_3) #f)((temp25_2) #f)((temp26_0) #f)((temp27_3) #f))"
"(make-instance-instance13.1 temp26_0 temp25_2 temp22_2 temp23_2 temp24_3 temp27_3)))"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_0 dest-phase2_0 inspector5_0 namespace1_1 self3_1)"
"(begin"
" 'make-eager-instance-instance11"
"(let-values(((ns_55) namespace1_1))"
"(let-values(((dest-phase_0) dest-phase2_0))"
"(let-values(((self_16) self3_1))"
"(let-values(((bulk-binding-registry_12) bulk-binding-registry4_0))"
"(let-values(((inspector_11) inspector5_0))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" 'constant"
" ns-id"
" ns_55"
" dest-phase-id"
" dest-phase_0"
" self-id"
" self_16"
" bulk-binding-registry-id"
" bulk-binding-registry_12"
" inspector-id"
" inspector_11"
" 'swap-top-level-scopes"
" swap-top-level-scopes))))))))))"
"(define-values"
"(empty-eager-instance-instance)"
"(let-values(((temp14_3) #f)((temp15_3) #f)((temp16_4) #f)((temp17_1) #f)((temp18_3) #f))"
"(make-eager-instance-instance11.1 temp17_1 temp15_3 temp18_3 temp14_3 temp16_4)))"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_0)"
"(begin"
"(let-values(((or-part_0)(number? datum_0)))"
"(if or-part_0"
" or-part_0"
"(let-values(((or-part_1)(boolean? datum_0)))"
"(if or-part_1"
" or-part_1"
"(let-values(((or-part_11)(string? datum_0)))(if or-part_11 or-part_11(bytes? datum_0))))))))))"
"(define-values(datum->syntax$3) datum->syntax)"
"(define-values(syntax-property$2) syntax-property)"
"(define-values(syntax-e$2) syntax-e)"
"(define-values(1/syntax?) syntax?)"
"(define-values(correlated?)(lambda(e_24)(begin(1/syntax? e_24))))"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated4_0)"
"(lambda(d3_0 srcloc1_0 srcloc2_0)"
"(begin"
" 'datum->correlated4"
"(let-values(((d_26) d3_0))"
"(let-values(((srcloc_6)(if srcloc2_0 srcloc1_0 #f)))"
"(let-values()(datum->syntax$3 #f d_26 srcloc_6))))))))"
"(case-lambda"
"((d_27)(begin(datum->correlated4_0 d_27 #f #f)))"
"((d_28 srcloc1_1)(datum->correlated4_0 d_28 srcloc1_1 #t)))))"
"(define-values(correlated-e)(lambda(e_25)(begin(if(1/syntax? e_25)(syntax-e$2 e_25) e_25))))"
"(define-values(correlated-cadr)(lambda(e_26)(begin(car(correlated-e(cdr(correlated-e e_26)))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_27)(begin(let-values(((l_54)(correlated-e e_27)))(if(list? l_54)(length l_54) #f)))))"
"(define-values"
"(correlated->list)"
"(lambda(e_28)"
"(begin"
"((letrec-values(((loop_86)"
"(lambda(e_29)"
"(begin"
" 'loop"
"(if(list? e_29)"
"(let-values() e_29)"
"(if(pair? e_29)"
"(let-values()(cons(car e_29)(loop_86(cdr e_29))))"
"(if(null? e_29)"
"(let-values() null)"
"(if(1/syntax? e_29)"
"(let-values()(loop_86(syntax-e$2 e_29)))"
"                                    (let-values () (error 'correlated->list \"not a list\"))))))))))"
" loop_86)"
" e_28))))"
"(define-values"
"(correlated-property)"
"(case-lambda"
"((e_30 k_30)(begin(syntax-property$2 e_30 k_30)))"
"((e_31 k_31 v_159)(syntax-property$2 e_31 k_31 v_159))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_115)"
"(begin"
" 'to-syntax-list"
"(if(list? s_115)"
"(let-values() s_115)"
"(if(pair? s_115)"
"(let-values()(let-values(((r_39)(to-syntax-list.1$1(cdr s_115))))(if r_39(cons(car s_115) r_39) #f)))"
"(if(1/syntax? s_115)(let-values()(to-syntax-list.1$1(syntax-e$2 s_115)))(let-values() #f)))))))"
"(define-values"
"(srcloc->vector)"
"(lambda(s_6)"
"(begin"
"(if s_6"
"(vector(srcloc-source s_6)(srcloc-line s_6)(srcloc-column s_6)(srcloc-position s_6)(srcloc-span s_6))"
" #f))))"
"(define-values"
"(correlate*)"
"(lambda(stx_13 s-exp_0)"
"(begin(if(syntax-srcloc stx_13)(datum->correlated s-exp_0(srcloc->vector(syntax-srcloc stx_13))) s-exp_0))))"
"(define-values(correlate~)(lambda(stx_14 s-exp_1)(begin s-exp_1)))"
"(define-values"
"(correlate/app)"
"(lambda(stx_15 s-exp_2)"
"(begin(if(eq?(system-type 'vm) 'chez-scheme)(correlate* stx_15 s-exp_2)(correlate~ stx_15 s-exp_2)))))"
"(define-values(->correlated)(lambda(s_2)(begin(datum->correlated s_2 #f))))"
"(define-values"
"(compile$2)"
"(let-values(((compile7_0)"
"(lambda(p5_0 cctx6_0 name1_0 result-used?2_0 name3_0 result-used?4_0)"
"(begin"
" 'compile7"
"(let-values(((p_34) p5_0))"
"(let-values(((cctx_1) cctx6_0))"
"(let-values(((name_39)(if name3_0 name1_0 #f)))"
"(let-values(((result-used?_0)(if result-used?4_0 result-used?2_0 #t)))"
"(let-values()"
"(let-values(((compile_0)"
"(lambda(p_35 name_40 result-used?_1)"
"(begin 'compile(compile$2 p_35 cctx_1 name_40 result-used?_1)))))"
"(let-values(((s_10)(parsed-s p_34)))"
"(if(parsed-id? p_34)"
"(let-values()"
"(let-values(((p27_1) p_34)((cctx28_0) cctx_1))"
"(compile-identifier24.1 #f #f #f #f p27_1 cctx28_0)))"
"(if(parsed-lambda? p_34)"
"(let-values()"
"(if result-used?_0"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_10"
"(list*"
" 'lambda"
"(compile-lambda"
"(parsed-lambda-keys p_34)"
"(parsed-lambda-body p_34)"
" cctx_1)))"
" name_39"
" s_10))"
"(let-values()(correlate~ s_10 ''unused-lambda))))"
"(if(parsed-case-lambda? p_34)"
"(let-values()"
"(if result-used?_0"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_10"
"(list*"
" 'case-lambda"
"(reverse$1"
"(let-values(((lst_155)(parsed-case-lambda-clauses p_34)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_155)))"
"((letrec-values(((for-loop_177)"
"(lambda(fold-var_31 lst_156)"
"(begin"
" 'for-loop"
"(if(pair? lst_156)"
"(let-values(((clause_0)"
"(unsafe-car lst_156))"
"((rest_80)"
"(unsafe-cdr lst_156)))"
"(let-values(((fold-var_63)"
"(let-values(((fold-var_148)"
" fold-var_31))"
"(let-values(((fold-var_149)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
"(car"
" clause_0)"
"(cadr"
" clause_0)"
" cctx_1))"
" fold-var_148))))"
"(values"
" fold-var_149)))))"
"(if(not #f)"
"(for-loop_177 fold-var_63 rest_80)"
" fold-var_63)))"
" fold-var_31)))))"
" for-loop_177)"
" null"
" lst_155))))))"
" name_39"
" s_10))"
"(let-values()(correlate~ s_10 ''unused-case-lambda))))"
"(if(parsed-app? p_34)"
"(let-values()"
"(let-values(((rands_0)(parsed-app-rands p_34)))"
"(correlate/app"
" s_10"
"(cons"
"(compile_0(parsed-app-rator p_34) #f #t)"
"(reverse$1"
"(let-values(((lst_39) rands_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_39)))"
"((letrec-values(((for-loop_178)"
"(lambda(fold-var_150 lst_157)"
"(begin"
" 'for-loop"
"(if(pair? lst_157)"
"(let-values(((r_40)(unsafe-car lst_157))"
"((rest_40)"
"(unsafe-cdr lst_157)))"
"(let-values(((fold-var_151)"
"(let-values(((fold-var_9)"
" fold-var_150))"
"(let-values(((fold-var_65)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_0"
" r_40"
" #f"
" #t))"
" fold-var_9))))"
"(values"
" fold-var_65)))))"
"(if(not #f)"
"(for-loop_178 fold-var_151 rest_40)"
" fold-var_151)))"
" fold-var_150)))))"
" for-loop_178)"
" null"
" lst_39))))))))"
"(if(parsed-if? p_34)"
"(let-values()"
"(let-values(((tst-e_0)(compile_0(parsed-if-tst p_34) #f #f)))"
"(if(eq?(correlated-e tst-e_0) #t)"
"(let-values()"
"(compile_0(parsed-if-thn p_34) name_39 result-used?_0))"
"(if(eq?(correlated-e tst-e_0) #f)"
"(let-values()"
"(compile_0(parsed-if-els p_34) name_39 result-used?_0))"
"(let-values()"
"(correlate~"
" s_10"
"(list"
" 'if"
" tst-e_0"
"(compile_0(parsed-if-thn p_34) name_39 result-used?_0)"
"(compile_0(parsed-if-els p_34) name_39 result-used?_0))))))))"
"(if(parsed-with-continuation-mark? p_34)"
"(let-values()"
"(correlate~"
" s_10"
"(list"
" 'with-continuation-mark"
"(compile_0(parsed-with-continuation-mark-key p_34) #f #t)"
"(compile_0(parsed-with-continuation-mark-val p_34) #f #t)"
"(compile_0"
"(parsed-with-continuation-mark-body p_34)"
" name_39"
" result-used?_0))))"
"(if(parsed-begin0? p_34)"
"(let-values()"
"(correlate~"
" s_10"
"(list*"
" 'begin0"
"(compile_0(car(parsed-begin0-body p_34)) name_39 result-used?_0)"
"(reverse$1"
"(let-values(((lst_75)(cdr(parsed-begin0-body p_34))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_75)))"
"((letrec-values(((for-loop_101)"
"(lambda(fold-var_11 lst_85)"
"(begin"
" 'for-loop"
"(if(pair? lst_85)"
"(let-values(((e_32)"
"(unsafe-car lst_85))"
"((rest_41)"
"(unsafe-cdr lst_85)))"
"(let-values(((fold-var_152)"
"(let-values(((fold-var_153)"
" fold-var_11))"
"(let-values(((fold-var_154)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_0"
" e_32"
" #f"
" #f))"
" fold-var_153))))"
"(values"
" fold-var_154)))))"
"(if(not #f)"
"(for-loop_101"
" fold-var_152"
" rest_41)"
" fold-var_152)))"
" fold-var_11)))))"
" for-loop_101)"
" null"
" lst_75)))))))"
"(if(parsed-begin? p_34)"
"(let-values()"
"(correlate~"
" s_10"
"(compile-begin"
"(parsed-begin-body p_34)"
" cctx_1"
" name_39"
" result-used?_0)))"
"(if(parsed-set!? p_34)"
"(let-values()"
"(correlate~"
" s_10"
"(let-values(((temp29_1)(parsed-set!-id p_34))"
"((cctx30_0) cctx_1)"
"((temp31_1) #t)"
"((temp32_1)"
"(compile_0"
"(parsed-set!-rhs p_34)"
"(parsed-s(parsed-set!-id p_34))"
" #t)))"
"(compile-identifier24.1"
" temp32_1"
" #t"
" temp31_1"
" #t"
" temp29_1"
" cctx30_0))))"
"(if(parsed-let-values? p_34)"
"(let-values()"
"(let-values(((temp36_0) #f)"
"((result-used?37_0) result-used?_0))"
"(compile-let15.1"
" temp36_0"
" p_34"
" cctx_1"
" name_39"
" result-used?37_0)))"
"(if(parsed-letrec-values? p_34)"
"(let-values()"
"(let-values(((temp41_0) #t)"
"((result-used?42_0) result-used?_0))"
"(compile-let15.1"
" temp41_0"
" p_34"
" cctx_1"
" name_39"
" result-used?42_0)))"
"(if(parsed-quote? p_34)"
"(let-values()"
"(let-values(((datum_1)(parsed-quote-datum p_34)))"
"(if(self-quoting-in-linklet? datum_1)"
"(let-values()(correlate~ s_10 datum_1))"
"(let-values()"
"(correlate~ s_10(list 'quote datum_1))))))"
"(if(parsed-quote-syntax? p_34)"
"(let-values()"
"(if result-used?_0"
"(compile-quote-syntax"
"(parsed-quote-syntax-datum p_34)"
" cctx_1)"
"(correlate~ s_10(list 'quote(syntax->datum$1 s_10)))))"
"(if(parsed-#%variable-reference? p_34)"
"(let-values()"
"(let-values(((id_45)"
"(parsed-#%variable-reference-id p_34)))"
"(correlate~"
" s_10"
"(if id_45"
"(list"
" '#%variable-reference"
"(let-values(((id43_0) id_45)((cctx44_0) cctx_1))"
"(compile-identifier24.1"
" #f"
" #f"
" #f"
" #f"
" id43_0"
" cctx44_0)))"
" '(#%variable-reference)))))"
"(let-values()"
"(error"
"                                                                 \"unrecognized parsed form:\""
" p_34)))))))))))))))))))))))))))"
"(case-lambda"
"((p_36 cctx_2)(begin 'compile(compile7_0 p_36 cctx_2 #f #f #f #f)))"
"((p_37 cctx_3 name_41 result-used?2_1)(compile7_0 p_37 cctx_3 name_41 result-used?2_1 #t #t))"
"((p_38 cctx_4 name1_1)(compile7_0 p_38 cctx_4 name1_1 #f #t #f)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_0 bodys_0 cctx_5)(begin(list formals_0(compile-sequence bodys_0 cctx_5 #f #t)))))"
"(define-values"
"(compile-sequence)"
"(lambda(bodys_1 cctx_6 name_42 result-used?_2)"
"(begin"
"(if(null?(cdr bodys_1))"
"(compile$2(car bodys_1) cctx_6 name_42 result-used?_2)"
"(compile-begin bodys_1 cctx_6 name_42 result-used?_2)))))"
"(define-values"
"(compile-begin)"
"(lambda(es_0 cctx_7 name_43 result-used?_3)"
"(begin"
"(let-values(((used-pos_0)(sub1(length es_0))))"
"(list*"
" 'begin"
"(reverse$1"
"(let-values(((lst_158) es_0)((start_33) 0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_158)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_33)))"
"((letrec-values(((for-loop_179)"
"(lambda(fold-var_76 lst_159 pos_90)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_159) #t #f)"
"(let-values(((e_33)(unsafe-car lst_159))"
"((rest_81)(unsafe-cdr lst_159))"
"((i_134) pos_90))"
"(let-values(((fold-var_155)"
"(let-values(((fold-var_156) fold-var_76))"
"(let-values(((fold-var_157)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((used?_0)"
"(= i_134 used-pos_0)))"
"(compile$2"
" e_33"
" cctx_7"
"(if used?_0 name_43 #f)"
"(if used?_0 result-used?_3 #f))))"
" fold-var_156))))"
"(values fold-var_157)))))"
"(if(not #f)(for-loop_179 fold-var_155 rest_81(+ pos_90 1)) fold-var_155)))"
" fold-var_76)))))"
" for-loop_179)"
" null"
" lst_158"
" start_33)))))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_305 inferred-name_0 orig-s_21)"
"(begin"
"(letrec-values(((simplify-name_0)"
"(lambda(v_47)"
"(begin"
" 'simplify-name"
"(if(pair? v_47)"
"(let-values()"
"(let-values(((n1_0)(simplify-name_0(car v_47))))"
"(let-values(((n2_0)(simplify-name_0(cdr v_47))))(if(eq? n1_0 n2_0) n1_0 v_47))))"
"(let-values() v_47))))))"
"(let-values(((name_44)"
"(let-values(((or-part_209)"
"(let-values(((v_40)"
"(simplify-name_0(syntax-property$1 orig-s_21 'inferred-name))))"
"(if(let-values(((or-part_210)(symbol? v_40)))"
"(if or-part_210"
" or-part_210"
"(let-values(((or-part_211)(syntax?$1 v_40)))"
"(if or-part_211 or-part_211(void? v_40)))))"
" v_40"
" #f))))"
"(if or-part_209 or-part_209 inferred-name_0))))"
"(let-values(((named-s_0)"
"(if name_44"
"(correlated-property"
"(->correlated s_305)"
" 'inferred-name"
"(if(syntax?$1 name_44)(syntax-e$1 name_44) name_44))"
" s_305)))"
"(let-values(((as-method_0)(syntax-property$1 orig-s_21 'method-arity-error)))"
"(if as-method_0"
"(correlated-property(->correlated named-s_0) 'method-arity-error as-method_0)"
" named-s_0))))))))"
"(define-values"
"(compile-let15.1)"
"(lambda(rec?9_0 p11_0 cctx12_0 name13_0 result-used?14_0)"
"(begin"
" 'compile-let15"
"(let-values(((p_26) p11_0))"
"(let-values(((cctx_8) cctx12_0))"
"(let-values(((name_45) name13_0))"
"(let-values(((rec?_0) rec?9_0))"
"(let-values(((result-used?_4) result-used?14_0))"
"(let-values()"
"(let-values(((body_0)(parsed-let_-values-body p_26)))"
"(correlate~"
"(parsed-s p_26)"
"(list"
"(if rec?_0 'letrec-values 'let-values)"
"(reverse$1"
"(let-values(((lst_160)(parsed-let_-values-clauses p_26))"
"((lst_161)(parsed-let_-values-idss p_26)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_160)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_161)))"
"((letrec-values(((for-loop_34)"
"(lambda(fold-var_158 lst_162 lst_163)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_162)(pair? lst_163) #f)"
"(let-values(((clause_1)(unsafe-car lst_162))"
"((rest_82)(unsafe-cdr lst_162))"
"((ids_4)(unsafe-car lst_163))"
"((rest_83)(unsafe-cdr lst_163)))"
"(let-values(((fold-var_159)"
"(let-values(((fold-var_160) fold-var_158))"
"(let-values(((fold-var_161)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(if rec?_0"
"(reverse$1"
"(let-values(((lst_164)"
"(car"
" clause_1))"
"((lst_165)"
" ids_4))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_164)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_165)))"
"((letrec-values(((for-loop_180)"
"(lambda(fold-var_162"
" lst_166"
" lst_167)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_166)"
"(pair?"
" lst_167)"
" #f)"
"(let-values(((sym_50)"
"(unsafe-car"
" lst_166))"
"((rest_84)"
"(unsafe-cdr"
" lst_166))"
"((id_46)"
"(unsafe-car"
" lst_167))"
"((rest_85)"
"(unsafe-cdr"
" lst_167)))"
"(let-values(((fold-var_163)"
"(let-values(((fold-var_1)"
" fold-var_162))"
"(let-values(((fold-var_2)"
"(let-values()"
"(cons"
"(let-values()"
"(add-undefined-error-name-property"
" sym_50"
" id_46))"
" fold-var_1))))"
"(values"
" fold-var_2)))))"
"(if(not"
" #f)"
"(for-loop_180"
" fold-var_163"
" rest_84"
" rest_85)"
" fold-var_163)))"
" fold-var_162)))))"
" for-loop_180)"
" null"
" lst_164"
" lst_165))))"
"(car clause_1))"
"(compile$2"
"(cadr clause_1)"
" cctx_8"
"(if(= 1(length ids_4))"
"(car ids_4)"
" #f))))"
" fold-var_160))))"
"(values fold-var_161)))))"
"(if(not #f)"
"(for-loop_34 fold-var_159 rest_82 rest_83)"
" fold-var_159)))"
" fold-var_158)))))"
" for-loop_34)"
" null"
" lst_160"
" lst_161))))"
"(compile-sequence body_0 cctx_8 name_45 result-used?_4)))))))))))))"
"(define-values"
"(add-undefined-error-name-property)"
"(lambda(sym_19 orig-id_0)"
"(begin"
"(let-values(((id_47)(correlate~ orig-id_0 sym_19)))"
"(correlated-property"
"(->correlated id_47)"
" 'undefined-error-name"
"(let-values(((or-part_212)(syntax-property$1 orig-id_0 'undefined-error-name)))"
"(if or-part_212 or-part_212(syntax-e$1 orig-id_0))))))))"
"(define-values"
"(compile-identifier24.1)"
"(lambda(set-to19_0 set-to21_0 set-to?18_0 set-to?20_0 p22_0 cctx23_0)"
"(begin"
" 'compile-identifier24"
"(let-values(((p_39) p22_0))"
"(let-values(((cctx_9) cctx23_0))"
"(let-values(((set-to?_0)(if set-to?20_0 set-to?18_0 #f)))"
"(let-values(((rhs_0)(if set-to21_0 set-to19_0 #f)))"
"(let-values()"
"(let-values(((normal-b_0)(parsed-id-binding p_39)))"
"(let-values(((b_71)"
"(let-values(((or-part_213) normal-b_0))"
"(if or-part_213"
" or-part_213"
"(let-values(((temp45_0)(compile-context-self cctx_9))"
"((temp46_0)(compile-context-phase cctx_9))"
"((temp47_0)(syntax-e$1(parsed-s p_39))))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp45_0"
" temp46_0"
" temp47_0))))))"
"(let-values(((sym_51)"
"(if(local-binding? b_71)"
"(let-values()(local-binding-key b_71))"
"(if(module-binding? b_71)"
"(let-values()"
"(let-values(((mpi_40)"
"(if(parsed-top-id? p_39)"
"(compile-context-self cctx_9)"
"(module-binding-module b_71))))"
"(if(parsed-primitive-id? p_39)"
"(let-values()"
"(begin"
"(if(zero?(module-binding-phase b_71))"
"(void)"
"(let-values()"
"                                                    (error \"internal error: non-zero phase for a primitive\")))"
"(if set-to?_0"
"(let-values()"
"(error"
"                                                     \"internal error: cannot assign to a primitive:\""
"(module-binding-sym b_71)))"
"(void))"
"(module-binding-sym b_71)))"
"(if(eq? mpi_40(compile-context-module-self cctx_9))"
"(let-values()"
"(let-values(((header_6)(compile-context-header cctx_9)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_6)"
"(module-binding-sym b_71))))"
"(let-values()"
"(let-values(((temp48_0)(compile-context-header cctx_9))"
"((mpi49_0) mpi_40)"
"((temp50_0)(module-binding-phase b_71))"
"((temp51_0)(module-binding-sym b_71))"
"((temp52_1)"
"(let-values(((or-part_96)"
"(module-binding-extra-inspector b_71)))"
"(if or-part_96"
" or-part_96"
"(let-values(((or-part_214)"
"(parsed-id-inspector p_39)))"
"(if or-part_214"
" or-part_214"
"(if(parsed-s p_39)"
"(syntax-inspector(parsed-s p_39))"
" #f)))))))"
"(register-required-variable-use!19.1"
" #f"
" #f"
" temp48_0"
" mpi49_0"
" temp50_0"
" temp51_0"
" temp52_1)))))))"
"(let-values()"
"(error"
"                                         \"not a reference to a module or local binding:\""
" b_71"
"(parsed-s p_39)))))))"
"(correlate~(parsed-s p_39)(if set-to?_0(list 'set! sym_51 rhs_0) sym_51)))))))))))))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_1 cctx_10)"
"(begin"
"(let-values(((pos_22)(add-syntax-literal!(compile-context-header cctx_10) q_1)))"
"(if(compile-context-lazy-syntax-literals? cctx_10)"
"(let-values()(generate-lazy-syntax-literal-lookup pos_22))"
"(let-values()(generate-eager-syntax-literal-lookup pos_22)))))))"
"(define-values"
"(extra-inspectors-allow?)"
"(lambda(extra-inspectors_2 guard-insp_0)"
"(begin"
"(if(not extra-inspectors_2)"
"(let-values() #f)"
"(if(set? extra-inspectors_2)"
"(let-values()"
"(let-values(((ht_106) extra-inspectors_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_106)))"
"((letrec-values(((for-loop_90)"
"(lambda(result_70 i_135)"
"(begin"
" 'for-loop"
"(if i_135"
"(let-values(((extra-insp_0)(unsafe-immutable-hash-iterate-key ht_106 i_135)))"
"(let-values(((result_71)"
"(let-values()"
"(let-values(((result_72)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_0"
" guard-insp_0)))))"
"(values result_72)))))"
"(if(if(not((lambda x_54(not result_71)) extra-insp_0))(not #f) #f)"
"(for-loop_90 result_71(unsafe-immutable-hash-iterate-next ht_106 i_135))"
" result_71)))"
" result_70)))))"
" for-loop_90)"
" #t"
"(unsafe-immutable-hash-iterate-first ht_106)))))"
"(if(procedure? extra-inspectors_2)"
"(let-values()(extra-inspectors_2 guard-insp_0))"
"(let-values()"
"(error"
" 'extra-inspectors-allow?"
"               \"unknown representation of extra inspectors: ~e\""
" extra-inspectors_2))))))))"
"(define-values"
"(extra-inspectors-merge)"
"(lambda(extra-inspectors-1_0 extra-inspectors-2_0)"
"(begin"
"(if(let-values(((or-part_215)(not extra-inspectors-1_0)))"
"(if or-part_215 or-part_215(not extra-inspectors-2_0)))"
"(let-values() #f)"
"(if(if(set? extra-inspectors-1_0)(set? extra-inspectors-2_0) #f)"
"(let-values()(set-union extra-inspectors-1_0 extra-inspectors-2_0))"
"(let-values()"
"(lambda(guard-insp_1)"
"(if(extra-inspectors-allow? extra-inspectors-1_0 guard-insp_1)"
"(extra-inspectors-allow? extra-inspectors-2_0 guard-insp_1)"
" #f))))))))"
"(define-values"
"(struct:module-use*"
" module-use*1.1"
" module-use*?"
" module-use*-extra-inspectorss"
" module-use*-self-inspector"
" set-module-use*-extra-inspectorss!"
" set-module-use*-self-inspector!)"
"(let-values(((struct:_64 make-_64 ?_64 -ref_64 -set!_64)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-use*"
" struct:module-use"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'module-use*)))))"
"(values"
" struct:_64"
" make-_64"
" ?_64"
"(make-struct-field-accessor -ref_64 0 'extra-inspectorss)"
"(make-struct-field-accessor -ref_64 1 'self-inspector)"
"(make-struct-field-mutator -set!_64 0 'extra-inspectorss)"
"(make-struct-field-mutator -set!_64 1 'self-inspector))))"
"(define-values"
"(module-uses-add-extra-inspectorsss)"
"(lambda(mus_1 extra-inspectorsss_0)"
"(begin"
"(if extra-inspectorsss_0"
"(let-values()"
"(reverse$1"
"(let-values(((lst_168) mus_1)((lst_75) extra-inspectorsss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_168)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_75)))"
"((letrec-values(((for-loop_101)"
"(lambda(fold-var_11 lst_85 lst_77)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_85)(pair? lst_77) #f)"
"(let-values(((mu_5)(unsafe-car lst_85))"
"((rest_86)(unsafe-cdr lst_85))"
"((extra-inspectorss_1)(unsafe-car lst_77))"
"((rest_87)(unsafe-cdr lst_77)))"
"(let-values(((fold-var_164)"
"(let-values(((fold-var_165) fold-var_11))"
"(let-values(((fold-var_166)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use*1.1"
"(module-use-module mu_5)"
"(module-use-phase mu_5)"
" extra-inspectorss_1"
" #f))"
" fold-var_165))))"
"(values fold-var_166)))))"
"(if(not #f)(for-loop_101 fold-var_164 rest_86 rest_87) fold-var_164)))"
" fold-var_11)))))"
" for-loop_101)"
" null"
" lst_168"
" lst_75)))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_86) mus_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_86)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_167 lst_169)"
"(begin"
" 'for-loop"
"(if(pair? lst_169)"
"(let-values(((mu_6)(unsafe-car lst_169))((rest_88)(unsafe-cdr lst_169)))"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_168) fold-var_167))"
"(let-values(((fold-var_18)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use*1.1"
"(module-use-module mu_6)"
"(module-use-phase mu_6)"
" #f"
" #f))"
" fold-var_168))))"
"(values fold-var_18)))))"
"(if(not #f)(for-loop_93 fold-var_67 rest_88) fold-var_67)))"
" fold-var_167)))))"
" for-loop_93)"
" null"
" lst_86)))))))))"
"(define-values"
"(module-uses-strip-extra-inspectorsss)"
"(lambda(mu*s_0)"
"(begin"
"(reverse$1"
"(let-values(((lst_170) mu*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_170)))"
"((letrec-values(((for-loop_181)"
"(lambda(fold-var_69 lst_171)"
"(begin"
" 'for-loop"
"(if(pair? lst_171)"
"(let-values(((mu*_0)(unsafe-car lst_171))((rest_89)(unsafe-cdr lst_171)))"
"(let-values(((fold-var_169)"
"(let-values(((fold-var_70) fold-var_69))"
"(let-values(((fold-var_170)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use1.1"
"(module-use-module mu*_0)"
"(module-use-phase mu*_0)))"
" fold-var_70))))"
"(values fold-var_170)))))"
"(if(not #f)(for-loop_181 fold-var_169 rest_89) fold-var_169)))"
" fold-var_69)))))"
" for-loop_181)"
" null"
" lst_170)))))))"
"(define-values"
"(module-uses-extract-extra-inspectorsss)"
"(lambda(mu*s_1 linklet_0 check-inlined-reference?_0 skip-n_0)"
"(begin"
"(if(not check-inlined-reference?_0)"
"(let-values()"
"(reverse$1"
"(let-values(((lst_172) mu*s_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_172)))"
"((letrec-values(((for-loop_182)"
"(lambda(fold-var_73 lst_9)"
"(begin"
" 'for-loop"
"(if(pair? lst_9)"
"(let-values(((mu*_1)(unsafe-car lst_9))((rest_90)(unsafe-cdr lst_9)))"
"(let-values(((fold-var_171)"
"(let-values(((fold-var_4) fold-var_73))"
"(let-values(((fold-var_172)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use*-extra-inspectorss mu*_1))"
" fold-var_4))))"
"(values fold-var_172)))))"
"(if(not #f)(for-loop_182 fold-var_171 rest_90) fold-var_171)))"
" fold-var_73)))))"
" for-loop_182)"
" null"
" lst_172)))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_173) mu*s_1)((lst_174)(list-tail(1/linklet-import-variables linklet_0) skip-n_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_173)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_174)))"
"((letrec-values(((for-loop_30)"
"(lambda(fold-var_6 lst_175 lst_176)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_175)(pair? lst_176) #f)"
"(let-values(((mu*_2)(unsafe-car lst_175))"
"((rest_91)(unsafe-cdr lst_175))"
"((imports_0)(unsafe-car lst_176))"
"((rest_92)(unsafe-cdr lst_176)))"
"(let-values(((fold-var_173)"
"(let-values(((fold-var_174) fold-var_6))"
"(let-values(((fold-var_175)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_2)"
"(module-use*-extra-inspectorss"
" mu*_2)))"
"(let-values(((lst_91) imports_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_91)))"
"((letrec-values(((for-loop_19)"
"(lambda(extra-inspectorss_3"
" lst_177)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_177)"
"(let-values(((import_0)"
"(unsafe-car"
" lst_177))"
"((rest_93)"
"(unsafe-cdr"
" lst_177)))"
"(let-values(((extra-inspectorss_4)"
"(let-values(((extra-inspectorss_5)"
" extra-inspectorss_3))"
"(let-values(((extra-inspectorss_6)"
"(let-values()"
"(if(eq?"
"(hash-ref"
" extra-inspectorss_5"
" import_0"
" '#:not-recorded)"
" '#:not-recorded)"
"(let-values()"
"(hash-set"
" extra-inspectorss_5"
" import_0"
"(set"
"(module-use*-self-inspector"
" mu*_2))))"
"(let-values()"
" extra-inspectorss_5)))))"
"(values"
" extra-inspectorss_6)))))"
"(if(not"
" #f)"
"(for-loop_19"
" extra-inspectorss_4"
" rest_93)"
" extra-inspectorss_4)))"
" extra-inspectorss_3)))))"
" for-loop_19)"
" extra-inspectorss_2"
" lst_91)))))"
" fold-var_174))))"
"(values fold-var_175)))))"
"(if(not #f)(for-loop_30 fold-var_173 rest_91 rest_92) fold-var_173)))"
" fold-var_6)))))"
" for-loop_30)"
" null"
" lst_173"
" lst_174)))))))))"
"(define-values"
"(module-use*-declaration-inspector!)"
"(lambda(mu*_3 insp_9)(begin(set-module-use*-self-inspector! mu*_3 insp_9))))"
"(define-values"
"(module-use+extra-inspectors)"
"(lambda(mpi_41 phase_67 imports_1 inspector_12 extra-inspector_5 extra-inspectorss_7)"
"(begin"
"(let-values(((now-inspector_0)(current-code-inspector)))"
"(let-values(((add-insp?_0)(if inspector_12(inspector-superior? inspector_12 now-inspector_0) #f)))"
"(let-values(((add-extra-insp?_0)"
"(if extra-inspector_5(inspector-superior? extra-inspector_5 now-inspector_0) #f)))"
"(let-values(((new-extra-inspectorss_0)"
"(if(let-values(((or-part_216) add-insp?_0))(if or-part_216 or-part_216 add-extra-insp?_0))"
"(let-values()"
"(let-values(((lst_178) imports_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_178)))"
"((letrec-values(((for-loop_111)"
"(lambda(table_136 lst_179)"
"(begin"
" 'for-loop"
"(if(pair? lst_179)"
"(let-values(((import_1)(unsafe-car lst_179))"
"((rest_94)(unsafe-cdr lst_179)))"
"(let-values(((table_137)"
"(let-values(((table_138) table_136))"
"(let-values(((table_139)"
"(let-values()"
"(let-values(((key_55"
" val_49)"
"(let-values()"
"(values"
" import_1"
"(let-values(((extra-inspectors_3)"
"(if extra-inspectorss_7"
"(hash-ref"
" extra-inspectorss_7"
" import_1"
" #f)"
" #f)))"
"(lambda(guard-insp_2)"
"(let-values(((or-part_217)"
"(if add-insp?_0"
"(inspector-superior?"
" inspector_12"
" guard-insp_2)"
" #f)))"
"(if or-part_217"
" or-part_217"
"(let-values(((or-part_218)"
"(if add-extra-insp?_0"
"(inspector-superior?"
" extra-inspector_5"
" guard-insp_2)"
" #f)))"
"(if or-part_218"
" or-part_218"
"(extra-inspectors-allow?"
" extra-inspectors_3"
" guard-insp_2)))))))))))"
"(hash-set"
" table_138"
" key_55"
" val_49)))))"
"(values table_139)))))"
"(if(not #f)(for-loop_111 table_137 rest_94) table_137)))"
" table_136)))))"
" for-loop_111)"
" '#hash()"
" lst_178))))"
"(let-values()"
"(let-values(((lst_163) imports_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_163)))"
"((letrec-values(((for-loop_183)"
"(lambda(extra-inspectorss_8 lst_180)"
"(begin"
" 'for-loop"
"(if(pair? lst_180)"
"(let-values(((import_2)(unsafe-car lst_180))"
"((rest_95)(unsafe-cdr lst_180)))"
"(let-values(((extra-inspectorss_9)"
"(let-values(((extra-inspectorss_10)"
" extra-inspectorss_8))"
"(let-values(((extra-inspectorss_11)"
"(let-values()"
"(if(hash-ref"
" extra-inspectorss_10"
" import_2"
" #f)"
" extra-inspectorss_10"
"(hash-set"
" extra-inspectorss_10"
" import_2"
" #f)))))"
"(values extra-inspectorss_11)))))"
"(if(not #f)"
"(for-loop_183 extra-inspectorss_9 rest_95)"
" extra-inspectorss_9)))"
" extra-inspectorss_8)))))"
" for-loop_183)"
"(let-values(((or-part_219) extra-inspectorss_7))"
"(if or-part_219 or-part_219(seteq)))"
" lst_163)))))))"
"(module-use*1.1 mpi_41 phase_67 new-extra-inspectorss_0 #f))))))))"
"(define-values"
"(module-use-merge-extra-inspectorss!)"
"(lambda(existing-mu*_0 mu*_4)"
"(begin"
"(let-values(((extra-inspectorss_12)(module-use*-extra-inspectorss mu*_4)))"
"(let-values(((existing-extra-inspectorss_0)(module-use*-extra-inspectorss existing-mu*_0)))"
"(let-values(((new-extra-inspectorss_1)"
"(let-values(((ht_62) extra-inspectorss_12))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_62)))"
"((letrec-values(((for-loop_184)"
"(lambda(new-extra-inspectorss_2 i_136)"
"(begin"
" 'for-loop"
"(if i_136"
"(let-values(((sym_52 extra-inspectors_4)"
"(hash-iterate-key+value ht_62 i_136)))"
"(let-values(((new-extra-inspectorss_3)"
"(let-values(((new-extra-inspectorss_4)"
" new-extra-inspectorss_2))"
"(let-values(((new-extra-inspectorss_5)"
"(let-values()"
"(hash-set"
" new-extra-inspectorss_4"
" sym_52"
"(extra-inspectors-merge"
" extra-inspectors_4"
"(hash-ref"
" new-extra-inspectorss_4"
" sym_52"
"(seteq)))))))"
"(values new-extra-inspectorss_5)))))"
"(if(not #f)"
"(for-loop_184"
" new-extra-inspectorss_3"
"(hash-iterate-next ht_62 i_136))"
" new-extra-inspectorss_3)))"
" new-extra-inspectorss_2)))))"
" for-loop_184)"
" existing-extra-inspectorss_0"
"(hash-iterate-first ht_62))))))"
"(set-module-use*-extra-inspectorss! existing-mu*_0 new-extra-inspectorss_1)))))))"
"(define-values"
"(struct:link-info"
" link-info1.1"
" link-info?"
" link-info-link-module-uses"
" link-info-imports"
" link-info-extra-inspectorsss"
" link-info-def-decls)"
"(let-values(((struct:_39 make-_39 ?_39 -ref_39 -set!_39)"
"(let-values()"
"(let-values()"
"(make-struct-type 'link-info #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'link-info)))))"
"(values"
" struct:_39"
" make-_39"
" ?_39"
"(make-struct-field-accessor -ref_39 0 'link-module-uses)"
"(make-struct-field-accessor -ref_39 1 'imports)"
"(make-struct-field-accessor -ref_39 2 'extra-inspectorsss)"
"(make-struct-field-accessor -ref_39 3 'def-decls))))"
"(define-values"
"(compile-forms31.1)"
"(lambda(body-import-instances3_0"
" body-imports2_0"
" body-suffix-forms4_0"
" body-suffix-forms17_0"
" compiled-expression-callback8_0"
" compiled-expression-callback21_0"
" cross-linklet-inlining?14_0"
" cross-linklet-inlining?27_0"
" definition-callback9_0"
" definition-callback22_0"
" encoded-root-expand-ctx-box6_0"
" encoded-root-expand-ctx-box19_0"
" force-phases5_0"
" force-phases18_0"
" get-module-linklet-info11_0"
" get-module-linklet-info24_0"
" other-form-callback10_0"
" other-form-callback23_0"
" root-ctx-only-if-syntax?7_0"
" root-ctx-only-if-syntax?20_0"
" serializable?13_0"
" serializable?26_0"
" to-source?12_0"
" to-source?25_0"
" bodys28_0"
" cctx29_0"
" mpis30_0)"
"(begin"
" 'compile-forms31"
"(let-values(((bodys_2) bodys28_0))"
"(let-values(((cctx_11) cctx29_0))"
"(let-values(((mpis_14) mpis30_0))"
"(let-values(((body-imports_0) body-imports2_0))"
"(let-values(((body-import-instances_0) body-import-instances3_0))"
"(let-values(((body-suffix-forms_0)(if body-suffix-forms17_0 body-suffix-forms4_0 null)))"
"(let-values(((force-phases_0)(if force-phases18_0 force-phases5_0 null)))"
"(let-values(((encoded-root-expand-ctx-box_0)"
"(if encoded-root-expand-ctx-box19_0 encoded-root-expand-ctx-box6_0 #f)))"
"(let-values(((root-ctx-only-if-syntax?_0)"
"(if root-ctx-only-if-syntax?20_0 root-ctx-only-if-syntax?7_0 #f)))"
"(let-values(((compiled-expression-callback_0)"
"(if compiled-expression-callback21_0 compiled-expression-callback8_0 void)))"
"(let-values(((definition-callback_0)"
"(if definition-callback22_0 definition-callback9_0 void)))"
"(let-values(((other-form-callback_0)"
"(if other-form-callback23_0 other-form-callback10_0 void)))"
"(let-values(((get-module-linklet-info_0)"
"(if get-module-linklet-info24_0"
" get-module-linklet-info11_0"
"(lambda(mod-name_14 p_40)(begin 'get-module-linklet-info #f)))))"
"(let-values(((to-source?_0)(if to-source?25_0 to-source?12_0 #f)))"
"(let-values(((serializable?_0)(if serializable?26_0 serializable?13_0 #t)))"
"(let-values(((cross-linklet-inlining?_1)"
"(if cross-linklet-inlining?27_0 cross-linklet-inlining?14_0 #t)))"
"(let-values()"
"(let-values(((phase_68)(compile-context-phase cctx_11)))"
"(let-values(((self_17)(compile-context-self cctx_11)))"
"(let-values(((syntax-literals_1)(make-syntax-literals)))"
"(let-values(((phase-to-body_0)(make-hasheqv)))"
"(let-values(((add-body!_0)"
"(lambda(phase_67 body_1)"
"(begin"
" 'add-body!"
"(hash-update!"
" phase-to-body_0"
" phase_67"
"(lambda(l_55)(cons body_1 l_55))"
" null)))))"
"(let-values(((phase-to-header_0)(make-hasheqv)))"
"(let-values(((find-or-create-header!_0)"
"(lambda(phase_69)"
"(begin"
" 'find-or-create-header!"
"(let-values(((or-part_135)"
"(hash-ref"
" phase-to-header_0"
" phase_69"
" #f)))"
"(if or-part_135"
" or-part_135"
"(let-values(((header_7)"
"(make-header"
" mpis_14"
" syntax-literals_1)))"
"(begin"
"(hash-set!"
" phase-to-header_0"
" phase_69"
" header_7)"
" header_7))))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_181) force-phases_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_181)))"
"((letrec-values(((for-loop_185)"
"(lambda(lst_182)"
"(begin"
" 'for-loop"
"(if(pair? lst_182)"
"(let-values(((phase_70)"
"(unsafe-car"
" lst_182))"
"((rest_96)"
"(unsafe-cdr"
" lst_182)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(find-or-create-header!_0"
" phase_70)"
"(add-body!_0"
" phase_70"
" '(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_185"
" rest_96)"
"(values))))"
"(values))))))"
" for-loop_185)"
" lst_181)))"
"(values))))"
"(let-values()"
"(let-values(((saw-define-syntaxes?_0) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_11)"
"(let-values()"
"((letrec-values(((loop!_0)"
"(lambda(bodys_3"
" phase_71"
" header_8)"
"(begin"
" 'loop!"
"(begin"
"(let-values(((lst_183)"
" bodys_3))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_183)))"
"((letrec-values(((for-loop_186)"
"(lambda(lst_184)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_184)"
"(let-values(((body_2)"
"(unsafe-car"
" lst_184))"
"((rest_97)"
"(unsafe-cdr"
" lst_184)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_2)"
"(let-values()"
"(begin"
"(let-values(((lst_160)"
"(parsed-define-values-syms"
" body_2)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_160)))"
"((letrec-values(((for-loop_11)"
"(lambda(lst_185)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_185)"
"(let-values(((sym_53)"
"(unsafe-car"
" lst_185))"
"((rest_98)"
"(unsafe-cdr"
" lst_185)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_1)"
"(select-fresh"
" sym_53"
" header_8)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_8)"
" sym_53"
" def-sym_1)"
"(set-header-binding-syms-in-order!"
" header_8"
"(cons"
" sym_53"
"(header-binding-syms-in-order"
" header_8)))"
"(register-as-defined!"
" header_8"
" def-sym_1))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_11"
" rest_98)"
"(values))))"
"(values))))))"
" for-loop_11)"
" lst_160)))"
"(void)))"
"(if(parsed-begin-for-syntax?"
" body_2)"
"(let-values()"
"(loop!_0"
"(parsed-begin-for-syntax-body"
" body_2)"
"(add1"
" phase_71)"
"(find-or-create-header!_0"
"(add1"
" phase_71))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_186"
" rest_97)"
"(values))))"
"(values))))))"
" for-loop_186)"
" lst_183)))"
"(void))))))"
" loop!_0)"
" bodys_2"
" phase_68"
"(find-or-create-header!_0 phase_68)))"
"(void))"
"(values))))"
"(let-values(((as-required?_0)"
"(lambda(header_9)"
"(begin"
" 'as-required?"
"(lambda(sym_54)"
"(registered-as-required?"
" header_9"
" sym_54))))))"
"(let-values(((last-i_0)(sub1(length bodys_2))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_1)"
"(lambda(bodys_4"
" phase_72"
" header_10)"
"(begin"
" 'loop!"
"(begin"
"(let-values(((lst_186)"
" bodys_4)"
"((start_34)"
" 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_186)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-naturals"
" start_34)))"
"((letrec-values(((for-loop_187)"
"(lambda(lst_187"
" pos_91)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_187)"
" #t"
" #f)"
"(let-values(((body_3)"
"(unsafe-car"
" lst_187))"
"((rest_99)"
"(unsafe-cdr"
" lst_187))"
"((i_137)"
" pos_91))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_3)"
"(let-values()"
"(let-values(((ids_5)"
"(parsed-define-values-ids"
" body_3)))"
"(let-values(((binding-syms_0)"
"(parsed-define-values-syms"
" body_3)))"
"(let-values(((def-syms_0)"
"(if(compile-context-module-self"
" cctx_11)"
"(let-values()"
"(reverse$1"
"(let-values(((lst_188)"
" binding-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_188)))"
"((letrec-values(((for-loop_188)"
"(lambda(fold-var_3"
" lst_189)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_189)"
"(let-values(((binding-sym_0)"
"(unsafe-car"
" lst_189))"
"((rest_100)"
"(unsafe-cdr"
" lst_189)))"
"(let-values(((fold-var_176)"
"(let-values(((fold-var_177)"
" fold-var_3))"
"(let-values(((fold-var_178)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_10)"
" binding-sym_0))"
" fold-var_177))))"
"(values"
" fold-var_178)))))"
"(if(not"
" #f)"
"(for-loop_188"
" fold-var_176"
" rest_100)"
" fold-var_176)))"
" fold-var_3)))))"
" for-loop_188)"
" null"
" lst_188)))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_48)"
" binding-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_48)))"
"((letrec-values(((for-loop_71)"
"(lambda(fold-var_35"
" lst_49)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_49)"
"(let-values(((binding-sym_1)"
"(unsafe-car"
" lst_49))"
"((rest_21)"
"(unsafe-cdr"
" lst_49)))"
"(let-values(((fold-var_36)"
"(let-values(((fold-var_37)"
" fold-var_35))"
"(let-values(((fold-var_38)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((temp36_1)"
"(compile-context-self"
" cctx_11))"
"((phase37_1)"
" phase_72)"
"((binding-sym38_0)"
" binding-sym_1)"
"((temp39_0)"
" #f)"
"((temp40_0)"
" #t))"
"(register-required-variable-use!19.1"
" temp40_0"
" #t"
" header_10"
" temp36_1"
" phase37_1"
" binding-sym38_0"
" temp39_0)))"
" fold-var_37))))"
"(values"
" fold-var_38)))))"
"(if(not"
" #f)"
"(for-loop_71"
" fold-var_36"
" rest_21)"
" fold-var_36)))"
" fold-var_35)))))"
" for-loop_71)"
" null"
" lst_48))))))))"
"(let-values(((rhs_1)"
"(compile$2"
"(parsed-define-values-rhs"
" body_3)"
"(let-values(((the-struct_50)"
" cctx_11))"
"(if(compile-context?"
" the-struct_50)"
"(let-values(((phase41_0)"
" phase_72)"
"((header42_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_50)"
" phase41_0"
"(compile-context-self"
" the-struct_50)"
"(compile-context-module-self"
" the-struct_50)"
"(compile-context-full-module-name"
" the-struct_50)"
"(compile-context-lazy-syntax-literals?"
" the-struct_50)"
" header42_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"compile-context?\""
" the-struct_50)))"
"(if(="
"(length"
" ids_5)"
" 1)"
"(car"
" ids_5)"
" #f))))"
"(begin"
"(definition-callback_0)"
"(compiled-expression-callback_0"
" rhs_1"
"(length"
" def-syms_0)"
" phase_72"
"(as-required?_0"
" header_10))"
"(add-body!_0"
" phase_72"
"(propagate-inline-property"
"(correlate*"
"(parsed-s"
" body_3)"
"(list"
" 'define-values"
" def-syms_0"
" rhs_1))"
"(parsed-s"
" body_3)))"
"(if(let-values(((or-part_220)"
"(compile-context-module-self"
" cctx_11)))"
"(if or-part_220"
" or-part_220"
"(null?"
" ids_5)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_0"
" phase_72"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(reverse$1"
"(let-values(((lst_190)"
" def-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_190)))"
"((letrec-values(((for-loop_189)"
"(lambda(fold-var_179"
" lst_191)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_191)"
"(let-values(((def-sym_2)"
"(unsafe-car"
" lst_191))"
"((rest_101)"
"(unsafe-cdr"
" lst_191)))"
"(let-values(((fold-var_180)"
"(let-values(((fold-var_181)"
" fold-var_179))"
"(let-values(((fold-var_182)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'set!"
" def-sym_2"
" '(#f)))"
" fold-var_181))))"
"(values"
" fold-var_182)))))"
"(if(not"
" #f)"
"(for-loop_189"
" fold-var_180"
" rest_101)"
" fold-var_180)))"
" fold-var_179)))))"
" for-loop_189)"
" null"
" lst_190)))))"
" '((void))))"
"(add-body!_0"
" phase_72"
"(compile-top-level-bind"
" ids_5"
" binding-syms_0"
"(let-values(((the-struct_51)"
" cctx_11))"
"(if(compile-context?"
" the-struct_51)"
"(let-values(((phase43_0)"
" phase_72)"
"((header44_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_51)"
" phase43_0"
"(compile-context-self"
" the-struct_51)"
"(compile-context-module-self"
" the-struct_51)"
"(compile-context-full-module-name"
" the-struct_51)"
"(compile-context-lazy-syntax-literals?"
" the-struct_51)"
" header44_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                       \"compile-context?\""
" the-struct_51)))"
" #f)))))))))))"
"(if(parsed-define-syntaxes?"
" body_3)"
"(let-values()"
"(let-values(((ids_6)"
"(parsed-define-syntaxes-ids"
" body_3)))"
"(let-values(((binding-syms_1)"
"(parsed-define-syntaxes-syms"
" body_3)))"
"(let-values(((next-header_0)"
"(find-or-create-header!_0"
"(add1"
" phase_72))))"
"(let-values(((gen-syms_0)"
"(reverse$1"
"(let-values(((lst_192)"
" binding-syms_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_192)))"
"((letrec-values(((for-loop_190)"
"(lambda(fold-var_183"
" lst_193)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_193)"
"(let-values(((binding-sym_2)"
"(unsafe-car"
" lst_193))"
"((rest_102)"
"(unsafe-cdr"
" lst_193)))"
"(let-values(((fold-var_184)"
"(let-values(((fold-var_185)"
" fold-var_183))"
"(let-values(((fold-var_186)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((gen-sym_0)"
"(select-fresh"
" binding-sym_2"
" next-header_0)))"
"(begin"
"(register-as-defined!"
" next-header_0"
" gen-sym_0)"
" gen-sym_0)))"
" fold-var_185))))"
"(values"
" fold-var_186)))))"
"(if(not"
" #f)"
"(for-loop_190"
" fold-var_184"
" rest_102)"
" fold-var_184)))"
" fold-var_183)))))"
" for-loop_190)"
" null"
" lst_192))))))"
"(let-values(((rhs_2)"
"(compile$2"
"(parsed-define-syntaxes-rhs"
" body_3)"
"(let-values(((the-struct_52)"
" cctx_11))"
"(if(compile-context?"
" the-struct_52)"
"(let-values(((phase45_0)"
"(add1"
" phase_72))"
"((header46_0)"
" next-header_0))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_52)"
" phase45_0"
"(compile-context-self"
" the-struct_52)"
"(compile-context-module-self"
" the-struct_52)"
"(compile-context-full-module-name"
" the-struct_52)"
"(compile-context-lazy-syntax-literals?"
" the-struct_52)"
" header46_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                              \"compile-context?\""
" the-struct_52))))))"
"(let-values((()"
"(begin"
"(definition-callback_0)"
"(values))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_0"
" rhs_2"
"(length"
" gen-syms_0)"
"(add1"
" phase_72)"
"(as-required?_0"
" header_10))"
"(values))))"
"(let-values(((transformer-set!s_0)"
"(reverse$1"
"(let-values(((lst_194)"
" binding-syms_1)"
"((lst_195)"
" gen-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_194)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_195)))"
"((letrec-values(((for-loop_41)"
"(lambda(fold-var_187"
" lst_196"
" lst_197)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_196)"
"(pair?"
" lst_197)"
" #f)"
"(let-values(((binding-sym_3)"
"(unsafe-car"
" lst_196))"
"((rest_103)"
"(unsafe-cdr"
" lst_196))"
"((gen-sym_1)"
"(unsafe-car"
" lst_197))"
"((rest_104)"
"(unsafe-cdr"
" lst_197)))"
"(let-values(((fold-var_188)"
"(let-values(((fold-var_189)"
" fold-var_187))"
"(let-values(((fold-var_190)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_3)"
" gen-sym_1))"
" fold-var_189))))"
"(values"
" fold-var_190)))))"
"(if(not"
" #f)"
"(for-loop_41"
" fold-var_188"
" rest_103"
" rest_104)"
" fold-var_188)))"
" fold-var_187)))))"
" for-loop_41)"
" null"
" lst_194"
" lst_195))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_11)"
"(let-values()"
"(add-body!_0"
"(add1"
" phase_72)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_0"
" rhs_2))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_0"
" '((void)))))))"
"(let-values()"
"(add-body!_0"
"(add1"
" phase_72)"
"(generate-top-level-define-syntaxes"
" gen-syms_0"
" rhs_2"
" transformer-set!s_0"
"(compile-top-level-bind"
" ids_6"
" binding-syms_1"
"(let-values(((the-struct_53)"
" cctx_11))"
"(if(compile-context?"
" the-struct_53)"
"(let-values(((phase47_0)"
" phase_72)"
"((header48_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_53)"
" phase47_0"
"(compile-context-self"
" the-struct_53)"
"(compile-context-module-self"
" the-struct_53)"
"(compile-context-full-module-name"
" the-struct_53)"
"(compile-context-lazy-syntax-literals?"
" the-struct_53)"
" header48_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                \"compile-context?\""
" the-struct_53)))"
" gen-syms_0)))))"
"(set! saw-define-syntaxes?_0"
" #t)))))))))))"
"(if(parsed-begin-for-syntax?"
" body_3)"
"(let-values()"
"(loop!_1"
"(parsed-begin-for-syntax-body"
" body_3)"
"(add1"
" phase_72)"
"(find-or-create-header!_0"
"(add1"
" phase_72))))"
"(if(let-values(((or-part_221)"
"(parsed-#%declare?"
" body_3)))"
"(if or-part_221"
" or-part_221"
"(let-values(((or-part_222)"
"(parsed-module?"
" body_3)))"
"(if or-part_222"
" or-part_222"
"(parsed-require?"
" body_3)))))"
"(let-values()"
"(let-values(((e_34)"
"(other-form-callback_0"
" body_3"
"(let-values(((the-struct_54)"
" cctx_11))"
"(if(compile-context?"
" the-struct_54)"
"(let-values(((phase49_0)"
" phase_72)"
"((header50_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_54)"
" phase49_0"
"(compile-context-self"
" the-struct_54)"
"(compile-context-module-self"
" the-struct_54)"
"(compile-context-full-module-name"
" the-struct_54)"
"(compile-context-lazy-syntax-literals?"
" the-struct_54)"
" header50_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"compile-context?\""
" the-struct_54))))))"
"(if e_34"
"(let-values()"
"(begin"
"(compiled-expression-callback_0"
" e_34"
" #f"
" phase_72"
"(as-required?_0"
" header_10))"
"(add-body!_0"
" phase_72"
" e_34)))"
"(void))))"
"(let-values()"
"(let-values(((e_19)"
"(compile$2"
" body_3"
"(let-values(((the-struct_55)"
" cctx_11))"
"(if(compile-context?"
" the-struct_55)"
"(let-values(((phase51_0)"
" phase_72)"
"((header52_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_55)"
" phase51_0"
"(compile-context-self"
" the-struct_55)"
"(compile-context-module-self"
" the-struct_55)"
"(compile-context-full-module-name"
" the-struct_55)"
"(compile-context-lazy-syntax-literals?"
" the-struct_55)"
" header52_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"compile-context?\""
" the-struct_55)))"
" #f"
"(="
" i_137"
" last-i_0))))"
"(begin"
"(compiled-expression-callback_0"
" e_19"
" #f"
" phase_72"
"(as-required?_0"
" header_10))"
"(add-body!_0"
" phase_72"
" e_19)))))))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_187"
" rest_99"
"(+"
" pos_91"
" 1))"
"(values))))"
"(values))))))"
" for-loop_187)"
" lst_186"
" start_34)))"
"(void))))))"
" loop!_1)"
" bodys_2"
" phase_68"
"(find-or-create-header!_0 phase_68))"
"(values))))"
"(let-values(((encoded-root-expand-pos_0)"
"(if encoded-root-expand-ctx-box_0"
"(if(unbox"
" encoded-root-expand-ctx-box_0)"
"(if(not"
"(if root-ctx-only-if-syntax?_0"
"(if(not"
" saw-define-syntaxes?_0)"
"(syntax-literals-empty?"
" syntax-literals_1)"
" #f)"
" #f))"
"(add-syntax-literal!"
" syntax-literals_1"
"(unbox"
" encoded-root-expand-ctx-box_0))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_2)"
"(let-values(((temp53_1)"
"(hash-keys"
" phase-to-body_0))"
"((<54_0) <))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp53_1"
" <54_0))))"
"(let-values(((min-phase_0)"
"(if(pair? phases-in-order_2)"
"(car phases-in-order_2)"
" phase_68)))"
"(let-values(((max-phase_0)"
"(if(pair? phases-in-order_2)"
"(car"
"(reverse$1"
" phases-in-order_2))"
" phase_68)))"
"(let-values(((phase-to-link-info_0)"
"(let-values(((lst_102)"
" phases-in-order_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_102)))"
"((letrec-values(((for-loop_117)"
"(lambda(table_140"
" lst_149)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_149)"
"(let-values(((phase_49)"
"(unsafe-car"
" lst_149))"
"((rest_75)"
"(unsafe-cdr"
" lst_149)))"
"(let-values(((table_141)"
"(let-values(((table_142)"
" table_140))"
"(let-values(((table_143)"
"(let-values()"
"(let-values(((key_56"
" val_50)"
"(let-values()"
"(let-values(((header_11)"
"(hash-ref"
" phase-to-header_0"
" phase_49"
" #f)))"
"(let-values(((link-module-uses_0"
" imports_2"
" extra-inspectorsss_1"
" def-decls_0)"
"(generate-links+imports"
" header_11"
" phase_49"
" cctx_11"
" cross-linklet-inlining?_1)))"
"(values"
" phase_49"
"(link-info1.1"
" link-module-uses_0"
" imports_2"
" extra-inspectorsss_1"
" def-decls_0)))))))"
"(hash-set"
" table_142"
" key_56"
" val_50)))))"
"(values"
" table_143)))))"
"(if(not"
" #f)"
"(for-loop_117"
" table_141"
" rest_75)"
" table_141)))"
" table_140)))))"
" for-loop_117)"
" '#hash()"
" lst_102)))))"
"(let-values(((body-linklets+module-use*s_0)"
"(let-values(((lst_198)"
" phases-in-order_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_198)))"
"((letrec-values(((for-loop_191)"
"(lambda(table_144"
" lst_199)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_199)"
"(let-values(((phase_73)"
"(unsafe-car"
" lst_199))"
"((rest_105)"
"(unsafe-cdr"
" lst_199)))"
"(let-values(((table_145)"
"(let-values(((table_146)"
" table_144))"
"(let-values(((table_147)"
"(let-values()"
"(let-values(((key_57"
" val_51)"
"(let-values()"
"(let-values(((bodys_5)"
"(hash-ref"
" phase-to-body_0"
" phase_73)))"
"(let-values(((li_0)"
"(hash-ref"
" phase-to-link-info_0"
" phase_73)))"
"(let-values(((binding-sym-to-define-sym_0)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_0"
" phase_73))))"
"(let-values(((module-use*s_0)"
"(module-uses-add-extra-inspectorsss"
"(link-info-link-module-uses"
" li_0)"
"(link-info-extra-inspectorsss"
" li_0))))"
"(let-values(((linklet_1"
" new-module-use*s_0)"
"(let-values()"
"((if to-source?_0"
"(lambda(l_56"
" name_46"
" keys_0"
" getter_0)"
"(values"
" l_56"
" keys_0))"
"(lambda(l_57"
" name_47"
" keys_1"
" getter_1)"
"(1/compile-linklet"
" l_57"
" name_47"
" keys_1"
" getter_1"
" serializable?_0)))"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_0"
"(link-info-imports"
" li_0))"
"(qq-append"
"(link-info-def-decls"
" li_0)"
"(reverse$1"
"(let-values(((lst_200)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_0"
" phase_73))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_200)))"
"((letrec-values(((for-loop_121)"
"(lambda(fold-var_191"
" lst_107)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_107)"
"(let-values(((binding-sym_4)"
"(unsafe-car"
" lst_107))"
"((rest_106)"
"(unsafe-cdr"
" lst_107)))"
"(let-values(((fold-var_192)"
"(let-values(((fold-var_193)"
" fold-var_191))"
"(let-values(((fold-var_194)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_3)"
"(hash-ref"
" binding-sym-to-define-sym_0"
" binding-sym_4)))"
"(if(eq?"
" def-sym_3"
" binding-sym_4)"
" def-sym_3"
"(list"
" def-sym_3"
" binding-sym_4))))"
" fold-var_193))))"
"(values"
" fold-var_194)))))"
"(if(not"
" #f)"
"(for-loop_121"
" fold-var_192"
" rest_106)"
" fold-var_192)))"
" fold-var_191)))))"
" for-loop_121)"
" null"
" lst_200)))))"
"(qq-append"
"(reverse$1"
" bodys_5)"
" body-suffix-forms_0))"
" 'module"
"(list->vector"
"(append"
" body-import-instances_0"
" module-use*s_0))"
"(make-module-use-to-linklet"
" cross-linklet-inlining?_1"
"(compile-context-namespace"
" cctx_11)"
" get-module-linklet-info_0"
" module-use*s_0)))))"
"(values"
" phase_73"
"(cons"
" linklet_1"
"(list-tail"
"(vector->list"
" new-module-use*s_0)"
"(length"
" body-imports_0))))))))))))"
"(hash-set"
" table_146"
" key_57"
" val_51)))))"
"(values"
" table_147)))))"
"(if(not"
" #f)"
"(for-loop_191"
" table_145"
" rest_105)"
" table_145)))"
" table_144)))))"
" for-loop_191)"
" '#hasheq()"
" lst_198)))))"
"(let-values(((body-linklets_0)"
"(let-values(((ht_107)"
" body-linklets+module-use*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_107)))"
"((letrec-values(((for-loop_192)"
"(lambda(table_148"
" i_138)"
"(begin"
" 'for-loop"
"(if i_138"
"(let-values(((phase_74"
" l+mu*s_0)"
"(hash-iterate-key+value"
" ht_107"
" i_138)))"
"(let-values(((table_149)"
"(let-values(((table_150)"
" table_148))"
"(let-values(((table_151)"
"(let-values()"
"(let-values(((key_58"
" val_52)"
"(let-values()"
"(values"
" phase_74"
"(car"
" l+mu*s_0)))))"
"(hash-set"
" table_150"
" key_58"
" val_52)))))"
"(values"
" table_151)))))"
"(if(not"
" #f)"
"(for-loop_192"
" table_149"
"(hash-iterate-next"
" ht_107"
" i_138))"
" table_149)))"
" table_148)))))"
" for-loop_192)"
" '#hasheq()"
"(hash-iterate-first"
" ht_107))))))"
"(let-values(((phase-to-link-module-uses_1)"
"(let-values(((ht_108)"
" body-linklets+module-use*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_108)))"
"((letrec-values(((for-loop_193)"
"(lambda(table_152"
" i_139)"
"(begin"
" 'for-loop"
"(if i_139"
"(let-values(((phase_75"
" l+mu*s_1)"
"(hash-iterate-key+value"
" ht_108"
" i_139)))"
"(let-values(((table_153)"
"(let-values(((table_154)"
" table_152))"
"(let-values(((table_155)"
"(let-values()"
"(let-values(((key_59"
" val_53)"
"(let-values()"
"(values"
" phase_75"
"(module-uses-strip-extra-inspectorsss"
"(cdr"
" l+mu*s_1))))))"
"(hash-set"
" table_154"
" key_59"
" val_53)))))"
"(values"
" table_155)))))"
"(if(not"
" #f)"
"(for-loop_193"
" table_153"
"(hash-iterate-next"
" ht_108"
" i_139))"
" table_153)))"
" table_152)))))"
" for-loop_193)"
" '#hasheq()"
"(hash-iterate-first"
" ht_108))))))"
"(let-values(((phase-to-link-module-uses-expr_0)"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_1"
" mpis_14)))"
"(let-values(((phase-to-link-extra-inspectorsss_0)"
"(let-values(((ht_109)"
" body-linklets+module-use*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_109)))"
"((letrec-values(((for-loop_194)"
"(lambda(table_156"
" i_140)"
"(begin"
" 'for-loop"
"(if i_140"
"(let-values(((phase_76"
" l+mu*s_2)"
"(hash-iterate-key+value"
" ht_109"
" i_140)))"
"(let-values(((table_157)"
"(let-values(((extra-inspectorsss_2)"
"(module-uses-extract-extra-inspectorsss"
"(cdr"
" l+mu*s_2)"
"(car"
" l+mu*s_2)"
" cross-linklet-inlining?_1"
"(length"
" body-imports_0))))"
"(begin"
" #t"
"((letrec-values(((for-loop_195)"
"(lambda(table_158)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_159)"
"(let-values(((table_160)"
" table_158))"
"(if extra-inspectorsss_2"
"(let-values(((table_161)"
" table_160))"
"(let-values(((table_162)"
"(let-values()"
"(let-values(((key_60"
" val_54)"
"(let-values()"
"(values"
" phase_76"
" extra-inspectorsss_2))))"
"(hash-set"
" table_161"
" key_60"
" val_54)))))"
"(values"
" table_162)))"
" table_160))))"
" table_159))))))"
" for-loop_195)"
" table_156)))))"
"(if(not"
" #f)"
"(for-loop_194"
" table_157"
"(hash-iterate-next"
" ht_109"
" i_140))"
" table_157)))"
" table_156)))))"
" for-loop_194)"
" '#hash()"
"(hash-iterate-first"
" ht_109))))))"
"(values"
" body-linklets_0"
" min-phase_0"
" max-phase_0"
" phase-to-link-module-uses_1"
" phase-to-link-module-uses-expr_0"
" phase-to-link-extra-inspectorsss_0"
" syntax-literals_1"
" encoded-root-expand-pos_0)))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_7 binding-syms_2 cctx_12 trans-exprs_0)"
"(begin"
"(let-values(((phase_77)(compile-context-phase cctx_12)))"
"(let-values(((self_18)(compile-context-self cctx_12)))"
"(let-values(((header_12)(compile-context-header cctx_12)))"
"(let-values(((mpis_15)(header-module-path-indexes header_12)))"
"(let-values(((top-level-bind-scope_2)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_12)))))"
"(let-values(((self-expr_0)(add-module-path-index! mpis_15 self_18)))"
"(list*"
" 'begin"
"(reverse$1"
"(let-values(((lst_201) ids_7)"
"((lst_202) binding-syms_2)"
"((lst_203)"
"(let-values(((or-part_14) trans-exprs_0))"
"(if or-part_14"
" or-part_14"
"(reverse$1"
"(let-values(((lst_204) ids_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_204)))"
"((letrec-values(((for-loop_196)"
"(lambda(fold-var_195 lst_205)"
"(begin"
" 'for-loop"
"(if(pair? lst_205)"
"(let-values(((id_48)(unsafe-car lst_205))"
"((rest_107)(unsafe-cdr lst_205)))"
"(let-values(((fold-var_196)"
"(let-values(((fold-var_197)"
" fold-var_195))"
"(let-values(((fold-var_198)"
"(let-values()"
"(cons"
"(let-values()"
" ''#f)"
" fold-var_197))))"
"(values fold-var_198)))))"
"(if(not #f)"
"(for-loop_196 fold-var_196 rest_107)"
" fold-var_196)))"
" fold-var_195)))))"
" for-loop_196)"
" null"
" lst_204))))))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_201)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_202)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_203)))"
"((letrec-values(((for-loop_197)"
"(lambda(fold-var_199 lst_2 lst_206 lst_207)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_2)(if(pair? lst_206)(pair? lst_207) #f) #f)"
"(let-values(((id_49)(unsafe-car lst_2))"
"((rest_108)(unsafe-cdr lst_2))"
"((binding-sym_5)(unsafe-car lst_206))"
"((rest_109)(unsafe-cdr lst_206))"
"((trans-expr_0)(unsafe-car lst_207))"
"((rest_110)(unsafe-cdr lst_207)))"
"(let-values(((fold-var_200)"
"(let-values(((fold-var_201) fold-var_199))"
"(let-values(((fold-var_202)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_0)"
"(compile-quote-syntax"
"(remove-scope"
" id_49"
" top-level-bind-scope_2)"
" cctx_12)))"
"(list"
" top-level-bind!-id"
" id-stx_0"
" self-expr_0"
" phase_77"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_5)"
"(if trans-exprs_0 #t #f)"
" trans-expr_0)))"
" fold-var_201))))"
"(values fold-var_202)))))"
"(if(not #f)"
"(for-loop_197 fold-var_200 rest_108 rest_109 rest_110)"
" fold-var_200)))"
" fold-var_199)))))"
" for-loop_197)"
" null"
" lst_201"
" lst_202"
" lst_203))))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_1 rhs_3 transformer-set!s_1 finish_1)"
"(begin"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_3)"
"(list"
" 'case-lambda"
"(list gen-syms_1(list* 'begin(qq-append transformer-set!s_1(list* finish_1 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_1"
"(list*"
" 'values"
"(reverse$1"
"(let-values(((lst_208) gen-syms_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_208)))"
"((letrec-values(((for-loop_198)"
"(lambda(fold-var_203 lst_209)"
"(begin"
" 'for-loop"
"(if(pair? lst_209)"
"(let-values(((s_236)(unsafe-car lst_209))((rest_111)(unsafe-cdr lst_209)))"
"(let-values(((fold-var_204)"
"(let-values(((fold-var_205) fold-var_203))"
"(let-values(((fold-var_206)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_205))))"
"(values fold-var_206)))))"
"(if(not #f)(for-loop_198 fold-var_204 rest_111) fold-var_204)))"
" fold-var_203)))))"
" for-loop_198)"
" null"
" lst_208)))))))"
"(list* 'begin finish_1 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_1 '((apply values args)))) '((void)))))))))"
"(define-values"
"(propagate-inline-property)"
"(lambda(e_35 orig-s_22)"
"(begin"
"(let-values(((v_160)(syntax-property$1 orig-s_22 'compiler-hint:cross-module-inline)))"
"(if v_160(correlated-property e_35 'compiler-hint:cross-module-inline v_160) e_35)))))"
"(define-values"
"(make-module-use-to-linklet)"
"(lambda(cross-linklet-inlining?_2 ns_56 get-module-linklet-info_1 init-mu*s_0)"
"(begin"
"(let-values(((mu*-intern-table_0)(make-hash)))"
"(let-values(((intern-module-use*_0)"
"(lambda(mu*_5)"
"(begin"
" 'intern-module-use*"
"(let-values(((mod-name_15)(1/module-path-index-resolve(module-use-module mu*_5))))"
"(let-values(((existing-mu*_1)"
"(hash-ref mu*-intern-table_0(cons mod-name_15(module-use-phase mu*_5)) #f)))"
"(if existing-mu*_1"
"(let-values()"
"(begin(module-use-merge-extra-inspectorss! existing-mu*_1 mu*_5) existing-mu*_1))"
"(let-values()"
"(begin"
"(hash-set! mu*-intern-table_0(cons mod-name_15(module-use-phase mu*_5)) mu*_5)"
" mu*_5)))))))))"
"(begin"
"(let-values(((lst_210) init-mu*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_210)))"
"((letrec-values(((for-loop_199)"
"(lambda(lst_137)"
"(begin"
" 'for-loop"
"(if(pair? lst_137)"
"(let-values(((mu*_6)(unsafe-car lst_137))((rest_112)(unsafe-cdr lst_137)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()(intern-module-use*_0 mu*_6))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_199 rest_112)(values))))"
"(values))))))"
" for-loop_199)"
" lst_210)))"
"(void)"
"(lambda(mu*-or-instance_0)"
"(if(1/instance? mu*-or-instance_0)"
"(let-values()(values mu*-or-instance_0 #f))"
"(if(not cross-linklet-inlining?_2)"
"(let-values()(values #f #f))"
"(if mu*-or-instance_0"
"(let-values()"
"(let-values(((mu*_7) mu*-or-instance_0))"
"(let-values(((mod-name_16)(1/module-path-index-resolve(module-use-module mu*_7))))"
"(let-values(((mli_0)"
"(let-values(((or-part_223)"
"(get-module-linklet-info_1 mod-name_16(module-use-phase mu*_7))))"
"(if or-part_223"
" or-part_223"
"(namespace->module-linklet-info"
" ns_56"
" mod-name_16"
"(module-use-phase mu*_7))))))"
"(begin"
"(if mli_0"
"(let-values()"
"(module-use*-declaration-inspector! mu*_7(module-linklet-info-inspector mli_0)))"
"(void))"
"(if mli_0"
"(values"
"(module-linklet-info-linklet-or-instance mli_0)"
"(if(module-linklet-info-module-uses mli_0)"
"(list->vector"
"(append"
" '(#f #f)"
"(let-values(((mus_2)(module-linklet-info-module-uses mli_0))"
"((extra-inspectorsss_3)"
"(module-linklet-info-extra-inspectorsss mli_0)))"
"(reverse$1"
"(let-values(((lst_211) mus_2)"
"((lst_212)"
"(1/linklet-import-variables"
"(module-linklet-info-linklet-or-instance mli_0)))"
"((lst_213)"
"(let-values(((or-part_224) extra-inspectorsss_3))"
"(if or-part_224 or-part_224 mus_2))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_211)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_212)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_213)))"
"((letrec-values(((for-loop_200)"
"(lambda(fold-var_207 lst_214 lst_215 lst_216)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_214)"
"(if(pair? lst_215)(pair? lst_216) #f)"
" #f)"
"(let-values(((sub-mu_0)(unsafe-car lst_214))"
"((rest_113)(unsafe-cdr lst_214))"
"((imports_3)(unsafe-car lst_215))"
"((rest_114)(unsafe-cdr lst_215))"
"((extra-inspectorss_13)"
"(unsafe-car lst_216))"
"((rest_115)(unsafe-cdr lst_216)))"
"(let-values(((fold-var_208)"
"(let-values(((fold-var_209)"
" fold-var_207))"
"(let-values(((fold-var_210)"
"(let-values()"
"(cons"
"(let-values()"
"(intern-module-use*_0"
"(module-use+extra-inspectors"
"(module-path-index-shift"
"(module-use-module"
" sub-mu_0)"
"(module-linklet-info-self"
" mli_0)"
"(module-use-module"
" mu*_7))"
"(module-use-phase"
" sub-mu_0)"
" imports_3"
"(module-linklet-info-inspector"
" mli_0)"
"(module-linklet-info-extra-inspector"
" mli_0)"
"(if extra-inspectorsss_3"
" extra-inspectorss_13"
" #f))))"
" fold-var_209))))"
"(values fold-var_210)))))"
"(if(not #f)"
"(for-loop_200"
" fold-var_208"
" rest_113"
" rest_114"
" rest_115)"
" fold-var_208)))"
" fold-var_207)))))"
" for-loop_200)"
" null"
" lst_211"
" lst_212"
" lst_213)))))))"
" #f))"
"(values #f #f)))))))"
"(let-values()(values #f #f))))))))))))"
"(define-values"
"(build-shared-data-linklet)"
"(lambda(cims_0 ns_41)"
"(begin"
"(let-values(((mpis_16)(make-module-path-index-table)))"
"(let-values(((mpi-trees_0)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_1)"
"(let-values(((vec_53 i_141)"
"(let-values(((vec_54 len_28)"
"(let-values(((vec_55)(compiled-in-memory-mpis cim_1)))"
"(begin"
"(check-vector vec_55)"
"(values vec_55(unsafe-vector-length vec_55))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_91)"
"(lambda(vec_56 i_142 pos_92)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_92 len_28)"
"(let-values(((mpi_42)"
"(unsafe-vector-ref vec_54 pos_92)))"
"(let-values(((vec_57 i_143)"
"(let-values(((vec_58) vec_56)"
"((i_144) i_142))"
"(let-values(((vec_59 i_145)"
"(let-values()"
"(let-values(((new-vec_3)"
"(if(eq?"
" i_144"
"(unsafe-vector*-length"
" vec_58))"
"(grow-vector"
" vec_58)"
" vec_58)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_3"
" i_144"
"(let-values()"
"(add-module-path-index!/pos"
" mpis_16"
" mpi_42)))"
"(values"
" new-vec_3"
"(unsafe-fx+"
" i_144"
" 1)))))))"
"(values vec_59 i_145)))))"
"(if(not #f)"
"(for-loop_91"
" vec_57"
" i_143"
"(unsafe-fx+ 1 pos_92))"
"(values vec_57 i_143))))"
"(values vec_56 i_142))))))"
" for-loop_91)"
"(make-vector 16)"
" 0"
" 0)))))"
"(shrink-vector vec_53 i_141))))))"
"(let-values(((syntax-literals_2)(make-syntax-literals)))"
"(let-values(((syntax-literals-trees_0)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_2)"
"(add-syntax-literals! syntax-literals_2(compiled-in-memory-syntax-literals cim_2))))))"
"(let-values(((module-uses-tables_0) null))"
"(let-values(((module-uses-tables-count_0) 0))"
"(let-values(((phase-to-link-module-uses-trees_0)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_3)"
"(let-values(((pos_93) module-uses-tables-count_0))"
"(begin"
"(set! module-uses-tables_0"
"(cons"
"(compiled-in-memory-phase-to-link-module-uses cim_3)"
" module-uses-tables_0))"
"(set! module-uses-tables-count_0(add1 pos_93))"
" pos_93))))))"
"(let-values(((syntax-literals-expr_0)"
"(generate-eager-syntax-literals! syntax-literals_2 mpis_16 0 #f ns_41)))"
"(let-values(((phase-to-link-module-uses-expr_1)"
"(list*"
" 'vector"
"(reverse$1"
"(let-values(((lst_217)(reverse$1 module-uses-tables_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_217)))"
"((letrec-values(((for-loop_100)"
"(lambda(fold-var_64 lst_84)"
"(begin"
" 'for-loop"
"(if(pair? lst_84)"
"(let-values(((phase-to-link-module-uses_2)"
"(unsafe-car lst_84))"
"((rest_116)(unsafe-cdr lst_84)))"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_151)"
" fold-var_64))"
"(let-values(((fold-var_9)"
"(let-values()"
"(cons"
"(let-values()"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_2"
" mpis_16))"
" fold-var_151))))"
"(values fold-var_9)))))"
"(if(not #f)"
"(for-loop_100 fold-var_29 rest_116)"
" fold-var_29)))"
" fold-var_64)))))"
" for-loop_100)"
" null"
" lst_217)))))))"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
" mpi-vector-id"
" '(mpi-vector-trees"
" phase-to-link-modules-vector"
" phase-to-link-modules-trees"
" syntax-literals"
" syntax-literals-trees))"
"(list 'define-values(list mpi-vector-id)(generate-module-path-index-deserialize mpis_16))"
"(list 'define-values '(mpi-vector-trees)(list 'quote mpi-trees_0))"
"(list 'define-values '(phase-to-link-modules-vector) phase-to-link-module-uses-expr_1)"
"(list"
" 'define-values"
" '(phase-to-link-modules-trees)"
"(list 'quote phase-to-link-module-uses-trees_0))"
"(list 'define-values '(syntax-literals) syntax-literals-expr_0)"
"(list"
" 'define-values"
" '(syntax-literals-trees)"
"(list 'quote syntax-literals-trees_0))))))))))))))))"
"(define-values"
"(map-cim-tree)"
"(lambda(cims_1 proc_7)"
"(begin"
"((letrec-values(((loop_38)"
"(lambda(cims_2)"
"(begin"
" 'loop"
"(reverse$1"
"(let-values(((lst_218) cims_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_218)))"
"((letrec-values(((for-loop_201)"
"(lambda(fold-var_211 lst_78)"
"(begin"
" 'for-loop"
"(if(pair? lst_78)"
"(let-values(((cim_4)(unsafe-car lst_78))"
"((rest_35)(unsafe-cdr lst_78)))"
"(let-values(((fold-var_154)"
"(let-values(((fold-var_164) fold-var_211))"
"(let-values(((fold-var_165)"
"(let-values()"
"(cons"
"(let-values()"
"(vector"
"(proc_7 cim_4)"
"(loop_38"
"(compiled-in-memory-pre-compiled-in-memorys"
" cim_4))"
"(loop_38"
"(compiled-in-memory-post-compiled-in-memorys"
" cim_4))))"
" fold-var_164))))"
"(values fold-var_165)))))"
"(if(not #f)"
"(for-loop_201 fold-var_154 rest_35)"
" fold-var_154)))"
" fold-var_211)))))"
" for-loop_201)"
" null"
" lst_218))))))))"
" loop_38)"
" cims_1))))"
"(define-values"
"(compiled-tops->compiled-top8.1)"
"(lambda(merge-serialization?2_0"
" merge-serialization?5_0"
" namespace3_0"
" namespace6_0"
" to-source?1_0"
" to-source?4_0"
" all-cims7_0)"
"(begin"
" 'compiled-tops->compiled-top8"
"(let-values(((all-cims_0) all-cims7_0))"
"(let-values(((to-source?_1)(if to-source?4_0 to-source?1_0 #f)))"
"(let-values(((merge-serialization?_0)(if merge-serialization?5_0 merge-serialization?2_0 #f)))"
"(let-values(((ns_57)(if namespace6_0 namespace3_0 #f)))"
"(let-values()"
"(let-values(((cims_3)(remove-nontail-purely-functional all-cims_0)))"
"(if(= 1(length cims_3))"
"(let-values()(car cims_3))"
"(let-values()"
"(let-values(((sequence-ht_0)"
"(let-values(((lst_219) cims_3)((start_35) 0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_219)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_35)))"
"((letrec-values(((for-loop_202)"
"(lambda(table_163 lst_94 pos_94)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_94) #t #f)"
"(let-values(((cim_5)(unsafe-car lst_94))"
"((rest_34)(unsafe-cdr lst_94))"
"((i_74) pos_94))"
"(let-values(((table_164)"
"(let-values(((table_165) table_163))"
"(let-values(((table_166)"
"(let-values()"
"(let-values(((key_61"
" val_55)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_74))"
"((if to-source?_1"
" values"
" compiled-in-memory-linklet-directory)"
" cim_5)))))"
"(hash-set"
" table_165"
" key_61"
" val_55)))))"
"(values table_166)))))"
"(if(not #f)"
"(for-loop_202 table_164 rest_34(+ pos_94 1))"
" table_164)))"
" table_163)))))"
" for-loop_202)"
" '#hasheq()"
" lst_219"
" start_35)))))"
"(let-values(((ht_110)"
"(if merge-serialization?_0"
"(hash-set"
" sequence-ht_0"
" 'data"
"(1/hash->linklet-directory"
"(hasheq"
" #f"
"(1/hash->linklet-bundle"
"(hasheq 0(build-shared-data-linklet cims_3 ns_57))))))"
" sequence-ht_0)))"
"(if to-source?_1"
"(let-values() ht_110)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_110)"
" #f"
" #f"
" #f"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_3"
" null"
" #f"
" #f))))))))))))))))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_0)"
"(begin"
"(let-values(((ht_73)(1/linklet-directory->hash ld_0)))"
"(reverse$1"
"(let-values(((start_36) 0)((end_25)(hash-count ht_73))((inc_19) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_36 end_25 inc_19)))"
"((letrec-values(((for-loop_27)"
"(lambda(fold-var_17 pos_95)"
"(begin"
" 'for-loop"
"(if(< pos_95 end_25)"
"(let-values(((i_146) pos_95))"
"(let-values(((fold-var_18)"
"(let-values(((top_0)"
"(hash-ref"
" ht_73"
"(string->symbol(number->string i_146))"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_203)"
"(lambda(fold-var_68)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_69)"
"(let-values(((fold-var_212)"
" fold-var_68))"
"(if top_0"
"(let-values(((fold-var_213)"
" fold-var_212))"
"(let-values(((fold-var_214)"
"(let-values()"
"(cons"
"(let-values()"
" top_0)"
" fold-var_213))))"
"(values"
" fold-var_214)))"
" fold-var_212))))"
" fold-var_69))))))"
" for-loop_203)"
" fold-var_17)))))"
"(if(not #f)(for-loop_27 fold-var_18(+ pos_95 inc_19)) fold-var_18)))"
" fold-var_17)))))"
" for-loop_27)"
" null"
" start_36))))))))"
"(define-values"
"(remove-nontail-purely-functional)"
"(lambda(cims_4)"
"(begin"
"((letrec-values(((loop_87)"
"(lambda(cims_5)"
"(begin"
" 'loop"
"(if(null? cims_5)"
"(let-values() null)"
"(if(null?(cdr cims_5))"
"(let-values() cims_5)"
"(if(if(compiled-in-memory?(car cims_5))"
"(compiled-in-memory-purely-functional?(car cims_5))"
" #f)"
"(let-values()(loop_87(cdr cims_5)))"
"(let-values()(cons(car cims_5)(cdr cims_5))))))))))"
" loop_87)"
" cims_4))))"
"(define-values"
"(struct:known-defined/delay known-defined/delay2.1 known-defined/delay? known-defined/delay-thunk)"
"(let-values(((struct:_64 make-_64 ?_64 -ref_64 -set!_64)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-defined/delay #f 1 0 #f null 'prefab #f '(0) #f 'known-defined/delay)))))"
"(values struct:_64 make-_64 ?_64(make-struct-field-accessor -ref_64 0 'thunk))))"
"(define-values"
"(struct:known-property known-property3.1 known-property?)"
"(let-values(((struct:_33 make-_33 ?_33 -ref_33 -set!_33)"
"(let-values()"
"(let-values()(make-struct-type 'known-property #f 0 0 #f null 'prefab #f '() #f 'known-property)))))"
"(values struct:_33 make-_33 ?_33)))"
"(define-values"
"(struct:known-function known-function4.1 known-function? known-function-arity known-function-pure?)"
"(let-values(((struct:_65 make-_65 ?_65 -ref_65 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-function #f 2 0 #f null 'prefab #f '(0 1) #f 'known-function)))))"
"(values"
" struct:_65"
" make-_65"
" ?_65"
"(make-struct-field-accessor -ref_65 0 'arity)"
"(make-struct-field-accessor -ref_65 1 'pure?))))"
"(define-values"
"(struct:known-function-of-satisfying"
" known-function-of-satisfying5.1"
" known-function-of-satisfying?"
" known-function-of-satisfying-arg-predicate-keys)"
"(let-values(((struct:_40 make-_40 ?_40 -ref_40 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'known-function-of-satisfying"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'known-function-of-satisfying)))))"
"(values struct:_40 make-_40 ?_40(make-struct-field-accessor -ref_40 0 'arg-predicate-keys))))"
"(define-values"
"(struct:known-predicate known-predicate6.1 known-predicate? known-predicate-key)"
"(let-values(((struct:_11 make-_11 ?_11 -ref_11 -set!_11)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-predicate #f 1 0 #f null 'prefab #f '(0) #f 'known-predicate)))))"
"(values struct:_11 make-_11 ?_11(make-struct-field-accessor -ref_11 0 'key))))"
"(define-values"
"(struct:known-satisfies known-satisfies7.1 known-satisfies? known-satisfies-predicate-key)"
"(let-values(((struct:_66 make-_66 ?_66 -ref_66 -set!_66)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-satisfies #f 1 0 #f null 'prefab #f '(0) #f 'known-satisfies)))))"
"(values struct:_66 make-_66 ?_66(make-struct-field-accessor -ref_66 0 'predicate-key))))"
"(define-values"
"(struct:known-struct-op known-struct-op8.1 known-struct-op? known-struct-op-type known-struct-op-field-count)"
"(let-values(((struct:_36 make-_36 ?_36 -ref_36 -set!_36)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'known-struct-op)))))"
"(values"
" struct:_36"
" make-_36"
" ?_36"
"(make-struct-field-accessor -ref_36 0 'type)"
"(make-struct-field-accessor -ref_36 1 'field-count))))"
"(define-values"
"(lookup-defn)"
"(lambda(defns_0 sym_55)"
"(begin"
"(let-values(((d_29)(hash-ref defns_0 sym_55 #f)))"
"(if(known-defined/delay? d_29)"
"(let-values()(begin((known-defined/delay-thunk d_29))(lookup-defn defns_0 sym_55)))"
"(let-values() d_29))))))"
"(define-values"
"(any-side-effects?9.1)"
"(lambda(known-defns2_0"
" known-defns5_0"
" known-locals1_0"
" known-locals4_0"
" ready-variable?3_0"
" ready-variable?6_0"
" e7_0"
" expected-results8_0)"
"(begin"
" 'any-side-effects?9"
"(let-values(((e_36) e7_0))"
"(let-values(((expected-results_0) expected-results8_0))"
"(let-values(((locals_0)(if known-locals4_0 known-locals1_0 '#hasheq())))"
"(let-values(((defns_1)(if known-defns5_0 known-defns2_0 '#hasheq())))"
"(let-values(((ready-variable?_0)"
"(if ready-variable?6_0 ready-variable?3_0(lambda(id_2)(begin 'ready-variable? #f)))))"
"(let-values()"
"(let-values(((effects?_0)"
"(lambda(e_37 expected-results_1 locals_1)"
"(begin"
" 'effects?"
"(let-values(((locals14_0) locals_1)"
"((defns15_0) defns_1)"
"((ready-variable?16_0) ready-variable?_0))"
"(any-side-effects?9.1"
" defns15_0"
" #t"
" locals14_0"
" #t"
" ready-variable?16_0"
" #t"
" e_37"
" expected-results_1))))))"
"(let-values(((actual-results_0)"
"((letrec-values(((loop_88)"
"(lambda(e_38 locals_2)"
"(begin"
" 'loop"
"(let-values(((tmp_26)"
"(if(pair?(correlated-e e_38))"
"(correlated-e(car(correlated-e e_38)))"
" #f)))"
"(let-values(((index_1)"
"(if(symbol? tmp_26)"
"(hash-ref"
" '#hasheq((#%variable-reference . 1)"
"(begin . 5)"
"(begin0 . 6)"
"(case-lambda . 1)"
"(if . 11)"
"(lambda . 1)"
"(let-values . 2)"
"(letrec-values . 2)"
"(make-struct-field-accessor . 8)"
"(make-struct-field-mutator . 9)"
"(make-struct-type . 7)"
"(make-struct-type-property . 10)"
"(quote . 1)"
"(values . 3)"
"(void . 4))"
" tmp_26"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_1 5)"
"(if(unsafe-fx< index_1 2)"
"(if(unsafe-fx< index_1 1)"
"(let-values()"
"(let-values(((v_31)(correlated-e e_38)))"
"(if(let-values(((or-part_164)(string? v_31)))"
"(if or-part_164"
" or-part_164"
"(let-values(((or-part_76)"
"(number? v_31)))"
"(if or-part_76"
" or-part_76"
"(let-values(((or-part_77)"
"(boolean? v_31)))"
"(if or-part_77"
" or-part_77"
"(char? v_31)))))))"
"(let-values() 1)"
"(let-values(((c1_24)"
"(if(pair? v_31)"
"(let-values(((rator_0)"
"(correlated-e"
"(car v_31))))"
"(let-values(((or-part_79)"
"(hash-ref"
" locals_2"
" rator_0"
" #f)))"
"(if or-part_79"
" or-part_79"
"(lookup-defn"
" defns_1"
" rator_0))))"
" #f)))"
"(if c1_24"
"((lambda(d_30)"
"(let-values(((ok?_17 _17_0 e18_0)"
"(let-values(((s_81) e_38))"
"(let-values(((orig-s_23)"
" s_81))"
"(let-values(((_17_1"
" e18_1)"
"(let-values(((s_306)"
"(if(1/syntax?"
" s_81)"
"(syntax-e$2"
" s_81)"
" s_81)))"
"(if(pair?"
" s_306)"
"(let-values(((_19_0)"
"(let-values(((s_307)"
"(car"
" s_306)))"
" s_307))"
"((e20_0)"
"(let-values(((s_35)"
"(cdr"
" s_306)))"
"(let-values(((s_178)"
"(if(1/syntax?"
" s_35)"
"(syntax-e$2"
" s_35)"
" s_35)))"
"(let-values(((flat-s_13)"
"(to-syntax-list.1$1"
" s_178)))"
"(if(not"
" flat-s_13)"
"(let-values()"
"((lambda(false_0"
" str_5"
" e_14)"
"(error"
" str_5))"
" #f"
"                                                                                                                                            \"bad syntax\""
" orig-s_23))"
"(let-values()"
" flat-s_13)))))))"
"(values"
" _19_0"
" e20_0))"
"((lambda(false_1"
" str_6"
" e_39)"
"(error"
" str_6))"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_23)))))"
"(values"
" #t"
" _17_1"
" e18_1))))))"
"(let-values(((n-args_0)"
"(length e18_0)))"
"(if(let-values(((or-part_170)"
"(if(let-values(((or-part_100)"
"(if(known-struct-op?"
" d_30)"
"(if(eq?"
" 'constructor"
"(known-struct-op-type"
" d_30))"
"(="
"(known-struct-op-field-count"
" d_30)"
" n-args_0)"
" #f)"
" #f)))"
"(if or-part_100"
" or-part_100"
"(if(known-function?"
" d_30)"
"(if(known-function-pure?"
" d_30)"
"(arity-includes?"
"(known-function-arity"
" d_30)"
" n-args_0)"
" #f)"
" #f)))"
"(let-values(((lst_7)"
" e18_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_7)))"
"((letrec-values(((for-loop_0)"
"(lambda(result_73"
" lst_8)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_8)"
"(let-values(((e_2)"
"(unsafe-car"
" lst_8))"
"((rest_0)"
"(unsafe-cdr"
" lst_8)))"
"(let-values(((result_74)"
"(let-values()"
"(let-values(((result_75)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_2"
" 1"
" locals_2))))))"
"(values"
" result_75)))))"
"(if(if(not"
"((lambda x_55"
"(not"
" result_74))"
" e_2))"
"(not"
" #f)"
" #f)"
"(for-loop_0"
" result_74"
" rest_0)"
" result_74)))"
" result_73)))))"
" for-loop_0)"
" #t"
" lst_7)))"
" #f)))"
"(if or-part_170"
" or-part_170"
"(if(known-function-of-satisfying?"
" d_30)"
"(if(="
" n-args_0"
"(length"
"(known-function-of-satisfying-arg-predicate-keys"
" d_30)))"
"(let-values(((lst_9)"
" e18_0)"
"((lst_220)"
"(known-function-of-satisfying-arg-predicate-keys"
" d_30)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_9)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_220)))"
"((letrec-values(((for-loop_204)"
"(lambda(result_76"
" lst_158"
" lst_22)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_158)"
"(pair?"
" lst_22)"
" #f)"
"(let-values(((e_40)"
"(unsafe-car"
" lst_158))"
"((rest_7)"
"(unsafe-cdr"
" lst_158))"
"((key_62)"
"(unsafe-car"
" lst_22))"
"((rest_117)"
"(unsafe-cdr"
" lst_22)))"
"(let-values(((result_39)"
"(let-values()"
"(let-values(((result_77)"
"(let-values()"
"(let-values()"
"(if(not"
"(effects?_0"
" e_40"
" 1"
" locals_2))"
"(satisfies?"
" e_40"
" key_62"
" defns_1"
" locals_2)"
" #f)))))"
"(values"
" result_77)))))"
"(if(if(not"
"((lambda x_56"
"(not"
" result_39))"
" e_40))"
"(if(not"
"((lambda x_57"
"(not"
" result_39))"
" key_62))"
"(not"
" #f)"
" #f)"
" #f)"
"(for-loop_204"
" result_39"
" rest_7"
" rest_117)"
" result_39)))"
" result_76)))))"
" for-loop_204)"
" #t"
" lst_9"
" lst_220)))"
" #f)"
" #f)))"
" 1"
" #f))))"
" c1_24)"
"(let-values()"
"(if(let-values(((or-part_225)"
"(self-quoting-in-linklet?"
" v_31)))"
"(if or-part_225"
" or-part_225"
"(if(symbol? v_31)"
"(let-values(((or-part_226)"
"(hash-ref"
" locals_2"
" v_31"
" #f)))"
"(if or-part_226"
" or-part_226"
"(let-values(((or-part_227)"
"(lookup-defn"
" defns_1"
" v_31)))"
"(if or-part_227"
" or-part_227"
"(let-values(((or-part_228)"
"(built-in-symbol?"
" v_31)))"
"(if or-part_228"
" or-part_228"
"(ready-variable?_0"
" v_31)))))))"
" #f)))"
" 1"
" #f)))))))"
"(let-values() 1))"
"(if(unsafe-fx< index_1 3)"
"(let-values()"
"(let-values(((ok?_18"
" _21_0"
" ids22_0"
" rhs23_0"
" body24_0)"
"(let-values(((s_44) e_38))"
"(let-values(((orig-s_24) s_44))"
"(let-values(((_21_1"
" ids22_1"
" rhs23_1"
" body24_1)"
"(let-values(((s_308)"
"(if(1/syntax?"
" s_44)"
"(syntax-e$2"
" s_44)"
" s_44)))"
"(if(pair? s_308)"
"(let-values(((_25_0)"
"(let-values(((s_309)"
"(car"
" s_308)))"
" s_309))"
"((ids26_0"
" rhs27_0"
" body28_0)"
"(let-values(((s_310)"
"(cdr"
" s_308)))"
"(let-values(((s_27)"
"(if(1/syntax?"
" s_310)"
"(syntax-e$2"
" s_310)"
" s_310)))"
"(if(pair?"
" s_27)"
"(let-values(((ids29_0"
" rhs30_0)"
"(let-values(((s_160)"
"(car"
" s_27)))"
"(let-values(((s_150)"
"(if(1/syntax?"
" s_160)"
"(syntax-e$2"
" s_160)"
" s_160)))"
"(let-values(((flat-s_14)"
"(to-syntax-list.1$1"
" s_150)))"
"(if(not"
" flat-s_14)"
"(let-values()"
"((lambda(false_2"
" str_7"
" e_41)"
"(error"
" str_7))"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_24))"
"(let-values()"
"(let-values(((ids_8"
" rhs_4)"
"(let-values(((lst_165)"
" flat-s_14))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_165)))"
"((letrec-values(((for-loop_180)"
"(lambda(ids_9"
" rhs_5"
" lst_167)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_167)"
"(let-values(((s_46)"
"(unsafe-car"
" lst_167))"
"((rest_84)"
"(unsafe-cdr"
" lst_167)))"
"(let-values(((ids_10"
" rhs_6)"
"(let-values(((ids_11)"
" ids_9)"
"((rhs_7)"
" rhs_5))"
"(let-values(((ids_12"
" rhs_8)"
"(let-values()"
"(let-values(((ids36_0"
" rhs37_0)"
"(let-values()"
"(let-values(((s_311)"
"(if(1/syntax?"
" s_46)"
"(syntax-e$2"
" s_46)"
" s_46)))"
"(if(pair?"
" s_311)"
"(let-values(((ids32_0)"
"(let-values(((s_312)"
"(car"
" s_311)))"
" s_312))"
"((rhs33_0)"
"(let-values(((s_313)"
"(cdr"
" s_311)))"
"(let-values(((s_314)"
"(if(1/syntax?"
" s_313)"
"(syntax-e$2"
" s_313)"
" s_313)))"
"(if(pair?"
" s_314)"
"(let-values(((rhs34_0)"
"(let-values(((s_315)"
"(car"
" s_314)))"
" s_315))"
"(()"
"(let-values(((s_316)"
"(cdr"
" s_314)))"
"(let-values(((s_52)"
"(if(1/syntax?"
" s_316)"
"(syntax-e$2"
" s_316)"
" s_316)))"
"(if(null?"
" s_52)"
"(values)"
"((lambda(false_3"
" str_8"
" e_42)"
"(error"
" str_8))"
" #f"
"                                                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_24))))))"
"(values"
" rhs34_0))"
"((lambda(false_4"
" str_9"
" e_9)"
"(error"
" str_9))"
" #f"
"                                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_24))))))"
"(values"
" ids32_0"
" rhs33_0))"
"((lambda(false_5"
" str_10"
" e_43)"
"(error"
" str_10))"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_24))))))"
"(values"
"(cons"
" ids36_0"
" ids_11)"
"(cons"
" rhs37_0"
" rhs_7))))))"
"(values"
" ids_12"
" rhs_8)))))"
"(if(not"
" #f)"
"(for-loop_180"
" ids_10"
" rhs_6"
" rest_84)"
"(values"
" ids_10"
" rhs_6))))"
"(values"
" ids_9"
" rhs_5))))))"
" for-loop_180)"
" null"
" null"
" lst_165)))))"
"(values"
"(reverse$1"
" ids_8)"
"(reverse$1"
" rhs_4)))))))))"
"((body31_0)"
"(let-values(((s_317)"
"(cdr"
" s_27)))"
"(let-values(((s_33)"
"(if(1/syntax?"
" s_317)"
"(syntax-e$2"
" s_317)"
" s_317)))"
"(if(pair?"
" s_33)"
"(let-values(((body35_0)"
"(let-values(((s_318)"
"(car"
" s_33)))"
" s_318))"
"(()"
"(let-values(((s_159)"
"(cdr"
" s_33)))"
"(let-values(((s_319)"
"(if(1/syntax?"
" s_159)"
"(syntax-e$2"
" s_159)"
" s_159)))"
"(if(null?"
" s_319)"
"(values)"
"((lambda(false_6"
" str_11"
" e_44)"
"(error"
" str_11))"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_24))))))"
"(values"
" body35_0))"
"((lambda(false_7"
" str_12"
" e_45)"
"(error"
" str_12))"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_24))))))"
"(values"
" ids29_0"
" rhs30_0"
" body31_0))"
"((lambda(false_8"
" str_13"
" e_46)"
"(error"
" str_13))"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_24))))))"
"(values"
" _25_0"
" ids26_0"
" rhs27_0"
" body28_0))"
"((lambda(false_9"
" str_14"
" e_47)"
"(error"
" str_14))"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_24)))))"
"(values"
" #t"
" _21_1"
" ids22_1"
" rhs23_1"
" body24_1))))))"
"(if(not"
"(let-values(((lst_221) ids22_0)"
"((lst_222) rhs23_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_221)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_222)))"
"((letrec-values(((for-loop_205)"
"(lambda(result_78"
" lst_223"
" lst_224)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_223)"
"(pair?"
" lst_224)"
" #f)"
"(let-values(((ids_13)"
"(unsafe-car"
" lst_223))"
"((rest_118)"
"(unsafe-cdr"
" lst_223))"
"((rhs_9)"
"(unsafe-car"
" lst_224))"
"((rest_119)"
"(unsafe-cdr"
" lst_224)))"
"(let-values(((result_79)"
"(let-values()"
"(let-values(((result_80)"
"(let-values()"
"(let-values()"
"(effects?_0"
" rhs_9"
"(correlated-length"
" ids_13)"
" locals_2)))))"
"(values"
" result_80)))))"
"(if(if(not"
"((lambda x_58"
" result_79)"
" ids_13))"
"(if(not"
"((lambda x_59"
" result_79)"
" rhs_9))"
"(not"
" #f)"
" #f)"
" #f)"
"(for-loop_205"
" result_79"
" rest_118"
" rest_119)"
" result_79)))"
" result_78)))))"
" for-loop_205)"
" #f"
" lst_221"
" lst_222))))"
"(loop_88"
" body24_0"
"(add-binding-info locals_2 ids22_0 rhs23_0))"
" #f)))"
"(if(unsafe-fx< index_1 4)"
"(let-values()"
"(let-values(((ok?_19 _38_0 e39_0)"
"(let-values(((s_320) e_38))"
"(let-values(((orig-s_25) s_320))"
"(let-values(((_38_1 e39_1)"
"(let-values(((s_321)"
"(if(1/syntax?"
" s_320)"
"(syntax-e$2"
" s_320)"
" s_320)))"
"(if(pair?"
" s_321)"
"(let-values(((_40_0)"
"(let-values(((s_64)"
"(car"
" s_321)))"
" s_64))"
"((e41_0)"
"(let-values(((s_322)"
"(cdr"
" s_321)))"
"(let-values(((s_38)"
"(if(1/syntax?"
" s_322)"
"(syntax-e$2"
" s_322)"
" s_322)))"
"(let-values(((flat-s_15)"
"(to-syntax-list.1$1"
" s_38)))"
"(if(not"
" flat-s_15)"
"(let-values()"
"((lambda(false_10"
" str_15"
" e_48)"
"(error"
" str_15))"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_25))"
"(let-values()"
" flat-s_15)))))))"
"(values"
" _40_0"
" e41_0))"
"((lambda(false_11"
" str_16"
" e_49)"
"(error"
" str_16))"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_25)))))"
"(values #t _38_1 e39_1))))))"
"(if(let-values(((lst_225) e39_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_225)))"
"((letrec-values(((for-loop_206)"
"(lambda(result_81"
" lst_226)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_226)"
"(let-values(((e_50)"
"(unsafe-car"
" lst_226))"
"((rest_120)"
"(unsafe-cdr"
" lst_226)))"
"(let-values(((result_82)"
"(let-values()"
"(let-values(((result_83)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_50"
" 1"
" locals_2))))))"
"(values"
" result_83)))))"
"(if(if(not"
"((lambda x_60"
"(not"
" result_82))"
" e_50))"
"(not"
" #f)"
" #f)"
"(for-loop_206"
" result_82"
" rest_120)"
" result_82)))"
" result_81)))))"
" for-loop_206)"
" #t"
" lst_225)))"
"(length e39_0)"
" #f)))"
"(let-values()"
"(let-values(((ok?_20 _42_0 e43_0)"
"(let-values(((s_39) e_38))"
"(let-values(((orig-s_26) s_39))"
"(let-values(((_42_1 e43_1)"
"(let-values(((s_92)"
"(if(1/syntax?"
" s_39)"
"(syntax-e$2"
" s_39)"
" s_39)))"
"(if(pair? s_92)"
"(let-values(((_44_0)"
"(let-values(((s_323)"
"(car"
" s_92)))"
" s_323))"
"((e45_0)"
"(let-values(((s_94)"
"(cdr"
" s_92)))"
"(let-values(((s_324)"
"(if(1/syntax?"
" s_94)"
"(syntax-e$2"
" s_94)"
" s_94)))"
"(let-values(((flat-s_16)"
"(to-syntax-list.1$1"
" s_324)))"
"(if(not"
" flat-s_16)"
"(let-values()"
"((lambda(false_12"
" str_17"
" e_51)"
"(error"
" str_17))"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_26))"
"(let-values()"
" flat-s_16)))))))"
"(values"
" _44_0"
" e45_0))"
"((lambda(false_13"
" str_18"
" e_52)"
"(error"
" str_18))"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_26)))))"
"(values #t _42_1 e43_1))))))"
"(if(let-values(((lst_227) e43_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_227)))"
"((letrec-values(((for-loop_207)"
"(lambda(result_84"
" lst_40)"
"(begin"
" 'for-loop"
"(if(pair? lst_40)"
"(let-values(((e_53)"
"(unsafe-car"
" lst_40))"
"((rest_121)"
"(unsafe-cdr"
" lst_40)))"
"(let-values(((result_85)"
"(let-values()"
"(let-values(((result_86)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_53"
" 1"
" locals_2))))))"
"(values"
" result_86)))))"
"(if(if(not"
"((lambda x_61"
"(not"
" result_85))"
" e_53))"
"(not"
" #f)"
" #f)"
"(for-loop_207"
" result_85"
" rest_121)"
" result_85)))"
" result_84)))))"
" for-loop_207)"
" #t"
" lst_227)))"
" 1"
" #f))))))"
"(if(unsafe-fx< index_1 8)"
"(if(unsafe-fx< index_1 6)"
"(let-values()"
"(let-values(((ok?_21 _46_0 e47_0)"
"(let-values(((s_325) e_38))"
"(let-values(((orig-s_27) s_325))"
"(let-values(((_46_1 e47_1)"
"(let-values(((s_326)"
"(if(1/syntax?"
" s_325)"
"(syntax-e$2"
" s_325)"
" s_325)))"
"(if(pair? s_326)"
"(let-values(((_48_0)"
"(let-values(((s_327)"
"(car"
" s_326)))"
" s_327))"
"((e49_0)"
"(let-values(((s_155)"
"(cdr"
" s_326)))"
"(let-values(((s_156)"
"(if(1/syntax?"
" s_155)"
"(syntax-e$2"
" s_155)"
" s_155)))"
"(let-values(((flat-s_17)"
"(to-syntax-list.1$1"
" s_156)))"
"(if(not"
" flat-s_17)"
"(let-values()"
"((lambda(false_14"
" str_19"
" e_54)"
"(error"
" str_19))"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_27))"
"(let-values()"
" flat-s_17)))))))"
"(values"
" _48_0"
" e49_0))"
"((lambda(false_15"
" str_20"
" e_55)"
"(error"
" str_20))"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_27)))))"
"(values #t _46_1 e47_1))))))"
"((letrec-values(((bloop_0)"
"(lambda(es_1)"
"(begin"
" 'bloop"
"(if(null? es_1)"
"(let-values() #f)"
"(if(null?(cdr es_1))"
"(let-values()"
"(loop_88"
"(car es_1)"
" locals_2))"
"(let-values()"
"(if(not"
"(effects?_0"
"(car es_1)"
" #f"
" locals_2))"
"(bloop_0(cdr es_1))"
" #f))))))))"
" bloop_0)"
" e47_0)))"
"(if(unsafe-fx< index_1 7)"
"(let-values()"
"(let-values(((ok?_22 _50_0 e051_0 e52_0)"
"(let-values(((s_115) e_38))"
"(let-values(((orig-s_28) s_115))"
"(let-values(((_50_1"
" e051_1"
" e52_1)"
"(let-values(((s_328)"
"(if(1/syntax?"
" s_115)"
"(syntax-e$2"
" s_115)"
" s_115)))"
"(if(pair?"
" s_328)"
"(let-values(((_53_0)"
"(let-values(((s_117)"
"(car"
" s_328)))"
" s_117))"
"((e054_0"
" e55_0)"
"(let-values(((s_329)"
"(cdr"
" s_328)))"
"(let-values(((s_330)"
"(if(1/syntax?"
" s_329)"
"(syntax-e$2"
" s_329)"
" s_329)))"
"(if(pair?"
" s_330)"
"(let-values(((e056_0)"
"(let-values(((s_220)"
"(car"
" s_330)))"
" s_220))"
"((e57_0)"
"(let-values(((s_331)"
"(cdr"
" s_330)))"
"(let-values(((s_118)"
"(if(1/syntax?"
" s_331)"
"(syntax-e$2"
" s_331)"
" s_331)))"
"(let-values(((flat-s_18)"
"(to-syntax-list.1$1"
" s_118)))"
"(if(not"
" flat-s_18)"
"(let-values()"
"((lambda(false_16"
" str_21"
" e_56)"
"(error"
" str_21))"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_28))"
"(let-values()"
" flat-s_18)))))))"
"(values"
" e056_0"
" e57_0))"
"((lambda(false_17"
" str_22"
" e_57)"
"(error"
" str_22))"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_28))))))"
"(values"
" _53_0"
" e054_0"
" e55_0))"
"((lambda(false_18"
" str_23"
" e_58)"
"(error"
" str_23))"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_28)))))"
"(values"
" #t"
" _50_1"
" e051_1"
" e52_1))))))"
"(if(let-values(((lst_228) e52_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_228)))"
"((letrec-values(((for-loop_208)"
"(lambda(result_87"
" lst_229)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_229)"
"(let-values(((e_59)"
"(unsafe-car"
" lst_229))"
"((rest_122)"
"(unsafe-cdr"
" lst_229)))"
"(let-values(((result_88)"
"(let-values()"
"(let-values(((result_89)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_59"
" #f"
" locals_2))))))"
"(values"
" result_89)))))"
"(if(if(not"
"((lambda x_62"
"(not"
" result_88))"
" e_59))"
"(not"
" #f)"
" #f)"
"(for-loop_208"
" result_88"
" rest_122)"
" result_88)))"
" result_87)))))"
" for-loop_208)"
" #t"
" lst_228)))"
"(loop_88 e051_0 locals_2)"
" #f)))"
"(let-values()"
"(if(ok-make-struct-type?"
" e_38"
" ready-variable?_0"
" defns_1)"
" 5"
" #f))))"
"(if(unsafe-fx< index_1 9)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_38"
" locals_2"
" 'general-accessor"
" defns_1)"
" 1"
" #f))"
"(if(unsafe-fx< index_1 10)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_38"
" locals_2"
" 'general-mutator"
" defns_1)"
" 1"
" #f))"
"(if(unsafe-fx< index_1 11)"
"(let-values()"
"(if(ok-make-struct-type-property? e_38 defns_1)"
" 3"
" #f))"
"(let-values()"
"(let-values(((ok?_23"
" _58_0"
" id:rator59_0"
" id:arg60_0"
" thn61_0"
" els62_0)"
"(let-values(((s_332) e_38))"
"(if(let-values(((s_333)"
"(if(1/syntax?"
" s_332)"
"(syntax-e$2"
" s_332)"
" s_332)))"
"(if(pair? s_333)"
"(if(let-values(((s_230)"
"(car"
" s_333)))"
" #t)"
"(let-values(((s_334)"
"(cdr"
" s_333)))"
"(let-values(((s_231)"
"(if(1/syntax?"
" s_334)"
"(syntax-e$2"
" s_334)"
" s_334)))"
"(if(pair? s_231)"
"(if(let-values(((s_232)"
"(car"
" s_231)))"
"(let-values(((s_335)"
"(if(1/syntax?"
" s_232)"
"(syntax-e$2"
" s_232)"
" s_232)))"
"(if(pair?"
" s_335)"
"(if(let-values(((s_233)"
"(car"
" s_335)))"
"(let-values(((or-part_229)"
"(if(1/syntax?"
" s_233)"
"(symbol?"
"(syntax-e$2"
" s_233))"
" #f)))"
"(if or-part_229"
" or-part_229"
"(symbol?"
" s_233))))"
"(let-values(((s_235)"
"(cdr"
" s_335)))"
"(let-values(((s_336)"
"(if(1/syntax?"
" s_235)"
"(syntax-e$2"
" s_235)"
" s_235)))"
"(if(pair?"
" s_336)"
"(if(let-values(((s_337)"
"(car"
" s_336)))"
"(let-values(((or-part_230)"
"(if(1/syntax?"
" s_337)"
"(symbol?"
"(syntax-e$2"
" s_337))"
" #f)))"
"(if or-part_230"
" or-part_230"
"(symbol?"
" s_337))))"
"(let-values(((s_338)"
"(cdr"
" s_336)))"
"(let-values(((s_339)"
"(if(1/syntax?"
" s_338)"
"(syntax-e$2"
" s_338)"
" s_338)))"
"(null?"
" s_339)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
"(let-values(((s_340)"
"(cdr"
" s_231)))"
"(let-values(((s_341)"
"(if(1/syntax?"
" s_340)"
"(syntax-e$2"
" s_340)"
" s_340)))"
"(if(pair?"
" s_341)"
"(if(let-values(((s_342)"
"(car"
" s_341)))"
" #t)"
"(let-values(((s_343)"
"(cdr"
" s_341)))"
"(let-values(((s_344)"
"(if(1/syntax?"
" s_343)"
"(syntax-e$2"
" s_343)"
" s_343)))"
"(if(pair?"
" s_344)"
"(if(let-values(((s_345)"
"(car"
" s_344)))"
" #t)"
"(let-values(((s_346)"
"(cdr"
" s_344)))"
"(let-values(((s_347)"
"(if(1/syntax?"
" s_346)"
"(syntax-e$2"
" s_346)"
" s_346)))"
"(null?"
" s_347)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((_58_1"
" id:rator59_1"
" id:arg60_1"
" thn61_1"
" els62_1)"
"(let-values(((s_348)"
"(if(1/syntax?"
" s_332)"
"(syntax-e$2"
" s_332)"
" s_332)))"
"(let-values(((_63_0)"
"(let-values(((s_349)"
"(car"
" s_348)))"
" s_349))"
"((id:rator64_0"
" id:arg65_0"
" thn66_0"
" els67_0)"
"(let-values(((s_238)"
"(cdr"
" s_348)))"
"(let-values(((s_239)"
"(if(1/syntax?"
" s_238)"
"(syntax-e$2"
" s_238)"
" s_238)))"
"(let-values(((id:rator68_0"
" id:arg69_0)"
"(let-values(((s_242)"
"(car"
" s_239)))"
"(let-values(((s_243)"
"(if(1/syntax?"
" s_242)"
"(syntax-e$2"
" s_242)"
" s_242)))"
"(let-values(((id:rator72_0)"
"(let-values(((s_350)"
"(car"
" s_243)))"
" s_350))"
"((id:arg73_0)"
"(let-values(((s_351)"
"(cdr"
" s_243)))"
"(let-values(((s_352)"
"(if(1/syntax?"
" s_351)"
"(syntax-e$2"
" s_351)"
" s_351)))"
"(let-values(((id:arg74_0)"
"(let-values(((s_244)"
"(car"
" s_352)))"
" s_244))"
"(()"
"(let-values(((s_353)"
"(cdr"
" s_352)))"
"(let-values(((s_354)"
"(if(1/syntax?"
" s_353)"
"(syntax-e$2"
" s_353)"
" s_353)))"
"(values)))))"
"(values"
" id:arg74_0))))))"
"(values"
" id:rator72_0"
" id:arg73_0)))))"
"((thn70_0"
" els71_0)"
"(let-values(((s_355)"
"(cdr"
" s_239)))"
"(let-values(((s_356)"
"(if(1/syntax?"
" s_355)"
"(syntax-e$2"
" s_355)"
" s_355)))"
"(let-values(((thn75_0)"
"(let-values(((s_357)"
"(car"
" s_356)))"
" s_357))"
"((els76_0)"
"(let-values(((s_358)"
"(cdr"
" s_356)))"
"(let-values(((s_359)"
"(if(1/syntax?"
" s_358)"
"(syntax-e$2"
" s_358)"
" s_358)))"
"(let-values(((els77_0)"
"(let-values(((s_360)"
"(car"
" s_359)))"
" s_360))"
"(()"
"(let-values(((s_361)"
"(cdr"
" s_359)))"
"(let-values(((s_362)"
"(if(1/syntax?"
" s_361)"
"(syntax-e$2"
" s_361)"
" s_361)))"
"(values)))))"
"(values"
" els77_0))))))"
"(values"
" thn75_0"
" els76_0))))))"
"(values"
" id:rator68_0"
" id:arg69_0"
" thn70_0"
" els71_0))))))"
"(values"
" _63_0"
" id:rator64_0"
" id:arg65_0"
" thn66_0"
" els67_0)))))"
"(values"
" #t"
" _58_1"
" id:rator59_1"
" id:arg60_1"
" thn61_1"
" els62_1)))"
"(values #f #f #f #f #f #f)))))"
"(if ok?_23"
"(let-values()"
"(let-values(((c2_2)"
"(let-values(((or-part_231)"
"(hash-ref"
" locals_2"
" id:rator59_0"
" #f)))"
"(if or-part_231"
" or-part_231"
"(lookup-defn"
" defns_1"
" id:rator59_0)))))"
"(if c2_2"
"((lambda(d_31)"
"(if(known-predicate? d_31)"
"(if(not"
"(effects?_0"
" thn61_0"
" expected-results_0"
"(hash-set"
" locals_2"
" id:arg60_0"
"(known-satisfies7.1"
"(known-predicate-key"
" d_31)))))"
"(loop_88 els62_0 locals_2)"
" #f)"
" #f))"
" c2_2)"
"(let-values() #f))))"
"(let-values()"
"(let-values(((ok?_24"
" _78_0"
" tst79_0"
" thn80_0"
" els81_0)"
"(let-values(((s_363) e_38))"
"(if(let-values(((s_364)"
"(if(1/syntax?"
" s_363)"
"(syntax-e$2"
" s_363)"
" s_363)))"
"(if(pair? s_364)"
"(if(let-values(((s_365)"
"(car"
" s_364)))"
" #t)"
"(let-values(((s_366)"
"(cdr"
" s_364)))"
"(let-values(((s_367)"
"(if(1/syntax?"
" s_366)"
"(syntax-e$2"
" s_366)"
" s_366)))"
"(if(pair?"
" s_367)"
"(if(let-values(((s_256)"
"(car"
" s_367)))"
" #t)"
"(let-values(((s_368)"
"(cdr"
" s_367)))"
"(let-values(((s_369)"
"(if(1/syntax?"
" s_368)"
"(syntax-e$2"
" s_368)"
" s_368)))"
"(if(pair?"
" s_369)"
"(if(let-values(((s_370)"
"(car"
" s_369)))"
" #t)"
"(let-values(((s_371)"
"(cdr"
" s_369)))"
"(let-values(((s_372)"
"(if(1/syntax?"
" s_371)"
"(syntax-e$2"
" s_371)"
" s_371)))"
"(if(pair?"
" s_372)"
"(if(let-values(((s_373)"
"(car"
" s_372)))"
" #t)"
"(let-values(((s_374)"
"(cdr"
" s_372)))"
"(let-values(((s_375)"
"(if(1/syntax?"
" s_374)"
"(syntax-e$2"
" s_374)"
" s_374)))"
"(null?"
" s_375)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((_78_1"
" tst79_1"
" thn80_1"
" els81_1)"
"(let-values(((s_376)"
"(if(1/syntax?"
" s_363)"
"(syntax-e$2"
" s_363)"
" s_363)))"
"(let-values(((_82_0)"
"(let-values(((s_377)"
"(car"
" s_376)))"
" s_377))"
"((tst83_0"
" thn84_0"
" els85_0)"
"(let-values(((s_378)"
"(cdr"
" s_376)))"
"(let-values(((s_379)"
"(if(1/syntax?"
" s_378)"
"(syntax-e$2"
" s_378)"
" s_378)))"
"(let-values(((tst86_0)"
"(let-values(((s_380)"
"(car"
" s_379)))"
" s_380))"
"((thn87_0"
" els88_0)"
"(let-values(((s_381)"
"(cdr"
" s_379)))"
"(let-values(((s_257)"
"(if(1/syntax?"
" s_381)"
"(syntax-e$2"
" s_381)"
" s_381)))"
"(let-values(((thn89_0)"
"(let-values(((s_382)"
"(car"
" s_257)))"
" s_382))"
"((els90_0)"
"(let-values(((s_383)"
"(cdr"
" s_257)))"
"(let-values(((s_384)"
"(if(1/syntax?"
" s_383)"
"(syntax-e$2"
" s_383)"
" s_383)))"
"(let-values(((els91_0)"
"(let-values(((s_385)"
"(car"
" s_384)))"
" s_385))"
"(()"
"(let-values(((s_386)"
"(cdr"
" s_384)))"
"(let-values(((s_387)"
"(if(1/syntax?"
" s_386)"
"(syntax-e$2"
" s_386)"
" s_386)))"
"(values)))))"
"(values"
" els91_0))))))"
"(values"
" thn89_0"
" els90_0))))))"
"(values"
" tst86_0"
" thn87_0"
" els88_0))))))"
"(values"
" _82_0"
" tst83_0"
" thn84_0"
" els85_0)))))"
"(values"
" #t"
" _78_1"
" tst79_1"
" thn80_1"
" els81_1)))"
"(values"
" #f"
" #f"
" #f"
" #f"
" #f)))))"
"(if ok?_24"
"(if(not"
"(effects?_0 tst79_0 1 locals_2))"
"(if(not"
"(effects?_0"
" thn80_0"
" expected-results_0"
" locals_2))"
"(loop_88 els81_0 locals_2)"
" #f)"
" #f)"
" #f)))))))))))))))))"
" loop_88)"
" e_36"
" locals_0)))"
"(not"
"(if actual-results_0"
"(let-values(((or-part_232)(not expected-results_0)))"
"(if or-part_232 or-part_232(= actual-results_0 expected-results_0)))"
" #f)))))))))))))"
"(define-values"
"(satisfies?)"
"(lambda(e_60 key_63 defns_2 locals_3)"
"(begin"
"(let-values(((d_32)"
"(let-values(((or-part_233)(hash-ref locals_3 e_60 #f)))"
"(if or-part_233 or-part_233(lookup-defn defns_2 e_60)))))"
"(if d_32(if(known-satisfies? d_32)(eq? key_63(known-satisfies-predicate-key d_32)) #f) #f)))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_4 idss_0 rhss_0)"
"(begin"
"(let-values(((lst_230) idss_0)((lst_231) rhss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_230)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_231)))"
"((letrec-values(((for-loop_209)"
"(lambda(locals_5 lst_232 lst_233)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_232)(pair? lst_233) #f)"
"(let-values(((ids_14)(unsafe-car lst_232))"
"((rest_123)(unsafe-cdr lst_232))"
"((rhs_10)(unsafe-car lst_233))"
"((rest_124)(unsafe-cdr lst_233)))"
"(let-values(((locals_6)"
"(let-values(((locals_7) locals_5))"
"(let-values(((locals_8)"
"(let-values()"
"((letrec-values(((loop_89)"
"(lambda(rhs_11)"
"(begin"
" 'loop"
"(let-values(((tmp_27)"
"(if(pair?"
"(correlated-e"
" rhs_11))"
"(correlated-e"
"(car"
"(correlated-e"
" rhs_11)))"
" #f)))"
"(if(equal?"
" tmp_27"
" 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_0)"
"(extract-struct-field-count-lower-bound"
" rhs_11)))"
"(let-values(((lst_234)"
"(correlated->list"
" ids_14))"
"((lst_235)"
" '(struct-type"
" constructor"
" predicate"
" general-accessor"
" general-mutator)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_234)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_235)))"
"((letrec-values(((for-loop_210)"
"(lambda(locals_9"
" lst_236"
" lst_237)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_236)"
"(pair?"
" lst_237)"
" #f)"
"(let-values(((id_50)"
"(unsafe-car"
" lst_236))"
"((rest_125)"
"(unsafe-cdr"
" lst_236))"
"((type_0)"
"(unsafe-car"
" lst_237))"
"((rest_126)"
"(unsafe-cdr"
" lst_237)))"
"(let-values(((locals_10)"
"(let-values(((locals_11)"
" locals_9))"
"(let-values(((locals_12)"
"(let-values()"
"(hash-set"
" locals_11"
"(correlated-e"
" id_50)"
"(known-struct-op8.1"
" type_0"
" field-count_0)))))"
"(values"
" locals_12)))))"
"(if(not"
" #f)"
"(for-loop_210"
" locals_10"
" rest_125"
" rest_126)"
" locals_10)))"
" locals_9)))))"
" for-loop_210)"
" locals_7"
" lst_234"
" lst_235)))))"
"(if(equal?"
" tmp_27"
" 'let-values)"
"(let-values()"
"(if(null?"
"(correlated-e"
"(correlated-cadr"
" rhs_11)))"
"(loop_89"
"(caddr"
"(correlated->list"
" rhs_11)))"
"(loop_89 #f)))"
"(let-values()"
"(let-values(((lst_238)"
"(correlated->list"
" ids_14)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_238)))"
"((letrec-values(((for-loop_211)"
"(lambda(locals_13"
" lst_239)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_239)"
"(let-values(((id_51)"
"(unsafe-car"
" lst_239))"
"((rest_127)"
"(unsafe-cdr"
" lst_239)))"
"(let-values(((locals_14)"
"(let-values(((locals_15)"
" locals_13))"
"(let-values(((locals_16)"
"(let-values()"
"(hash-set"
" locals_15"
"(correlated-e"
" id_51)"
" #t))))"
"(values"
" locals_16)))))"
"(if(not"
" #f)"
"(for-loop_211"
" locals_14"
" rest_127)"
" locals_14)))"
" locals_13)))))"
" for-loop_211)"
" locals_7"
" lst_238)))))))))))"
" loop_89)"
" rhs_10))))"
"(values locals_8)))))"
"(if(not #f)(for-loop_209 locals_6 rest_123 rest_124) locals_6)))"
" locals_5)))))"
" for-loop_209)"
" locals_4"
" lst_230"
" lst_231))))))"
"(define-values"
"(ok-make-struct-type-property?)"
"(lambda(e_61 defns_3)"
"(begin"
"(let-values(((l_58)(correlated->list e_61)))"
"(if(<= 2(length l_58) 5)"
"(let-values(((lst_240)(cdr l_58))"
"((lst_241)"
"(list"
"(lambda(v_161)(quoted? symbol? v_161))"
"(lambda(v_162)(is-lambda? v_162 2 defns_3))"
"(lambda(v_163)(ok-make-struct-type-property-super? v_163 defns_3))"
"(lambda(v_164)"
"(let-values(((temp93_1) 1)((defns94_0) defns_3))"
"(any-side-effects?9.1 defns94_0 #t #f #f #f #f v_164 temp93_1))))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_240)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_241)))"
"((letrec-values(((for-loop_138)"
"(lambda(result_90 lst_242 lst_243)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_242)(pair? lst_243) #f)"
"(let-values(((arg_0)(unsafe-car lst_242))"
"((rest_128)(unsafe-cdr lst_242))"
"((pred_1)(unsafe-car lst_243))"
"((rest_129)(unsafe-cdr lst_243)))"
"(let-values(((result_91)"
"(let-values()"
"(let-values(((result_92)"
"(let-values()(let-values()(pred_1 arg_0)))))"
"(values result_92)))))"
"(if(if(not((lambda x_63(not result_91)) arg_0))"
"(if(not((lambda x_64(not result_91)) pred_1))(not #f) #f)"
" #f)"
"(for-loop_138 result_91 rest_128 rest_129)"
" result_91)))"
" result_90)))))"
" for-loop_138)"
" #t"
" lst_240"
" lst_241)))"
" #f)))))"
"(define-values"
"(ok-make-struct-type-property-super?)"
"(lambda(v_152 defns_4)"
"(begin"
"(let-values(((or-part_234)(quoted? null? v_152)))"
"(if or-part_234"
" or-part_234"
"(let-values(((or-part_19)(eq? 'null(correlated-e v_152))))"
"(if or-part_19"
" or-part_19"
"(if(pair?(correlated-e v_152))"
"(if(eq?(correlated-e(car(correlated-e v_152))) 'list)"
"(if(let-values(((lst_244)(cdr(correlated->list v_152))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_244)))"
"((letrec-values(((for-loop_212)"
"(lambda(result_93 lst_245)"
"(begin"
" 'for-loop"
"(if(pair? lst_245)"
"(let-values(((prop+val_0)(unsafe-car lst_245))"
"((rest_130)(unsafe-cdr lst_245)))"
"(let-values(((result_94)"
"(let-values()"
"(let-values(((result_95)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length"
" prop+val_0)"
" 3)"
"(let-values(((prop+val_1)"
"(correlated->list"
" prop+val_0)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_1)))"
"(if(let-values(((or-part_235)"
"(memq"
"(correlated-e"
"(list-ref"
" prop+val_1"
" 1))"
" '(prop:procedure"
" prop:equal+hash"
" prop:custom-write))))"
"(if or-part_235"
" or-part_235"
"(known-property?"
"(lookup-defn"
" defns_4"
"(correlated-e"
"(list-ref"
" prop+val_1"
" 1))))))"
"(not"
"(let-values(((temp95_0)"
"(list-ref"
" prop+val_1"
" 2))"
"((temp96_1)"
" 1)"
"((defns97_0)"
" defns_4))"
"(any-side-effects?9.1"
" defns97_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp95_0"
" temp96_1)))"
" #f)"
" #f))"
" #f)))))"
"(values result_95)))))"
"(if(if(not((lambda x_65(not result_94)) prop+val_0))"
"(not #f)"
" #f)"
"(for-loop_212 result_94 rest_130)"
" result_94)))"
" result_93)))))"
" for-loop_212)"
" #t"
" lst_244)))"
"(="
"(sub1(correlated-length v_152))"
"(set-count"
"(let-values(((lst_246)(cdr(correlated->list v_152))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_246)))"
"((letrec-values(((for-loop_64)"
"(lambda(table_167 lst_247)"
"(begin"
" 'for-loop"
"(if(pair? lst_247)"
"(let-values(((prop+val_2)(unsafe-car lst_247))"
"((rest_131)(unsafe-cdr lst_247)))"
"(let-values(((table_168)"
"(let-values(((table_169) table_167))"
"(let-values(((table_170)"
"(let-values()"
"(let-values(((key_64 val_56)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_2)"
" 1)))"
" #t))))"
"(hash-set"
" table_169"
" key_64"
" val_56)))))"
"(values table_170)))))"
"(if(not #f)(for-loop_64 table_168 rest_131) table_168)))"
" table_167)))))"
" for-loop_64)"
" '#hash()"
" lst_246)))))"
" #f)"
" #f)"
" #f))))))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_62 ready-variable?_1 defns_5)"
"(begin"
"(let-values(((l_59)(correlated->list e_62)))"
"(let-values(((init-field-count-expr_0)(if(>(length l_59) 3)(list-ref l_59 3) #f)))"
"(let-values(((auto-field-count-expr_0)(if(>(length l_59) 4)(list-ref l_59 4) #f)))"
"(let-values(((num-fields_0)"
"(maybe+"
"(field-count-expr-to-field-count init-field-count-expr_0)"
"(field-count-expr-to-field-count auto-field-count-expr_0))))"
"(let-values(((immutables-expr_0)"
"(let-values(((or-part_236)(if(>(length l_59) 9)(list-ref l_59 9) #f)))"
"(if or-part_236 or-part_236 'null))))"
"(let-values(((super-expr_0)(if(>(length l_59) 2)(list-ref l_59 2) #f)))"
"(if(>=(length l_59) 5)"
"(if(<=(length l_59) 12)"
"(let-values(((lst_248)(cdr l_59))"
"((lst_249)"
"(list"
"(lambda(v_153)(quoted? symbol? v_153))"
"(lambda(v_165)(super-ok? v_165 defns_5))"
"(lambda(v_166)(field-count-expr-to-field-count v_166))"
"(lambda(v_167)(field-count-expr-to-field-count v_167))"
"(lambda(v_168)"
"(not"
"(let-values(((temp99_0) 1)"
"((ready-variable?100_0) ready-variable?_1)"
"((defns101_0) defns_5))"
"(any-side-effects?9.1"
" defns101_0"
" #t"
" #f"
" #f"
" ready-variable?100_0"
" #t"
" v_168"
" temp99_0))))"
"(lambda(v_169)"
"(known-good-struct-properties? v_169 immutables-expr_0 super-expr_0 defns_5))"
"(lambda(v_170)(inspector-or-false? v_170))"
"(lambda(v_171)(procedure-spec? v_171 num-fields_0))"
"(lambda(v_172)(immutables-ok? v_172 init-field-count-expr_0)))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_248)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_249)))"
"((letrec-values(((for-loop_213)"
"(lambda(result_96 lst_129 lst_250)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_129)(pair? lst_250) #f)"
"(let-values(((arg_1)(unsafe-car lst_129))"
"((rest_132)(unsafe-cdr lst_129))"
"((pred_2)(unsafe-car lst_250))"
"((rest_64)(unsafe-cdr lst_250)))"
"(let-values(((result_97)"
"(let-values()"
"(let-values(((result_98)"
"(let-values()"
"(let-values()(pred_2 arg_1)))))"
"(values result_98)))))"
"(if(if(not((lambda x_66(not result_97)) arg_1))"
"(if(not((lambda x_67(not result_97)) pred_2))"
"(not #f)"
" #f)"
" #f)"
"(for-loop_213 result_97 rest_132 rest_64)"
" result_97)))"
" result_96)))))"
" for-loop_213)"
" #t"
" lst_248"
" lst_249)))"
" #f)"
" #f))))))))))"
"(define-values"
"(super-ok?)"
"(lambda(e_63 defns_6)"
"(begin"
"(let-values(((or-part_237)(quoted? false? e_63)))"
"(if or-part_237"
" or-part_237"
"(let-values(((o_0)(lookup-defn defns_6(correlated-e e_63))))"
"(if o_0(if(known-struct-op? o_0)(eq? 'struct-type(known-struct-op-type o_0)) #f) #f)))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_64)"
"(begin"
"(let-values(((l_60)(correlated->list e_64)))"
"(+(field-count-expr-to-field-count(list-ref l_60 3))(field-count-expr-to-field-count(list-ref l_60 4)))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_0 v_173)"
"(begin"
"(let-values(((or-part_238)"
"(if(pair?(correlated-e v_173))"
"(if(eq?(correlated-e(car(correlated-e v_173))) 'quote)"
"(val?_0(correlated-e(correlated-cadr v_173)))"
" #f)"
" #f)))"
"(if or-part_238 or-part_238(val?_0(correlated-e v_173)))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_174)"
"(begin(if(pair?(correlated-e v_174))(correlated-e(correlated-cadr v_174))(correlated-e v_174)))))"
"(define-values(false?)(lambda(v_175)(begin(eq?(correlated-e v_175) #f))))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_176)(begin(if(quoted? exact-nonnegative-integer? v_176)(quoted-value v_176) #f))))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_177)"
"(begin"
"(let-values(((or-part_239)(quoted? false? v_177)))"
"(if or-part_239"
" or-part_239"
"(let-values(((or-part_240)(if(quoted? symbol? v_177)(eq? 'prefab(quoted-value v_177)) #f)))"
"(if or-part_240"
" or-part_240"
"(if(= 1(correlated-length v_177))"
"(eq? 'current-inspector(correlated-e(car(correlated-e v_177))))"
" #f))))))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_178 immutables-expr_1 super-expr_1 defns_7)"
"(begin"
"(let-values(((or-part_241)(quoted? null? v_178)))"
"(if or-part_241"
" or-part_241"
"(let-values(((or-part_242)(eq? 'null(correlated-e v_178))))"
"(if or-part_242"
" or-part_242"
"(if(pair?(correlated-e v_178))"
"(if(eq?(correlated-e(car(correlated-e v_178))) 'list)"
"(if(let-values(((lst_251)(cdr(correlated->list v_178))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_251)))"
"((letrec-values(((for-loop_214)"
"(lambda(result_99 lst_252)"
"(begin"
" 'for-loop"
"(if(pair? lst_252)"
"(let-values(((prop+val_3)(unsafe-car lst_252))"
"((rest_133)(unsafe-cdr lst_252)))"
"(let-values(((result_100)"
"(let-values()"
"(let-values(((result_101)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length"
" prop+val_3)"
" 3)"
"(let-values(((prop+val_4)"
"(correlated->list"
" prop+val_3)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_4)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_4 1)"
"(list-ref prop+val_4 2)"
" immutables-expr_1"
" super-expr_1"
" defns_7)"
" #f))"
" #f)))))"
"(values result_101)))))"
"(if(if(not((lambda x_68(not result_100)) prop+val_3))"
"(not #f)"
" #f)"
"(for-loop_214 result_100 rest_133)"
" result_100)))"
" result_99)))))"
" for-loop_214)"
" #t"
" lst_251)))"
"(="
"(sub1(correlated-length v_178))"
"(set-count"
"(let-values(((lst_253)(cdr(correlated->list v_178))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_253)))"
"((letrec-values(((for-loop_215)"
"(lambda(table_171 lst_254)"
"(begin"
" 'for-loop"
"(if(pair? lst_254)"
"(let-values(((prop+val_5)(unsafe-car lst_254))"
"((rest_134)(unsafe-cdr lst_254)))"
"(let-values(((table_172)"
"(let-values(((table_173) table_171))"
"(let-values(((table_174)"
"(let-values()"
"(let-values(((key_65 val_57)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_5)"
" 1)))"
" #t))))"
"(hash-set"
" table_173"
" key_65"
" val_57)))))"
"(values table_174)))))"
"(if(not #f)(for-loop_215 table_172 rest_134) table_172)))"
" table_171)))))"
" for-loop_215)"
" '#hash()"
" lst_253)))))"
" #f)"
" #f)"
" #f))))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_0 val-expr_0 immutables-expr_2 super-expr_2 defns_8)"
"(begin"
"(let-values(((prop-name_0)(correlated-e prop-expr_0)))"
"(let-values(((tmp_28) prop-name_0))"
"(if(equal? tmp_28 'prop:evt)"
"(let-values()"
"(let-values(((or-part_243)(is-lambda? val-expr_0 1 defns_8)))"
"(if or-part_243 or-part_243(immutable-field? val-expr_0 immutables-expr_2))))"
"(if(equal? tmp_28 'prop:procedure)"
"(let-values()"
"(let-values(((or-part_244)(is-lambda? val-expr_0 1 defns_8)))"
"(if or-part_244 or-part_244(immutable-field? val-expr_0 immutables-expr_2))))"
"(if(equal? tmp_28 'prop:custom-write)"
"(let-values()(is-lambda? val-expr_0 3 defns_8))"
"(if(equal? tmp_28 'prop:equal+hash)"
"(let-values()"
"(let-values(((l_61)(correlated->list val-expr_0)))"
"(if(eq? 'list(car l_61))"
"(if(is-lambda?(list-ref l_61 1) 3 defns_8)"
"(if(is-lambda?(list-ref l_61 2) 2 defns_8)(is-lambda?(list-ref l_61 3) 2 defns_8) #f)"
" #f)"
" #f)))"
"(if(if(equal? tmp_28 'prop:method-arity-error) #t(equal? tmp_28 'prop:incomplete-arity))"
"(let-values()"
"(not"
"(let-values(((temp103_0) 1)((defns104_0) defns_8))"
"(any-side-effects?9.1 defns104_0 #t #f #f #f #f val-expr_0 temp103_0))))"
"(if(equal? tmp_28 'prop:impersonator-of)"
"(let-values()(is-lambda? val-expr_0 1 defns_8))"
"(if(equal? tmp_28 'prop:arity-string)"
"(let-values()(is-lambda? val-expr_0 1 defns_8))"
"(if(equal? tmp_28 'prop:checked-procedure)"
"(let-values()(if(quoted? false? super-expr_2)(immutable-field? 1 immutables-expr_2) #f))"
"(let-values()"
"(let-values(((o_1)(lookup-defn defns_8 prop-name_0)))"
"(if o_1"
"(if(known-property? o_1)"
"(not"
"(let-values(((temp106_0) 1)((defns107_0) defns_8))"
"(any-side-effects?9.1 defns107_0 #t #f #f #f #f val-expr_0 temp106_0)))"
" #f)"
" #f))))))))))))))))"
"(define-values"
"(is-lambda?)"
"(lambda(expr_9 arity_0 defns_9)"
"(begin"
"(let-values(((lookup_0)(lookup-defn defns_9 expr_9)))"
"(let-values(((or-part_245)"
"(if lookup_0"
"(if(known-function? lookup_0)"
"(let-values(((or-part_198)(not arity_0)))"
"(if or-part_198 or-part_198(arity-includes?(known-function-arity lookup_0) arity_0)))"
" #f)"
" #f)))"
"(if or-part_245"
" or-part_245"
"(let-values(((or-part_246)"
"(if(pair?(correlated-e expr_9))"
"(if(eq? 'case-lambda(car(correlated-e expr_9)))(not arity_0) #f)"
" #f)))"
"(if or-part_246"
" or-part_246"
"(if(pair?(correlated-e expr_9))"
"(if(eq? 'lambda(car(correlated-e expr_9)))"
"(let-values(((or-part_199)(not arity_0)))"
"(if or-part_199"
" or-part_199"
"((letrec-values(((loop_90)"
"(lambda(args_4 arity_1)"
"(begin"
" 'loop"
"(if(correlated? args_4)"
"(let-values()(loop_90(correlated-e args_4) arity_1))"
"(if(null? args_4)"
"(let-values()(zero? arity_1))"
"(if(pair? args_4)"
"(let-values()(loop_90(cdr args_4)(sub1 arity_1)))"
"(let-values()(not(negative? arity_1))))))))))"
" loop_90)"
"(cadr(correlated->list expr_9))"
" arity_0)))"
" #f)"
" #f)))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(a_40 n_25)"
"(begin"
"(let-values(((or-part_247)(equal? a_40 n_25)))"
"(if or-part_247"
" or-part_247"
"(if(list? a_40)"
"(let-values(((lst_255) a_40))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_255)))"
"((letrec-values(((for-loop_216)"
"(lambda(result_102 lst_256)"
"(begin"
" 'for-loop"
"(if(pair? lst_256)"
"(let-values(((a_41)(unsafe-car lst_256))((rest_135)(unsafe-cdr lst_256)))"
"(let-values(((result_103)"
"(let-values()"
"(let-values(((result_104)"
"(let-values()"
"(let-values()(equal? a_41 n_25)))))"
"(values result_104)))))"
"(if(if(not((lambda x_69 result_103) a_41))(not #f) #f)"
"(for-loop_216 result_103 rest_135)"
" result_103)))"
" result_102)))))"
" for-loop_216)"
" #f"
" lst_255)))"
" #f))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_1 immutables-expr_3)"
"(begin"
"(if(quoted? exact-nonnegative-integer? val-expr_1)"
"(memv(quoted-value val-expr_1)(immutables-expr-to-immutables immutables-expr_3 null))"
" #f))))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_65 fail-v_0)"
"(begin"
"(let-values(((tmp_29)(if(pair?(correlated-e e_65))(correlated-e(car(correlated-e e_65))) #f)))"
"(if(equal? tmp_29 'quote)"
"(let-values()"
"(let-values(((v_179)(correlated-cadr e_65)))"
"(let-values(((or-part_248)"
"(if(correlated-length v_179)"
"(let-values(((l_62)(map2 correlated-e(correlated->list v_179))))"
"(if(andmap2 exact-nonnegative-integer? l_62)"
"(if(=(length l_62)(set-count(list->set l_62))) l_62 #f)"
" #f))"
" #f)))"
"(if or-part_248 or-part_248 fail-v_0))))"
"(let-values() fail-v_0))))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_66 field-count_1)"
"(begin"
"(let-values(((or-part_249)(quoted? false? e_66)))"
"(if or-part_249"
" or-part_249"
"(let-values(((or-part_250)"
"(if(quoted? exact-nonnegative-integer? e_66)"
"(if field-count_1(<(quoted-value e_66) field-count_1) #f)"
" #f)))"
"(if or-part_250 or-part_250(is-lambda? e_66 #f '#hasheq()))))))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_67 init-field-count-expr_1)"
"(begin"
"(let-values(((l_63)(immutables-expr-to-immutables e_67 #f)))"
"(let-values(((c_24)(field-count-expr-to-field-count init-field-count-expr_1)))"
"(if l_63"
"(let-values(((lst_257) l_63))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_257)))"
"((letrec-values(((for-loop_217)"
"(lambda(result_105 lst_258)"
"(begin"
" 'for-loop"
"(if(pair? lst_258)"
"(let-values(((n_26)(unsafe-car lst_258))((rest_136)(unsafe-cdr lst_258)))"
"(let-values(((result_106)"
"(let-values()"
"(let-values(((result_107)"
"(let-values()(let-values()(< n_26 c_24)))))"
"(values result_107)))))"
"(if(if(not((lambda x_70(not result_106)) n_26))(not #f) #f)"
"(for-loop_217 result_106 rest_136)"
" result_106)))"
" result_105)))))"
" for-loop_217)"
" #t"
" lst_257)))"
" #f))))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_68 locals_17 type_1 defns_10)"
"(begin"
"(let-values(((l_64)(correlated->list e_68)))"
"(let-values(((a_42)"
"(if(let-values(((or-part_251)(=(length l_64) 3)))"
"(if or-part_251 or-part_251(=(length l_64) 4)))"
"(let-values(((or-part_252)(hash-ref locals_17(correlated-e(list-ref l_64 1)) #f)))"
"(if or-part_252 or-part_252(lookup-defn defns_10(correlated-e(list-ref l_64 1)))))"
" #f)))"
"(if(known-struct-op? a_42)"
"(if(eq?(known-struct-op-type a_42) type_1)"
"(if(<(field-count-expr-to-field-count(list-ref l_64 2))(known-struct-op-field-count a_42))"
"(let-values(((or-part_253)(=(length l_64) 3)))"
"(if or-part_253 or-part_253(quoted? symbol?(list-ref l_64 3))))"
" #f)"
" #f)"
" #f))))))"
"(define-values(maybe+)(lambda(x_71 y_10)(begin(if x_71(if y_10(+ x_71 y_10) #f) #f))))"
"(define-values"
"(compile-single)"
"(lambda(p_41 cctx_13)"
"(begin(let-values(((temp14_4) #f)((temp15_4) #t))(compile-top9.1 temp14_4 #t temp15_4 #t #f #f p_41 cctx_13)))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_0"
" serializable?4_0"
" single-expression?2_0"
" single-expression?5_0"
" to-source?3_0"
" to-source?6_0"
" p7_0"
" cctx8_0)"
"(begin"
" 'compile-top9"
"(let-values(((p_34) p7_0))"
"(let-values(((cctx_1) cctx8_0))"
"(let-values(((serializable?_1)(if serializable?4_0 serializable?1_0 #t)))"
"(let-values(((single-expression?_0)(if single-expression?5_0 single-expression?2_0 #f)))"
"(let-values(((to-source?_2)(if to-source?6_0 to-source?3_0 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((phase_78)(compile-context-phase cctx_1)))"
"(let-values(((mpis_17)(make-module-path-index-table)))"
"(let-values(((purely-functional?_0) #t))"
"(let-values(((body-linklets_1"
" min-phase_1"
" max-phase_1"
" phase-to-link-module-uses_3"
" phase-to-link-module-uses-expr_2"
" phase-to-link-extra-inspectorss_0"
" syntax-literals_3"
" no-root-context-pos_0)"
"(let-values(((temp16_5)(list p_34))"
"((cctx17_0) cctx_1)"
"((mpis18_0) mpis_17)"
"((temp19_0)"
"(if single-expression?_0"
"(list* '()(list syntax-literals-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literals-id)"
" instance-imports)))"
"((temp20_0)"
"(list"
" top-level-instance"
" empty-top-syntax-literal-instance"
" empty-instance-instance))"
"((to-source?21_0) to-source?_2)"
"((serializable?22_0) serializable?_1)"
"((temp23_3)(lambda()(set! purely-functional?_0 #f)))"
"((temp24_4)"
"(lambda(e_69 expected-results_2 phase_79 required-reference?_0)"
"(if(if purely-functional?_0"
"(let-values(((required-reference?29_0)"
" required-reference?_0))"
"(any-side-effects?9.1"
" #f"
" #f"
" #f"
" #f"
" required-reference?29_0"
" #t"
" e_69"
" expected-results_2))"
" #f)"
"(let-values()(set! purely-functional?_0 #f))"
"(void))))"
"((temp25_3)"
"(lambda(s_176 cctx_14)"
"(begin"
"(set! purely-functional?_0 #f)"
"(compile-top-level-require s_176 cctx_14))))"
"((temp26_1)(not single-expression?_0)))"
"(compile-forms31.1"
" temp20_0"
" temp19_0"
" #f"
" #f"
" temp24_4"
" #t"
" temp26_1"
" #t"
" temp23_3"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp25_3"
" #t"
" #f"
" #f"
" serializable?22_0"
" #t"
" to-source?21_0"
" #t"
" temp16_5"
" cctx17_0"
" mpis18_0))))"
"(let-values(((add-metadata_0)"
"(lambda(ht_111)"
"(begin"
" 'add-metadata"
"(let-values(((ht_112)(hash-set ht_111 'original-phase phase_78)))"
"(let-values(((ht_113)(hash-set ht_112 'max-phase max-phase_1)))"
" ht_113))))))"
"(let-values(((bundle_0)"
"((if to-source?_2 values 1/hash->linklet-bundle)"
"(add-metadata_0"
"(if serializable?_1"
"(let-values()"
"(let-values(((syntax-literals-expr_1)"
"(let-values()"
"(generate-eager-syntax-literals!"
" syntax-literals_3"
" mpis_17"
" phase_78"
"(compile-context-self cctx_1)"
"(compile-context-namespace cctx_1)))))"
"(let-values(((link-linklet_0)"
"((if to-source?_2"
" values"
"(lambda(s_306)"
"(let-values()"
"(let-values(((linklet_2 new-keys_0)"
"(1/compile-linklet"
" s_306"
" #f"
"(vector"
" deserialize-instance"
" empty-eager-instance-instance)"
"(lambda(inst_0)"
"(values inst_0 #f)))))"
" linklet_2))))"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literals-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_17))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_78) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_2)"
"(list"
" 'define-values"
"(list syntax-literals-id)"
" syntax-literals-expr_1)))))"
"(hash-set body-linklets_1 'link link-linklet_0))))"
"(let-values() body-linklets_1))))))"
"(if to-source?_2"
"(let-values()(hasheq #f bundle_0))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_0))"
" #f"
" #f"
" #f"
" phase-to-link-module-uses_3"
"(current-code-inspector)"
" phase-to-link-extra-inspectorss_0"
"(mpis-as-vector mpis_17)"
"(syntax-literals-as-vector syntax-literals_3)"
" null"
" null"
"(extract-namespace-scopes(compile-context-namespace cctx_1))"
" purely-functional?_0)))))))))))))))))))"
"(define-values"
"(compile-top-level-require)"
"(lambda(p_42 cctx_15)"
"(begin"
"(let-values(((phase_80)(compile-context-phase cctx_15)))"
"(if(parsed-require? p_42)"
"(let-values()"
"(let-values(((form-stx_0)(compile-quote-syntax(syntax-disarm$1(parsed-s p_42)) cctx_15)))"
"(list top-level-require!-id form-stx_0 ns-id)))"
"(let-values() #f))))))"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_0"
" as-transformer?10_0"
" frame-id1_0"
" in4_0"
" in9_0"
" requires+provides3_0"
" requires+provides8_0"
" top-level-bind-scope2_0"
" top-level-bind-scope7_0"
" ids11_0"
" defined-syms12_0"
" self13_0"
" phase14_0"
" all-scopes-stx15_0)"
"(begin"
" 'select-defined-syms-and-bind!16"
"(let-values(((ids_15) ids11_0))"
"(let-values(((defined-syms_7) defined-syms12_0))"
"(let-values(((self_19) self13_0))"
"(let-values(((phase_81) phase14_0))"
"(let-values(((all-scopes-stx_3) all-scopes-stx15_0))"
"(let-values(((frame-id_7) frame-id1_0))"
"(let-values(((top-level-bind-scope_3)(if top-level-bind-scope7_0 top-level-bind-scope2_0 #f)))"
"(let-values(((requires+provides_4)(if requires+provides8_0 requires+provides3_0 #f)))"
"(let-values(((orig-s_29)(if in9_0 in4_0 #f)))"
"(let-values(((as-transformer?_4)(if as-transformer?10_0 as-transformer?5_0 #f)))"
"(let-values()"
"(let-values(((defined-syms-at-phase_0)"
"(let-values(((or-part_254)(hash-ref defined-syms_7 phase_81 #f)))"
"(if or-part_254"
" or-part_254"
"(let-values(((ht_114)(make-hasheq)))"
"(begin(hash-set! defined-syms_7 phase_81 ht_114) ht_114))))))"
"(reverse$1"
"(let-values(((lst_76) ids_15))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_76)))"
"((letrec-values(((for-loop_92)"
"(lambda(fold-var_12 lst_77)"
"(begin"
" 'for-loop"
"(if(pair? lst_77)"
"(let-values(((id_52)(unsafe-car lst_77))"
"((rest_86)(unsafe-cdr lst_77)))"
"(let-values(((fold-var_153)"
"(let-values(((fold-var_154) fold-var_12))"
"(let-values(((fold-var_164)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_9)"
"(syntax-e$1"
" id_52)))"
"(let-values(((defined-sym_0)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_0"
" sym_9"
" #f)"
" id_52"
" phase_81"
" top-level-bind-scope_3))"
"(no-extra-scopes?"
" id_52"
" all-scopes-stx_3"
" top-level-bind-scope_3"
" phase_81)"
" #f)"
" sym_9"
"((letrec-values(((loop_91)"
"(lambda(pos_96)"
"(begin"
" 'loop"
"(let-values(((s_178)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                                        \"~a.~a\""
" sym_9"
" pos_96))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_0"
" s_178"
" #f)"
" id_52"
" phase_81"
" top-level-bind-scope_3)"
"(loop_91"
"(add1"
" pos_96))"
" s_178))))))"
" loop_91)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_0"
" defined-sym_0"
" id_52)"
"(values))))"
"(let-values(((b_72)"
"(let-values(((frame-id26_0)"
" frame-id_7)"
"((sym27_1)"
" sym_9))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" frame-id26_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" sym27_1"
" #t"
" #f"
" #f"
" self_19"
" phase_81"
" defined-sym_0))))"
"(begin"
"(if requires+provides_4"
"(let-values()"
"(let-values(((b31_0)"
" b_72))"
"(remove-required-id!75.1"
" b31_0"
" requires+provides_4"
" id_52"
" phase_81)))"
"(void))"
"(let-values(((orig-s22_0)"
" orig-s_29))"
"(add-binding!17.1"
" orig-s22_0"
" #t"
" #f"
" #f"
" id_52"
" b_72"
" phase_81))"
"(if requires+provides_4"
"(let-values()"
"(let-values(((as-transformer?36_0)"
" as-transformer?_4))"
"(add-defined-or-required-id!19.1"
" as-transformer?36_0"
" #f"
" #f"
" requires+provides_4"
" id_52"
" phase_81"
" b_72)))"
"(void))"
" defined-sym_0))))))"
" fold-var_154))))"
"(values fold-var_164)))))"
"(if(not #f)"
"(for-loop_92 fold-var_153 rest_86)"
" fold-var_153)))"
" fold-var_12)))))"
" for-loop_92)"
" null"
" lst_76)))))))))))))))))))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_53 all-scopes-stx_4 top-level-bind-scope_4 phase_82)"
"(begin"
"(let-values(((m-id_0)(datum->syntax$1 all-scopes-stx_4(syntax-e$1 id_53))))"
"(let-values(((or-part_74)(bound-identifier=?$1 id_53 m-id_0 phase_82)))"
"(if or-part_74"
" or-part_74"
"(if top-level-bind-scope_4"
"(bound-identifier=?$1 id_53(add-scope m-id_0 top-level-bind-scope_4) phase_82)"
" #f)))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_0 id_54 phase_83 top-level-bind-scope_5)"
"(begin"
"(if prev-id_0"
"(if(not(bound-identifier=?$1 prev-id_0 id_54 phase_83))"
"(let-values(((or-part_255)(not top-level-bind-scope_5)))"
"(if or-part_255"
" or-part_255"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_0 top-level-bind-scope_5)"
"(remove-scope id_54 top-level-bind-scope_5)"
" phase_83))))"
" #f)"
" #f))))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_0 ctx_10)"
"(begin"
"(let-values(((temp38_0)(root-expand-context-defined-syms ctx_10))"
"((temp39_1)(namespace-mpi(expand-context-namespace ctx_10)))"
"((temp40_1)(expand-context-phase ctx_10))"
"((temp41_1)(root-expand-context-all-scopes-stx ctx_10))"
"((temp42_0)(root-expand-context-frame-id ctx_10))"
"((temp43_0)(root-expand-context-top-level-bind-scope ctx_10)))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" temp42_0"
" #f"
" #f"
" #f"
" #f"
" temp43_0"
" #t"
" tl-ids_0"
" temp38_0"
" temp39_1"
" temp40_1"
" temp41_1)))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_8 phase_84 sym_56 id_55)"
"(begin"
"(let-values(((defined-syms-at-phase_1)"
"(let-values(((or-part_256)(hash-ref defined-syms_8 phase_84 #f)))"
"(if or-part_256"
" or-part_256"
"(let-values(((ht_31)(make-hasheq)))"
"(begin(hash-set! defined-syms_8 phase_84 ht_31) ht_31))))))"
"(hash-set! defined-syms-at-phase_1 sym_56 id_55)))))"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_3 evaled-ld-h_0)"
"(begin"
"(lambda(ns_58 phase-shift_13 original-self_0 self_6)"
"(let-values(((root-ctx_4)(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f))))"
"(let-values(((s_3)(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_4))))"
"(let-values((()"
"(begin"
"(let-values(((lst_80) requires_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_80)))"
"((letrec-values(((for-loop_218)"
"(lambda(lst_259)"
"(begin"
" 'for-loop"
"(if(pair? lst_259)"
"(let-values(((phase+reqs_0)(unsafe-car lst_259))"
"((rest_137)(unsafe-cdr lst_259)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_15)"
"(car"
" phase+reqs_0)))"
"(begin"
"(let-values(((lst_260)"
"(cdr"
" phase+reqs_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_260)))"
"((letrec-values(((for-loop_202)"
"(lambda(lst_261)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_261)"
"(let-values(((req_4)"
"(unsafe-car"
" lst_261))"
"((rest_138)"
"(unsafe-cdr"
" lst_261)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_12)"
"(module-path-index-shift"
" req_4"
" original-self_0"
" self_6)))"
"(let-values(((temp6_0)"
"(phase+"
" phase_15"
" phase-shift_13))"
"((phase-shift7_0)"
" phase-shift_13)"
"((temp8_2)"
" 'module))"
"(perform-require!78.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp6_0"
" #f"
" #f"
" phase-shift7_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_2"
" mpi_12"
" s_3"
" self_6"
" s_3"
" ns_58))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_202"
" rest_138)"
"(values))))"
"(values))))))"
" for-loop_202)"
" lst_260)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_218 rest_137)(values))))"
"(values))))))"
" for-loop_218)"
" lst_80)))"
"(values))))"
"(let-values()"
"(let-values(((defined-syms_9)(root-expand-context-defined-syms root-ctx_4)))"
"(begin"
"(let-values(((ht_115) evaled-ld-h_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_115)))"
"((letrec-values(((for-loop_219)"
"(lambda(i_85)"
"(begin"
" 'for-loop"
"(if i_85"
"(let-values(((phase_85 linklet_3)"
"(hash-iterate-key+value ht_115 i_85)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((lst_262)"
"(1/linklet-export-variables"
" linklet_3)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_262)))"
"((letrec-values(((for-loop_77)"
"(lambda(lst_83)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_83)"
"(let-values(((sym_57)"
"(unsafe-car"
" lst_83))"
"((rest_139)"
"(unsafe-cdr"
" lst_83)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_5)"
"(datum->syntax$1"
" s_3"
" sym_57)))"
"(begin"
"(let-values(((id9_0)"
" id_5)"
"((temp10_0)"
"(let-values(((self12_0)"
" self_6)"
"((phase13_0)"
" phase_85)"
"((sym14_0)"
" sym_57))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" self12_0"
" phase13_0"
" sym14_0)))"
"((phase11_0)"
" phase_85))"
"(add-binding!17.1"
" #f"
" #f"
" #f"
" #f"
" id9_0"
" temp10_0"
" phase11_0))"
"(add-defined-sym!"
" defined-syms_9"
" phase_85"
" sym_57"
" id_5))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_77"
" rest_139)"
"(values))))"
"(values))))))"
" for-loop_77)"
" lst_262)))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_219(hash-iterate-next ht_115 i_85))"
"(values))))"
"(values))))))"
" for-loop_219)"
"(hash-iterate-first ht_115))))"
"(void)"
" root-ctx_4))))))))))"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_0"
" linklet3_0"
" import-module-uses4_0"
" import-module-instances5_0"
" insp6_0"
" extra-inspector7_0"
" extra-inspectorsss8_0)"
"(begin"
" 'check-require-access9"
"(let-values(((linklet_4) linklet3_0))"
"(let-values(((skip-num-imports_0) skip-imports1_0))"
"(let-values(((import-module-uses_0) import-module-uses4_0))"
"(let-values(((import-module-instances_0) import-module-instances5_0))"
"(let-values(((insp_10) insp6_0))"
"(let-values(((extra-inspector_0) extra-inspector7_0))"
"(let-values(((extra-inspectorsss_4) extra-inspectorsss8_0))"
"(let-values()"
"(begin"
"(let-values(((lst_39)(list-tail(1/linklet-import-variables linklet_4) skip-num-imports_0))"
"((lst_263) import-module-uses_0)"
"((lst_84) import-module-instances_0)"
"((lst_157)"
"(let-values(((or-part_71) extra-inspectorsss_4))"
"(if or-part_71 or-part_71 import-module-uses_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_39)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_263)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_84)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_157)))"
"((letrec-values(((for-loop_220)"
"(lambda(lst_264 lst_265 lst_24 lst_168)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_264)"
"(if(pair? lst_265)(if(pair? lst_24)(pair? lst_168) #f) #f)"
" #f)"
"(let-values(((import-syms_0)(unsafe-car lst_264))"
"((rest_140)(unsafe-cdr lst_264))"
"((mu_7)(unsafe-car lst_265))"
"((rest_141)(unsafe-cdr lst_265))"
"((mi_16)(unsafe-car lst_24))"
"((rest_41)(unsafe-cdr lst_24))"
"((extra-inspectorss_14)(unsafe-car lst_168))"
"((rest_35)(unsafe-cdr lst_168)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_15)"
"(module-instance-module"
" mi_16)))"
"(if(module-no-protected?"
" m_15)"
"(void)"
"(let-values()"
"(let-values(((access_2)"
"(let-values(((or-part_8)"
"(module-access"
" m_15)))"
"(if or-part_8"
" or-part_8"
"(module-compute-access!"
" m_15)))))"
"(begin"
"(let-values(((lst_55)"
" import-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_55)))"
"((letrec-values(((for-loop_221)"
"(lambda(lst_25)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_25)"
"(let-values(((import-sym_0)"
"(unsafe-car"
" lst_25))"
"((rest_9)"
"(unsafe-cdr"
" lst_25)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_43)"
"(hash-ref"
"(hash-ref"
" access_2"
"(module-use-phase"
" mu_7)"
" '#hasheq())"
" import-sym_0"
" 'unexported)))"
"(if(let-values(((or-part_167)"
"(eq?"
" a_43"
" 'unexported)))"
"(if or-part_167"
" or-part_167"
"(eq?"
" a_43"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_3)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_16))))"
"(if(let-values(((or-part_169)"
"(inspector-superior?"
" insp_10"
" guard-insp_3)))"
"(if or-part_169"
" or-part_169"
"(let-values(((or-part_33)"
"(if extra-inspector_0"
"(inspector-superior?"
" extra-inspector_0"
" guard-insp_3)"
" #f)))"
"(if or-part_33"
" or-part_33"
"(if extra-inspectorsss_4"
"(if extra-inspectorss_14"
"(extra-inspectors-allow?"
"(hash-ref"
" extra-inspectorss_14"
" import-sym_0"
" #f)"
" guard-insp_3)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                                    \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                                    \"  variable: ~s\\n\""
"                                                                                                                                                                                    \"  from module: ~a\")"
" a_43"
" import-sym_0"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_16))))))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_221"
" rest_9)"
"(values))))"
"(values))))))"
" for-loop_221)"
" lst_55)))"
"(void)))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_220 rest_140 rest_141 rest_41 rest_35)"
"(values))))"
"(values))))))"
" for-loop_220)"
" lst_39"
" lst_263"
" lst_84"
" lst_157)))"
"(void)))))))))))))"
"(define-values"
"(check-single-require-access)"
"(lambda(mi_17 phase_86 sym_58 insp_11)"
"(begin"
"(let-values(((m_16)(module-instance-module mi_17)))"
"(if(module-no-protected? m_16)"
"(let-values() #t)"
"(let-values()"
"(let-values(((access_3)"
"(let-values(((or-part_68)(module-access m_16)))"
"(if or-part_68 or-part_68(module-compute-access! m_16)))))"
"(let-values(((a_44)(hash-ref(hash-ref access_3 phase_86 '#hasheq()) sym_58 'unexported)))"
"(if(let-values(((or-part_36)(eq? a_44 'unexported)))"
"(if or-part_36 or-part_36(eq? a_44 'protected)))"
"(let-values()"
"(let-values(((guard-insp_4)(namespace-inspector(module-instance-namespace mi_17))))"
"(let-values(((or-part_257)(if insp_11(inspector-superior? insp_11 guard-insp_4) #f)))"
"(if or-part_257 or-part_257(inspector-superior?(current-code-inspector) guard-insp_4)))))"
"(let-values() #t))))))))))"
"(define-values(module-cache)(make-weak-hash))"
"(define-values"
"(make-module-cache-key)"
"(lambda(hash-code_4)(begin(if hash-code_4(list hash-code_4(current-load-relative-directory)) #f))))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_11 proc_8)(begin(hash-set! module-cache key_11(make-ephemeron key_11 proc_8)))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_66)"
"(begin(let-values(((e_70)(hash-ref module-cache key_66 #f)))(if e_70(ephemeron-value e_70) #f)))))"
"(define-values(current-module-declare-as-predefined)(make-parameter #f))"
"(define-values"
"(eval-module8.1)"
"(lambda(namespace1_2"
" namespace4_0"
" supermodule-name3_0"
" supermodule-name6_0"
" with-submodules?2_0"
" with-submodules?5_0"
" c7_0)"
"(begin"
" 'eval-module8"
"(let-values(((c_18) c7_0))"
"(let-values(((ns_59)(if namespace4_0 namespace1_2(1/current-namespace))))"
"(let-values(((with-submodules?_1)(if with-submodules?5_0 with-submodules?2_0 #t)))"
"(let-values(((supermodule-name_1)(if supermodule-name6_0 supermodule-name3_0 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((dh_0 h_1 data-instance_0 declaration-instance_0)"
"(compiled-module->dh+h+data-instance+declaration-instance c_18)))"
"(let-values(((syntax-literals-data-instance_0)"
"(if(compiled-in-memory? c_18)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_18)"
"(let-values(((l_11)(hash-ref h_1 'stx-data #f)))"
"(if l_11"
"(let-values()"
"(1/instantiate-linklet"
"(1/eval-linklet l_11)"
"(list deserialize-instance data-instance_0)))"
"(if(eq?(hash-ref h_1 'module->namespace #f) 'empty)"
"(let-values() empty-syntax-literals-instance/empty-namespace)"
"(let-values() empty-syntax-literals-data-instance)))))))"
"(let-values(((decl_0)"
"(lambda(key_67)"
"(begin 'decl(1/instance-variable-value declaration-instance_0 key_67)))))"
"(let-values(((pre-submodule-names_0)(hash-ref h_1 'pre null)))"
"(let-values(((post-submodule-names_0)(hash-ref h_1 'post null)))"
"(let-values(((default-name_1)(hash-ref h_1 'name 'module)))"
"(let-values(((cache-key_0)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_0)"
"(if(null? post-submodule-names_0)(hash-ref h_1 'hash-code #f) #f)"
" #f))))"
"(let-values(((cross-phase-persistent?_1)(hash-ref h_1 'cross-phase-persistent? #f)))"
"(let-values(((min-phase_2)(hash-ref h_1 'min-phase 0)))"
"(let-values(((max-phase_2)(hash-ref h_1 'max-phase 0)))"
"(let-values(((language-info_1)(hash-ref h_1 'language-info #f)))"
"(let-values(((phases-h_0)"
"(let-values(((start_37) min-phase_2)"
"((end_26)(add1 max-phase_2))"
"((inc_20) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_37 end_26 inc_20)))"
"((letrec-values(((for-loop_107)"
"(lambda(table_103 pos_97)"
"(begin"
" 'for-loop"
"(if(< pos_97 end_26)"
"(let-values(((phase-level_16)"
" pos_97))"
"(let-values(((table_175)"
"(let-values(((v_180)"
"(hash-ref"
" h_1"
" phase-level_16"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_222)"
"(lambda(table_105)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_176)"
"(let-values(((table_177)"
" table_105))"
"(if v_180"
"(let-values(((table_178)"
" table_177))"
"(let-values(((table_179)"
"(let-values()"
"(let-values(((key_68"
" val_58)"
"(let-values()"
"(values"
" phase-level_16"
"(1/eval-linklet"
" v_180)))))"
"(hash-set"
" table_178"
" key_68"
" val_58)))))"
"(values"
" table_179)))"
" table_177))))"
" table_176))))))"
" for-loop_222)"
" table_103)))))"
"(if(not #f)"
"(for-loop_107"
" table_175"
"(+ pos_97 inc_20))"
" table_175)))"
" table_103)))))"
" for-loop_107)"
" '#hash()"
" start_37)))))"
"(let-values(((syntax-literals-linklet_0)"
"(let-values(((l_15)(hash-ref h_1 'stx #f)))"
"(if l_15(1/eval-linklet l_15) #f))))"
"(let-values(((extra-inspector_6)"
"(if(compiled-in-memory? c_18)"
"(compiled-in-memory-compile-time-inspector c_18)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_1)"
"(if(compiled-in-memory? c_18)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_18)"
" '#hasheqv())))"
"(let-values(((requires_4)(decl_0 'requires)))"
"(let-values(((provides_8)(decl_0 'provides)))"
"(let-values(((original-self_1)(decl_0 'self-mpi)))"
"(let-values(((phase-to-link-modules_0)"
"(decl_0 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_0)"
"(make-create-root-expand-context-from-module"
" requires_4"
" phases-h_0)))"
"(let-values(((declare-submodules_0)"
"(if dh_0"
"(lambda(ns_60 names_0 declare-name_0 pre?_0)"
"(begin"
" 'declare-submodules"
"(if(compiled-in-memory? c_18)"
"(begin"
"(let-values(((lst_20)"
"(if pre?_0"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_18)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_18))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_20)))"
"((letrec-values(((for-loop_223)"
"(lambda(lst_87)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_87)"
"(let-values(((c_25)"
"(unsafe-car"
" lst_87))"
"((rest_42)"
"(unsafe-cdr"
" lst_87)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ns13_0)"
" ns_60)"
"((declare-name14_0)"
" declare-name_0))"
"(eval-module8.1"
" ns13_0"
" #t"
" declare-name14_0"
" #t"
" #f"
" #f"
" c_25)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_223"
" rest_42)"
"(values))))"
"(values))))))"
" for-loop_223)"
" lst_20)))"
"(void))"
"(begin"
"(let-values(((lst_266) names_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_266)))"
"((letrec-values(((for-loop_224)"
"(lambda(lst_88)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_88)"
"(let-values(((name_48)"
"(unsafe-car"
" lst_88))"
"((rest_142)"
"(unsafe-cdr"
" lst_88)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_0)"
"(hash-ref"
" dh_0"
" name_48"
" #f)))"
"(begin"
"(if sm-cd_0"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                             \"missing submodule declaration:\""
" name_48)))"
"(let-values(((ns16_0)"
" ns_60)"
"((declare-name17_0)"
" declare-name_0))"
"(eval-module8.1"
" ns16_0"
" #t"
" declare-name17_0"
" #t"
" #f"
" #f"
" sm-cd_0)))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_224"
" rest_142)"
"(values))))"
"(values))))))"
" for-loop_224)"
" lst_266)))"
"(void)))))"
" void)))"
"(let-values(((declare-this-module_0)"
"(lambda(ns_61)"
"(begin"
" 'declare-this-module"
"(let-values(((m_17)"
"(let-values(((temp22_3)"
"(1/current-module-declare-source))"
"((original-self23_0)"
" original-self_1)"
"((requires24_0)"
" requires_4)"
"((provides25_0)"
" provides_8)"
"((language-info26_0)"
" language-info_1)"
"((min-phase27_0)"
" min-phase_2)"
"((max-phase28_0)"
" max-phase_2)"
"((cross-phase-persistent?29_0)"
" cross-phase-persistent?_1)"
"((temp30_1)"
"(current-module-declare-as-predefined))"
"((temp31_2)"
"(append"
" pre-submodule-names_0"
" post-submodule-names_0))"
"((supermodule-name32_0)"
" supermodule-name_1)"
"((temp33_0)"
"(lambda()"
"(get-all-variables"
" phases-h_0)))"
"((temp34_0)"
"(lambda(phase-level_17"
" ns_62"
" insp_12)"
"(module-linklet-info2.1"
"(hash-ref"
" phases-h_0"
" phase-level_17"
" #f)"
"(hash-ref"
" phase-to-link-modules_0"
" phase-level_17"
" #f)"
" original-self_1"
" insp_12"
" extra-inspector_6"
"(hash-ref"
" phase-to-link-extra-inspectorsss_1"
" phase-level_17"
" #f))))"
"((temp35_0)"
"(lambda(bulk-binding-registry_13)"
"(force-syntax-deserialize"
" syntax-literals-data-instance_0"
" bulk-binding-registry_13)))"
"((temp36_2)"
"(lambda(data-box_2"
" ns_63"
" phase-shift_15"
" self_20"
" bulk-binding-registry_14"
" insp_13)"
"(if(unbox"
" data-box_2)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_2"
" cache-key_0"
" ns_63"
" syntax-literals-linklet_0"
" data-instance_0"
" syntax-literals-data-instance_0"
" phase-shift_15"
" original-self_1"
" self_20"
" bulk-binding-registry_14"
" insp_13"
" create-root-expand-context-from-module_0)))))"
"((temp37_0)"
"(lambda(data-box_3"
" ns_64"
" phase-shift_16"
" phase-level_18"
" self_21"
" bulk-binding-registry_15"
" insp_14)"
"(let-values()"
"(let-values(((syntax-literals-instance_0)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_3))))"
"(let-values(((phase-linklet_0)"
"(hash-ref"
" phases-h_0"
" phase-level_18"
" #f)))"
"(if phase-linklet_0"
"(let-values()"
"(let-values(((module-uses_0)"
"(hash-ref"
" phase-to-link-modules_0"
" phase-level_18)))"
"(let-values(((import-module-instances_1"
" import-instances_0)"
"(let-values(((mis_1"
" is_0)"
"(let-values(((lst_267)"
" module-uses_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_267)))"
"((letrec-values(((for-loop_225)"
"(lambda(mis_2"
" is_1"
" lst_268)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_268)"
"(let-values(((mu_8)"
"(unsafe-car"
" lst_268))"
"((rest_143)"
"(unsafe-cdr"
" lst_268)))"
"(let-values(((mis_3"
" is_2)"
"(let-values(((mis_4)"
" mis_2)"
"((is_3)"
" is_1))"
"(let-values(((mis_5"
" is_4)"
"(let-values()"
"(let-values(((mis45_0"
" is46_0)"
"(let-values()"
"(let-values(((original-self49_0)"
" original-self_1)"
"((self50_0)"
" self_21)"
"((temp51_1)"
"(phase+"
"(phase-"
" phase-level_18"
"(module-use-phase"
" mu_8))"
" phase-shift_16)))"
"(namespace-module-use->module+linklet-instances146.1"
" temp51_1"
" original-self49_0"
" #t"
" self50_0"
" #t"
" ns_64"
" mu_8)))))"
"(values"
"(cons"
" mis45_0"
" mis_4)"
"(cons"
" is46_0"
" is_3))))))"
"(values"
" mis_5"
" is_4)))))"
"(if(not"
" #f)"
"(for-loop_225"
" mis_3"
" is_2"
" rest_143)"
"(values"
" mis_3"
" is_2))))"
"(values"
" mis_2"
" is_1))))))"
" for-loop_225)"
" null"
" null"
" lst_267)))))"
"(values"
"(reverse$1"
" mis_1)"
"(reverse$1"
" is_0)))))"
"(let-values((()"
"(begin"
"(let-values(((temp39_2)"
" 2)"
"((module-uses40_0)"
" module-uses_0)"
"((import-module-instances41_0)"
" import-module-instances_1)"
"((insp42_0)"
" insp_14)"
"((extra-inspector43_0)"
" extra-inspector_6)"
"((temp44_0)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_1"
" phase-level_18"
" #f)))"
"(check-require-access9.1"
" temp39_2"
" phase-linklet_0"
" module-uses40_0"
" import-module-instances41_0"
" insp42_0"
" extra-inspector43_0"
" temp44_0))"
"(values))))"
"(let-values(((module-body-instance-instance_0)"
"(let-values(((temp52_2)"
"(lambda(name_49"
" val_59)"
"(namespace-set-transformer!"
" ns_64"
"(sub1"
" phase-level_18)"
" name_49"
" val_59))))"
"(make-module-body-instance-instance18.1"
" temp52_2))))"
"(let-values(((instantiate-body_0)"
"(lambda()"
"(begin"
" 'instantiate-body"
"(1/instantiate-linklet"
" phase-linklet_0"
"(list*"
" syntax-literals-instance_0"
" module-body-instance-instance_0"
" import-instances_0)"
"(namespace->instance"
" ns_64"
" phase-level_18))))))"
"(if(zero-phase?"
" phase-level_18)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_16)"
"(let-values()"
"(instantiate-body_0))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_64)"
"(let-values()"
"(instantiate-body_0))))))"
"(let-values()"
"(let-values(((ns-1_0)"
"(namespace->namespace-at-phase"
" ns_64"
"(phase+"
" phase-shift_16"
"(sub1"
" phase-level_18)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(begin"
" '...nder/eval/module.rkt:214:76"
"(let-values(((ns-153_0)"
" ns-1_0))"
"(make-expand-context10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns-153_0)))))"
" 1/current-namespace"
" ns_64"
" current-module-code-inspector"
" insp_14)"
"(let-values()"
"(instantiate-body_0))))))))))))"
"(void))))))))"
"(make-module39.1"
" cross-phase-persistent?29_0"
" #t"
" temp35_0"
" #t"
" temp33_0"
" #t"
" temp37_0"
" language-info26_0"
" #t"
" max-phase28_0"
" #t"
" min-phase27_0"
" #t"
" #f"
" #f"
" temp34_0"
" #t"
" temp30_1"
" #t"
" temp36_2"
" #t"
" #f"
" #f"
" provides25_0"
" requires24_0"
" #t"
" original-self23_0"
" temp22_3"
" #t"
" temp31_2"
" #t"
" supermodule-name32_0"
" #t))))"
"(let-values(((declare-name_1)"
"(substitute-module-declare-name"
" default-name_1)))"
"(begin"
"(if with-submodules?_1"
"(let-values()"
"(declare-submodules_0"
" ns_61"
" pre-submodule-names_0"
" declare-name_1"
" #t))"
"(void))"
"(let-values(((with-submodules?21_0)"
" with-submodules?_1))"
"(declare-module!58.1"
" with-submodules?21_0"
" #t"
" ns_61"
" m_17"
" declare-name_1))"
"(if with-submodules?_1"
"(let-values()"
"(declare-submodules_0"
" ns_61"
" post-submodule-names_0"
" declare-name_1"
" #f))"
"(void)))))))))"
"(begin"
"(if cache-key_0"
"(let-values()"
"(module-cache-set!"
" cache-key_0"
" declare-this-module_0))"
"(void))"
"(declare-this-module_0"
" ns_59)))))))))))))))))))))))))))))))))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_67 make-_67 ?_67 -ref_67 -set!_67)"
"(let-values()"
"(let-values()"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data)))))"
"(values"
" struct:_67"
" make-_67"
" ?_67"
"(make-struct-field-accessor -ref_67 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_67 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_4"
" cache-key_1"
" ns_65"
" syntax-literals-linklet_1"
" data-instance_1"
" syntax-literals-data-instance_1"
" phase-shift_17"
" original-self_2"
" self_22"
" bulk-binding-registry_16"
" insp_15"
" create-root-expand-context-from-module_1)"
"(begin"
"(let-values((()"
"(begin"
"(if(if(not(load-on-demand-enabled))"
"(if(not(eq? syntax-literals-data-instance_1 empty-syntax-literals-data-instance))"
"(not(eq? syntax-literals-data-instance_1 empty-syntax-literals-instance/empty-namespace))"
" #f)"
" #f)"
"(let-values()"
"(force-syntax-deserialize syntax-literals-data-instance_1 bulk-binding-registry_16))"
"(void))"
"(values))))"
"(let-values(((inst_1)"
"(let-values(((ns55_1) ns_65)"
"((phase-shift56_1) phase-shift_17)"
"((self57_0) self_22)"
"((insp58_0) insp_15)"
"((bulk-binding-registry59_0) bulk-binding-registry_16)"
"((temp60_1)"
"                                    (lambda (name_50 val_60) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(make-instance-instance13.1"
" bulk-binding-registry59_0"
" insp58_0"
" ns55_1"
" phase-shift56_1"
" self57_0"
" temp60_1))))"
"(let-values(((syntax-literals-instance_1)"
"(if syntax-literals-linklet_1"
"(1/instantiate-linklet"
" syntax-literals-linklet_1"
"(list deserialize-instance data-instance_1 syntax-literals-data-instance_1 inst_1))"
" empty-syntax-literals-instance)))"
"(let-values((()"
"(begin"
"(set-box! data-box_4(instance-data11.1 syntax-literals-instance_1 cache-key_1))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_0)"
"(1/instance-variable-value syntax-literals-instance_1 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_0 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_65"
"(delay"
"(lambda()"
"(begin"
" '...nder/eval/module.rkt:281:39"
"(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f)))))))"
"(if(procedure? get-encoded-root-expand-ctx_0)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_65"
"(delay"
"(lambda()"
"(begin"
" '...nder/eval/module.rkt:284:39"
"(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_0)))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_65"
"(delay"
"(lambda()"
"(begin"
" '...nder/eval/module.rkt:289:39"
"(create-root-expand-context-from-module_1"
" ns_65"
" phase-shift_17"
" original-self_2"
" self_22))))))))))))))))"
"(define-values"
"(force-syntax-deserialize)"
"(lambda(syntax-literals-data-instance_2 bulk-binding-registry_17)"
"(begin"
"(let-values(((deserialize-syntax_0)"
"(1/instance-variable-value syntax-literals-data-instance_2 deserialize-syntax-id)))"
"(if deserialize-syntax_0(let-values()(deserialize-syntax_0 bulk-binding-registry_17))(void))))))"
"(define-values"
"(compiled-module->dh+h)"
"(lambda(c_26)"
"(begin"
"(let-values(((ld/h_0)(if(compiled-in-memory? c_26)(compiled-in-memory-linklet-directory c_26) c_26)))"
"(let-values(((dh_1)"
"(if(1/linklet-directory? ld/h_0)"
"(let-values()(1/linklet-directory->hash ld/h_0))"
"(let-values() #f))))"
"(let-values(((h_2)(1/linklet-bundle->hash(if dh_1(hash-ref dh_1 #f) ld/h_0))))(values dh_1 h_2)))))))"
"(define-values"
"(compiled-module->h)"
"(lambda(c_27)(begin(let-values(((dh_2 h_3)(compiled-module->dh+h c_27))) h_3))))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_28)"
"(begin"
"(let-values(((dh_3 h_4)(compiled-module->dh+h c_28)))"
"(let-values(((data-instance_2)"
"(if(compiled-in-memory? c_28)"
"(make-data-instance-from-compiled-in-memory c_28)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_4 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_1)"
"(if(if(compiled-in-memory? c_28)(compiled-in-memory-original-self c_28) #f)"
"(make-declaration-instance-from-compiled-in-memory c_28)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_4 'decl))"
"(list deserialize-instance data-instance_2)))))"
"(values dh_3 h_4 data-instance_2 declaration-instance_1)))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_29)"
"(begin"
"(let-values(((dh_4 h_5 data-instance_3 declaration-instance_2)"
"(compiled-module->dh+h+data-instance+declaration-instance c_29)))"
" declaration-instance_2))))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_30)"
"(begin"
"(let-values(((dh_5 h_6 data-instance_4 declaration-instance_3)"
"(compiled-module->dh+h+data-instance+declaration-instance c_30)))"
"(values h_6 declaration-instance_3)))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_6)(begin(1/make-instance 'data #f 'constant mpi-vector-id(compiled-in-memory-mpis cim_6)))))"
"(define-values"
"(make-declaration-instance-from-compiled-in-memory)"
"(lambda(cim_7)"
"(begin"
"(1/make-instance"
" 'decl"
" #f"
" 'constant"
" 'self-mpi"
"(compiled-in-memory-original-self cim_7)"
" 'requires"
"(compiled-in-memory-requires cim_7)"
" 'provides"
"(compiled-in-memory-provides cim_7)"
" 'phase-to-link-modules"
"(compiled-in-memory-phase-to-link-module-uses cim_7)))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_8)"
"(begin"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literals cim_8)))))"
"(define-values"
"(empty-syntax-literals-instance/empty-namespace)"
"(1/make-instance"
" 'empty-stx/empty-ns"
" #f"
" 'constant"
" get-syntax-literal!-id"
"(lambda(pos_98) #f)"
" 'get-encoded-root-expand-ctx"
" 'empty))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_1)"
"(begin"
"(let-values(((ht_116) phases-h_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_116)))"
"((letrec-values(((for-loop_226)"
"(lambda(table_180 i_147)"
"(begin"
" 'for-loop"
"(if i_147"
"(let-values(((phase_87 linklet_5)(hash-iterate-key+value ht_116 i_147)))"
"(let-values(((table_181)"
"(let-values(((table_144) table_180))"
"(let-values(((table_182)"
"(let-values()"
"(let-values(((key_69 val_61)"
"(let-values()"
"(values"
" phase_87"
"(1/linklet-export-variables"
" linklet_5)))))"
"(hash-set table_144 key_69 val_61)))))"
"(values table_182)))))"
"(if(not #f)"
"(for-loop_226 table_181(hash-iterate-next ht_116 i_147))"
" table_181)))"
" table_180)))))"
" for-loop_226)"
" '#hash()"
"(hash-iterate-first ht_116)))))))"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_9 self_23)"
"(begin"
"(let-values(((extract_0)"
"(lambda(ok?_25)"
"(begin"
" 'extract"
"(let-values(((result-l_0)"
"(reverse$1"
"(let-values(((ht_117) provides_9))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_117)))"
"((letrec-values(((for-loop_95)"
"(lambda(fold-var_58 i_148)"
"(begin"
" 'for-loop"
"(if i_148"
"(let-values(((phase_88 at-phase_11)"
"(hash-iterate-key+value ht_117 i_148)))"
"(let-values(((fold-var_59)"
"(let-values(((l_65)"
"(reverse$1"
"(let-values(((ht_110)"
" at-phase_11))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_110)))"
"((letrec-values(((for-loop_227)"
"(lambda(fold-var_215"
" i_149)"
"(begin"
" 'for-loop"
"(if i_149"
"(let-values(((sym_59"
" b/p_1)"
"(hash-iterate-key+value"
" ht_110"
" i_149)))"
"(let-values(((fold-var_216)"
"(let-values(((fold-var_217)"
" fold-var_215))"
"(if(ok?_25"
" b/p_1)"
"(let-values(((fold-var_30)"
" fold-var_217))"
"(let-values(((fold-var_218)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_73)"
"(provided-as-binding"
" b/p_1)))"
"(list"
" sym_59"
"(if(eq?"
" self_23"
"(module-binding-module"
" b_73))"
"(let-values()"
" null)"
"(let-values()"
"(reverse$1"
"(let-values(((lst_82)"
"(cons"
" b_73"
"(module-binding-extra-nominal-bindings"
" b_73))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_82)))"
"((letrec-values(((for-loop_219)"
"(lambda(fold-var_32"
" lst_269)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_269)"
"(let-values(((b_74)"
"(unsafe-car"
" lst_269))"
"((rest_144)"
"(unsafe-cdr"
" lst_269)))"
"(let-values(((fold-var_148)"
"(let-values(((fold-var_149)"
" fold-var_32))"
"(let-values(((fold-var_26)"
"(let-values()"
"(cons"
"(let-values()"
"(if(if(eqv?"
"(module-binding-nominal-phase"
" b_74)"
" phase_88)"
"(eq?"
"(module-binding-nominal-sym"
" b_74)"
" sym_59)"
" #f)"
"(let-values()"
"(module-binding-nominal-module"
" b_74))"
"(let-values()"
"(list"
"(module-binding-nominal-module"
" b_74)"
"(module-binding-phase"
" b_74)"
"(module-binding-nominal-sym"
" b_74)"
"(module-binding-nominal-phase"
" b_74)))))"
" fold-var_149))))"
"(values"
" fold-var_26)))))"
"(if(not"
" #f)"
"(for-loop_219"
" fold-var_148"
" rest_144)"
" fold-var_148)))"
" fold-var_32)))))"
" for-loop_219)"
" null"
" lst_82)))))))))"
" fold-var_30))))"
"(values"
" fold-var_218)))"
" fold-var_217))))"
"(if(not"
" #f)"
"(for-loop_227"
" fold-var_216"
"(hash-iterate-next"
" ht_110"
" i_149))"
" fold-var_216)))"
" fold-var_215)))))"
" for-loop_227)"
" null"
"(hash-iterate-first"
" ht_110)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_100)"
"(lambda(fold-var_64)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_150)"
"(let-values(((fold-var_27)"
" fold-var_64))"
"(if(null?"
" l_65)"
" fold-var_27"
"(let-values(((fold-var_28)"
" fold-var_27))"
"(let-values(((fold-var_29)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_88"
"(let-values(((car6_0)"
" car))"
"(sort7.1"
" #f"
" #f"
" car6_0"
" #t"
" l_65"
" symbol<?))))"
" fold-var_28))))"
"(values"
" fold-var_29)))))))"
" fold-var_150))))))"
" for-loop_100)"
" fold-var_58)))))"
"(if(not #f)"
"(for-loop_95"
" fold-var_59"
"(hash-iterate-next ht_117 i_148))"
" fold-var_59)))"
" fold-var_58)))))"
" for-loop_95)"
" null"
"(hash-iterate-first ht_117)))))))"
"(let-values(((car3_0) car))(sort7.1 #f #f car3_0 #t result-l_0 phase<?)))))))"
"(values"
"(extract_0(lambda(b/p_2)(not(provided-as-transformer? b/p_2))))"
"(extract_0 provided-as-transformer?))))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_10 all-vars_0)"
"(begin"
"(let-values(((result-l_1)"
"(reverse$1"
"(let-values(((ht_118) all-vars_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_118)))"
"((letrec-values(((for-loop_201)"
"(lambda(fold-var_211 i_40)"
"(begin"
" 'for-loop"
"(if i_40"
"(let-values(((phase_89 vars_0)(hash-iterate-key+value ht_118 i_40)))"
"(let-values(((fold-var_154)"
"(let-values(((fold-var_164) fold-var_211))"
"(let-values(((l_14)"
"(let-values(((syms_19)"
"(hash-ref"
" provides_10"
" phase_89"
" '#hasheq())))"
"(reverse$1"
"(let-values(((lst_86) vars_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_86)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_167"
" lst_169)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_169)"
"(let-values(((var-sym_5)"
"(unsafe-car"
" lst_169))"
"((rest_88)"
"(unsafe-cdr"
" lst_169)))"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_168)"
" fold-var_167))"
"(if(hash-ref"
" syms_19"
" var-sym_5"
" #f)"
" fold-var_168"
"(let-values(((fold-var_18)"
" fold-var_168))"
"(let-values(((fold-var_19)"
"(let-values()"
"(cons"
"(let-values()"
" var-sym_5)"
" fold-var_18))))"
"(values"
" fold-var_19)))))))"
"(if(not"
" #f)"
"(for-loop_93"
" fold-var_67"
" rest_88)"
" fold-var_67)))"
" fold-var_167)))))"
" for-loop_93)"
" null"
" lst_86)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_203)"
"(lambda(fold-var_68)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_69)"
"(let-values(((fold-var_212)"
" fold-var_68))"
"(if(null?"
" l_14)"
" fold-var_212"
"(let-values(((fold-var_213)"
" fold-var_212))"
"(let-values(((fold-var_214)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_89"
"(let-values(((l10_0)"
" l_14)"
"((symbol<?11_0)"
" symbol<?))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" l10_0"
" symbol<?11_0))))"
" fold-var_213))))"
"(values"
" fold-var_214)))))))"
" fold-var_69))))))"
" for-loop_203)"
" fold-var_164))))))"
"(if(not #f)"
"(for-loop_201 fold-var_154(hash-iterate-next ht_118 i_40))"
" fold-var_154)))"
" fold-var_211)))))"
" for-loop_201)"
" null"
"(hash-iterate-first ht_118)))))))"
"(let-values(((car9_0) car))(sort7.1 #f #f car9_0 #t result-l_1 phase<?))))))"
"(define-values"
"(compiled->linklet-directory-or-bundle)"
"(lambda(c_31)(begin(if(compiled-in-memory? c_31)(compiled-in-memory-linklet-directory c_31) c_31))))"
"(define-values"
"(module-compiled-current-name)"
"(lambda(c_32)"
"(begin"
"(let-values(((ld_1)(compiled->linklet-directory-or-bundle c_32)))"
"(let-values(((b_15)(if(1/linklet-bundle? ld_1) ld_1(hash-ref(1/linklet-directory->hash ld_1) #f))))"
"(hash-ref(1/linklet-bundle->hash b_15) 'name))))))"
"(define-values"
"(module-compiled-immediate-name)"
"(lambda(c_33)"
"(begin(let-values(((n_27)(module-compiled-current-name c_33)))(if(pair? n_27)(car(reverse$1 n_27)) n_27)))))"
"(define-values"
"(change-module-name)"
"(lambda(c_34 name_3 prefix_4)"
"(begin"
"(let-values(((full-name_0)(if(null? prefix_4) name_3(append prefix_4(list name_3)))))"
"(let-values(((next-prefix_0)(if(null? prefix_4)(list name_3) full-name_0)))"
"(let-values(((recur_0)"
"(lambda(sub-c_0 name_51)"
"(begin"
" 'recur"
"(if(equal?(module-compiled-current-name sub-c_0)(append next-prefix_0(list name_51)))"
" sub-c_0"
"(change-module-name sub-c_0 name_51 next-prefix_0))))))"
"(if(compiled-in-memory? c_34)"
"(let-values()"
"(let-values(((change-submodule-name_0)"
"(lambda(sub-c_1)"
"(begin"
" 'change-submodule-name"
"(recur_0 sub-c_1(module-compiled-immediate-name sub-c_1))))))"
"(let-values(((pre-compiled-in-memorys_0)"
"(map2 change-submodule-name_0(compiled-in-memory-pre-compiled-in-memorys c_34))))"
"(let-values(((post-compiled-in-memorys_0)"
"(map2 change-submodule-name_0(compiled-in-memory-post-compiled-in-memorys c_34))))"
"(let-values(((the-struct_3) c_34))"
"(if(compiled-in-memory? the-struct_3)"
"(let-values(((pre-compiled-in-memorys8_0) pre-compiled-in-memorys_0)"
"((post-compiled-in-memorys9_0) post-compiled-in-memorys_0)"
"((linklet-directory10_0)"
"(let-values(((temp11_2)"
"(update-one-name"
"(let-values(((ld_2)"
"(compiled->linklet-directory-or-bundle c_34)))"
"(if(1/linklet-bundle? ld_2)"
" ld_2"
"(hash-ref(1/linklet-directory->hash ld_2) #f)))"
" full-name_0))"
"((temp12_1)(symbol? full-name_0))"
"((temp13_1)"
"(append pre-compiled-in-memorys_0 post-compiled-in-memorys_0)))"
"(rebuild-linklet-directory5.1 temp12_1 #t temp11_2 temp13_1))))"
"(compiled-in-memory1.1"
" linklet-directory10_0"
"(compiled-in-memory-original-self the-struct_3)"
"(compiled-in-memory-requires the-struct_3)"
"(compiled-in-memory-provides the-struct_3)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_3)"
"(compiled-in-memory-compile-time-inspector the-struct_3)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_3)"
"(compiled-in-memory-mpis the-struct_3)"
"(compiled-in-memory-syntax-literals the-struct_3)"
" pre-compiled-in-memorys8_0"
" post-compiled-in-memorys9_0"
"(compiled-in-memory-namespace-scopes the-struct_3)"
"(compiled-in-memory-purely-functional? the-struct_3)))"
"                          (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_3)))))))"
"(if(1/linklet-directory? c_34)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_119)(1/linklet-directory->hash c_34)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_119)))"
"((letrec-values(((for-loop_228)"
"(lambda(table_183 i_150)"
"(begin"
" 'for-loop"
"(if i_150"
"(let-values(((key_30 val_62)(hash-iterate-key+value ht_119 i_150)))"
"(let-values(((table_184)"
"(let-values(((table_185) table_183))"
"(let-values(((table_102)"
"(let-values()"
"(let-values(((key_70 val_63)"
"(let-values()"
"(values"
" key_30"
"(if(not key_30)"
"(update-one-name"
" val_62"
" full-name_0)"
"(recur_0"
" val_62"
" key_30))))))"
"(hash-set"
" table_185"
" key_70"
" val_63)))))"
"(values table_102)))))"
"(if(not #f)"
"(for-loop_228 table_184(hash-iterate-next ht_119 i_150))"
" table_184)))"
" table_183)))))"
" for-loop_228)"
" '#hasheq()"
"(hash-iterate-first ht_119))))))"
"(let-values()(update-one-name c_34 full-name_0))))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_0 name_52)(begin(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_0) 'name name_52)))))"
"(define-values"
"(rebuild-linklet-directory5.1)"
"(lambda(bundle-ok?1_0 bundle-ok?2_0 main3_0 submods4_0)"
"(begin"
" 'rebuild-linklet-directory5"
"(let-values(((main_0) main3_0))"
"(let-values(((submods_0) submods4_0))"
"(let-values(((bundle-ok?_0)(if bundle-ok?2_0 bundle-ok?1_0 #f)))"
"(let-values()"
"(if(if(null? submods_0) bundle-ok?_0 #f)"
" main_0"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_85) submods_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_85)))"
"((letrec-values(((for-loop_222)"
"(lambda(ht_111 lst_270)"
"(begin"
" 'for-loop"
"(if(pair? lst_270)"
"(let-values(((submod_1)(unsafe-car lst_270))"
"((rest_87)(unsafe-cdr lst_270)))"
"(let-values(((ht_120)"
"(let-values(((ht_121) ht_111))"
"(let-values(((ht_122)"
"(let-values()"
"(let-values(((name_53)"
"(module-compiled-immediate-name"
" submod_1)))"
"(if(hash-ref ht_121 name_53 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                                       \"change would result in duplicate submodule name\""
"                                                                                       \"name\""
" name_53))"
"(let-values()"
"(hash-set"
" ht_121"
" name_53"
"(compiled->linklet-directory-or-bundle"
" submod_1))))))))"
"(values ht_122)))))"
"(if(not #f)(for-loop_222 ht_120 rest_87) ht_120)))"
" ht_111)))))"
" for-loop_222)"
" '#hasheq()"
" lst_85)))"
" #f"
" main_0))))))))))"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_31)"
"(begin"
" 'compiled-expression?"
"(let-values(((or-part_0)(compiled-in-memory? c_31)))"
"(if or-part_0"
" or-part_0"
"(let-values(((or-part_1)(1/linklet-directory? c_31)))"
"(if or-part_1 or-part_1(1/linklet-bundle? c_31))))))))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_35)"
"(begin"
" 'compiled-module-expression?"
"(let-values(((ld_3)(compiled->linklet-directory-or-bundle c_35)))"
"(let-values(((or-part_26)"
"(if(1/linklet-directory? ld_3)"
"(if(let-values(((b_75)(hash-ref(1/linklet-directory->hash ld_3) #f #f)))"
"(if b_75(hash-ref(1/linklet-bundle->hash b_75) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_26"
" or-part_26"
"(if(1/linklet-bundle? ld_3)(if(hash-ref(1/linklet-bundle->hash ld_3) 'decl #f) #t #f) #f)))))))"
"(define-values"
"(1/module-compiled-name)"
"(case-lambda"
"((c_18)"
"(begin"
" 'module-compiled-name"
"(begin"
"(if(1/compiled-module-expression? c_18)"
"(void)"
"          (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_18)))"
"(module-compiled-current-name c_18))))"
"((c_36 name_54)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_36)"
"(void)"
"                      (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_36)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_13)(symbol? name_54)))"
"(if or-part_13"
" or-part_13"
"(if(pair? name_54)(if(list? name_54)(andmap2 symbol? name_54) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                           \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_54)))"
"(values))))"
"(let-values(((i-name_0 prefix_5)"
"(if(symbol? name_54)"
"(values name_54 null)"
"(let-values(((r_41)(reverse$1 name_54)))(values(car r_41)(reverse$1(cdr r_41)))))))"
"(change-module-name c_36 i-name_0 prefix_5)))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(case-lambda"
"((c_37 non-star?_0)"
"(begin"
" 'module-compiled-submodules"
"(begin"
"(if(1/compiled-module-expression? c_37)"
"(void)"
"          (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_37)))"
"(if(compiled-in-memory? c_37)"
"(let-values()"
"(if non-star?_0"
"(compiled-in-memory-pre-compiled-in-memorys c_37)"
"(compiled-in-memory-post-compiled-in-memorys c_37)))"
"(let-values()"
"(if(1/linklet-directory? c_37)"
"(let-values()"
"(let-values(((ht_123)(1/linklet-directory->hash c_37)))"
"(let-values(((bh_0)(1/linklet-bundle->hash(hash-ref ht_123 #f))))"
"(let-values(((names_1)(hash-ref bh_0(if non-star?_0 'pre 'post) null)))"
"(reverse$1"
"(let-values(((lst_74) names_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_74)))"
"((letrec-values(((for-loop_70)"
"(lambda(fold-var_30 lst_271)"
"(begin"
" 'for-loop"
"(if(pair? lst_271)"
"(let-values(((name_55)(unsafe-car lst_271))"
"((rest_145)(unsafe-cdr lst_271)))"
"(let-values(((fold-var_31)"
"(let-values(((fold-var_32) fold-var_30))"
"(let-values(((fold-var_33)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref ht_123 name_55))"
" fold-var_32))))"
"(values fold-var_33)))))"
"(if(not #f)(for-loop_70 fold-var_31 rest_145) fold-var_31)))"
" fold-var_30)))))"
" for-loop_70)"
" null"
" lst_74))))))))"
"(let-values() null)))))))"
"((c_38 non-star?_1 submods_1)"
"(begin"
"(if(1/compiled-module-expression? c_38)"
"(void)"
"        (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_38)))"
"(if(if(list? submods_1)(andmap2 1/compiled-module-expression? submods_1) #f)"
"(void)"
"(let-values()"
"          (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_1)))"
"(if(if(null? submods_1)"
"(let-values(((or-part_29)(1/linklet-bundle?(compiled->linklet-directory-or-bundle c_38))))"
"(if or-part_29"
" or-part_29"
"(if(compiled-in-memory? c_38)"
"(null?"
"(if non-star?_1"
"(compiled-in-memory-pre-compiled-in-memorys c_38)"
"(compiled-in-memory-post-compiled-in-memorys c_38)))"
" #f)))"
" #f)"
"(let-values() c_38)"
"(if(if(compiled-in-memory? c_38)(andmap2 compiled-in-memory? submods_1) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_1)"
"(if non-star?_1 submods_1(compiled-in-memory-pre-compiled-in-memorys c_38))))"
"(let-values(((post-compiled-in-memorys_1)"
"(if non-star?_1(compiled-in-memory-post-compiled-in-memorys c_38) submods_1)))"
"(let-values(((n-c_0)(normalize-to-linklet-directory c_38)))"
"(fixup-submodule-names"
"(let-values(((the-struct_56) n-c_0))"
"(if(compiled-in-memory? the-struct_56)"
"(let-values(((pre-compiled-in-memorys1_0) pre-compiled-in-memorys_1)"
"((post-compiled-in-memorys2_0) post-compiled-in-memorys_1)"
"((linklet-directory3_0)"
"(let-values(((temp4_1)"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash"
"(compiled->linklet-directory-or-bundle n-c_0))"
" #f)"
" non-star?_1"
" submods_1))"
"((temp5_3)(symbol?(module-compiled-current-name c_38)))"
"((temp6_1)"
"(append pre-compiled-in-memorys_1 post-compiled-in-memorys_1)))"
"(rebuild-linklet-directory5.1 temp5_3 #t temp4_1 temp6_1))))"
"(compiled-in-memory1.1"
" linklet-directory3_0"
"(compiled-in-memory-original-self the-struct_56)"
"(compiled-in-memory-requires the-struct_56)"
"(compiled-in-memory-provides the-struct_56)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_56)"
"(compiled-in-memory-compile-time-inspector the-struct_56)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_56)"
"(compiled-in-memory-mpis the-struct_56)"
"(compiled-in-memory-syntax-literals the-struct_56)"
" pre-compiled-in-memorys1_0"
" post-compiled-in-memorys2_0"
"(compiled-in-memory-namespace-scopes the-struct_56)"
"(compiled-in-memory-purely-functional? the-struct_56)))"
"                       (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_56))))))))"
"(let-values()"
"(let-values(((n-c_1)(normalize-to-linklet-directory c_38)))"
"(fixup-submodule-names"
"(let-values(((temp7_1)"
"(reset-submodule-names"
"(hash-ref(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_1)) #f)"
" non-star?_1"
" submods_1))"
"((temp8_3)"
"(map2"
" compiled->linklet-directory-or-bundle"
"(append"
"(if non-star?_1 submods_1(1/module-compiled-submodules c_38 #t))"
"(if non-star?_1(1/module-compiled-submodules c_38 #f) submods_1)))))"
"(rebuild-linklet-directory5.1 #f #f temp7_1 temp8_3)))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_39)"
"(begin"
" 'module-compiled-language-info"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_39)"
"(void)"
"(let-values()"
"                          (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_39)))"
"(values))))"
"(let-values(((h_7)(compiled-module->h c_39)))(hash-ref h_7 'language-info #f))))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_40)"
"(begin"
" 'module-compiled-imports"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_40)"
"(void)"
"(let-values()"
"                          (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_40)))"
"(values))))"
"(let-values(((inst_2)(compiled-module->declaration-instance c_40)))"
"(1/instance-variable-value inst_2 'requires))))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_41)"
"(begin"
" 'module-compiled-exports"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_41)"
"(void)"
"(let-values()"
"                          (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_41)))"
"(values))))"
"(let-values(((inst_3)(compiled-module->declaration-instance c_41)))"
"(provides->api-provides"
"(1/instance-variable-value inst_3 'provides)"
"(1/instance-variable-value inst_3 'self-mpi)))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_42)"
"(begin"
" 'module-compiled-indirect-exports"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_42)"
"(void)"
"(let-values()"
"                          (raise-argument-error 'module-compiled-indirect-imports \"compiled-module-expression?\" c_42)))"
"(values))))"
"(let-values(((h_8 inst_4)(compiled-module->h+declaration-instance c_42)))"
"(let-values(((min-phase_3)(hash-ref h_8 'min-phase 0)))"
"(let-values(((max-phase_3)(hash-ref h_8 'max-phase 0)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_4 'provides)"
"(let-values(((start_36) min-phase_3)((end_25)(add1 max-phase_3))((inc_19) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_36 end_25 inc_19)))"
"((letrec-values(((for-loop_27)"
"(lambda(table_99 pos_95)"
"(begin"
" 'for-loop"
"(if(< pos_95 end_25)"
"(let-values(((phase-level_19) pos_95))"
"(let-values(((table_186)"
"(let-values(((table_106) table_99))"
"(let-values(((table_54)"
"(let-values()"
"(let-values(((key_71 val_48)"
"(let-values()"
"(let-values(((linklet_6)"
"(hash-ref"
" h_8"
" phase-level_19"
" #f)))"
"(values"
" phase-level_19"
"(if linklet_6"
"(1/linklet-export-variables"
" linklet_6)"
" null))))))"
"(hash-set table_106 key_71 val_48)))))"
"(values table_54)))))"
"(if(not #f)(for-loop_27 table_186(+ pos_95 inc_19)) table_186)))"
" table_99)))))"
" for-loop_27)"
" '#hash()"
" start_36)))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_43)"
"(begin"
" 'module-compiled-cross-phase-persistent?"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_43)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                           \"compiled-module-expression?\""
" c_43)))"
"(values))))"
"(let-values(((h_9)(compiled-module->h c_43)))(hash-ref h_9 'cross-phase-persistent? #f))))))"
"(define-values"
"(normalize-to-linklet-directory)"
"(lambda(c_44)"
"(begin"
"(if(1/linklet-directory?(compiled->linklet-directory-or-bundle c_44))"
"(let-values() c_44)"
"(if(1/linklet-bundle? c_44)"
"(let-values()(1/hash->linklet-directory(hasheq #f c_44)))"
"(let-values()"
"(let-values(((the-struct_57) c_44))"
"(if(compiled-in-memory? the-struct_57)"
"(let-values(((linklet-directory9_0)"
"(normalize-to-linklet-directory(compiled-in-memory-linklet-directory c_44))))"
"(compiled-in-memory1.1"
" linklet-directory9_0"
"(compiled-in-memory-original-self the-struct_57)"
"(compiled-in-memory-requires the-struct_57)"
"(compiled-in-memory-provides the-struct_57)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_57)"
"(compiled-in-memory-compile-time-inspector the-struct_57)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_57)"
"(compiled-in-memory-mpis the-struct_57)"
"(compiled-in-memory-syntax-literals the-struct_57)"
"(compiled-in-memory-pre-compiled-in-memorys the-struct_57)"
"(compiled-in-memory-post-compiled-in-memorys the-struct_57)"
"(compiled-in-memory-namespace-scopes the-struct_57)"
"(compiled-in-memory-purely-functional? the-struct_57)))"
"                (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_57)))))))))"
"(define-values"
"(fixup-submodule-names)"
"(lambda(c_45)(begin(1/module-compiled-name c_45(1/module-compiled-name c_45)))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_76 pre?_1 submods_2)"
"(begin"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_76)"
"(if pre?_1 'pre 'post)"
"(map2 module-compiled-immediate-name submods_2))))))"
"(define-values"
"(compile-module13.1)"
"(lambda(force-linklet-directory?1_0"
" force-linklet-directory?6_0"
" modules-being-compiled4_0"
" modules-being-compiled9_0"
" need-compiled-submodule-rename?5_0"
" need-compiled-submodule-rename?10_0"
" serializable?2_0"
" serializable?7_0"
" to-source?3_1"
" to-source?8_0"
" p11_1"
" cctx12_1)"
"(begin"
" 'compile-module13"
"(let-values(((p_35) p11_1))"
"(let-values(((cctx_16) cctx12_1))"
"(let-values(((force-linklet-directory?_0)(if force-linklet-directory?6_0 force-linklet-directory?1_0 #f)))"
"(let-values(((serializable?_2)(if serializable?7_0 serializable?2_0 #f)))"
"(let-values(((to-source?_3)(if to-source?8_0 to-source?3_1 #f)))"
"(let-values(((modules-being-compiled_0)"
"(if modules-being-compiled9_0 modules-being-compiled4_0(make-hasheq))))"
"(let-values(((need-compiled-submodule-rename?_0)"
"(if need-compiled-submodule-rename?10_0 need-compiled-submodule-rename?5_0 #t)))"
"(let-values()"
"(let-values(((full-module-name_1)"
"(let-values(((parent-full-name_0)(compile-context-full-module-name cctx_16))"
"((name_56)(syntax-e$1(parsed-module-name-id p_35))))"
"(if parent-full-name_0"
"(append"
"(if(list? parent-full-name_0) parent-full-name_0(list parent-full-name_0))"
"(list name_56))"
" name_56))))"
"(let-values(((compiled-submodules_0)(parsed-module-compiled-submodules p_35)))"
"(let-values(((get-submodules_0)"
"(lambda(star?_0)"
"(begin"
" 'get-submodules"
"(reverse$1"
"(let-values(((ht_124) compiled-submodules_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_124)))"
"((letrec-values(((for-loop_100)"
"(lambda(fold-var_64 i_151)"
"(begin"
" 'for-loop"
"(if i_151"
"(let-values(((name_57 star?+compiled_0)"
"(hash-iterate-key+value"
" ht_124"
" i_151)))"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_151)"
" fold-var_64))"
"(if(eq?"
" star?_0"
"(car star?+compiled_0))"
"(let-values(((fold-var_9)"
" fold-var_151))"
"(let-values(((fold-var_65)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" name_57"
"(if(if need-compiled-submodule-rename?_0"
"(not"
"(parsed-module-compiled-module"
" p_35))"
" #f)"
"(update-submodule-names"
"(cdr"
" star?+compiled_0)"
" name_57"
" full-module-name_1)"
"(cdr"
" star?+compiled_0))))"
" fold-var_9))))"
"(values fold-var_65)))"
" fold-var_151))))"
"(if(not #f)"
"(for-loop_100"
" fold-var_29"
"(hash-iterate-next ht_124 i_151))"
" fold-var_29)))"
" fold-var_64)))))"
" for-loop_100)"
" null"
"(hash-iterate-first ht_124)))))))))"
"(let-values(((pre-submodules_0)(get-submodules_0 #f)))"
"(let-values(((post-submodules_0)(get-submodules_0 #t)))"
"(let-values(((c1_25)(parsed-module-compiled-module p_35)))"
"(if c1_25"
"((lambda(c_46)"
"(let-values(((name_58 prefix_6)"
"(if(symbol? full-module-name_1)"
"(values full-module-name_1 null)"
"(let-values(((r_10)(reverse$1 full-module-name_1)))"
"(values(car r_10)(reverse$1(cdr r_10)))))))"
"(let-values(((m_18)(change-module-name c_46 name_58 prefix_6)))"
"(1/module-compiled-submodules"
"(1/module-compiled-submodules m_18 #t(map2 cdr pre-submodules_0))"
" #f"
"(map2 cdr post-submodules_0)))))"
" c1_25)"
"(let-values()"
"(let-values(((full-module-name39_0) full-module-name_1)"
"((force-linklet-directory?40_0) force-linklet-directory?_0)"
"((serializable?41_0) serializable?_2)"
"((to-source?42_0) to-source?_3)"
"((modules-being-compiled43_0) modules-being-compiled_0)"
"((pre-submodules44_0) pre-submodules_0)"
"((post-submodules45_0) post-submodules_0)"
"((need-compiled-submodule-rename?46_0)"
" need-compiled-submodule-rename?_0))"
"(compile-module-from-parsed34.1"
" force-linklet-directory?40_0"
" full-module-name39_0"
" modules-being-compiled43_0"
" need-compiled-submodule-rename?46_0"
" post-submodules45_0"
" pre-submodules44_0"
" serializable?41_0"
" to-source?42_0"
" p_35"
" cctx_16)))))))))))))))))))))"
"(define-values"
"(compile-module-from-parsed34.1)"
"(lambda(force-linklet-directory?17_0"
" full-module-name16_0"
" modules-being-compiled20_0"
" need-compiled-submodule-rename?23_0"
" post-submodules22_0"
" pre-submodules21_0"
" serializable?18_0"
" to-source?19_0"
" p32_0"
" cctx33_0)"
"(begin"
" 'compile-module-from-parsed34"
"(let-values(((p_25) p32_0))"
"(let-values(((cctx_17) cctx33_0))"
"(let-values(((full-module-name_2) full-module-name16_0))"
"(let-values(((force-linklet-directory?_1) force-linklet-directory?17_0))"
"(let-values(((serializable?_3) serializable?18_0))"
"(let-values(((to-source?_4) to-source?19_0))"
"(let-values(((modules-being-compiled_1) modules-being-compiled20_0))"
"(let-values(((pre-submodules_1) pre-submodules21_0))"
"(let-values(((post-submodules_1) post-submodules22_0))"
"(let-values(((need-compiled-submodule-rename?_1) need-compiled-submodule-rename?23_0))"
"(let-values()"
"(let-values()"
"(let-values(((enclosing-self_0)(compile-context-module-self cctx_17)))"
"(let-values(((self_24)(parsed-module-self p_25)))"
"(let-values(((requires_5)(parsed-module-requires p_25)))"
"(let-values(((provides_11)(parsed-module-provides p_25)))"
"(let-values(((encoded-root-expand-ctx-box_1)"
"(box(parsed-module-encoded-root-ctx p_25))))"
"(let-values(((body-context-simple?_0)(parsed-module-root-ctx-simple? p_25)))"
"(let-values(((language-info_2)"
"(filter-language-info"
"(syntax-property$1(parsed-s p_25) 'module-language))))"
"(let-values(((bodys_6)(parsed-module-body p_25)))"
"(let-values(((empty-result-for-module->namespace?_0) #f))"
"(let-values(((mpis_3)(make-module-path-index-table)))"
"(let-values(((body-cctx_0)"
"(let-values(((the-struct_58) cctx_17))"
"(if(compile-context? the-struct_58)"
"(let-values(((phase47_1) 0)"
"((self48_0) self_24)"
"((module-self49_0) self_24)"
"((full-module-name50_0)"
" full-module-name_2)"
"((lazy-syntax-literals?51_0) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_58)"
" phase47_1"
" self48_0"
" module-self49_0"
" full-module-name50_0"
" lazy-syntax-literals?51_0"
"(compile-context-header the-struct_58)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"compile-context?\""
" the-struct_58)))))"
"(let-values(((cross-phase-persistent?_2) #f))"
"(let-values(((side-effects_0)(make-hasheqv)))"
"(let-values(((check-side-effects!_0)"
"(lambda(e_71"
" expected-results_3"
" phase_90"
" required-reference?_1)"
"(begin"
" 'check-side-effects!"
"(if(hash-ref side-effects_0 phase_90 #f)"
"(void)"
"(let-values()"
"(if(let-values(((required-reference?54_0)"
" required-reference?_1))"
"(any-side-effects?9.1"
" #f"
" #f"
" #f"
" #f"
" required-reference?54_0"
" #t"
" e_71"
" expected-results_3))"
"(let-values()"
"(hash-set!"
" side-effects_0"
" phase_90"
" #t))"
"(void))))))))"
"(let-values((()"
"(begin"
"(if(if need-compiled-submodule-rename?_1"
" modules-being-compiled_1"
" #f)"
"(let-values()"
"(begin"
"(if(null? post-submodules_1)"
"(void)"
"(let-values()"
"(error"
"                                                                                     \"internal error: have post submodules, but not already compiled\")))"
"(register-compiled-submodules"
" modules-being-compiled_1"
" pre-submodules_1"
" self_24)))"
"(void))"
"(values))))"
"(let-values(((body-linklets_2"
" min-phase_4"
" max-phase_4"
" phase-to-link-module-uses_4"
" phase-to-link-module-uses-expr_3"
" phase-to-link-extra-inspectorsss_2"
" syntax-literals_4"
" root-ctx-pos_0)"
"(let-values(((temp58_2)"
"(list"
"(list get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((temp59_2)"
"(list"
" empty-syntax-literals-instance"
" empty-module-body-instance))"
"((temp60_2) '((void)))"
"((temp61_0) '(0))"
"((encoded-root-expand-ctx-box62_0)"
" encoded-root-expand-ctx-box_1)"
"((body-context-simple?63_0)"
" body-context-simple?_0)"
"((check-side-effects!64_0)"
" check-side-effects!_0)"
"((temp65_0)"
"(lambda(body_4 cctx_18)"
"(if(parsed-#%declare? body_4)"
"(let-values()"
"(let-values(((ok?_26"
" _69_0"
" kw70_0)"
"(let-values(((s_388)"
"(parsed-s"
" body_4)))"
"(let-values(((orig-s_30)"
" s_388))"
"(let-values(((_69_1"
" kw70_1)"
"(let-values(((s_389)"
"(if(syntax?$1"
" s_388)"
"(syntax-e$1"
" s_388)"
" s_388)))"
"(if(pair?"
" s_389)"
"(let-values(((_71_0)"
"(let-values(((s_390)"
"(car"
" s_389)))"
" s_390))"
"((kw72_0)"
"(let-values(((s_34)"
"(cdr"
" s_389)))"
"(let-values(((s_391)"
"(if(syntax?$1"
" s_34)"
"(syntax-e$1"
" s_34)"
" s_34)))"
"(let-values(((flat-s_19)"
"(to-syntax-list.1"
" s_391)))"
"(if(not"
" flat-s_19)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_30))"
"(let-values()"
" flat-s_19)))))))"
"(values"
" _71_0"
" kw72_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_30)))))"
"(values"
" #t"
" _69_1"
" kw70_1))))))"
"(begin"
"(let-values(((lst_221)"
" kw70_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_221)))"
"((letrec-values(((for-loop_229)"
"(lambda(lst_272)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_272)"
"(let-values(((kw_0)"
"(unsafe-car"
" lst_272))"
"((rest_146)"
"(unsafe-cdr"
" lst_272)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_0)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_2"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_0)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_0"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_1"
" #f)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_229"
" rest_146)"
"(values))))"
"(values))))))"
" for-loop_229)"
" lst_221)))"
"(void)"
" #f)))"
"(let-values() #f))))"
"((temp66_1)"
"(lambda(mod-name_17 phase_91)"
"(let-values(((ht_125)"
"(if modules-being-compiled_1"
"(hash-ref"
" modules-being-compiled_1"
" mod-name_17"
" #f)"
" #f)))"
"(if ht_125"
"(hash-ref"
" ht_125"
" phase_91"
" #f)"
" #f))))"
"((to-source?67_0) to-source?_4)"
"((serializable?68_0)"
" serializable?_3))"
"(compile-forms31.1"
" temp59_2"
" temp58_2"
" temp60_2"
" #t"
" check-side-effects!64_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" encoded-root-expand-ctx-box62_0"
" #t"
" temp61_0"
" #t"
" temp66_1"
" #t"
" temp65_0"
" #t"
" body-context-simple?63_0"
" #t"
" serializable?68_0"
" #t"
" to-source?67_0"
" #t"
" bodys_6"
" body-cctx_0"
" mpis_3))))"
"(let-values((()"
"(begin"
"(if modules-being-compiled_1"
"(let-values()"
"(hash-set!"
" modules-being-compiled_1"
"(1/module-path-index-resolve self_24)"
"(let-values(((ht_126)"
" body-linklets_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_126)))"
"((letrec-values(((for-loop_230)"
"(lambda(table_187"
" i_152)"
"(begin"
" 'for-loop"
"(if i_152"
"(let-values(((phase_92"
" linklet_7)"
"(hash-iterate-key+value"
" ht_126"
" i_152)))"
"(let-values(((table_188)"
"(let-values(((table_43)"
" table_187))"
"(let-values(((table_189)"
"(let-values()"
"(let-values(((key_72"
" val_64)"
"(let-values()"
"(values"
" phase_92"
"(module-linklet-info2.1"
" linklet_7"
"(hash-ref"
" phase-to-link-module-uses_4"
" phase_92"
" #f)"
" self_24"
" #f"
" #f"
"(if phase-to-link-extra-inspectorsss_2"
"(hash-ref"
" phase-to-link-extra-inspectorsss_2"
" phase_92"
" #f)"
" #f))))))"
"(hash-set"
" table_43"
" key_72"
" val_64)))))"
"(values"
" table_189)))))"
"(if(not"
" #f)"
"(for-loop_230"
" table_188"
"(hash-iterate-next"
" ht_126"
" i_152))"
" table_188)))"
" table_187)))))"
" for-loop_230)"
" '#hasheq()"
"(hash-iterate-first ht_126))))))"
"(void))"
"(values))))"
"(let-values(((declaration-linklet_0)"
"(if serializable?_3"
"((if to-source?_4"
" values"
"(lambda(s_198)"
"(let-values()"
"(1/compile-linklet"
" s_198"
" 'decl))))"
"(list"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" phase-to-link-modules)"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index!"
" mpis_3"
" self_24))"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((temp75_0) #f))"
"(generate-deserialize6.1"
" temp75_0"
" #t"
" requires_5"
" mpis_3)))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((temp78_1) #f))"
"(generate-deserialize6.1"
" temp78_1"
" #t"
" provides_11"
" mpis_3)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_3)))"
" #f)))"
"(let-values(((syntax-literals-linklet_2)"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_4))"
"((if to-source?_4"
" values"
"(lambda(s_392)"
"(let-values()"
"(let-values(((linklet_8"
" new-keys_1)"
"(1/compile-linklet"
" s_392"
" 'syntax-literals"
"(vector"
" deserialize-instance"
" empty-top-syntax-literal-instance"
" empty-syntax-literals-data-instance"
" empty-instance-instance)"
"(lambda(inst_5)"
"(values"
" inst_5"
" #f))"
" serializable?_3)))"
" linklet_8))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_3"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((temp82_0)"
"(not"
" serializable?_3)))"
"(generate-lazy-syntax-literals!9.1"
" temp82_0"
" #t"
" syntax-literals_4"
" mpis_3"
" self_24))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-pos_0"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
" root-ctx-pos_0)))"
"(if empty-result-for-module->namespace?_0"
"(let-values() ''empty)"
"(let-values() ''#f))))))))"
" #f)))"
"(let-values(((syntax-literals-data-linklet_0)"
"(if serializable?_3"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_4))"
"((if to-source?_4"
" values"
"(lambda(s_86)"
"(let-values()"
"(1/compile-linklet"
" s_86"
" 'syntax-literals-data))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(syntax-literals-count"
" syntax-literals_4)"
" '(#f)))"
"(let-values()"
"(generate-lazy-syntax-literals-data!"
" syntax-literals_4"
" mpis_3))))"
" #f)"
" #f)))"
"(let-values(((data-linklet_0)"
"(if serializable?_3"
"((if to-source?_4"
" values"
"(lambda(s_320)"
"(let-values()"
"(1/compile-linklet"
" s_320"
" 'data))))"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_3))))"
" #f)))"
"(let-values(((bundle_1)"
"(let-values(((bundle_2)"
"(hash-set"
" body-linklets_2"
" 'name"
" full-module-name_2)))"
"(let-values(((bundle_3)"
"(hash-set"
" bundle_2"
" 'decl"
"(let-values(((or-part_258)"
" declaration-linklet_0))"
"(if or-part_258"
" or-part_258"
" 'in-memory)))))"
"(let-values(((bundle_4)"
"(if data-linklet_0"
"(hash-set"
" bundle_3"
" 'data"
" data-linklet_0)"
" bundle_3)))"
"(let-values(((bundle_5)"
"(if syntax-literals-linklet_2"
"(hash-set"
" bundle_4"
" 'stx"
" syntax-literals-linklet_2)"
" bundle_4)))"
"(let-values(((bundle_6)"
"(if syntax-literals-data-linklet_0"
"(hash-set"
" bundle_5"
" 'stx-data"
" syntax-literals-data-linklet_0)"
" bundle_5)))"
"(let-values(((bundle_7)"
"(if(null?"
" pre-submodules_1)"
" bundle_6"
"(hash-set"
" bundle_6"
" 'pre"
"(map2"
" car"
" pre-submodules_1)))))"
"(let-values(((bundle_8)"
"(if(null?"
" post-submodules_1)"
" bundle_7"
"(hash-set"
" bundle_7"
" 'post"
"(map2"
" car"
" post-submodules_1)))))"
"(let-values(((bundle_9)"
"(if cross-phase-persistent?_2"
"(hash-set"
" bundle_8"
" 'cross-phase-persistent?"
" #t)"
" bundle_8)))"
"(let-values(((bundle_10)"
"(if language-info_2"
"(hash-set"
" bundle_9"
" 'language-info"
" language-info_2)"
" bundle_9)))"
"(let-values(((bundle_11)"
"(if(zero?"
" min-phase_4)"
" bundle_10"
"(hash-set"
" bundle_10"
" 'min-phase"
" min-phase_4))))"
"(let-values(((bundle_12)"
"(if(zero?"
" max-phase_4)"
" bundle_11"
"(hash-set"
" bundle_11"
" 'max-phase"
" max-phase_4))))"
"(let-values(((bundle_13)"
"(if(hash-count"
" side-effects_0)"
"(hash-set"
" bundle_12"
" 'side-effects"
"(let-values(((temp83_0)"
"(hash-keys"
" side-effects_0))"
"((<84_0)"
" <))"
"(sort7.1"
" #f"
" #f"
" #f"
" #f"
" temp83_0"
" <84_0)))"
" bundle_12)))"
"(let-values(((bundle_14)"
"(if empty-result-for-module->namespace?_0"
"(hash-set"
" bundle_13"
" 'module->namespace"
" 'empty)"
" bundle_13)))"
"(1/hash->linklet-bundle"
" bundle_14))))))))))))))))"
"(let-values(((ld_4)"
"(if(if(null? pre-submodules_1)"
"(if(null?"
" post-submodules_1)"
"(not"
" force-linklet-directory?_1)"
" #f)"
" #f)"
"(let-values() bundle_1)"
"(let-values()"
"((if to-source?_4"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_273)"
"(append"
" pre-submodules_1"
" post-submodules_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_273)))"
"((letrec-values(((for-loop_231)"
"(lambda(ht_127"
" lst_225)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_225)"
"(let-values(((sm_0)"
"(unsafe-car"
" lst_225))"
"((rest_147)"
"(unsafe-cdr"
" lst_225)))"
"(let-values(((ht_128)"
"(let-values(((ht_129)"
" ht_127))"
"(let-values(((ht_42)"
"(let-values()"
"(hash-set"
" ht_129"
"(car"
" sm_0)"
"((if to-source?_4"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_0))))))"
"(values"
" ht_42)))))"
"(if(not"
" #f)"
"(for-loop_231"
" ht_128"
" rest_147)"
" ht_128)))"
" ht_127)))))"
" for-loop_231)"
"(hasheq #f bundle_1)"
" lst_273))))))))"
"(if to-source?_4"
"(let-values() ld_4)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_4"
" self_24"
" requires_5"
" provides_11"
" phase-to-link-module-uses_4"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_2"
"(mpis-as-vector mpis_3)"
"(syntax-literals-as-vector"
" syntax-literals_4)"
"(map2 cdr pre-submodules_1)"
"(map2 cdr post-submodules_1)"
" #f"
" #f)))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(update-submodule-names)"
"(lambda(cim_9 name_59 full-module-name_3)"
"(begin"
"(change-module-name"
" cim_9"
" name_59"
"(if(symbol? full-module-name_3)(list full-module-name_3)(reverse$1(cdr(reverse$1 full-module-name_3))))))))"
"(define-values"
"(register-compiled-submodules)"
"(lambda(modules-being-compiled_2 pre-submodules_2 self_25)"
"(begin"
"(begin"
"(let-values(((lst_154) pre-submodules_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_154)))"
"((letrec-values(((for-loop_232)"
"(lambda(lst_274)"
"(begin"
" 'for-loop"
"(if(pair? lst_274)"
"(let-values(((s_101)(unsafe-car lst_274))((rest_148)(unsafe-cdr lst_274)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((name_60)(car s_101)))"
"(let-values(((cim_10)(cdr s_101)))"
"(let-values(((phase-to-link-module-uses_5)"
"(compiled-in-memory-phase-to-link-module-uses"
" cim_10)))"
"(let-values(((ld_5)"
"(compiled-in-memory-linklet-directory"
" cim_10)))"
"(let-values(((sm-self_0)"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                  \".\""
" name_60)"
" self_25)))"
"(let-values(((phase-to-extra-inspectorsss_0)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss"
" cim_10)))"
"(hash-set!"
" modules-being-compiled_2"
"(1/module-path-index-resolve"
" sm-self_0)"
"(let-values(((ht_130)"
"(1/linklet-bundle->hash"
"(if(1/linklet-directory?"
" ld_5)"
"(hash-ref"
"(1/linklet-directory->hash"
" ld_5)"
" #f)"
" ld_5))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_130)))"
"((letrec-values(((for-loop_233)"
"(lambda(table_154"
" i_153)"
"(begin"
" 'for-loop"
"(if i_153"
"(let-values(((phase_93"
" linklet_9)"
"(hash-iterate-key+value"
" ht_130"
" i_153)))"
"(let-values(((table_190)"
"(let-values(((table_191)"
" table_154))"
"(if(number?"
" phase_93)"
"(let-values(((table_156)"
" table_191))"
"(let-values(((table_192)"
"(let-values()"
"(let-values(((key_73"
" val_65)"
"(let-values()"
"(values"
" phase_93"
"(module-linklet-info2.1"
" linklet_9"
"(hash-ref"
" phase-to-link-module-uses_5"
" phase_93"
" #f)"
" self_25"
" #f"
"(compiled-in-memory-compile-time-inspector"
" cim_10)"
"(if phase-to-extra-inspectorsss_0"
"(hash-ref"
" phase-to-extra-inspectorsss_0"
" phase_93"
" #f)"
" #f))))))"
"(hash-set"
" table_156"
" key_73"
" val_65)))))"
"(values"
" table_192)))"
" table_191))))"
"(if(not"
" #f)"
"(for-loop_233"
" table_190"
"(hash-iterate-next"
" ht_130"
" i_153))"
" table_190)))"
" table_154)))))"
" for-loop_233)"
" '#hasheq()"
"(hash-iterate-first"
" ht_130))))))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_232 rest_148)(values))))"
"(values))))))"
" for-loop_232)"
" lst_154)))"
"(void)))))"
"(define-values"
"(filter-language-info)"
"(lambda(li_1)"
"(begin"
"(if(vector? li_1)"
"(if(= 3(vector-length li_1))"
"(if(1/module-path?(vector-ref li_1 0))(if(symbol?(vector-ref li_1 1)) li_1 #f) #f)"
" #f)"
" #f))))"
"(define-values"
"(1/compiled-expression-recompile)"
"(lambda(c_31)"
"(begin"
" 'compiled-expression-recompile"
"(begin"
"(if(1/compiled-expression? c_31)"
"(void)"
"          (let-values () (raise-argument-error 'compiled-expression-recompile \"compiled-expression?\" c_31)))"
"(if(1/linklet-bundle? c_31)"
"(let-values()"
"(1/hash->linklet-bundle"
"(let-values(((ht_131)(1/linklet-bundle->hash c_31)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_131)))"
"((letrec-values(((for-loop_234)"
"(lambda(table_193 i_154)"
"(begin"
" 'for-loop"
"(if i_154"
"(let-values(((k_32 v_68)(hash-iterate-key+value ht_131 i_154)))"
"(let-values(((table_194)"
"(let-values(((table_195) table_193))"
"(let-values(((table_196)"
"(let-values()"
"(let-values(((key_28 val_18)"
"(let-values()"
"(if(1/linklet? v_68)"
"(let-values()"
"(values"
" k_32"
"(1/recompile-linklet"
" v_68)))"
"(let-values()"
"(values k_32 v_68))))))"
"(hash-set table_195 key_28 val_18)))))"
"(values table_196)))))"
"(if(not #f)"
"(for-loop_234 table_194(hash-iterate-next ht_131 i_154))"
" table_194)))"
" table_193)))))"
" for-loop_234)"
" '#hasheq()"
"(hash-iterate-first ht_131))))))"
"(if(1/linklet-directory? c_31)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_132)(1/linklet-directory->hash c_31)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_132)))"
"((letrec-values(((for-loop_235)"
"(lambda(table_197 i_155)"
"(begin"
" 'for-loop"
"(if i_155"
"(let-values(((k_33 v_1)(hash-iterate-key+value ht_132 i_155)))"
"(let-values(((table_198)"
"(let-values(((table_199) table_197))"
"(let-values(((table_200)"
"(let-values()"
"(let-values(((key_74 val_66)"
"(let-values()"
"(if(1/compiled-expression?"
" v_1)"
"(let-values()"
"(values"
" k_33"
"(1/compiled-expression-recompile"
" v_1)))"
"(let-values()"
"(values k_33 v_1))))))"
"(hash-set table_199 key_74 val_66)))))"
"(values table_200)))))"
"(if(not #f)"
"(for-loop_235 table_198(hash-iterate-next ht_132 i_155))"
" table_198)))"
" table_197)))))"
" for-loop_235)"
" '#hasheq()"
"(hash-iterate-first ht_132))))))"
"(let-values() c_31)))))))"
"(define-values"
"(create-compiled-in-memorys-using-shared-data)"
"(lambda(tops_0 data-linklet_1 ns_58)"
"(begin"
"(let-values(((data-instance_5)"
"(1/instantiate-linklet"
" data-linklet_1"
"(list"
" deserialize-instance"
"(let-values(((ns1_0) ns_58)"
"((temp2_3)(namespace-phase ns_58))"
"((temp3_3)(namespace-mpi ns_58))"
"((temp4_2)(namespace-bulk-binding-registry ns_58))"
"((temp5_4)(current-code-inspector)))"
"(make-eager-instance-instance11.1 temp4_2 temp2_3 temp5_4 ns1_0 temp3_3))))))"
"(let-values(((data_0)(lambda(key_75)(begin 'data(1/instance-variable-value data-instance_5 key_75)))))"
"(let-values(((mpi-vector_0)(data_0 mpi-vector-id)))"
"(let-values(((mpi-vector-trees_0)(data_0 'mpi-vector-trees)))"
"(let-values(((phase-to-link-modules-vector_0)(data_0 'phase-to-link-modules-vector)))"
"(let-values(((phase-to-link-modules-trees_0)(data_0 'phase-to-link-modules-trees)))"
"(let-values(((syntax-literals_5)(data_0 'syntax-literals)))"
"(let-values(((syntax-literals-trees_1)(data_0 'syntax-literals-trees)))"
"(let-values(((namespace-scopes_0)(extract-namespace-scopes ns_58)))"
"(letrec-values(((construct-compiled-in-memory_0)"
"(lambda(ld_6"
" mpi-vector-tree_0"
" phase-to-link-modules-tree_0"
" syntax-literals-tree_0)"
"(begin"
" 'construct-compiled-in-memory"
"(let-values(((is-module?_0)"
"(let-values(((or-part_76)(1/linklet-bundle? ld_6)))"
"(if or-part_76"
" or-part_76"
"(let-values(((b_77)"
"(hash-ref"
"(1/linklet-directory->hash ld_6)"
" #f"
" #f)))"
"(if b_77"
"(hash-ref(1/linklet-bundle->hash b_77) 'decl #f)"
" #f))))))"
"(let-values(((mpi-pos-vec_0)(vector-ref mpi-vector-tree_0 0)))"
"(let-values(((syntax-literals-spec_0)"
"(vector-ref syntax-literals-tree_0 0)))"
"(let-values(((pres_0)"
"(if is-module?_0"
"(extract-submodules ld_6 'pre)"
"(compiled-top->compiled-tops ld_6))))"
"(let-values(((posts_0)"
"(if is-module?_0"
"(extract-submodules ld_6 'post)"
" null)))"
"(let-values(((map-construct-compiled-in-memory_0)"
"(lambda(l_66 vec-pos_0)"
"(begin"
" 'map-construct-compiled-in-memory"
"(reverse$1"
"(let-values(((lst_39) l_66)"
"((lst_263)"
"(vector-ref"
" mpi-vector-tree_0"
" vec-pos_0))"
"((lst_84)"
"(vector-ref"
" phase-to-link-modules-tree_0"
" vec-pos_0))"
"((lst_157)"
"(vector-ref"
" syntax-literals-tree_0"
" vec-pos_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_39)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_263)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_84)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_157)))"
"((letrec-values(((for-loop_236)"
"(lambda(fold-var_29"
" lst_264"
" lst_265"
" lst_24"
" lst_168)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_264)"
"(if(pair?"
" lst_265)"
"(if(pair?"
" lst_24)"
"(pair?"
" lst_168)"
" #f)"
" #f)"
" #f)"
"(let-values(((sub-ld_0)"
"(unsafe-car"
" lst_264))"
"((rest_140)"
"(unsafe-cdr"
" lst_264))"
"((mpi-vector-tree_1)"
"(unsafe-car"
" lst_265))"
"((rest_141)"
"(unsafe-cdr"
" lst_265))"
"((phase-to-link-modules-tree_1)"
"(unsafe-car"
" lst_24))"
"((rest_41)"
"(unsafe-cdr"
" lst_24))"
"((syntax-literals-tree_1)"
"(unsafe-car"
" lst_168))"
"((rest_35)"
"(unsafe-cdr"
" lst_168)))"
"(let-values(((fold-var_154)"
"(let-values(((fold-var_164)"
" fold-var_29))"
"(let-values(((fold-var_165)"
"(let-values()"
"(cons"
"(let-values()"
"(construct-compiled-in-memory_0"
" sub-ld_0"
" mpi-vector-tree_1"
" phase-to-link-modules-tree_1"
" syntax-literals-tree_1))"
" fold-var_164))))"
"(values"
" fold-var_165)))))"
"(if(not #f)"
"(for-loop_236"
" fold-var_154"
" rest_140"
" rest_141"
" rest_41"
" rest_35)"
" fold-var_154)))"
" fold-var_29)))))"
" for-loop_236)"
" null"
" lst_39"
" lst_263"
" lst_84"
" lst_157))))))))"
"(compiled-in-memory1.1"
" ld_6"
" #f"
" #f"
" #f"
"(vector-ref"
" phase-to-link-modules-vector_0"
"(vector-ref phase-to-link-modules-tree_0 0))"
" #f"
" '#hasheqv()"
"(let-values(((len_29)(vector-length mpi-pos-vec_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_29)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                   \"exact-nonnegative-integer?\""
" len_29)))"
"(let-values(((v_181)(make-vector len_29 0)))"
"(begin"
"(if(zero? len_29)"
"(void)"
"(let-values()"
"(let-values(((vec_60 len_30)"
"(let-values(((vec_61)"
" mpi-pos-vec_0))"
"(begin"
"(check-vector vec_61)"
"(values"
" vec_61"
"(unsafe-vector-length"
" vec_61))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_27)"
"(lambda(i_156 pos_95)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_95"
" len_30)"
"(let-values(((pos_99)"
"(unsafe-vector-ref"
" vec_60"
" pos_95)))"
"(let-values(((i_157)"
"(let-values(((i_158)"
" i_156))"
"(let-values(((i_90)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_181"
" i_158"
"(let-values()"
"(vector-ref"
" mpi-vector_0"
" pos_99)))"
"(unsafe-fx+"
" 1"
" i_158)))))"
"(values"
" i_90)))))"
"(if(if(not"
"((lambda x_72"
"(unsafe-fx="
" i_157"
" len_29))"
" pos_99))"
"(not #f)"
" #f)"
"(for-loop_27"
" i_157"
"(unsafe-fx+"
" 1"
" pos_95))"
" i_157)))"
" i_156)))))"
" for-loop_27)"
" 0"
" 0)))))"
" v_181))))"
"(let-values(((len_31)(cdr syntax-literals-spec_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_31)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                   \"exact-nonnegative-integer?\""
" len_31)))"
"(let-values(((v_182)(make-vector len_31 0)))"
"(begin"
"(if(zero? len_31)"
"(void)"
"(let-values()"
"(let-values(((start_38) 0)"
"((end_27)"
"(cdr syntax-literals-spec_0))"
"((inc_21) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range start_38 end_27 inc_21)))"
"((letrec-values(((for-loop_0)"
"(lambda(i_159 pos_12)"
"(begin"
" 'for-loop"
"(if(< pos_12 end_27)"
"(let-values(((i_160)"
" pos_12))"
"(let-values(((i_20)"
"(let-values(((i_161)"
" i_159))"
"(let-values(((i_34)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_182"
" i_161"
"(let-values()"
"(if syntax-literals_5"
"(vector-ref"
" syntax-literals_5"
"(+"
"(car"
" syntax-literals-spec_0)"
" i_160))"
" #f)))"
"(unsafe-fx+"
" 1"
" i_161)))))"
"(values"
" i_34)))))"
"(if(if(not"
"((lambda x_73"
"(unsafe-fx="
" i_20"
" len_31))"
" i_160))"
"(not #f)"
" #f)"
"(for-loop_0"
" i_20"
"(+"
" pos_12"
" inc_21))"
" i_20)))"
" i_159)))))"
" for-loop_0)"
" 0"
" start_38)))))"
" v_182))))"
"(map-construct-compiled-in-memory_0 pres_0 1)"
"(map-construct-compiled-in-memory_0 posts_0 2)"
" namespace-scopes_0"
" #f)))))))))))"
"(map2"
" construct-compiled-in-memory_0"
" tops_0"
" mpi-vector-trees_0"
" phase-to-link-modules-trees_0"
" syntax-literals-trees_1))))))))))))))"
"(define-values"
"(extract-submodules)"
"(lambda(ld_7 names-key_0)"
"(begin"
"(if(1/linklet-bundle? ld_7)"
"(let-values() null)"
"(let-values()"
"(let-values(((h_10)(1/linklet-directory->hash ld_7)))"
"(let-values(((mod_3)(hash-ref h_10 #f #f)))"
"              (let-values ((() (begin (if mod_3 (void) (let-values () (error \"missing main module\"))) (values))))"
"(let-values(((mh_0)(1/linklet-bundle->hash mod_3)))"
"(let-values(((names_2)(hash-ref mh_0 names-key_0 null)))"
"(reverse$1"
"(let-values(((lst_22) names_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_22)))"
"((letrec-values(((for-loop_179)"
"(lambda(fold-var_76 lst_159)"
"(begin"
" 'for-loop"
"(if(pair? lst_159)"
"(let-values(((name_61)(unsafe-car lst_159))"
"((rest_149)(unsafe-cdr lst_159)))"
"(let-values(((fold-var_8)"
"(let-values(((fold-var_219) fold-var_76))"
"(let-values(((fold-var_155)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" h_10"
" name_61"
"(lambda()"
"(error"
"                                                                                          \"missing submodule declaration:\""
" name_61))))"
" fold-var_219))))"
"(values fold-var_155)))))"
"(if(not #f)(for-loop_179 fold-var_8 rest_149) fold-var_8)))"
" fold-var_76)))))"
" for-loop_179)"
" null"
" lst_22))))))))))))))"
"(define-values"
"(eval-single-top)"
"(lambda(c_31 ns_41)(begin(let-values(((temp20_1) #t))(eval-one-top15.1 temp20_1 #t c_31 ns_41 #f #f)))))"
"(define-values"
"(compiled-multiple-top?)"
"(lambda(c_35)"
"(begin"
"(let-values(((ld_3)(if(compiled-in-memory? c_35)(compiled-in-memory-linklet-directory c_35) c_35)))"
"(if(1/linklet-directory? ld_3)(not(hash-ref(1/linklet-directory->hash ld_3) #f #f)) #f)))))"
"(define-values"
"(eval-top)"
"(let-values(((eval-top7_0)"
"(lambda(c5_0 ns6_0 eval-compiled1_0 as-tail?2_0 eval-compiled3_0 as-tail?4_0)"
"(begin"
" 'eval-top7"
"(let-values(((c_47) c5_0))"
"(let-values(((ns_66) ns6_0))"
"(let-values(((eval-compiled_0)(if eval-compiled3_0 eval-compiled1_0 eval-top)))"
"(let-values(((as-tail?_0)(if as-tail?4_0 as-tail?2_0 #t)))"
"(let-values()"
"(if(compiled-multiple-top? c_47)"
"(eval-multiple-tops c_47 ns_66 eval-compiled_0 as-tail?_0)"
"(let-values(((c21_0) c_47)((ns22_0) ns_66)((as-tail?23_0) as-tail?_0))"
"(eval-one-top15.1 #f #f c21_0 ns22_0 as-tail?23_0 #t))))))))))))"
"(case-lambda"
"((c_48 ns_67)(begin(eval-top7_0 c_48 ns_67 #f #f #f #f)))"
"((c_49 ns_68 eval-compiled_1 as-tail?2_1)(eval-top7_0 c_49 ns_68 eval-compiled_1 as-tail?2_1 #t #t))"
"((c_50 ns_69 eval-compiled1_1)(eval-top7_0 c_50 ns_69 eval-compiled1_1 #f #t #f)))))"
"(define-values"
"(eval-multiple-tops)"
"(lambda(c_38 ns_70 eval-compiled_2 as-tail?_1)"
"(begin"
"(let-values(((eval-compiled-parts_0)"
"(lambda(l_67)"
"(begin"
" 'eval-compiled-parts"
"((letrec-values(((loop_92)"
"(lambda(l_68)"
"(begin"
" 'loop"
"(if(null? l_68)"
"(let-values() void)"
"(if(null?(cdr l_68))"
"(let-values()(eval-compiled_2(car l_68) ns_70 as-tail?_1))"
"(let-values()"
"(begin"
"(eval-compiled_2(car l_68) ns_70 #f)"
"(loop_92(cdr l_68))))))))))"
" loop_92)"
" l_67)))))"
"(if(compiled-in-memory? c_38)"
"(let-values()(eval-compiled-parts_0(compiled-in-memory-pre-compiled-in-memorys c_38)))"
"(let-values(((c1_26)(hash-ref(1/linklet-directory->hash c_38) 'data #f)))"
"(if c1_26"
"((lambda(data-ld_0)"
"(eval-compiled-parts_0"
"(create-compiled-in-memorys-using-shared-data"
"(compiled-top->compiled-tops c_38)"
"(hash-ref(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash data-ld_0) #f)) 0)"
" ns_70)))"
" c1_26)"
"(let-values()(eval-compiled-parts_0(compiled-top->compiled-tops c_38))))))))))"
"(define-values"
"(eval-one-top15.1)"
"(lambda(single-expression?9_0 single-expression?10_0 c13_0 ns14_1 as-tail?11_0 as-tail?12_0)"
"(begin"
" 'eval-one-top15"
"(let-values(((c_51) c13_0))"
"(let-values(((ns_71) ns14_1))"
"(let-values(((as-tail?_2)(if as-tail?12_0 as-tail?11_0 #t)))"
"(let-values(((single-expression?_1)(if single-expression?10_0 single-expression?9_0 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((ld_8)"
"(if(compiled-in-memory? c_51)(compiled-in-memory-linklet-directory c_51) c_51)))"
"(let-values(((h_11)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_8) #f))))"
"(let-values(((link-instance_0)"
"(if(compiled-in-memory? c_51)"
"(link-instance-from-compiled-in-memory"
" c_51"
"(if(not single-expression?_1) ns_71 #f))"
"(1/instantiate-linklet"
"(hash-ref h_11 'link)"
"(list"
" deserialize-instance"
"(let-values(((ns24_0) ns_71)"
"((temp25_4)(namespace-phase ns_71))"
"((temp26_2)(namespace-mpi ns_71))"
"((temp27_4)(namespace-bulk-binding-registry ns_71))"
"((temp28_2)(current-code-inspector)))"
"(make-eager-instance-instance11.1"
" temp27_4"
" temp25_4"
" temp28_2"
" ns24_0"
" temp26_2)))))))"
"(let-values(((orig-phase_1)(hash-ref h_11 'original-phase)))"
"(let-values(((max-phase_5)(hash-ref h_11 'max-phase)))"
"(let-values(((phase-shift_18)(phase-(namespace-phase ns_71) orig-phase_1)))"
"(let-values(((extra-inspector_7)"
"(if(compiled-in-memory? c_51)"
"(compiled-in-memory-compile-time-inspector c_51)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_3)"
"(if(compiled-in-memory? c_51)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_51)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_1)"
"(if(compiled-in-memory? c_51)"
"(compiled-in-memory-phase-to-link-module-uses c_51)"
"(1/instance-variable-value link-instance_0 'phase-to-link-modules))))"
"(let-values(((thunk_3)"
"(let-values(((start_39) max-phase_5)"
"((end_28)(sub1 orig-phase_1))"
"((inc_22) -1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_39 end_28 inc_22)))"
"((letrec-values(((for-loop_181)"
"(lambda(prev-thunk_0 pos_100)"
"(begin"
" 'for-loop"
"(if(> pos_100 end_28)"
"(let-values(((phase_94) pos_100))"
"(let-values(((prev-thunk_1)"
"(let-values(((prev-thunk_2)"
" prev-thunk_0))"
"(let-values(((prev-thunk_3)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_2"
" #f)"
"(values))))"
"(let-values(((module-uses_1)"
"(hash-ref"
" phase-to-link-modules_1"
" phase_94"
" null)))"
"(let-values(((import-module-instances_2"
" import-instances_1)"
"(let-values(((mis_6"
" is_5)"
"(let-values(((lst_9)"
" module-uses_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_9)))"
"((letrec-values(((for-loop_1)"
"(lambda(mis_7"
" is_6"
" lst_158)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_158)"
"(let-values(((mu_9)"
"(unsafe-car"
" lst_158))"
"((rest_150)"
"(unsafe-cdr"
" lst_158)))"
"(let-values(((mis_8"
" is_7)"
"(let-values(((mis_9)"
" mis_7)"
"((is_8)"
" is_6))"
"(let-values(((mis_10"
" is_9)"
"(let-values()"
"(let-values(((mis29_0"
" is30_0)"
"(let-values()"
"(let-values(((temp33_1)"
"(phase-"
"(phase+"
" phase_94"
" phase-shift_18)"
"(module-use-phase"
" mu_9))))"
"(namespace-module-use->module+linklet-instances146.1"
" temp33_1"
" #f"
" #f"
" #f"
" #f"
" ns_71"
" mu_9)))))"
"(values"
"(cons"
" mis29_0"
" mis_9)"
"(cons"
" is30_0"
" is_8))))))"
"(values"
" mis_10"
" is_9)))))"
"(if(not"
" #f)"
"(for-loop_1"
" mis_8"
" is_7"
" rest_150)"
"(values"
" mis_8"
" is_7))))"
"(values"
" mis_7"
" is_6))))))"
" for-loop_1)"
" null"
" null"
" lst_9)))))"
"(values"
"(reverse$1"
" mis_6)"
"(reverse$1"
" is_5)))))"
"(let-values(((phase-ns_0)"
"(namespace->namespace-at-phase"
" ns_71"
"(phase+"
" phase_94"
" phase-shift_18))))"
"(let-values(((inst_6)"
"(if single-expression?_1"
" link-instance_0"
"(let-values(((phase-ns34_0)"
" phase-ns_0)"
"((phase-shift35_0)"
" phase-shift_18)"
"((temp36_3)"
"(namespace-mpi"
" ns_71))"
"((temp37_1)"
"(namespace-inspector"
" ns_71))"
"((temp38_1)"
"(namespace-bulk-binding-registry"
" ns_71))"
"((temp39_3)"
"(lambda(name_62"
" val_67)"
"(namespace-set-transformer!"
" ns_71"
"(phase+"
"(sub1"
" phase_94)"
" phase-shift_18)"
" name_62"
" val_67))))"
"(make-instance-instance13.1"
" temp38_1"
" temp37_1"
" phase-ns34_0"
" phase-shift35_0"
" temp36_3"
" temp39_3)))))"
"(let-values(((linklet_10)"
"(hash-ref"
" h_11"
" phase_94"
" #f)))"
"(if linklet_10"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((temp41_2)"
" 3)"
"((module-uses42_0)"
" module-uses_1)"
"((import-module-instances43_0)"
" import-module-instances_2)"
"((temp44_1)"
"(current-code-inspector))"
"((extra-inspector45_1)"
" extra-inspector_7)"
"((temp46_1)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_3"
" phase_94"
" #f)))"
"(check-require-access9.1"
" temp41_2"
" linklet_10"
" module-uses42_0"
" import-module-instances43_0"
" temp44_1"
" extra-inspector45_1"
" temp46_1))"
"(values))))"
"(let-values(((instantiate_0)"
"(lambda(tail?_49)"
"(begin"
" 'instantiate"
"(1/instantiate-linklet"
" linklet_10"
"(list*"
" top-level-instance"
" link-instance_0"
" inst_6"
" import-instances_1)"
"(namespace->instance"
" ns_71"
"(phase-"
"(phase+"
" phase_94"
" phase-shift_18)"
"(namespace-0-phase"
" ns_71)))"
"(not"
" tail?_49))))))"
"(if(zero-phase?"
" phase_94)"
"(let-values()"
" instantiate_0)"
"(if single-expression?_1"
"(let-values()"
"(lambda(tail?_50)"
"(begin"
" 'prev-thunk"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_0)"
"(let-values()"
"(instantiate_0"
" tail?_50))))))"
"(let-values()"
"(let-values(((ns-1_1)"
"(namespace->namespace-at-phase"
" phase-ns_0"
"(sub1"
" phase_94))))"
"(lambda(tail?_51)"
"(begin"
" 'prev-thunk"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(let-values(((ns-147_0)"
" ns-1_1))"
"(make-expand-context10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns-147_0))"
" 1/current-namespace"
" phase-ns_0)"
"(let-values()"
"(instantiate_0"
" tail?_51))))))))))))"
"(let-values()"
" void)))))))))))"
"(values"
" prev-thunk_3)))))"
"(if(not #f)"
"(for-loop_181"
" prev-thunk_1"
"(+ pos_100 inc_22))"
" prev-thunk_1)))"
" prev-thunk_0)))))"
" for-loop_181)"
" void"
" start_39)))))"
"(thunk_3 as-tail?_2))))))))))))))))))))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_11 to-ns_0)"
"(begin"
"(let-values(((orig-syntax-literals_0)(compiled-in-memory-syntax-literals cim_11)))"
"(let-values(((syntax-literals_6)"
"(if(not to-ns_0)"
"(let-values() orig-syntax-literals_0)"
"(if(namespace-scopes=?"
"(compiled-in-memory-namespace-scopes cim_11)"
"(extract-namespace-scopes to-ns_0))"
"(let-values() orig-syntax-literals_0)"
"(let-values()"
"(let-values(((len_32)(vector-length orig-syntax-literals_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_32)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_32)))"
"(let-values(((v_183)(make-vector len_32 0)))"
"(begin"
"(if(zero? len_32)"
"(void)"
"(let-values()"
"(let-values(((vec_62 len_33)"
"(let-values(((vec_63) orig-syntax-literals_0))"
"(begin"
"(check-vector vec_63)"
"(values vec_63(unsafe-vector-length vec_63))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_6)"
"(lambda(i_30 pos_101)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_101 len_33)"
"(let-values(((s_393)"
"(unsafe-vector-ref vec_62 pos_101)))"
"(let-values(((i_162)"
"(let-values(((i_163) i_30))"
"(let-values(((i_164)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_183"
" i_163"
"(let-values()"
"(swap-top-level-scopes"
" s_393"
"(compiled-in-memory-namespace-scopes"
" cim_11)"
" to-ns_0)))"
"(unsafe-fx+"
" 1"
" i_163)))))"
"(values i_164)))))"
"(if(if(not"
"((lambda x_74"
"(unsafe-fx= i_162 len_32))"
" s_393))"
"(not #f)"
" #f)"
"(for-loop_6 i_162(unsafe-fx+ 1 pos_101))"
" i_162)))"
" i_30)))))"
" for-loop_6)"
" 0"
" 0)))))"
" v_183)))))))))"
"(1/make-instance"
" 'link"
" #f"
" 'constant"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_11)"
" syntax-literals-id"
" syntax-literals_6))))))"
"(define-values(not-available)(gensym 'not-available))"
"(define-values(get-not-available)(lambda()(begin not-available)))"
"(define-values"
"(can-direct-eval?)"
"(lambda(p_41 ns_41)"
"(begin"
"(if(parsed-app? p_41)"
"(let-values()"
"(if(can-direct-eval?(parsed-app-rator p_41) ns_41)"
"(let-values(((lst_71)(parsed-app-rands p_41)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_71)))"
"((letrec-values(((for-loop_90)"
"(lambda(result_70 lst_72)"
"(begin"
" 'for-loop"
"(if(pair? lst_72)"
"(let-values(((r_42)(unsafe-car lst_72))((rest_33)(unsafe-cdr lst_72)))"
"(let-values(((result_62)"
"(let-values()"
"(let-values(((result_108)"
"(let-values()"
"(let-values()"
"(can-direct-eval? r_42 ns_41)))))"
"(values result_108)))))"
"(if(if(not((lambda x_75(not result_62)) r_42))(not #f) #f)"
"(for-loop_90 result_62 rest_33)"
" result_62)))"
" result_70)))))"
" for-loop_90)"
" #t"
" lst_71)))"
" #f))"
"(if(parsed-id? p_41)"
"(let-values()(not(eq?(get-id-value p_41 ns_41) not-available)))"
"(if(parsed-quote? p_41)"
"(let-values() #t)"
"(if(parsed-quote-syntax? p_41)(let-values() #t)(let-values() #f))))))))"
"(define-values"
"(direct-eval)"
"(lambda(p_34 ns_66)"
"(begin"
"(if(parsed-app? p_34)"
"(let-values()"
"(apply"
"(direct-eval(parsed-app-rator p_34) ns_66)"
"(reverse$1"
"(let-values(((lst_219)(parsed-app-rands p_34)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_219)))"
"((letrec-values(((for-loop_237)"
"(lambda(fold-var_220 lst_261)"
"(begin"
" 'for-loop"
"(if(pair? lst_261)"
"(let-values(((r_43)(unsafe-car lst_261))((rest_138)(unsafe-cdr lst_261)))"
"(let-values(((fold-var_217)"
"(let-values(((fold-var_30) fold-var_220))"
"(let-values(((fold-var_218)"
"(let-values()"
"(cons"
"(let-values()(direct-eval r_43 ns_66))"
" fold-var_30))))"
"(values fold-var_218)))))"
"(if(not #f)(for-loop_237 fold-var_217 rest_138) fold-var_217)))"
" fold-var_220)))))"
" for-loop_237)"
" null"
" lst_219))))))"
"(if(parsed-id? p_34)"
"(let-values()(get-id-value p_34 ns_66))"
"(if(parsed-quote? p_34)"
"(let-values()(parsed-quote-datum p_34))"
"(if(parsed-quote-syntax? p_34)(let-values()(parsed-quote-syntax-datum p_34))(let-values() #f))))))))"
"(define-values"
"(get-id-value)"
"(lambda(p_43 ns_72)"
"(begin"
"(let-values(((b_26)(parsed-id-binding p_43)))"
"(if(parsed-primitive-id? p_43)"
"(let-values()(hash-ref(1/primitive-table '#%kernel)(module-binding-sym b_26) get-not-available))"
"(if(let-values(((or-part_259)(parsed-top-id? p_43)))"
"(if or-part_259"
" or-part_259"
"(let-values(((or-part_160)(not b_26)))"
"(if or-part_160 or-part_160(eq?(namespace-mpi ns_72)(module-binding-module b_26))))))"
"(let-values()"
"(namespace-get-variable"
" ns_72"
"(if b_26(module-binding-phase b_26)(namespace-phase ns_72))"
"(if b_26(module-binding-sym b_26)(syntax-e$1(parsed-s p_43)))"
" get-not-available))"
"(let-values()"
"(let-values(((mi_18)"
"(let-values(((ns1_1) ns_72)"
"((temp2_4)(1/module-path-index-resolve(module-binding-module b_26)))"
"((temp3_4)(phase-(namespace-phase ns_72)(module-binding-phase b_26))))"
"(namespace->module-instance70.1 #f #f #f #f #f #f ns1_1 temp2_4 temp3_4))))"
"(if(not mi_18)"
"(let-values() not-available)"
"(if(check-single-require-access"
" mi_18"
"(module-binding-phase b_26)"
"(module-binding-sym b_26)"
"(module-binding-extra-inspector b_26))"
"(let-values()"
"(namespace-get-variable"
"(module-instance-namespace mi_18)"
"(module-binding-phase b_26)"
"(module-binding-sym b_26)"
" get-not-available))"
"(let-values() not-available)))))))))))"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_60)"
"(begin"
"(let-values(((temp1_3)(syntax-scope-set runtime-stx 0))"
"((sym2_0) sym_60)"
"((temp3_5)"
"(let-values(((runtime-mpi4_0) runtime-mpi)((temp5_5) 0)((sym6_1) sym_60))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" runtime-mpi4_0"
" temp5_5"
" sym6_1))))"
"(add-binding-in-scopes!20.1 #f #f temp1_3 sym2_0 temp3_5)))))"
"(void"
"(begin"
"(add-runtime-primitive! 'values)"
"(add-runtime-primitive! 'cons)"
"(add-runtime-primitive! 'list)"
"(add-runtime-primitive! 'make-struct-type)"
"(add-runtime-primitive! 'make-struct-type-property)"
"(add-runtime-primitive! 'gensym)"
"(add-runtime-primitive! 'string->uninterned-symbol)))"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(define-values(box-cons!)(lambda(b_16 v_68)(begin(set-box! b_16(cons v_68(unbox b_16))))))"
"(define-values(box-clear!)(lambda(b_17)(begin(begin0(reverse$1(unbox b_17))(set-box! b_17 null)))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_68 make-_68 ?_68 -ref_68 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lift-context #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lift-context)))))"
"(values"
" struct:_68"
" make-_68"
" ?_68"
"(make-struct-field-accessor -ref_68 0 'convert)"
"(make-struct-field-accessor -ref_68 1 'lifts)"
"(make-struct-field-accessor -ref_68 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-keys lifted-bind-rhs)"
"(let-values(((struct:_69 make-_69 ?_69 -ref_69 -set!_69)"
"(let-values()"
"(let-values()"
"(make-struct-type 'lifted-bind #f 3 0 #f null(current-inspector) #f '(0 1 2) #f 'lifted-bind)))))"
"(values"
" struct:_69"
" make-_69"
" ?_69"
"(make-struct-field-accessor -ref_69 0 'ids)"
"(make-struct-field-accessor -ref_69 1 'keys)"
"(make-struct-field-accessor -ref_69 2 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_0 module*-ok?4_0 convert5_0)"
"(begin"
" 'make-lift-context6"
"(let-values(((convert_0) convert5_0))"
"(let-values(((module*-ok?_0)(if module*-ok?4_0 module*-ok?3_0 #f)))"
"(let-values()(lift-context1.1 convert_0(box null) module*-ok?_0)))))))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_1 ids_16 rhs_12 phase_95)"
"(begin"
"(let-values(((lifted-ids_0 lifted_0)((lift-context-convert lifts_1) ids_16 rhs_12 phase_95)))"
"(begin(box-cons!(lift-context-lifts lifts_1) lifted_0) lifted-ids_0)))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_2)(begin(box-clear!(lift-context-lifts lifts_2)))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_1 counter_3)"
"(begin"
"(lambda(ids_17 rhs_13 phase_96)"
"(let-values(((keys_2)"
"(reverse$1"
"(let-values(((lst_275) ids_17))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_275)))"
"((letrec-values(((for-loop_238)"
"(lambda(fold-var_221 lst_276)"
"(begin"
" 'for-loop"
"(if(pair? lst_276)"
"(let-values(((id_54)(unsafe-car lst_276))"
"((rest_151)(unsafe-cdr lst_276)))"
"(let-values(((fold-var_80)"
"(let-values(((fold-var_81) fold-var_221))"
"(let-values(((fold-var_222)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((key_76)"
"(let-values(((id32_1)"
" id_54)"
"((phase33_1)"
" phase_96)"
"((counter34_1)"
" counter_3))"
"(add-local-binding!35.1"
" #f"
" #f"
" #f"
" #f"
" id32_1"
" phase33_1"
" counter34_1))))"
"(begin"
"(set-box!"
" lift-env_1"
"(hash-set"
"(unbox lift-env_1)"
" key_76"
" variable))"
" key_76)))"
" fold-var_81))))"
"(values fold-var_222)))))"
"(if(not #f)(for-loop_238 fold-var_80 rest_151) fold-var_80)))"
" fold-var_221)))))"
" for-loop_238)"
" null"
" lst_275))))))"
"(values ids_17(lifted-bind2.1 ids_17 keys_2 rhs_13)))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_11)"
"(begin"
"(lambda(ids_18 rhs_14 phase_69)"
"(let-values(((post-scope_0)"
"(root-expand-context-post-expansion-scope"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_11)))))"
"(let-values(((tl-ids_1)"
"(reverse$1"
"(let-values(((lst_267) ids_18))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_267)))"
"((letrec-values(((for-loop_225)"
"(lambda(fold-var_223 lst_178)"
"(begin"
" 'for-loop"
"(if(pair? lst_178)"
"(let-values(((id_56)(unsafe-car lst_178))"
"((rest_152)(unsafe-cdr lst_178)))"
"(let-values(((fold-var_224)"
"(let-values(((fold-var_225) fold-var_223))"
"(let-values(((fold-var_226)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_56"
" post-scope_0))"
" fold-var_225))))"
"(values fold-var_226)))))"
"(if(not #f)"
"(for-loop_225 fold-var_224 rest_152)"
" fold-var_224)))"
" fold-var_223)))))"
" for-loop_225)"
" null"
" lst_267))))))"
"(let-values(((syms_20)(select-defined-syms-and-bind!/ctx tl-ids_1 ctx_11)))"
"(values tl-ids_1(lifted-bind2.1 tl-ids_1 syms_20 rhs_14)))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_3 body_5 phase_97)"
"(begin"
"(datum->syntax$1"
" #f"
"(let-values(((lst_277)(reverse$1 lifts_3)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_277)))"
"((letrec-values(((for-loop_239)"
"(lambda(body_6 lst_185)"
"(begin"
" 'for-loop"
"(if(pair? lst_185)"
"(let-values(((lift_0)(unsafe-car lst_185))((rest_98)(unsafe-cdr lst_185)))"
"(let-values(((body_7)"
"(let-values(((body_8) body_6))"
"(let-values(((body_9)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_0)"
"(void)"
"(let-values()"
"                                                                           (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_97)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_0)"
"(lifted-bind-rhs lift_0)))"
" body_8)))))"
"(values body_9)))))"
"(if(not #f)(for-loop_239 body_7 rest_98) body_7)))"
" body_6)))))"
" for-loop_239)"
" body_5"
" lst_277)))))))"
"(define-values"
"(wrap-lifts-as-begin16.1)"
"(lambda(adjust-body10_0 adjust-body12_0 adjust-form9_0 adjust-form11_0 lifts13_0 body14_0 phase15_0)"
"(begin"
" 'wrap-lifts-as-begin16"
"(let-values(((lifts_4) lifts13_0))"
"(let-values(((body_10) body14_0))"
"(let-values(((phase_98) phase15_0))"
"(let-values(((adjust-form_0)(if adjust-form11_0 adjust-form9_0 values)))"
"(let-values(((adjust-body_0)(if adjust-body12_0 adjust-body10_0 values)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_98) 'begin)"
"(append"
"(reverse$1"
"(let-values(((lst_278) lifts_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_278)))"
"((letrec-values(((for-loop_184)"
"(lambda(fold-var_227 lst_279)"
"(begin"
" 'for-loop"
"(if(pair? lst_279)"
"(let-values(((lift_1)(unsafe-car lst_279))"
"((rest_153)(unsafe-cdr lst_279)))"
"(let-values(((fold-var_3)"
"(let-values(((fold-var_88) fold-var_227))"
"(let-values(((fold-var_228)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_0"
"(if(lifted-bind? lift_1)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_98)"
" 'define-values)"
"(lifted-bind-ids lift_1)"
"(lifted-bind-rhs"
" lift_1))))"
"(let-values() lift_1))))"
" fold-var_88))))"
"(values fold-var_228)))))"
"(if(not #f)(for-loop_184 fold-var_3 rest_153) fold-var_3)))"
" fold-var_227)))))"
" for-loop_184)"
" null"
" lst_278))))"
"(list(adjust-body_0 body_10))))))))))))))"
"(define-values"
"(get-lifts-as-lists)"
"(lambda(lifts_5)"
"(begin"
"(reverse$1"
"(let-values(((lst_280) lifts_5))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_280)))"
"((letrec-values(((for-loop_240)"
"(lambda(fold-var_181 lst_281)"
"(begin"
" 'for-loop"
"(if(pair? lst_281)"
"(let-values(((lift_2)(unsafe-car lst_281))((rest_154)(unsafe-cdr lst_281)))"
"(let-values(((fold-var_229)"
"(let-values(((fold-var_230) fold-var_181))"
"(let-values(((fold-var_231)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(lifted-bind-ids lift_2)"
"(lifted-bind-keys lift_2)"
"(lifted-bind-rhs lift_2)))"
" fold-var_230))))"
"(values fold-var_231)))))"
"(if(not #f)(for-loop_240 fold-var_229 rest_154) fold-var_229)))"
" fold-var_181)))))"
" for-loop_240)"
" null"
" lst_280)))))))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context19.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_70 make-_70 ?_70 -ref_70 -set!_70)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))))"
"(values"
" struct:_70"
" make-_70"
" ?_70"
"(make-struct-field-accessor -ref_70 0 'wrt-phase)"
"(make-struct-field-accessor -ref_70 1 'lifts)"
"(make-struct-field-accessor -ref_70 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_99 module*-ok?_1)(begin(module-lift-context19.1 phase_99(box null) module*-ok?_1))))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_1)(begin(box-clear!(module-lift-context-lifts module-lifts_1)))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_2 s_394 phase_100)"
"(begin"
"(begin"
"(if(let-values(((or-part_260)"
"(if(module-lift-context? module-lifts_2)"
"(module-lift-context-module*-ok? module-lifts_2)"
" #f)))"
"(if or-part_260"
" or-part_260"
"(if(lift-context? module-lifts_2)(lift-context-module*-ok? module-lifts_2) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_30)(core-form-sym s_394 phase_100)))"
"(if(equal? tmp_30 'module)"
"(let-values()(void))"
"(if(equal? tmp_30 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                     \"cannot lift `module*' to a top-level context\""
"                     \"syntax\""
" s_394))"
"(let-values()"
"                    (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_394)))))))"
"(if(module-lift-context? module-lifts_2)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_2) s_394))"
"(if(lift-context? module-lifts_2)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_2) s_394))"
"            (let-values () (error \"internal error: unrecognized lift-context type for module lift\"))))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context20.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_71 make-_71 ?_71 -ref_71 -set!_71)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))))"
"(values"
" struct:_71"
" make-_71"
" ?_71"
"(make-struct-field-accessor -ref_71 0 'do-require)"
"(make-struct-field-accessor -ref_71 1 'wrt-phase)"
"(make-struct-field-accessor -ref_71 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_0 do-require_0)(begin(require-lift-context20.1 do-require_0 wrt-phase_0(box null)))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_1)(begin(box-clear!(require-lift-context-requires require-lifts_1)))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_2 s_39 phase_101)"
"(begin"
"(begin"
"((require-lift-context-do-require require-lifts_2) s_39 phase_101)"
"(box-cons!(require-lift-context-requires require-lifts_2) s_39)))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context21.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_72 make-_72 ?_72 -ref_72 -set!_72)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))))"
"(values"
" struct:_72"
" make-_72"
" ?_72"
"(make-struct-field-accessor -ref_72 0 'wrt-phase)"
"(make-struct-field-accessor -ref_72 1 'provides)"
"(make-struct-field-accessor -ref_72 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_72 3 'ends))))"
"(define-values"
"(make-to-module-lift-context27.1)"
"(lambda(end-as-expressions?23_0 shared-module-ends22_0 phase26_1)"
"(begin"
" 'make-to-module-lift-context27"
"(let-values(((phase_93) phase26_1))"
"(let-values(((ends_0) shared-module-ends22_0))"
"(let-values(((end-as-expressions?_0) end-as-expressions?23_0))"
"(let-values()(to-module-lift-context21.1 phase_93(box null) end-as-expressions?_0 ends_0))))))))"
"(define-values(make-shared-module-ends)(lambda()(begin(box null))))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_1)(begin(box-clear!(to-module-lift-context-ends to-module-lifts_1)))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_2)(begin(box-clear!(to-module-lift-context-provides to-module-lifts_2)))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_3 s_214 phase_102)"
"(begin(box-cons!(to-module-lift-context-provides to-module-lifts_3) s_214))))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_4 s_395 phase_103)"
"(begin(box-cons!(to-module-lift-context-ends to-module-lifts_4) s_395))))"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-binding-layer)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expanded-syntax"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'already-expanded)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 's)"
"(make-struct-field-accessor -ref_0 1 'binding-layer))))"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))))"
"(values struct:_0 make-_0 ?_0)))"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_26 info_1)"
"(begin"
"(if(if(list? v_26)"
"(let-values(((lst_71) v_26))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_71)))"
"((letrec-values(((for-loop_90)"
"(lambda(result_70 lst_72)"
"(begin"
" 'for-loop"
"(if(pair? lst_72)"
"(let-values(((s_2)(unsafe-car lst_72))((rest_33)(unsafe-cdr lst_72)))"
"(let-values(((result_62)"
"(let-values()"
"(let-values(((result_108)"
"(let-values()"
"(let-values()"
"(memq"
" s_2"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_108)))))"
"(if(if(not((lambda x_75(not result_62)) s_2))(not #f) #f)"
"(for-loop_90 result_62 rest_33)"
" result_62)))"
" result_70)))))"
" for-loop_90)"
" #t"
" lst_71)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_26)))"
" v_26))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_42 ctx_12)"
"(begin"
"(if(expansion-contexts? t_42)"
"(not(memq(context->symbol(expand-context-context ctx_12))(expansion-contexts-ref t_42)))"
" #f))))"
"(define-values(context->symbol)(lambda(context_5)(begin(if(symbol? context_5) context_5 'definition-context))))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_171 t_43 ctx_13)"
"(begin"
"(let-values(((wrap_1)"
"(lambda(sym_61)"
"(begin"
" 'wrap"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_61)(expand-context-phase ctx_13))"
" s_171))))))"
"(let-values(((fail_0)"
"(lambda()"
"(begin"
" 'fail"
"(raise-syntax-error$1"
" #f"
"(format"
"                            \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_13)))"
" s_171)))))"
"(let-values(((tmp_31)(context->symbol(expand-context-context ctx_13))))"
"(if(equal? tmp_31 'module-begin)"
"(let-values()(wrap_1 'begin))"
"(if(if(equal? tmp_31 'module) #t(if(equal? tmp_31 'top-level) #t(equal? tmp_31 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_43))(wrap_1 '#%expression)(fail_0)))"
"(let-values()(fail_0))))))))))"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()(make-struct-type 'reference-record #f 3 0 #f null #f #f '() #f 'reference-record)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'already-bound)"
"(make-struct-field-accessor -ref_0 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_0 2 'all-referenced?)"
"(make-struct-field-mutator -set!_0 0 'already-bound)"
"(make-struct-field-mutator -set!_0 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_0 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(begin(reference-record1.1(seteq)(seteq) #f))))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_0 key_77)"
"(begin"
"(if(set-member?(reference-record-already-bound rr_0) key_77)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_0"
"(set-add(reference-record-reference-before-bound rr_0) key_77)))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_0)"
"(begin"
"(begin"
"(let-values(((lst_39) rrs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_39)))"
"((letrec-values(((for-loop_178)"
"(lambda(lst_84)"
"(begin"
" 'for-loop"
"(if(pair? lst_84)"
"(let-values(((rr_1)(unsafe-car lst_84))((rest_116)(unsafe-cdr lst_84)))"
"(let-values(((post-guard-var_0)(lambda()(begin 'post-guard-var #t))))"
"(let-values()"
"(if(reference-record-all-referenced? rr_1)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?! rr_1 #t))"
"(values)))))"
"(if(post-guard-var_0)(for-loop_178 rest_116)(values))))))))"
"(values))))))"
" for-loop_178)"
" lst_39)))"
"(void)))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_2 keys_3)"
"(begin"
"(begin"
"(set-reference-record-already-bound!"
" rr_2"
"(let-values(((lst_24) keys_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_24)))"
"((letrec-values(((for-loop_241)"
"(lambda(ab_3 lst_76)"
"(begin"
" 'for-loop"
"(if(pair? lst_76)"
"(let-values(((key_78)(unsafe-car lst_76))((rest_141)(unsafe-cdr lst_76)))"
"(let-values(((ab_4)"
"(let-values(((ab_5) ab_3))"
"(let-values(((ab_6)(let-values()(set-add ab_5 key_78))))"
"(values ab_6)))))"
"(if(not #f)(for-loop_241 ab_4 rest_141) ab_4)))"
" ab_3)))))"
" for-loop_241)"
"(reference-record-already-bound rr_2)"
" lst_24))))"
"(set-reference-record-reference-before-bound!"
" rr_2"
"(let-values(((lst_17) keys_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_17)))"
"((letrec-values(((for-loop_10)"
"(lambda(rbb_0 lst_18)"
"(begin"
" 'for-loop"
"(if(pair? lst_18)"
"(let-values(((key_79)(unsafe-car lst_18))((rest_5)(unsafe-cdr lst_18)))"
"(let-values(((rbb_1)"
"(let-values(((rbb_2) rbb_0))"
"(let-values(((rbb_3)(let-values()(set-remove rbb_2 key_79))))"
"(values rbb_3)))))"
"(if(not #f)(for-loop_10 rbb_1 rest_5) rbb_1)))"
" rbb_0)))))"
" for-loop_10)"
"(reference-record-reference-before-bound rr_2)"
" lst_17))))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_3)"
"(begin"
"(let-values(((or-part_167)(reference-record-all-referenced? rr_3)))"
"(if or-part_167 or-part_167(positive?(set-count(reference-record-reference-before-bound rr_3))))))))"
"(define-values"
"(reference-record-clear!)"
"(lambda(rr_4)"
"(begin"
"(begin(set-reference-record-already-bound! rr_4 #f)(set-reference-record-reference-before-bound! rr_4 #f)))))"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_0 key_80 . args_5)"
"(begin"
"(obs_0"
"(hash-ref key->number key_80)"
"(if(null? args_5)(let-values() #f)(let-values()(apply list* args_5)))))))"
"(define-values"
"(log-expand-start)"
"(lambda()"
"(begin"
"(let-values(((obs_1)(current-expand-observe)))"
"(if obs_1(let-values()(call-expand-observe obs_1 'start-expand))(void))))))"
"(define-values"
"(key->number)"
" '#hash((block->letrec . 14)"
"(block->list . 12)"
"(block-renames . 24)"
"(case-lambda-renames . 18)"
"(enter-bind . 144)"
"(enter-block . 10)"
"(enter-check . 126)"
"(enter-list . 4)"
"(enter-local . 130)"
"(enter-local-expr . 139)"
"(enter-macro . 8)"
"(enter-prim . 6)"
"(exit-bind . 145)"
"(exit-check . 127)"
"(exit-list . 5)"
"(exit-local . 131)"
"(exit-local-bind . 160)"
"(exit-local-expr . 140)"
"(exit-macro . 9)"
"(exit-prim . 7)"
"(lambda-renames . 17)"
"(let-renames . 16)"
"(letlift-loop . 136)"
"(letrec-syntaxes-renames . 19)"
"(lift-loop . 128)"
"(lift-provide . 151)"
"(lift-require . 150)"
"(lift-statement . 134)"
"(local-bind . 143)"
"(local-lift . 129)"
"(local-post . 133)"
"(local-pre . 132)"
"(local-value . 153)"
"(local-value-result . 154)"
"(macro-post-x . 22)"
"(macro-pre-x . 21)"
"(module-body . 23)"
"(module-lift-end-loop . 135)"
"(module-lift-loop . 137)"
"(next . 3)"
"(next-group . 13)"
"(opaque-expr . 146)"
"(phase-up . 20)"
"(prepare-env . 157)"
"(prim-#%app . 109)"
"(prim-#%datum . 115)"
"(prim-#%expression . 138)"
"(prim-#%stratified . 155)"
"(prim-#%top . 116)"
"(prim-#%variable-reference . 149)"
"(prim-begin . 107)"
"(prim-begin-for-syntax . 156)"
"(prim-begin0 . 108)"
"(prim-case-lambda . 111)"
"(prim-define-syntaxes . 103)"
"(prim-define-values . 104)"
"(prim-if . 105)"
"(prim-lambda . 110)"
"(prim-let-values . 112)"
"(prim-letrec-syntaxes+values . 114)"
"(prim-letrec-values . 113)"
"(prim-module . 101)"
"(prim-module-begin . 102)"
"(prim-provide . 122)"
"(prim-quote . 117)"
"(prim-quote-syntax . 118)"
"(prim-require . 119)"
"(prim-set! . 123)"
"(prim-stop . 100)"
"(prim-submodule . 158)"
"(prim-submodule* . 159)"
"(prim-with-continuation-mark . 106)"
"(rename-list . 147)"
"(rename-one . 148)"
"(resolve . 1)"
"(return . 2)"
"(splice . 11)"
"(start-expand . 141)"
"(tag . 142)"
"(track-origin . 152)"
"(variable . 125)"
"(visit . 0)))"
"(define-values"
"(rebuild5.1)"
"(lambda(track?1_0 track?2_0 orig-s3_0 new4_0)"
"(begin"
" 'rebuild5"
"(let-values(((orig-s_31) orig-s3_0))"
"(let-values(((new_1) new4_0))"
"(let-values(((track?_0)(if track?2_0 track?1_0 #t)))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 orig-s_31) new_1 orig-s_31(if track?_0 orig-s_31 #f))"
" orig-s_31))))))))"
"(define-values"
"(struct:expanded+parsed expanded+parsed1.1 expanded+parsed? expanded+parsed-s expanded+parsed-parsed)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expanded+parsed"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'expanded+parsed)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 's)"
"(make-struct-field-accessor -ref_0 1 'parsed))))"
"(define-values"
"(struct:semi-parsed-define-values"
" semi-parsed-define-values2.1"
" semi-parsed-define-values?"
" semi-parsed-define-values-s"
" semi-parsed-define-values-syms"
" semi-parsed-define-values-ids"
" semi-parsed-define-values-rhs)"
"(let-values(((struct:_62 make-_62 ?_62 -ref_62 -set!_62)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-define-values"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'semi-parsed-define-values)))))"
"(values"
" struct:_62"
" make-_62"
" ?_62"
"(make-struct-field-accessor -ref_62 0 's)"
"(make-struct-field-accessor -ref_62 1 'syms)"
"(make-struct-field-accessor -ref_62 2 'ids)"
"(make-struct-field-accessor -ref_62 3 'rhs))))"
"(define-values"
"(struct:semi-parsed-begin-for-syntax"
" semi-parsed-begin-for-syntax3.1"
" semi-parsed-begin-for-syntax?"
" semi-parsed-begin-for-syntax-s"
" semi-parsed-begin-for-syntax-body)"
"(let-values(((struct:_10 make-_10 ?_10 -ref_10 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-begin-for-syntax"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'semi-parsed-begin-for-syntax)))))"
"(values"
" struct:_10"
" make-_10"
" ?_10"
"(make-struct-field-accessor -ref_10 0 's)"
"(make-struct-field-accessor -ref_10 1 'body))))"
"(define-values(extract-syntax)(lambda(s_186)(begin(if(expanded+parsed? s_186)(expanded+parsed-s s_186) s_186))))"
"(define-values"
"(parsed-only)"
"(lambda(l_69)"
"(begin"
"(reverse$1"
"(let-values(((lst_173) l_69))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_173)))"
"((letrec-values(((for-loop_242)"
"(lambda(fold-var_5 lst_282)"
"(begin"
" 'for-loop"
"(if(pair? lst_282)"
"(let-values(((i_27)(unsafe-car lst_282))((rest_81)(unsafe-cdr lst_282)))"
"(let-values(((fold-var_219)"
"(let-values(((fold-var_155) fold-var_5))"
"(if(let-values(((or-part_69)(parsed? i_27)))"
"(if or-part_69"
" or-part_69"
"(let-values(((or-part_225)(expanded+parsed? i_27)))"
"(if or-part_225"
" or-part_225"
"(semi-parsed-begin-for-syntax? i_27)))))"
"(let-values(((fold-var_173) fold-var_155))"
"(let-values(((fold-var_174)"
"(let-values()"
"(cons"
"(let-values()"
"(if(expanded+parsed? i_27)"
"(let-values()"
"(expanded+parsed-parsed i_27))"
"(if(semi-parsed-begin-for-syntax? i_27)"
"(let-values()"
"(parsed-begin-for-syntax21.1"
"(semi-parsed-begin-for-syntax-s i_27)"
"(parsed-only"
"(semi-parsed-begin-for-syntax-body"
" i_27))))"
"(let-values() i_27))))"
" fold-var_173))))"
"(values fold-var_174)))"
" fold-var_155))))"
"(if(not #f)(for-loop_242 fold-var_219 rest_81) fold-var_219)))"
" fold-var_5)))))"
" for-loop_242)"
" null"
" lst_173)))))))"
"(define-values"
"(syntax-only)"
"(lambda(l_70)"
"(begin"
"(reverse$1"
"(let-values(((lst_275) l_70))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_275)))"
"((letrec-values(((for-loop_238)"
"(lambda(fold-var_221 lst_276)"
"(begin"
" 'for-loop"
"(if(pair? lst_276)"
"(let-values(((i_35)(unsafe-car lst_276))((rest_151)(unsafe-cdr lst_276)))"
"(let-values(((fold-var_80)"
"(let-values(((fold-var_81) fold-var_221))"
"(if(let-values(((or-part_209)(syntax?$1 i_35)))"
"(if or-part_209"
" or-part_209"
"(let-values(((or-part_261)(expanded+parsed? i_35)))"
"(if or-part_261"
" or-part_261"
"(semi-parsed-begin-for-syntax? i_35)))))"
"(let-values(((fold-var_82) fold-var_81))"
"(let-values(((fold-var_232)"
"(let-values()"
"(cons"
"(let-values()"
"(if(expanded+parsed? i_35)"
"(let-values()(expanded+parsed-s i_35))"
"(if(semi-parsed-begin-for-syntax? i_35)"
"(let-values()"
"(let-values(((s_396)"
"(semi-parsed-begin-for-syntax-s"
" i_35)))"
"(let-values(((nested-bodys_0)"
"(semi-parsed-begin-for-syntax-body"
" i_35)))"
"(let-values(((disarmed-s_0)"
"(syntax-disarm$1"
" s_396)))"
"(let-values(((ok?_27"
" begin-for-syntax7_0"
" _8_0)"
"(let-values(((s_397)"
" disarmed-s_0))"
"(let-values(((orig-s_32)"
" s_397))"
"(let-values(((begin-for-syntax7_1"
" _8_1)"
"(let-values(((s_27)"
"(if(syntax?$1"
" s_397)"
"(syntax-e$1"
" s_397)"
" s_397)))"
"(if(pair?"
" s_27)"
"(let-values(((begin-for-syntax9_0)"
"(let-values(((s_30)"
"(car"
" s_27)))"
" s_30))"
"((_10_0)"
"(let-values(((s_160)"
"(cdr"
" s_27)))"
"(let-values(((s_150)"
"(if(syntax?$1"
" s_160)"
"(syntax-e$1"
" s_160)"
" s_160)))"
"(let-values(((flat-s_14)"
"(to-syntax-list.1"
" s_150)))"
"(if(not"
" flat-s_14)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_32))"
"(let-values()"
" flat-s_14)))))))"
"(values"
" begin-for-syntax9_0"
" _10_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_32)))))"
"(values"
" #t"
" begin-for-syntax7_1"
" _8_1))))))"
"(let-values(((s11_0) s_396)"
"((temp12_2)"
"(list*"
" begin-for-syntax7_0"
"(syntax-only"
" nested-bodys_0))))"
"(rebuild5.1"
" #f"
" #f"
" s11_0"
" temp12_2)))))))"
"(let-values() i_35))))"
" fold-var_82))))"
"(values fold-var_232)))"
" fold-var_81))))"
"(if(not #f)(for-loop_238 fold-var_80 rest_151) fold-var_80)))"
" fold-var_221)))))"
" for-loop_238)"
" null"
" lst_275)))))))"
"(define-values"
"(expand7.1)"
"(lambda(alternate-id1_0 alternate-id3_0 skip-log?2_0 skip-log?4_0 s5_0 ctx6_0)"
"(begin"
" 'expand7"
"(let-values(((s_398) s5_0))"
"(let-values(((ctx_14) ctx6_0))"
"(let-values(((alternate-id_0)(if alternate-id3_0 alternate-id1_0 #f)))"
"(let-values(((skip-log?_0)(if skip-log?4_0 skip-log?2_0 #f)))"
"(let-values()"
"(begin"
"(let-values(((obs_2)(expand-context-observer ctx_14)))"
"(if obs_2"
"(let-values()"
"(if(not skip-log?_0)"
"(let-values()"
"(call-expand-observe"
" obs_2"
"(if(expand-context-only-immediate? ctx_14) 'enter-check 'visit)"
" s_398))"
"(void)))"
"(void)))"
"(if(identifier? s_398)"
"(let-values()(expand-identifier s_398 ctx_14 alternate-id_0))"
"(if(if(pair?(syntax-content s_398))(identifier?(car(syntax-content s_398))) #f)"
"(let-values()(expand-id-application-form s_398 ctx_14 alternate-id_0))"
"(if(let-values(((or-part_29)(pair?(syntax-content s_398))))"
"(if or-part_29 or-part_29(null?(syntax-content s_398))))"
"(let-values()(expand-implicit '#%app s_398 ctx_14 #f))"
"(if(already-expanded?(syntax-content s_398))"
"(let-values()(expand-already-expanded s_398 ctx_14))"
"(let-values()(expand-implicit '#%datum s_398 ctx_14 #f)))))))))))))))"
"(define-values"
"(expand-identifier)"
"(lambda(s_43 ctx_15 alternate-id_1)"
"(begin"
"(let-values(((id_57)(let-values(((or-part_166) alternate-id_1))(if or-part_166 or-part_166 s_43))))"
"(if(free-id-set-member?(expand-context-stops ctx_15)(expand-context-phase ctx_15) id_57)"
"(let-values()"
"(begin"
"(let-values(((obs_3)(expand-context-observer ctx_15)))"
"(if obs_3"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_15))"
"(let-values()"
"(begin"
"(call-expand-observe obs_3 'resolve id_57)"
"(call-expand-observe obs_3 'enter-prim s_43)"
"(call-expand-observe obs_3 'prim-stop)"
"(call-expand-observe obs_3 'exit-prim s_43)"
"(call-expand-observe obs_3 'return s_43)))"
"(void)))"
"(void)))"
" s_43))"
"(let-values()"
"(let-values(((binding_19)"
"(let-values(((temp78_2)(expand-context-phase ctx_15))"
"((temp79_0) 'ambiguous)"
"((temp80_1) #t))"
"(resolve+shift30.1 temp79_0 #t #f #f #f #f temp80_1 #t #f #f id_57 temp78_2))))"
"(begin"
"(let-values(((obs_4)(expand-context-observer ctx_15)))"
"(if obs_4"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_15))"
"(let-values()(call-expand-observe obs_4 'resolve id_57))"
"(void)))"
"(void)))"
"(if(eq? binding_19 'ambiguous)"
"(let-values()(raise-ambiguous-error id_57 ctx_15))"
"(if(not binding_19)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_43 alternate-id_1) ctx_15 s_43))"
"(let-values()"
"(let-values(((t_44 primitive?_2 insp-of-t_0)"
"(let-values(((temp84_0)(if alternate-id_1 s_43 #f))"
"((temp85_0)(expand-context-in-local-expand? ctx_15)))"
"(lookup17.1 temp84_0 #t temp85_0 #t binding_19 ctx_15 id_57))))"
"(dispatch t_44 insp-of-t_0 s_43 id_57 ctx_15 binding_19 primitive?_2)))))))))))))"
"(define-values"
"(expand-id-application-form)"
"(lambda(s_399 ctx_16 alternate-id_2)"
"(begin"
"(let-values(((id_58)"
"(let-values(((or-part_262) alternate-id_2))"
"(if or-part_262 or-part_262(car(syntax-e/no-taint s_399))))))"
"(if(free-id-set-member?(expand-context-stops ctx_16)(expand-context-phase ctx_16) id_58)"
"(let-values()"
"(begin"
"(let-values(((obs_5)(expand-context-observer ctx_16)))"
"(if obs_5"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_16))"
"(let-values()"
"(begin"
"(call-expand-observe obs_5 'resolve id_58)"
"(call-expand-observe obs_5 'enter-prim s_399)"
"(call-expand-observe obs_5 'prim-stop)"
"(call-expand-observe obs_5 'exit-prim s_399)"
"(call-expand-observe obs_5 'return s_399)))"
"(void)))"
"(void)))"
" s_399))"
"(let-values()"
"(let-values(((binding_20)"
"(let-values(((temp87_1)(expand-context-phase ctx_16))"
"((temp88_1) 'ambiguous)"
"((temp89_1) #t))"
"(resolve+shift30.1 temp88_1 #t #f #f #f #f temp89_1 #t #f #f id_58 temp87_1))))"
"(begin"
"(let-values(((obs_6)(expand-context-observer ctx_16)))"
"(if obs_6"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_16))"
"(let-values()(call-expand-observe obs_6 'resolve id_58))"
"(void)))"
"(void)))"
"(if(eq? binding_20 'ambiguous)"
"(let-values()(raise-ambiguous-error id_58 ctx_16))"
"(if(not binding_20)"
"(let-values()(expand-implicit '#%app(substitute-alternate-id s_399 alternate-id_2) ctx_16 id_58))"
"(let-values()"
"(let-values(((t_45 primitive?_3 insp-of-t_1)"
"(let-values(((temp93_2)(if alternate-id_2(car(syntax-e/no-taint s_399)) #f))"
"((temp94_1)(expand-context-in-local-expand? ctx_16)))"
"(lookup17.1 temp93_2 #t temp94_1 #t binding_20 ctx_16 id_58))))"
"(if(variable? t_45)"
"(let-values()"
"(expand-implicit '#%app(substitute-alternate-id s_399 alternate-id_2) ctx_16 id_58))"
"(let-values()"
"(dispatch t_45 insp-of-t_1 s_399 id_58 ctx_16 binding_20 primitive?_3)))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_25 s_17 ctx_17 trigger-id_1)"
"(begin"
"(if(expand-context-only-immediate? ctx_17)"
"(let-values()"
"(begin"
"(let-values(((obs_7)(expand-context-observer ctx_17)))"
"(if obs_7(let-values()(let-values()(call-expand-observe obs_7 'exit-check s_17)))(void)))"
" s_17))"
"(let-values()"
"(let-values(((disarmed-s_1)(syntax-disarm$1 s_17)))"
"(let-values(((id_15)(datum->syntax$1 disarmed-s_1 sym_25)))"
"(if(free-id-set-member?(expand-context-stops ctx_17)(expand-context-phase ctx_17) id_15)"
"(let-values()"
"(begin"
"(let-values(((obs_8)(expand-context-observer ctx_17)))"
"(if obs_8"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_17))"
"(let-values()"
"(begin"
"(call-expand-observe obs_8 'resolve id_15)"
"(call-expand-observe obs_8 'enter-prim s_17)"
"(call-expand-observe obs_8 'prim-stop)"
"(call-expand-observe obs_8 'exit-prim s_17)"
"(call-expand-observe obs_8 'return s_17)))"
"(void)))"
"(void)))"
" s_17))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_9)(expand-context-observer ctx_17)))"
"(if obs_9"
"(let-values()(let-values()(call-expand-observe obs_9 'resolve id_15)))"
"(void)))"
"(values))))"
"(let-values(((b_78)"
"(let-values(((temp96_2)(expand-context-phase ctx_17))"
"((temp97_1) 'ambiguous)"
"((temp98_1) #t))"
"(resolve+shift30.1 temp97_1 #t #f #f #f #f temp98_1 #t #f #f id_15 temp96_2))))"
"(if(eq? b_78 'ambiguous)"
"(let-values()(raise-ambiguous-error id_15 ctx_17))"
"(let-values()"
"(let-values(((t_46 primitive?_4 insp-of-t_2)"
"(if b_78"
"(let-values(((b99_0) b_78)((ctx100_0) ctx_17)((id101_0) id_15))"
"(lookup17.1 #f #f #f #f b99_0 ctx100_0 id101_0))"
"(values #f #f #f))))"
"(if(transformer? t_46)"
"(let-values()"
"(dispatch-transformer"
" t_46"
" insp-of-t_2"
"(make-explicit ctx_17 sym_25 s_17 disarmed-s_1)"
" id_15"
" ctx_17"
" b_78))"
"(if(core-form? t_46)"
"(let-values()"
"(if(if(eq? sym_25 '#%top)"
"(if(eq?(core-form-name t_46) '#%top)"
"(expand-context-in-local-expand? ctx_17)"
" #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_46 s_17 ctx_17))"
"(let-values()"
"(dispatch-core-form"
" t_46"
"(make-explicit ctx_17 sym_25 s_17 disarmed-s_1)"
" ctx_17))))"
"(let-values()"
"(let-values(((tl-id_0)"
"(if(eq? sym_25 '#%top)"
"(if(root-expand-context-top-level-bind-scope ctx_17)"
"(add-scope s_17(root-expand-context-top-level-bind-scope ctx_17))"
" #f)"
" #f)))"
"(let-values(((tl-b_0)"
"(if tl-id_0"
"(let-values(((tl-id102_0) tl-id_0)"
"((temp103_1)(expand-context-phase ctx_17)))"
"(resolve33.1 #f #f #f #f #f #f #f #f tl-id102_0 temp103_1))"
" #f)))"
"(if tl-b_0"
"(let-values()"
"(if(if(expand-context-to-parsed? ctx_17)"
"(free-id-set-empty?(expand-context-stops ctx_17))"
" #f)"
"(parsed-id2.1 tl-id_0 tl-b_0 #f)"
" tl-id_0))"
"(let-values()"
"(raise-syntax-implicit-error"
" s_17"
" sym_25"
" trigger-id_1"
" ctx_17))))))))))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_164 ctx_18)"
"(begin"
"(let-values(((ae_0)(syntax-e$1 s_164)))"
"(let-values(((exp-s_0)(already-expanded-s ae_0)))"
"(begin"
"(if(let-values(((or-part_263)(syntax-any-macro-scopes? s_164)))"
"(if or-part_263"
" or-part_263"
"(let-values(((or-part_264)"
"(not"
"(eq?(expand-context-binding-layer ctx_18)(already-expanded-binding-layer ae_0)))))"
"(if or-part_264"
" or-part_264"
"(if(parsed? exp-s_0)"
"(not"
"(if(expand-context-to-parsed? ctx_18)"
"(free-id-set-empty?(expand-context-stops ctx_18))"
" #f))"
" #f)))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                  \"expanded syntax not in its original lexical context;\\n\""
"                  \" extra bindings or scopes in the current context\")"
"(if(not(parsed? exp-s_0)) exp-s_0 #f)))"
"(void))"
"(if(parsed? exp-s_0)"
"(let-values() exp-s_0)"
"(let-values()"
"(let-values(((result-s_1)(syntax-track-origin$1 exp-s_0 s_164)))"
"(begin"
"(let-values(((obs_10)(expand-context-observer ctx_18)))"
"(if obs_10"
"(let-values()(let-values()(call-expand-observe obs_10 'opaque-expr result-s_1)))"
"(void)))"
"(if(if(expand-context-to-parsed? ctx_18)(free-id-set-empty?(expand-context-stops ctx_18)) #f)"
"(let-values(((result-s104_0) result-s_1)((ctx105_0) ctx_18))"
"(expand7.1 #f #f #f #f result-s104_0 ctx105_0))"
" result-s_1)))))))))))"
"(define-values"
"(make-explicit)"
"(lambda(ctx_19 sym_62 s_77 disarmed-s_2)"
"(begin"
"(let-values(((new-s_0)"
"(syntax-rearm$1(datum->syntax$1 disarmed-s_2(cons sym_62 disarmed-s_2) s_77 s_77) s_77)))"
"(begin"
"(let-values(((obs_11)(expand-context-observer ctx_19)))"
"(if obs_11(let-values()(let-values()(call-expand-observe obs_11 'tag new-s_0)))(void)))"
" new-s_0)))))"
"(define-values"
"(dispatch)"
"(lambda(t_31 insp-of-t_3 s_397 id_59 ctx_20 binding_21 primitive?_5)"
"(begin"
"(if(core-form? t_31)"
"(let-values()(dispatch-core-form t_31 s_397 ctx_20))"
"(if(transformer? t_31)"
"(let-values()(dispatch-transformer t_31 insp-of-t_3 s_397 id_59 ctx_20 binding_21))"
"(if(variable? t_31)"
"(let-values()(dispatch-variable t_31 s_397 id_59 ctx_20 binding_21 primitive?_5))"
"            (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" s_397))))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_47 s_29 ctx_21)"
"(begin"
"(if(expand-context-only-immediate? ctx_21)"
"(let-values()"
"(begin"
"(let-values(((obs_12)(expand-context-observer ctx_21)))"
"(if obs_12(let-values()(let-values()(call-expand-observe obs_12 'exit-check s_29)))(void)))"
" s_29))"
"(if(expand-context-observer ctx_21)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_13)(expand-context-observer ctx_21)))"
"(if obs_13"
"(let-values()(let-values()(call-expand-observe obs_13 'enter-prim s_29)))"
"(void)))"
"(values))))"
"(let-values(((result-s_2)((core-form-expander t_47) s_29 ctx_21)))"
"(begin"
"(let-values(((obs_14)(expand-context-observer ctx_21)))"
"(if obs_14"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_14 'exit-prim(extract-syntax result-s_2))"
"(call-expand-observe obs_14 'return(extract-syntax result-s_2)))))"
"(void)))"
" result-s_2))))"
"(let-values()((core-form-expander t_47) s_29 ctx_21)))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_48 s_400 ctx_0)"
"(begin"
"(let-values((()"
"(begin"
"(let-values(((obs_15)(expand-context-observer ctx_0)))"
"(if obs_15"
"(let-values()(let-values()(call-expand-observe obs_15 'enter-prim s_400)))"
"(void)))"
"(values))))"
"(let-values(((result-s_3)((core-form-expander t_48) s_400 ctx_0 #t)))"
"(begin"
"(let-values(((obs_16)(expand-context-observer ctx_0)))"
"(if obs_16"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_16 'exit-prim result-s_3)"
"(call-expand-observe obs_16 'return result-s_3))))"
"(void)))"
" result-s_3))))))"
"(define-values"
"(dispatch-transformer)"
"(lambda(t_49 insp-of-t_4 s_401 id_60 ctx_22 binding_22)"
"(begin"
"(if(not-in-this-expand-context? t_49 ctx_22)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_17)(expand-context-observer ctx_22)))"
"(if obs_17"
"(let-values()(let-values()(call-expand-observe obs_17 'enter-macro s_401)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_0)(avoid-current-expand-context(substitute-alternate-id s_401 id_60) t_49 ctx_22)))"
"(begin"
"(let-values(((obs_18)(expand-context-observer ctx_22)))"
"(if obs_18(let-values()(let-values()(call-expand-observe obs_18 'exit-macro s_401)))(void)))"
"(let-values(((adj-s106_0) adj-s_0)((ctx107_0) ctx_22))"
"(expand7.1 #f #f #f #f adj-s106_0 ctx107_0))))))"
"(if(expand-context-should-not-encounter-macros? ctx_22)"
"(let-values()"
"            (raise-syntax-error$1 #f \"encountered a macro binding in form that should be fully expanded\" s_401))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_19)(expand-context-observer ctx_22)))"
"(if obs_19"
"(let-values()"
"(if(if(expand-context-only-immediate? ctx_22)(not(1/rename-transformer? t_49)) #f)"
"(let-values()"
"(begin"
"(call-expand-observe obs_19 'visit s_401)"
"(call-expand-observe obs_19 'resolve id_60)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_1 re-ctx_0)"
"(if(1/rename-transformer? t_49)"
"(values s_401 ctx_22)"
"(apply-transformer t_49 insp-of-t_4 s_401 id_60 ctx_22 binding_22))))"
"(begin"
"(let-values(((obs_20)(expand-context-observer ctx_22)))"
"(if obs_20"
"(let-values()"
"(if(if(expand-context-only-immediate? ctx_22)(not(1/rename-transformer? t_49)) #f)"
"(let-values()(call-expand-observe obs_20 'return exp-s_1))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_22)"
"(let-values() exp-s_1)"
"(let-values()"
"(let-values(((temp110_0)"
"(if(1/rename-transformer? t_49)"
"(syntax-track-origin$1"
"(rename-transformer-target-in-context t_49 ctx_22)"
" id_60"
" id_60)"
" #f))"
"((temp111_0)"
"(let-values(((or-part_171)(expand-context-only-immediate? ctx_22)))"
"(if or-part_171 or-part_171(1/rename-transformer? t_49)))))"
"(expand7.1 temp110_0 #t temp111_0 #t exp-s_1 re-ctx_0)))))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_50 s_312 id_61 ctx_23 binding_23 primitive?_6)"
"(begin"
"(if(expand-context-only-immediate? ctx_23)"
"(let-values()"
"(begin"
"(let-values(((obs_21)(expand-context-observer ctx_23)))"
"(if obs_21(let-values()(let-values()(call-expand-observe obs_21 'exit-check s_312)))(void)))"
" id_61))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_23)))"
"(if obs_22"
"(let-values()(let-values()(call-expand-observe obs_22 'variable s_312 id_61)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_23)(values))))"
"(let-values(((result-s_4)"
"(let-values(((temp114_0)"
"(free-id-set-empty-or-just-module*?(expand-context-stops ctx_23))))"
"(substitute-variable6.1 temp114_0 id_61 t_50))))"
"(if(if(expand-context-to-parsed? ctx_23)(free-id-set-empty?(expand-context-stops ctx_23)) #f)"
"(let-values()"
"(let-values(((prop-s_0)(keep-properties-only~ result-s_4)))"
"(let-values(((insp_16)(syntax-inspector result-s_4)))"
"(if primitive?_6"
"(parsed-primitive-id3.1 prop-s_0 binding_23 insp_16)"
"(parsed-id2.1 prop-s_0 binding_23 insp_16)))))"
"(let-values()"
"(begin"
"(let-values(((obs_23)(expand-context-observer ctx_23)))"
"(if obs_23"
"(let-values()(let-values()(call-expand-observe obs_23 'return result-s_4)))"
"(void)))"
" result-s_4)))))))))))"
"(define-values"
"(apply-transformer)"
"(lambda(t_51 insp-of-t_5 s_54 id_62 ctx_24 binding_24)"
"(begin"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_24)(expand-context-observer ctx_24)))"
"(if obs_24"
"(let-values()(let-values()(call-expand-observe obs_24 'enter-macro s_54)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_54)))"
"(let-values(((intro-scope_0)(new-scope 'macro)))"
"(let-values(((intro-s_0)(flip-scope disarmed-s_3 intro-scope_0)))"
"(let-values(((use-s_0 use-scopes_0)(maybe-add-use-site-scope intro-s_0 ctx_24 binding_24)))"
"(let-values(((cleaned-s_0)(syntax-remove-taint-dispatch-properties use-s_0)))"
"(let-values(((def-ctx-scopes_1)(box null)))"
"(let-values(((transformed-s_0)"
"(apply-transformer-in-context"
" t_51"
" cleaned-s_0"
" ctx_24"
" insp-of-t_5"
" intro-scope_0"
" use-scopes_0"
" def-ctx-scopes_1"
" id_62)))"
"(let-values(((result-s_5)(flip-scope transformed-s_0 intro-scope_0)))"
"(let-values(((post-s_0)(maybe-add-post-expansion-scope result-s_5 ctx_24)))"
"(let-values(((tracked-s_0)(syntax-track-origin$1 post-s_0 cleaned-s_0 id_62)))"
"(let-values(((rearmed-s_0)"
"(taint-dispatch"
" tracked-s_0"
"(lambda(t-s_0)(syntax-rearm$1 t-s_0 s_54))"
"(expand-context-phase ctx_24))))"
"(begin"
"(let-values(((obs_25)(expand-context-observer ctx_24)))"
"(if obs_25"
"(let-values()"
"(let-values()(call-expand-observe obs_25 'exit-macro rearmed-s_0)))"
"(void)))"
"(values"
" rearmed-s_0"
"(accumulate-def-ctx-scopes ctx_24 def-ctx-scopes_1)))))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_52 cleaned-s_1 ctx_25 insp-of-t_6 intro-scope_1 use-scopes_1 def-ctx-scopes_2 id_63)"
"(begin"
"(let-values((()"
"(begin"
"(let-values(((obs_26)(expand-context-observer ctx_25)))"
"(if obs_26"
"(let-values()(let-values()(call-expand-observe obs_26 'macro-pre-x cleaned-s_1)))"
"(void)))"
"(values))))"
"(let-values(((confine-def-ctx-scopes?_0)"
"(not"
"(let-values(((or-part_265)(expand-context-only-immediate? ctx_25)))"
"(if or-part_265"
" or-part_265"
"(not(free-id-set-empty-or-just-module*?(expand-context-stops ctx_25))))))))"
"(let-values(((accum-ctx_0)"
"(if(if confine-def-ctx-scopes?_0"
"(if(expand-context-def-ctx-scopes ctx_25)"
"(not(null?(unbox(expand-context-def-ctx-scopes ctx_25))))"
" #f)"
" #f)"
"(accumulate-def-ctx-scopes ctx_25(expand-context-def-ctx-scopes ctx_25))"
" ctx_25)))"
"(let-values(((m-ctx_0)"
"(let-values(((v_184) accum-ctx_0))"
"(let-values(((the-struct_59) v_184))"
"(if(expand-context/outer? the-struct_59)"
"(let-values(((current-introduction-scopes115_0)(cons intro-scope_1 use-scopes_1))"
"((def-ctx-scopes116_0)"
"(if confine-def-ctx-scopes?_0"
" def-ctx-scopes_2"
"(expand-context-def-ctx-scopes ctx_25)))"
"((inner117_0)(root-expand-context/outer-inner v_184)))"
"(expand-context/outer1.1"
" inner117_0"
"(root-expand-context/outer-post-expansion-scope the-struct_59)"
"(root-expand-context/outer-use-site-scopes the-struct_59)"
"(root-expand-context/outer-frame-id the-struct_59)"
"(expand-context/outer-context the-struct_59)"
"(expand-context/outer-env the-struct_59)"
"(expand-context/outer-post-expansion-scope-action the-struct_59)"
"(expand-context/outer-scopes the-struct_59)"
" def-ctx-scopes116_0"
"(expand-context/outer-binding-layer the-struct_59)"
"(expand-context/outer-reference-records the-struct_59)"
"(expand-context/outer-only-immediate? the-struct_59)"
"(expand-context/outer-need-eventually-defined the-struct_59)"
" current-introduction-scopes115_0"
"(expand-context/outer-name the-struct_59)))"
"                                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_59))))))"
"(let-values(((transformed-s_1)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_0"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_25)"
"(add1(expand-context-phase ctx_25)))"
" current-module-code-inspector"
"(let-values(((or-part_266) insp-of-t_6))"
"(if or-part_266 or-part_266(current-module-code-inspector))))"
"(let-values()"
"(call-with-continuation-barrier"
"(lambda()((transformer->procedure t_52) cleaned-s_1)))))))"
"(begin"
"(let-values(((obs_27)(expand-context-observer ctx_25)))"
"(if obs_27"
"(let-values()"
"(let-values()(call-expand-observe obs_27 'macro-post-x transformed-s_1 cleaned-s_1)))"
"(void)))"
"(if(syntax?$1 transformed-s_1)"
"(void)"
"(let-values()"
"(raise-arguments-error"
"(syntax-e$1 id_63)"
"                       \"received value from syntax expander was not syntax\""
"                       \"received\""
" transformed-s_1)))"
" transformed-s_1)))))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_61 ctx_26 binding_1)"
"(begin"
"(if(if(root-expand-context-use-site-scopes ctx_26)"
"(matching-frame?(root-expand-context-frame-id ctx_26)(binding-frame-id binding_1))"
" #f)"
"(let-values()"
"(let-values(((sc_26)(new-scope 'use-site)))"
"(let-values(((b_79)(root-expand-context-use-site-scopes ctx_26)))"
"(begin(set-box! b_79(cons sc_26(unbox b_79)))(values(add-scope s_61 sc_26)(list sc_26))))))"
"(let-values()(values s_61 null))))))"
"(define-values"
"(matching-frame?)"
"(lambda(current-frame-id_0 bind-frame-id_0)"
"(begin"
"(if current-frame-id_0"
"(let-values(((or-part_93)(eq? current-frame-id_0 bind-frame-id_0)))"
"(if or-part_93 or-part_93(eq? current-frame-id_0 'all)))"
" #f))))"
"(define-values"
"(maybe-add-post-expansion-scope)"
"(lambda(s_320 ctx_27)"
"(begin"
"(if(root-expand-context-post-expansion-scope ctx_27)"
"(let-values()"
"((expand-context-post-expansion-scope-action ctx_27) s_320(root-expand-context-post-expansion-scope ctx_27)))"
"(let-values() s_320)))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_28 def-ctx-scopes_3)"
"(begin"
"(if(null?(unbox def-ctx-scopes_3))"
" ctx_28"
"(let-values(((v_107) ctx_28))"
"(let-values(((the-struct_60) v_107))"
"(if(expand-context/outer? the-struct_60)"
"(let-values(((scopes118_0)(append(unbox def-ctx-scopes_3)(expand-context-scopes ctx_28)))"
"((inner119_0)(root-expand-context/outer-inner v_107)))"
"(expand-context/outer1.1"
" inner119_0"
"(root-expand-context/outer-post-expansion-scope the-struct_60)"
"(root-expand-context/outer-use-site-scopes the-struct_60)"
"(root-expand-context/outer-frame-id the-struct_60)"
"(expand-context/outer-context the-struct_60)"
"(expand-context/outer-env the-struct_60)"
"(expand-context/outer-post-expansion-scope-action the-struct_60)"
" scopes118_0"
"(expand-context/outer-def-ctx-scopes the-struct_60)"
"(expand-context/outer-binding-layer the-struct_60)"
"(expand-context/outer-reference-records the-struct_60)"
"(expand-context/outer-only-immediate? the-struct_60)"
"(expand-context/outer-need-eventually-defined the-struct_60)"
"(expand-context/outer-current-introduction-scopes the-struct_60)"
"(expand-context/outer-name the-struct_60)))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_60))))))))"
"(define-values"
"(lookup17.1)"
"(lambda(in10_1 in12_1 out-of-context-as-variable?11_0 out-of-context-as-variable?13_0 b14_0 ctx15_0 id16_1)"
"(begin"
" 'lookup17"
"(let-values(((b_80) b14_0))"
"(let-values(((ctx_29) ctx15_0))"
"(let-values(((id_64) id16_1))"
"(let-values(((in-s_7)(if in12_1 in10_1 #f)))"
"(let-values(((out-of-context-as-variable?_1)"
"(if out-of-context-as-variable?13_0 out-of-context-as-variable?11_0 #f)))"
"(let-values()"
"(let-values(((temp121_1)(expand-context-env ctx_29))"
"((temp122_0)(expand-context-lift-envs ctx_29))"
"((temp123_1)(expand-context-namespace ctx_29))"
"((temp124_0)(expand-context-phase ctx_29))"
"((id125_0) id_64)"
"((in-s126_0) in-s_7)"
"((out-of-context-as-variable?127_0) out-of-context-as-variable?_1))"
"(binding-lookup48.1"
" in-s126_0"
" #t"
" out-of-context-as-variable?127_0"
" #t"
" b_80"
" temp121_1"
" temp122_0"
" temp123_1"
" temp124_0"
" id125_0)))))))))))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_95 alternate-id_3)"
"(begin"
"(if(not alternate-id_3)"
"(let-values() s_95)"
"(if(identifier? s_95)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_3 s_95) s_95))"
"(let-values()"
"(let-values(((disarmed-s_4)(syntax-disarm$1 s_95)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_4(cons alternate-id_3(cdr(syntax-e$1 disarmed-s_4))) s_95)"
" s_95)"
" s_95))))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_25)"
"(begin"
"(if(if(local-binding? binding_25)(reference-record?(binding-frame-id binding_25)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_25)(local-binding-key binding_25)))"
"(void)))))"
"(define-values"
"(expand/capture-lifts30.1)"
"(lambda(always-wrap?23_0"
" always-wrap?27_0"
" begin-form?21_0"
" begin-form?25_0"
" expand-lifts?20_0"
" expand-lifts?24_0"
" lift-key22_0"
" lift-key26_0"
" s28_1"
" ctx29_0)"
"(begin"
" 'expand/capture-lifts30"
"(let-values(((s_210) s28_1))"
"(let-values(((ctx_30) ctx29_0))"
"(let-values(((expand-lifts?_0)(if expand-lifts?24_0 expand-lifts?20_0 #f)))"
"(let-values(((begin-form?_0)(if begin-form?25_0 begin-form?21_0 #f)))"
"(let-values(((lift-key_2)(if lift-key26_0 lift-key22_0(generate-lift-key))))"
"(let-values(((always-wrap?_0)(if always-wrap?27_0 always-wrap?23_0 #f)))"
"(let-values()"
"(let-values(((context_6)(expand-context-context ctx_30)))"
"(let-values(((phase_104)(expand-context-phase ctx_30)))"
"(let-values(((local?_0)(not begin-form?_0)))"
"((letrec-values(((loop_93)"
"(lambda(s_102 always-wrap?_1 ctx_31)"
"(begin"
" 'loop"
"(let-values(((lift-env_2)(if local?_0(box empty-env) #f)))"
"(let-values(((lift-ctx_0)"
"(let-values(((temp128_0)"
"(if local?_0"
"(make-local-lift"
" lift-env_2"
"(root-expand-context-counter ctx_31))"
"(make-top-level-lift ctx_31)))"
"((temp129_0)"
"(if(not local?_0)"
"(eq? context_6 'module)"
" #f)))"
"(make-lift-context6.1 temp129_0 #t temp128_0))))"
"(let-values(((capture-ctx_0)"
"(let-values(((v_185) ctx_31))"
"(let-values(((the-struct_61) v_185))"
"(if(expand-context/outer? the-struct_61)"
"(let-values(((inner130_0)"
"(let-values(((the-struct_62)"
"(root-expand-context/outer-inner"
" v_185)))"
"(if(expand-context/inner?"
" the-struct_62)"
"(let-values(((lift-key131_0)"
" lift-key_2)"
"((lifts132_0)"
" lift-ctx_0)"
"((lift-envs133_0)"
"(if local?_0"
"(cons"
" lift-env_2"
"(expand-context-lift-envs"
" ctx_31))"
"(expand-context-lift-envs"
" ctx_31)))"
"((module-lifts134_0)"
"(if(let-values(((or-part_267)"
" local?_0))"
"(if or-part_267"
" or-part_267"
"(not"
"(memq"
" context_6"
" '(top-level"
" module)))))"
"(expand-context-module-lifts"
" ctx_31)"
" lift-ctx_0)))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_62)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_62)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_62)"
"(root-expand-context/inner-defined-syms"
" the-struct_62)"
"(root-expand-context/inner-counter"
" the-struct_62)"
" lift-key131_0"
"(expand-context/inner-to-parsed?"
" the-struct_62)"
"(expand-context/inner-phase"
" the-struct_62)"
"(expand-context/inner-namespace"
" the-struct_62)"
"(expand-context/inner-just-once?"
" the-struct_62)"
"(expand-context/inner-module-begin-k"
" the-struct_62)"
"(expand-context/inner-allow-unbound?"
" the-struct_62)"
"(expand-context/inner-in-local-expand?"
" the-struct_62)"
"(expand-context/inner-stops"
" the-struct_62)"
"(expand-context/inner-declared-submodule-names"
" the-struct_62)"
" lifts132_0"
" lift-envs133_0"
" module-lifts134_0"
"(expand-context/inner-require-lifts"
" the-struct_62)"
"(expand-context/inner-to-module-lifts"
" the-struct_62)"
"(expand-context/inner-requires+provides"
" the-struct_62)"
"(expand-context/inner-observer"
" the-struct_62)"
"(expand-context/inner-for-serializable?"
" the-struct_62)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_62)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                           \"expand-context/inner?\""
" the-struct_62)))))"
"(expand-context/outer1.1"
" inner130_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_61)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_61)"
"(root-expand-context/outer-frame-id"
" the-struct_61)"
"(expand-context/outer-context the-struct_61)"
"(expand-context/outer-env the-struct_61)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_61)"
"(expand-context/outer-scopes the-struct_61)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_61)"
"(expand-context/outer-binding-layer"
" the-struct_61)"
"(expand-context/outer-reference-records"
" the-struct_61)"
"(expand-context/outer-only-immediate?"
" the-struct_61)"
"(expand-context/outer-need-eventually-defined"
" the-struct_61)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_61)"
"(expand-context/outer-name the-struct_61)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                         \"expand-context/outer?\""
" the-struct_61))))))"
"(let-values(((rebuild-s_0)(keep-properties-only s_102)))"
"(let-values(((exp-s_2)"
"(let-values(((s135_0) s_102)"
"((capture-ctx136_0) capture-ctx_0))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" s135_0"
" capture-ctx136_0))))"
"(let-values(((lifts_6)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_0))))"
"(let-values(((with-lifts-s_0)"
"(if(let-values(((or-part_163)"
"(pair? lifts_6)))"
"(if or-part_163"
" or-part_163"
" always-wrap?_1))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_31)"
"(let-values()"
"(begin"
"(if expand-lifts?_0"
"(void)"
"(let-values()"
"(error"
"                                                                                         \"internal error: to-parsed mode without expanding lifts\")))"
"(wrap-lifts-as-parsed-let"
" lifts_6"
" exp-s_2"
" rebuild-s_0"
" ctx_31"
"(lambda(rhs_15 rhs-ctx_0)"
"(loop_93 rhs_15 #f rhs-ctx_0)))))"
"(let-values()"
"(if begin-form?_0"
"(let-values(((lifts137_0) lifts_6)"
"((exp-s138_0) exp-s_2)"
"((phase139_0)"
" phase_104))"
"(wrap-lifts-as-begin16.1"
" #f"
" #f"
" #f"
" #f"
" lifts137_0"
" exp-s138_0"
" phase139_0))"
"(wrap-lifts-as-let"
" lifts_6"
" exp-s_2"
" phase_104)))))"
"(let-values() exp-s_2))))"
"(if(let-values(((or-part_268)(not expand-lifts?_0)))"
"(if or-part_268"
" or-part_268"
"(let-values(((or-part_269)(null? lifts_6)))"
"(if or-part_269"
" or-part_269"
"(expand-context-to-parsed? ctx_31)))))"
"(let-values() with-lifts-s_0)"
"(let-values()"
"(begin"
"(let-values(((obs_28)"
"(expand-context-observer ctx_31)))"
"(if obs_28"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_28"
" 'letlift-loop"
" with-lifts-s_0)))"
"(void)))"
"(loop_93 with-lifts-s_0 #f ctx_31)))))))))))))))"
" loop_93)"
" s_210"
" always-wrap?_0"
" ctx_30))))))))))))))"
"(define-values"
"(expand-transformer47.1)"
"(lambda(always-wrap?37_0"
" always-wrap?43_0"
" begin-form?34_0"
" begin-form?40_0"
" context33_0"
" context39_1"
" expand-lifts?35_0"
" expand-lifts?41_0"
" keep-stops?38_0"
" keep-stops?44_0"
" lift-key36_0"
" lift-key42_0"
" s45_0"
" ctx46_0)"
"(begin"
" 'expand-transformer47"
"(let-values(((s_122) s45_0))"
"(let-values(((ctx_32) ctx46_0))"
"(let-values(((context_7)(if context39_1 context33_0 'expression)))"
"(let-values(((begin-form?_1)(if begin-form?40_0 begin-form?34_0 #f)))"
"(let-values(((expand-lifts?_1)(if expand-lifts?41_0 expand-lifts?35_0 #t)))"
"(let-values(((lift-key_3)(if lift-key42_0 lift-key36_0(generate-lift-key))))"
"(let-values(((always-wrap?_2)(if always-wrap?43_0 always-wrap?37_0 #f)))"
"(let-values(((keep-stops?_0)(if keep-stops?44_0 keep-stops?38_0 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((trans-ctx_0)"
"(let-values(((keep-stops?148_0) keep-stops?_0))"
"(context->transformer-context55.1 keep-stops?148_0 #t ctx_32 context_7 #t))))"
"(let-values(((expand-lifts?142_0) expand-lifts?_1)"
"((begin-form?143_0) begin-form?_1)"
"((lift-key144_0) lift-key_3)"
"((always-wrap?145_0) always-wrap?_2))"
"(expand/capture-lifts30.1"
" always-wrap?145_0"
" #t"
" begin-form?143_0"
" #t"
" expand-lifts?142_0"
" #t"
" lift-key144_0"
" #t"
" s_122"
" trans-ctx_0))))))))))))))))"
"(define-values"
"(context->transformer-context55.1)"
"(lambda(keep-stops?50_0 keep-stops?51_0 ctx54_0 context52_0 context53_0)"
"(begin"
" 'context->transformer-context55"
"(let-values(((ctx_33) ctx54_0))"
"(let-values(((context_8)(if context53_0 context52_0 'expression)))"
"(let-values(((keep-stops?_1)(if keep-stops?51_0 keep-stops?50_0 #f)))"
"(let-values()"
"(let-values(((phase_105)(add1(expand-context-phase ctx_33))))"
"(let-values(((ns_73)(namespace->namespace-at-phase(expand-context-namespace ctx_33) phase_105)))"
"(begin"
"(namespace-visit-available-modules! ns_73 phase_105)"
"(let-values(((v_186) ctx_33))"
"(let-values(((the-struct_63) v_186))"
"(if(expand-context/outer? the-struct_63)"
"(let-values(((context149_0) context_8)"
"((scopes150_0) null)"
"((env151_0) empty-env)"
"((only-immediate?152_0)"
"(if keep-stops?_1(expand-context-only-immediate? ctx_33) #f))"
"((def-ctx-scopes153_0) #f)"
"((post-expansion-scope154_0) #f)"
"((inner155_0)"
"(let-values(((the-struct_64)(root-expand-context/outer-inner v_186)))"
"(if(expand-context/inner? the-struct_64)"
"(let-values(((phase156_0) phase_105)"
"((namespace157_0) ns_73)"
"((stops158_0)"
"(if keep-stops?_1"
"(expand-context-stops ctx_33)"
" empty-free-id-set)))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_64)"
"(root-expand-context/inner-top-level-bind-scope the-struct_64)"
"(root-expand-context/inner-all-scopes-stx the-struct_64)"
"(root-expand-context/inner-defined-syms the-struct_64)"
"(root-expand-context/inner-counter the-struct_64)"
"(root-expand-context/inner-lift-key the-struct_64)"
"(expand-context/inner-to-parsed? the-struct_64)"
" phase156_0"
" namespace157_0"
"(expand-context/inner-just-once? the-struct_64)"
"(expand-context/inner-module-begin-k the-struct_64)"
"(expand-context/inner-allow-unbound? the-struct_64)"
"(expand-context/inner-in-local-expand? the-struct_64)"
" stops158_0"
"(expand-context/inner-declared-submodule-names the-struct_64)"
"(expand-context/inner-lifts the-struct_64)"
"(expand-context/inner-lift-envs the-struct_64)"
"(expand-context/inner-module-lifts the-struct_64)"
"(expand-context/inner-require-lifts the-struct_64)"
"(expand-context/inner-to-module-lifts the-struct_64)"
"(expand-context/inner-requires+provides the-struct_64)"
"(expand-context/inner-observer the-struct_64)"
"(expand-context/inner-for-serializable? the-struct_64)"
"(expand-context/inner-should-not-encounter-macros? the-struct_64)))"
"(raise-argument-error"
" 'struct-copy"
"                                             \"expand-context/inner?\""
" the-struct_64)))))"
"(expand-context/outer1.1"
" inner155_0"
" post-expansion-scope154_0"
"(root-expand-context/outer-use-site-scopes the-struct_63)"
"(root-expand-context/outer-frame-id the-struct_63)"
" context149_0"
" env151_0"
"(expand-context/outer-post-expansion-scope-action the-struct_63)"
" scopes150_0"
" def-ctx-scopes153_0"
"(expand-context/outer-binding-layer the-struct_63)"
"(expand-context/outer-reference-records the-struct_63)"
" only-immediate?152_0"
"(expand-context/outer-need-eventually-defined the-struct_63)"
"(expand-context/outer-current-introduction-scopes the-struct_63)"
"(expand-context/outer-name the-struct_63)))"
"                          (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_63))))))))))))))"
"(define-values"
"(expand+eval-for-syntaxes-binding63.1)"
"(lambda(log-next?58_0 log-next?59_0 rhs60_0 ids61_0 ctx62_0)"
"(begin"
" 'expand+eval-for-syntaxes-binding63"
"(let-values(((rhs_16) rhs60_0))"
"(let-values(((ids_19) ids61_0))"
"(let-values(((ctx_34) ctx62_0))"
"(let-values(((log-next?_0)(if log-next?59_0 log-next?58_0 #t)))"
"(let-values()"
"(let-values(((exp-rhs_0)"
"(let-values(((rhs159_0) rhs_16)((temp160_1)(as-named-context ctx_34 ids_19)))"
"(expand-transformer47.1 #f #f #f #f #f #f #f #f #f #f #f #f rhs159_0 temp160_1))))"
"(let-values(((phase_106)(add1(expand-context-phase ctx_34))))"
"(let-values(((parsed-rhs_0)"
"(if(expand-context-to-parsed? ctx_34)"
" exp-rhs_0"
"(let-values(((exp-rhs161_0) exp-rhs_0)"
"((temp162_1)"
"(let-values(((temp163_0)(as-to-parsed-context ctx_34)))"
"(context->transformer-context55.1 #f #f temp163_0 #f #f))))"
"(expand7.1 #f #f #f #f exp-rhs161_0 temp162_1)))))"
"(begin"
"(if log-next?_0"
"(let-values()"
"(let-values(((obs_29)(expand-context-observer ctx_34)))"
"(if obs_29(let-values()(let-values()(call-expand-observe obs_29 'next)))(void))))"
"(void))"
"(values"
" exp-rhs_0"
" parsed-rhs_0"
"(eval-for-bindings"
" ids_19"
" parsed-rhs_0"
" phase_106"
"(namespace->namespace-at-phase(expand-context-namespace ctx_34) phase_106)"
" ctx_34))))))))))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(rhs_17 ids_20 ctx_35)"
"(begin"
"(let-values(((exp-rhs_1 parsed-rhs_1 vals_3)"
"(let-values(((rhs164_0) rhs_17)((ids165_0) ids_20)((ctx166_0) ctx_35))"
"(expand+eval-for-syntaxes-binding63.1 #f #f rhs164_0 ids165_0 ctx166_0))))"
" vals_3))))"
"(define-values"
"(eval-for-bindings)"
"(lambda(ids_21 p_44 phase_107 ns_74 ctx_36)"
"(begin"
"(let-values(((compiled_0)"
"(if(can-direct-eval? p_44 ns_74)"
" #f"
"(compile-single"
" p_44"
"(let-values(((ns167_0) ns_74)((phase168_1) phase_107))"
"(make-compile-context14.1 #f #f #f #f #f #f ns167_0 #t phase168_1 #t #f #f))))))"
"(let-values(((vals_4)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_36"
" 1/current-namespace"
" ns_74"
" eval-jit-enabled"
" #f)"
"(let-values()(if compiled_0(eval-single-top compiled_0 ns_74)(direct-eval p_44 ns_74)))))"
" list)))"
"(begin"
"(if(=(length vals_4)(length ids_21))"
"(void)"
"              (let-values () (error \"wrong number of results (\" (length vals_4) \"vs.\" (length ids_21) \")\" \"from\" p_44)))"
" vals_4))))))"
"(define-values(keep-properties-only)(lambda(s_380)(begin(datum->syntax$1 #f 'props s_380 s_380))))"
"(define-values(keep-properties-only~)(lambda(s_381)(begin #f)))"
"(define-values"
"(keep-as-needed74.1)"
"(lambda(for-track?66_0"
" for-track?69_0"
" keep-for-error?68_0"
" keep-for-error?71_0"
" keep-for-parsed?67_0"
" keep-for-parsed?70_0"
" ctx72_0"
" s73_0)"
"(begin"
" 'keep-as-needed74"
"(let-values(((ctx_37) ctx72_0))"
"(let-values(((s_387) s73_0))"
"(let-values()"
"(let-values(((keep-for-parsed?_0)(if keep-for-parsed?70_0 keep-for-parsed?67_0 #f)))"
"(let-values(((keep-for-error?_0)(if keep-for-error?71_0 keep-for-error?68_0 #f)))"
"(let-values()"
"(let-values(((d_33)(syntax-e$1 s_387)))"
"(let-values(((keep-e_0)"
"(if(symbol? d_33)"
"(let-values() d_33)"
"(if(if(pair? d_33)(identifier?(car d_33)) #f)"
"(let-values()(syntax-e$1(car d_33)))"
"(let-values() #f)))))"
"(if(expand-context-to-parsed? ctx_37)"
"(let-values()"
"(if(let-values(((or-part_270) keep-for-parsed?_0))"
"(if or-part_270 or-part_270 keep-for-error?_0))"
"(datum->syntax$1 #f keep-e_0 s_387 s_387)"
" #f))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 s_387) keep-e_0 s_387 s_387)"
" s_387))))))))))))))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_402 trans-idss_0)"
"(begin"
"(if(null? trans-idss_0)"
"(let-values() s_402)"
"(let-values()"
"(syntax-property$1"
" s_402"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_0)"
"(let-values(((or-part_271)(syntax-property$1 s_402 'disappeared-binding)))"
"(if or-part_271 or-part_271 null)))))))))"
"(define-values"
"(increment-binding-layer)"
"(lambda(ids_22 ctx_38 layer-val_0)"
"(begin"
"(if((letrec-values(((loop_94)"
"(lambda(ids_23)"
"(begin"
" 'loop"
"(let-values(((or-part_272)(identifier? ids_23)))"
"(if or-part_272"
" or-part_272"
"(if(pair? ids_23)"
"(let-values(((or-part_273)(loop_94(car ids_23))))"
"(if or-part_273 or-part_273(loop_94(cdr ids_23))))"
" #f)))))))"
" loop_94)"
" ids_22)"
" layer-val_0"
"(expand-context-binding-layer ctx_38)))))"
"(define-values"
"(wrap-lifts-as-parsed-let)"
"(lambda(lifts_7 exp-s_3 rebuild-s_1 ctx_39 parse-rhs_0)"
"(begin"
"(let-values(((idss+keyss+rhss_0)(get-lifts-as-lists lifts_7)))"
"((letrec-values(((lets-loop_0)"
"(lambda(idss+keyss+rhss_1 rhs-ctx_1)"
"(begin"
" 'lets-loop"
"(if(null? idss+keyss+rhss_1)"
"(let-values() exp-s_3)"
"(let-values()"
"(let-values(((ids_24)(caar idss+keyss+rhss_1)))"
"(let-values(((keys_4)(cadar idss+keyss+rhss_1)))"
"(let-values(((rhs_18)(caddar idss+keyss+rhss_1)))"
"(let-values(((exp-rhs_2)(parse-rhs_0 rhs_18 rhs-ctx_1)))"
"(parsed-let-values17.1"
" rebuild-s_1"
"(list ids_24)"
"(list(list keys_4 exp-rhs_2))"
"(list"
"(lets-loop_0"
"(cdr idss+keyss+rhss_1)"
"(let-values(((v_187) rhs-ctx_1))"
"(let-values(((the-struct_65) v_187))"
"(if(expand-context/outer? the-struct_65)"
"(let-values(((env169_0)"
"(let-values(((lst_283) ids_24)((lst_119) keys_4))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_283)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_119)))"
"((letrec-values(((for-loop_62)"
"(lambda(env_3 lst_284 lst_285)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_284)"
"(pair? lst_285)"
" #f)"
"(let-values(((id_65)"
"(unsafe-car"
" lst_284))"
"((rest_155)"
"(unsafe-cdr"
" lst_284))"
"((key_81)"
"(unsafe-car"
" lst_285))"
"((rest_156)"
"(unsafe-cdr"
" lst_285)))"
"(let-values(((env_4)"
"(let-values(((env_5)"
" env_3))"
"(let-values(((env_6)"
"(let-values()"
"(env-extend"
" env_5"
" key_81"
"(local-variable1.1"
" id_65)))))"
"(values"
" env_6)))))"
"(if(not #f)"
"(for-loop_62"
" env_4"
" rest_155"
" rest_156)"
" env_4)))"
" env_3)))))"
" for-loop_62)"
"(expand-context-env rhs-ctx_1)"
" lst_283"
" lst_119))))"
"((inner170_0)(root-expand-context/outer-inner v_187)))"
"(expand-context/outer1.1"
" inner170_0"
"(root-expand-context/outer-post-expansion-scope the-struct_65)"
"(root-expand-context/outer-use-site-scopes the-struct_65)"
"(root-expand-context/outer-frame-id the-struct_65)"
"(expand-context/outer-context the-struct_65)"
" env169_0"
"(expand-context/outer-post-expansion-scope-action the-struct_65)"
"(expand-context/outer-scopes the-struct_65)"
"(expand-context/outer-def-ctx-scopes the-struct_65)"
"(expand-context/outer-binding-layer the-struct_65)"
"(expand-context/outer-reference-records the-struct_65)"
"(expand-context/outer-only-immediate? the-struct_65)"
"(expand-context/outer-need-eventually-defined the-struct_65)"
"(expand-context/outer-current-introduction-scopes the-struct_65)"
"(expand-context/outer-name the-struct_65)))"
"(raise-argument-error"
" 'struct-copy"
"                                                    \"expand-context/outer?\""
" the-struct_65)))))))))))))))))"
" lets-loop_0)"
" idss+keyss+rhss_0"
" ctx_39)))))"
"(define-values"
"(rename-transformer-target-in-context)"
"(lambda(t_53 ctx_40)"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) current-expand-context ctx_40)"
"(let-values()(1/rename-transformer-target t_53))))))"
"(define-values"
"(maybe-install-free=id-in-context!)"
"(lambda(val_68 id_66 phase_108 ctx_41)"
"(begin"
"(if(1/rename-transformer? val_68)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) current-expand-context ctx_41)"
"(let-values()(maybe-install-free=id! val_68 id_66 phase_108))))"
"(void)))))"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_0 phase_40)"
"(begin"
"(if(null? stop-ids_0)"
"(let-values() stop-ids_0)"
"(let-values()"
"(let-values(((p-core-stx_0)(syntax-shift-phase-level$1 core-stx phase_40)))"
"(if(if(= 1(length stop-ids_0))"
"(free-identifier=?$1(car stop-ids_0)(datum->syntax$1 p-core-stx_0 'module*) phase_40 phase_40)"
" #f)"
"(let-values() stop-ids_0)"
"(let-values()"
"(append"
" stop-ids_0"
"(reverse$1"
"(let-values(((lst_95) auto-stop-syms))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_95)))"
"((letrec-values(((for-loop_106)"
"(lambda(fold-var_85 lst_6)"
"(begin"
" 'for-loop"
"(if(pair? lst_6)"
"(let-values(((sym_63)(unsafe-car lst_6))((rest_46)(unsafe-cdr lst_6)))"
"(let-values(((fold-var_86)"
"(let-values(((fold-var_87) fold-var_85))"
"(let-values(((fold-var_59)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" p-core-stx_0"
" sym_63))"
" fold-var_87))))"
"(values fold-var_59)))))"
"(if(not #f)(for-loop_106 fold-var_86 rest_46) fold-var_86)))"
" fold-var_85)))))"
" for-loop_106)"
" null"
" lst_95)))))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(define-values"
"(module-expand-stop-ids)"
"(lambda(phase_109)"
"(begin"
"(let-values(((p-core-stx_1)(syntax-shift-phase-level$1 core-stx phase_109)))"
"(reverse$1"
"(let-values(((lst_219) module-stop-syms))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_219)))"
"((letrec-values(((for-loop_237)"
"(lambda(fold-var_220 lst_261)"
"(begin"
" 'for-loop"
"(if(pair? lst_261)"
"(let-values(((sym_17)(unsafe-car lst_261))((rest_138)(unsafe-cdr lst_261)))"
"(let-values(((fold-var_217)"
"(let-values(((fold-var_30) fold-var_220))"
"(let-values(((fold-var_218)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1 p-core-stx_1 sym_17))"
" fold-var_30))))"
"(values fold-var_218)))))"
"(if(not #f)(for-loop_237 fold-var_217 rest_138) fold-var_217)))"
" fold-var_220)))))"
" for-loop_237)"
" null"
" lst_219))))))))"
"(define-values"
"(module-stop-syms)"
"(append"
" auto-stop-syms"
" '(define-values define-syntaxes begin-for-syntax #%require #%provide module module* #%declare #%stratified-body)))"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins)"
"(let-values(((struct:_64 make-_64 ?_64 -ref_64 -set!_64)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 4"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'internal-definition-context)))))"
"(values"
" struct:_64"
" make-_64"
" ?_64"
"(make-struct-field-accessor -ref_64 0 'frame-id)"
"(make-struct-field-accessor -ref_64 1 'scope)"
"(make-struct-field-accessor -ref_64 2 'add-scope?)"
"(make-struct-field-accessor -ref_64 3 'env-mixins))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_65 make-_65 ?_65 -ref_65 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))))"
"(values"
" struct:_65"
" make-_65"
" ?_65"
"(make-struct-field-accessor -ref_65 0 'id)"
"(make-struct-field-accessor -ref_65 1 'sym)"
"(make-struct-field-accessor -ref_65 2 'value)"
"(make-struct-field-accessor -ref_65 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context7_0)"
"(lambda(parent-ctx3_0 add-scope?4_0 parent-ctx5_0 add-scope?6_0)"
"(begin"
" 'syntax-local-make-definition-context7"
"(let-values(((parent-ctx_0)(if parent-ctx5_0 parent-ctx3_0 #f)))"
"(let-values(((add-scope?_0)(if add-scope?6_0 add-scope?4_0 #t)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_225)(not parent-ctx_0)))"
"(if or-part_225"
" or-part_225"
"(1/internal-definition-context? parent-ctx_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-make-definition-context"
"                                               \"(or/c #f internal-definition-context?)\""
" parent-ctx_0)))"
"(values))))"
"(let-values(((ctx_42)"
"(let-values(((temp42_1) 'syntax-local-make-definition-context))"
"(get-current-expand-context17.1 #f #f temp42_1 #t))))"
"(let-values(((frame-id_8)"
"(let-values(((or-part_227)(root-expand-context-frame-id ctx_42)))"
"(if or-part_227"
" or-part_227"
"(let-values(((or-part_228)"
"(if parent-ctx_0"
"(internal-definition-context-frame-id parent-ctx_0)"
" #f)))"
"(if or-part_228 or-part_228(gensym)))))))"
"(let-values(((sc_27)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_4)(expand-context-def-ctx-scopes ctx_42)))"
"(begin"
"(if def-ctx-scopes_4"
"(void)"
"(let-values()"
"                                          (error \"internal error: no box to accumulate definition-context scopes\")))"
"(set-box! def-ctx-scopes_4(cons sc_27(unbox def-ctx-scopes_4)))"
"(internal-definition-context1.1"
" frame-id_8"
" sc_27"
" add-scope?_0"
"(box null)))))))))))))))"
"(case-lambda"
"(()(begin 'syntax-local-make-definition-context(syntax-local-make-definition-context7_0 #f #f #f #f)))"
"((parent-ctx_1 add-scope?4_1)(syntax-local-make-definition-context7_0 parent-ctx_1 add-scope?4_1 #t #t))"
"((parent-ctx3_1)(syntax-local-make-definition-context7_0 parent-ctx3_1 #f #t #f)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(lambda(ids_25 s_403 intdef_0)"
"(begin"
" 'syntax-local-bind-syntaxes"
"(let-values((()"
"(begin"
"(if(if(list? ids_25)(andmap2 identifier? ids_25) #f)"
"(void)"
"(let-values()"
"                          (raise-argument-error 'syntax-local-bind-syntaxes \"(listof identifier?)\" ids_25)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_274)(not s_403)))(if or-part_274 or-part_274(syntax?$1 s_403)))"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-local-bind-syntaxes \"(or/c syntax? #f)\" s_403)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                               \"internal-definition-context?\""
" intdef_0)))"
"(values))))"
"(let-values(((ctx_43)"
"(let-values(((temp43_1) 'local-expand))(get-current-expand-context17.1 #f #f temp43_1 #t))))"
"(let-values((()"
"(begin"
"(let-values(((obs_30)(expand-context-observer ctx_43)))"
"(if obs_30"
"(let-values()(let-values()(call-expand-observe obs_30 'local-bind ids_25)))"
"(void)))"
"(values))))"
"(let-values(((phase_110)(expand-context-phase ctx_43)))"
"(let-values(((intdef-env_0)(add-intdef-bindings(expand-context-env ctx_43) intdef_0)))"
"(let-values(((intdef-ids_0)"
"(reverse$1"
"(let-values(((lst_286) ids_25))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_286)))"
"((letrec-values(((for-loop_171)"
"(lambda(fold-var_16 lst_181)"
"(begin"
" 'for-loop"
"(if(pair? lst_181)"
"(let-values(((id_67)(unsafe-car lst_181))"
"((rest_157)(unsafe-cdr lst_181)))"
"(let-values(((fold-var_223)"
"(let-values(((fold-var_233)"
" fold-var_16))"
"(let-values(((fold-var_234)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_0)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_67"
" ctx_43)"
" ctx_43)))"
"(let-values(((temp46_2)"
" #t))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" temp46_2"
" #t"
" pre-id_0"
" intdef_0))))"
" fold-var_233))))"
"(values fold-var_234)))))"
"(if(not #f)"
"(for-loop_171 fold-var_223 rest_157)"
" fold-var_223)))"
" fold-var_16)))))"
" for-loop_171)"
" null"
" lst_286))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_31)(expand-context-observer ctx_43)))"
"(if obs_31"
"(let-values()"
"(let-values()(call-expand-observe obs_31 'rename-list intdef-ids_0)))"
"(void)))"
"(values))))"
"(let-values(((syms_21)"
"(reverse$1"
"(let-values(((lst_183) intdef-ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_183)))"
"((letrec-values(((for-loop_186)"
"(lambda(fold-var_235 lst_287)"
"(begin"
" 'for-loop"
"(if(pair? lst_287)"
"(let-values(((intdef-id_0)(unsafe-car lst_287))"
"((rest_158)(unsafe-cdr lst_287)))"
"(let-values(((fold-var_236)"
"(let-values(((fold-var_237)"
" fold-var_235))"
"(let-values(((fold-var_158)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((temp49_1)"
"(root-expand-context-counter"
" ctx_43))"
"((temp50_1)"
"(internal-definition-context-frame-id"
" intdef_0)))"
"(add-local-binding!35.1"
" temp50_1"
" #t"
" #f"
" #f"
" intdef-id_0"
" phase_110"
" temp49_1)))"
" fold-var_237))))"
"(values fold-var_158)))))"
"(if(not #f)"
"(for-loop_186 fold-var_236 rest_158)"
" fold-var_236)))"
" fold-var_235)))))"
" for-loop_186)"
" null"
" lst_183))))))"
"(let-values(((vals_5)"
"(if s_403"
"(let-values()"
"(let-values(((input-s_0)"
"(flip-introduction-scopes"
"(let-values(((temp53_2) #t))"
"(add-intdef-scopes21.1 #f #f temp53_2 #t s_403 intdef_0))"
" ctx_43)))"
"(let-values(((tmp-env_0)"
"(let-values(((lst_288) syms_21))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_288)))"
"((letrec-values(((for-loop_35)"
"(lambda(env_7 lst_164)"
"(begin"
" 'for-loop"
"(if(pair? lst_164)"
"(let-values(((sym_2)"
"(unsafe-car"
" lst_164))"
"((rest_159)"
"(unsafe-cdr"
" lst_164)))"
"(let-values(((env_8)"
"(let-values(((env_9)"
" env_7))"
"(let-values(((env_10)"
"(let-values()"
"(hash-set"
" env_9"
" sym_2"
" variable))))"
"(values"
" env_10)))))"
"(if(not #f)"
"(for-loop_35"
" env_8"
" rest_159)"
" env_8)))"
" env_7)))))"
" for-loop_35)"
" intdef-env_0"
" lst_288)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_32)"
"(expand-context-observer ctx_43)))"
"(if obs_32"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_32 'enter-bind)))"
"(void)))"
"(values))))"
"(let-values(((vals_6)"
"(eval-for-syntaxes-binding"
" input-s_0"
" ids_25"
"(let-values(((temp54_1)"
"(let-values(((v_92) ctx_43))"
"(let-values(((the-struct_66) v_92))"
"(if(expand-context/outer?"
" the-struct_66)"
"(let-values(((env57_0) tmp-env_0)"
"((inner58_0)"
"(root-expand-context/outer-inner"
" v_92)))"
"(expand-context/outer1.1"
" inner58_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_66)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_66)"
"(root-expand-context/outer-frame-id"
" the-struct_66)"
"(expand-context/outer-context"
" the-struct_66)"
" env57_0"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_66)"
"(expand-context/outer-scopes"
" the-struct_66)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_66)"
"(expand-context/outer-binding-layer"
" the-struct_66)"
"(expand-context/outer-reference-records"
" the-struct_66)"
"(expand-context/outer-only-immediate?"
" the-struct_66)"
"(expand-context/outer-need-eventually-defined"
" the-struct_66)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_66)"
"(expand-context/outer-name"
" the-struct_66)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                      \"expand-context/outer?\""
" the-struct_66)))))"
"((temp55_1) 'expression)"
"((intdef56_0) intdef_0))"
"(make-local-expand-context37.1"
" temp55_1"
" intdef56_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp54_1)))))"
"(begin"
"(let-values(((obs_20)(expand-context-observer ctx_43)))"
"(if obs_20"
"(let-values()"
"(let-values()(call-expand-observe obs_20 'exit-bind)))"
"(void)))"
" vals_6))))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_11) ids_25))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_11)))"
"((letrec-values(((for-loop_7)"
"(lambda(fold-var_176 lst_12)"
"(begin"
" 'for-loop"
"(if(pair? lst_12)"
"(let-values(((id_68)(unsafe-car lst_12))"
"((rest_2)(unsafe-cdr lst_12)))"
"(let-values(((fold-var_238)"
"(let-values(((fold-var_35)"
" fold-var_176))"
"(let-values(((fold-var_239)"
"(let-values()"
"(cons"
"(let-values()"
" variable)"
" fold-var_35))))"
"(values fold-var_239)))))"
"(if(not #f)"
"(for-loop_7 fold-var_238 rest_2)"
" fold-var_238)))"
" fold-var_176)))))"
" for-loop_7)"
" null"
" lst_11))))))))"
"(let-values(((env-mixins_0)(internal-definition-context-env-mixins intdef_0)))"
"(begin"
"(set-box!"
" env-mixins_0"
"(append"
"(reverse$1"
"(let-values(((lst_135) intdef-ids_0)((lst_289) syms_21)((lst_98) vals_5))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_135)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_289)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_98)))"
"((letrec-values(((for-loop_113)"
"(lambda(fold-var_38 lst_99 lst_14 lst_290)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_99)"
"(if(pair? lst_14)(pair? lst_290) #f)"
" #f)"
"(let-values(((intdef-id_1)(unsafe-car lst_99))"
"((rest_160)(unsafe-cdr lst_99))"
"((sym_64)(unsafe-car lst_14))"
"((rest_161)(unsafe-cdr lst_14))"
"((val_9)(unsafe-car lst_290))"
"((rest_162)(unsafe-cdr lst_290)))"
"(let-values(((fold-var_240)"
"(let-values(((fold-var_241)"
" fold-var_38))"
"(let-values(((fold-var_179)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_9"
" intdef-id_1"
" phase_110"
" ctx_43)"
"(env-mixin2.1"
" intdef-id_1"
" sym_64"
" val_9"
"(make-weak-hasheq))))"
" fold-var_241))))"
"(values fold-var_179)))))"
"(if(not #f)"
"(for-loop_113"
" fold-var_240"
" rest_160"
" rest_161"
" rest_162)"
" fold-var_240)))"
" fold-var_38)))))"
" for-loop_113)"
" null"
" lst_135"
" lst_289"
" lst_98))))"
"(unbox env-mixins_0)))"
"(let-values(((obs_33)(expand-context-observer ctx_43)))"
"(if obs_33"
"(let-values()(let-values()(call-expand-observe obs_33 'exit-local-bind)))"
"(void)))))))))))))))))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_1)"
"(begin"
" 'internal-definition-context-binding-identifiers"
"(begin"
"(if(1/internal-definition-context? intdef_1)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"             \"internal-definition-context?\""
" intdef_1)))"
"(reverse$1"
"(let-values(((lst_280)(unbox(internal-definition-context-env-mixins intdef_1))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_280)))"
"((letrec-values(((for-loop_240)"
"(lambda(fold-var_181 lst_281)"
"(begin"
" 'for-loop"
"(if(pair? lst_281)"
"(let-values(((env-mixin_0)(unsafe-car lst_281))"
"((rest_154)(unsafe-cdr lst_281)))"
"(let-values(((fold-var_229)"
"(let-values(((fold-var_230) fold-var_181))"
"(let-values(((fold-var_231)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_0))"
" fold-var_230))))"
"(values fold-var_231)))))"
"(if(not #f)(for-loop_240 fold-var_229 rest_154) fold-var_229)))"
" fold-var_181)))))"
" for-loop_240)"
" null"
" lst_280))))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce13_0)"
"(lambda(intdef11_0 s12_1 mode9_0 mode10_0)"
"(begin"
" 'internal-definition-context-introduce13"
"(let-values(((intdef_2) intdef11_0))"
"(let-values(((s_404) s12_1))"
"(let-values(((mode_12)(if mode10_0 mode9_0 'flip)))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_2)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                   \"internal-definition-context?\""
" intdef_2)))"
"(if(syntax?$1 s_404)"
"(void)"
"(let-values()"
"                                  (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_404)))"
"(let-values(((temp61_1)"
"(let-values(((tmp_32) mode_12))"
"(if(equal? tmp_32 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_32 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_32 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 1/internal-definition-context-introduce"
"                                                       \"(or/c 'add 'remove 'flip)\""
" mode_12))))))))"
"(add-intdef-scopes21.1 temp61_1 #t #f #f s_404 intdef_2)))))))))))"
"(case-lambda"
"((intdef_3 s_405)"
"(begin 'internal-definition-context-introduce(internal-definition-context-introduce13_0 intdef_3 s_405 #f #f)))"
"((intdef_4 s_59 mode9_1)(internal-definition-context-introduce13_0 intdef_4 s_59 mode9_1 #t)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_5)"
"(begin"
" 'internal-definition-context-seal"
"(begin"
"(if(1/internal-definition-context? intdef_5)"
"(void)"
"(let-values()"
"            (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_5)))"
"(void)))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_69 intdef_6)"
"(begin"
" 'identifier-remove-from-definition-context"
"(begin"
"(if(identifier? id_69)"
"(void)"
"          (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_69)))"
"(if(let-values(((or-part_275)(1/internal-definition-context? intdef_6)))"
"(if or-part_275 or-part_275(if(list? intdef_6)(andmap2 1/internal-definition-context? intdef_6) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"             \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_6)))"
"(let-values(((x_76)"
"(let-values(((a_45) intdef_6))"
"(if(list? a_45)"
"(let-values()(reverse$1 a_45))"
"(if(not a_45)(let-values() null)(let-values()(list a_45)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_243)"
"(lambda(id_70 a_46)"
"(begin"
" 'for-loop"
"(if(pair? a_46)"
"(let-values(((intdef_7)(car a_46)))"
"(let-values(((id_71)"
"(let-values(((id_72) id_70))"
"(let-values(((id_73)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_7"
" id_72"
" 'remove))))"
"(values id_73)))))"
"(if(not #f)(for-loop_243 id_71(cdr a_46)) id_71)))"
" id_70)))))"
" for-loop_243)"
" id_69"
" x_76)))))))"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_11 intdefs_0)"
"(begin"
"(let-values(((x_77)"
"(let-values(((a_47) intdefs_0))"
"(if(list? a_47)"
"(let-values()(reverse$1 a_47))"
"(if(not a_47)(let-values() null)(let-values()(list a_47)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_89)"
"(lambda(env_12 a_48)"
"(begin"
" 'for-loop"
"(if(pair? a_48)"
"(let-values(((intdef_8)(car a_48)))"
"(let-values(((env_13)"
"(let-values(((env_14) env_12))"
"(let-values(((env_15)"
"(let-values()"
"(let-values(((env-mixins_1)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_8))))"
"((letrec-values(((loop_95)"
"(lambda(env_16 env-mixins_2)"
"(begin"
" 'loop"
"(if(null? env-mixins_2)"
"(let-values() env_16)"
"(let-values()"
"(let-values(((env-mixin_1)"
"(car"
" env-mixins_2)))"
"(let-values(((or-part_206)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_1)"
" env_16"
" #f)))"
"(if or-part_206"
" or-part_206"
"(let-values(((new-env_0)"
"(env-extend"
"(loop_95"
" env_16"
"(cdr"
" env-mixins_2))"
"(env-mixin-sym"
" env-mixin_1)"
"(env-mixin-value"
" env-mixin_1))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_1)"
" env_16"
" new-env_0)"
" new-env_0)))))))))))"
" loop_95)"
" env_14"
" env-mixins_1)))))"
"(values env_15)))))"
"(if(not #f)(for-loop_89 env_13(cdr a_48)) env_13)))"
" env_12)))))"
" for-loop_89)"
" env_11"
" x_77))))))"
"(define-values"
"(add-intdef-scopes21.1)"
"(lambda(action16_0 action18_0 always?15_0 always?17_0 s19_0 intdefs20_0)"
"(begin"
" 'add-intdef-scopes21"
"(let-values(((s_406) s19_0))"
"(let-values(((intdefs_1) intdefs20_0))"
"(let-values(((always?_0)(if always?17_0 always?15_0 #f)))"
"(let-values(((action_0)(if action18_0 action16_0 add-scope)))"
"(let-values()"
"(let-values(((x_78)"
"(let-values(((a_49) intdefs_1))"
"(if(list? a_49)"
"(let-values()(reverse$1 a_49))"
"(if(not a_49)(let-values() null)(let-values()(list a_49)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_244)"
"(lambda(s_407 a_50)"
"(begin"
" 'for-loop"
"(if(pair? a_50)"
"(let-values(((intdef_9)(car a_50)))"
"(let-values(((s_408)"
"(let-values(((s_152) s_407))"
"(if(let-values(((or-part_276) always?_0))"
"(if or-part_276"
" or-part_276"
"(internal-definition-context-add-scope?"
" intdef_9)))"
"(let-values(((s_90) s_152))"
"(let-values(((s_409)"
"(let-values()"
"(action_0"
" s_90"
"(internal-definition-context-scope"
" intdef_9)))))"
"(values s_409)))"
" s_152))))"
"(if(not #f)(for-loop_244 s_408(cdr a_50)) s_408)))"
" s_407)))))"
" for-loop_244)"
" s_406"
" x_78)))))))))))"
"(define-values"
"(make-local-expand-context37.1)"
"(lambda(context24_0"
" intdefs26_0"
" phase25_0"
" phase31_0"
" stop-ids27_0"
" stop-ids33_0"
" to-parsed-ok?28_0"
" to-parsed-ok?34_0"
" track-to-be-defined?29_0"
" track-to-be-defined?35_0"
" ctx36_0)"
"(begin"
" 'make-local-expand-context37"
"(let-values(((ctx_44) ctx36_0))"
"(let-values(((context_9) context24_0))"
"(let-values(((phase_111)(if phase31_0 phase25_0(expand-context-phase ctx_44))))"
"(let-values(((intdefs_2) intdefs26_0))"
"(let-values(((stop-ids_1)(if stop-ids33_0 stop-ids27_0 #f)))"
"(let-values(((to-parsed-ok?_0)(if to-parsed-ok?34_0 to-parsed-ok?28_0 #f)))"
"(let-values(((track-to-be-defined?_0)(if track-to-be-defined?35_0 track-to-be-defined?29_0 #f)))"
"(let-values()"
"(let-values(((same-kind?_0)"
"(let-values(((or-part_277)(eq? context_9(expand-context-context ctx_44))))"
"(if or-part_277"
" or-part_277"
"(if(list? context_9)(list?(expand-context-context ctx_44)) #f)))))"
"(let-values(((all-stop-ids_0)"
"(if stop-ids_1(stop-ids->all-stop-ids stop-ids_1 phase_111) #f)))"
"(let-values(((def-ctx-scopes_5)"
"(if(expand-context-def-ctx-scopes ctx_44)"
"(unbox(expand-context-def-ctx-scopes ctx_44))"
" null)))"
"(let-values(((v_188) ctx_44))"
"(let-values(((the-struct_67) v_188))"
"(if(expand-context/outer? the-struct_67)"
"(let-values(((context62_0) context_9)"
"((env63_0)(add-intdef-bindings(expand-context-env ctx_44) intdefs_2))"
"((use-site-scopes64_0)"
"(if(let-values(((or-part_163)(eq? context_9 'module)))"
"(if or-part_163"
" or-part_163"
"(let-values(((or-part_278)(eq? context_9 'module-begin)))"
"(if or-part_278 or-part_278(list? context_9)))))"
"(let-values(((or-part_279)"
"(root-expand-context-use-site-scopes ctx_44)))"
"(if or-part_279 or-part_279(box null)))"
" #f))"
"((frame-id65_0)"
"(let-values(((x_3)"
"(let-values(((a_51) intdefs_2))"
"(if(list? a_51)"
"(let-values()(reverse$1 a_51))"
"(if(not a_51)"
"(let-values() null)"
"(let-values()(list a_51)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_245)"
"(lambda(frame-id_9 a_52)"
"(begin"
" 'for-loop"
"(if(pair? a_52)"
"(let-values(((intdef_10)(car a_52)))"
"(let-values(((frame-id_10)"
"(let-values(((frame-id_11)"
" frame-id_9))"
"(let-values(((frame-id_12)"
"(let-values()"
"(let-values(((i-frame-id_0)"
"(internal-definition-context-frame-id"
" intdef_10)))"
"(if(if frame-id_11"
"(if i-frame-id_0"
"(not"
"(eq?"
" frame-id_11"
" i-frame-id_0))"
" #f)"
" #f)"
"(let-values()"
" 'all)"
"(let-values()"
"(let-values(((or-part_280)"
" frame-id_11))"
"(if or-part_280"
" or-part_280"
" i-frame-id_0))))))))"
"(values frame-id_12)))))"
"(if(not #f)"
"(for-loop_245 frame-id_10(cdr a_52))"
" frame-id_10)))"
" frame-id_9)))))"
" for-loop_245)"
"(root-expand-context-frame-id ctx_44)"
" x_3))))"
"((post-expansion-scope66_0)"
"(if intdefs_2"
"(new-scope 'macro)"
"(if same-kind?_0"
"(if(memq context_9 '(module module-begin top-level))"
"(root-expand-context-post-expansion-scope ctx_44)"
" #f)"
" #f)))"
"((post-expansion-scope-action67_0)"
"(if intdefs_2"
"(lambda(s_111 placeholder-sc_0)"
"(begin"
" 'post-expansion-scope-action67"
"(let-values(((s73_1) s_111)((intdefs74_0) intdefs_2))"
"(add-intdef-scopes21.1 #f #f #f #f s73_1 intdefs74_0))))"
"(expand-context-post-expansion-scope-action ctx_44)))"
"((scopes68_0)(append def-ctx-scopes_5(expand-context-scopes ctx_44)))"
"((only-immediate?69_0)(not stop-ids_1))"
"((current-introduction-scopes70_0) null)"
"((need-eventually-defined71_0)"
"(let-values(((ht_133)(expand-context-need-eventually-defined ctx_44)))"
"(if track-to-be-defined?_0"
"(let-values() ht_133)"
"(if ht_133(let-values()(make-hasheqv))(let-values() #f)))))"
"((inner72_0)"
"(let-values(((the-struct_68)(root-expand-context/outer-inner v_188)))"
"(if(expand-context/inner? the-struct_68)"
"(let-values(((to-parsed?75_0)"
"(if to-parsed-ok?_0"
"(expand-context-to-parsed? ctx_44)"
" #f))"
"((just-once?76_0) #f)"
"((in-local-expand?77_0) #t)"
"((stops78_0)"
"(free-id-set"
" phase_111"
"(let-values(((or-part_281) all-stop-ids_0))"
"(if or-part_281 or-part_281 null)))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_68)"
"(root-expand-context/inner-top-level-bind-scope the-struct_68)"
"(root-expand-context/inner-all-scopes-stx the-struct_68)"
"(root-expand-context/inner-defined-syms the-struct_68)"
"(root-expand-context/inner-counter the-struct_68)"
"(root-expand-context/inner-lift-key the-struct_68)"
" to-parsed?75_0"
"(expand-context/inner-phase the-struct_68)"
"(expand-context/inner-namespace the-struct_68)"
" just-once?76_0"
"(expand-context/inner-module-begin-k the-struct_68)"
"(expand-context/inner-allow-unbound? the-struct_68)"
" in-local-expand?77_0"
" stops78_0"
"(expand-context/inner-declared-submodule-names the-struct_68)"
"(expand-context/inner-lifts the-struct_68)"
"(expand-context/inner-lift-envs the-struct_68)"
"(expand-context/inner-module-lifts the-struct_68)"
"(expand-context/inner-require-lifts the-struct_68)"
"(expand-context/inner-to-module-lifts the-struct_68)"
"(expand-context/inner-requires+provides the-struct_68)"
"(expand-context/inner-observer the-struct_68)"
"(expand-context/inner-for-serializable? the-struct_68)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_68)))"
"(raise-argument-error"
" 'struct-copy"
"                                                     \"expand-context/inner?\""
" the-struct_68)))))"
"(expand-context/outer1.1"
" inner72_0"
" post-expansion-scope66_0"
" use-site-scopes64_0"
" frame-id65_0"
" context62_0"
" env63_0"
" post-expansion-scope-action67_0"
" scopes68_0"
"(expand-context/outer-def-ctx-scopes the-struct_67)"
"(expand-context/outer-binding-layer the-struct_67)"
"(expand-context/outer-reference-records the-struct_67)"
" only-immediate?69_0"
" need-eventually-defined71_0"
" current-introduction-scopes70_0"
"(expand-context/outer-name the-struct_67)))"
"(raise-argument-error"
" 'struct-copy"
"                                   \"expand-context/outer?\""
" the-struct_67))))))))))))))))))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_410 ctx_45)(begin(flip-scopes s_410(expand-context-current-introduction-scopes ctx_45)))))"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()"
"(begin"
" 'syntax-transforming?"
"(if(let-values(((temp62_0) #t))(get-current-expand-context17.1 temp62_0 #t #f #f)) #t #f))))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(begin"
" 'syntax-transforming-with-lifts?"
"(let-values(((ctx_46)(let-values(((temp63_1) #t))(get-current-expand-context17.1 temp63_1 #t #f #f))))"
"(if ctx_46(if(expand-context-lifts ctx_46) #t #f) #f)))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(begin"
" 'syntax-transforming-module-expression?"
"(let-values(((ctx_12)(let-values(((temp64_1) #t))(get-current-expand-context17.1 temp64_1 #t #f #f))))"
"(if ctx_12(if(expand-context-to-module-lifts ctx_12) #t #f) #f)))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(begin"
" 'syntax-local-transforming-module-provides?"
"(let-values(((ctx_47)(let-values(((temp65_1) #t))(get-current-expand-context17.1 temp65_1 #t #f #f))))"
"(if ctx_47(if(expand-context-requires+provides ctx_47) #t #f) #f)))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(begin"
" 'syntax-local-context"
"(let-values(((ctx_13)"
"(let-values(((temp66_2) 'syntax-local-context))"
"(get-current-expand-context17.1 #f #f temp66_2 #t))))"
"(expand-context-context ctx_13)))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_411)"
"(begin"
" 'syntax-local-introduce"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_411)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_411)))"
"(values))))"
"(let-values(((ctx_48)"
"(let-values(((temp67_0) 'syntax-local-introduce))"
"(get-current-expand-context17.1 #f #f temp67_0 #t))))"
"(flip-introduction-scopes s_411 ctx_48))))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_3)"
"(begin"
" 'syntax-local-identifier-as-binding"
"(let-values((()"
"(begin"
"(if(identifier? id_3)"
"(void)"
"                        (let-values () (raise-argument-error 1/syntax-local-identifier-as-binding \"identifier?\" id_3)))"
"(values))))"
"(let-values(((ctx_49)"
"(let-values(((temp68_0) 'syntax-local-identifier-as-binding))"
"(get-current-expand-context17.1 #f #f temp68_0 #t))))"
"(remove-use-site-scopes id_3 ctx_49))))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(begin"
" 'syntax-local-phase-level"
"(let-values(((ctx_50)(let-values(((temp69_0) #t))(get-current-expand-context17.1 temp69_0 #t #f #f))))"
"(if ctx_50(expand-context-phase ctx_50) 0)))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(begin"
" 'syntax-local-name"
"(let-values(((ctx_14)"
"(let-values(((temp70_0) 'syntax-local-name))(get-current-expand-context17.1 #f #f temp70_0 #t))))"
"(let-values(((id_4)(expand-context-name ctx_14)))"
"(if id_4(datum->syntax$1 #f(syntax-e$1 id_4) id_4) #f))))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer3_0)"
"(lambda(as-use-site?1_0 as-use-site?2_0)"
"(begin"
" 'make-syntax-introducer3"
"(let-values(((as-use-site?_0)(if as-use-site?2_0 as-use-site?1_0 #f)))"
"(let-values()"
"(let-values(((sc_28)(new-scope(if as-use-site?_0 'use-site 'macro))))"
"(let-values(((core74_0)"
"(lambda(s73_2 mode71_0 mode72_0)"
"(begin"
" 'core74"
"(let-values(((s_175) s73_2))"
"(let-values(((mode_13)(if mode72_0 mode71_0 'flip)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_175)"
"(void)"
"(let-values()"
"                                                        (raise-argument-error 'syntax-introducer \"syntax?\" s_175)))"
"(let-values(((tmp_33) mode_13))"
"(if(equal? tmp_33 'add)"
"(let-values()(add-scope s_175 sc_28))"
"(if(equal? tmp_33 'remove)"
"(let-values()(remove-scope s_175 sc_28))"
"(if(equal? tmp_33 'flip)"
"(let-values()(flip-scope s_175 sc_28))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                               \"(or/c 'add 'remove 'flip)\""
" mode_13))))))))))))))"
"(case-lambda"
"((s_6)(core74_0 s_6 #f #f))"
"((s_75 mode71_1)(core74_0 s_75 mode71_1 #t)))))))))))"
"(case-lambda"
"(()(begin 'make-syntax-introducer(make-syntax-introducer3_0 #f #f)))"
"((as-use-site?1_1)(make-syntax-introducer3_0 as-use-site?1_1 #t)))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer9_0)"
"(lambda(ext-s7_0 base-s8_0 phase5_0 phase6_1)"
"(begin"
" 'make-syntax-delta-introducer9"
"(let-values(((ext-s_0) ext-s7_0))"
"(let-values(((base-s_0) base-s8_0))"
"(let-values(((phase_112)(if phase6_1 phase5_0(1/syntax-local-phase-level))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_0)"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'make-syntax-delta-introducer \"syntax?\" ext-s_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_166)(syntax?$1 base-s_0)))"
"(if or-part_166 or-part_166(not base-s_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                   \"(or/c syntax? #f)\""
" base-s_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_112)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_112)))"
"(values))))"
"(let-values(((ext-scs_0)(syntax-scope-set ext-s_0 phase_112)))"
"(let-values(((base-scs_0)"
"(syntax-scope-set"
"(let-values(((or-part_167) base-s_0))"
"(if or-part_167 or-part_167 empty-syntax))"
" phase_112)))"
"(let-values(((use-base-scs_0)"
"(if(subset? base-scs_0 ext-scs_0)"
" base-scs_0"
"(let-values(((or-part_168)"
"(if(identifier? base-s_0)"
"(let-values(((temp78_2) #t))"
"(resolve33.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp78_2"
" #t"
" base-s_0"
" phase_112))"
" #f)))"
"(if or-part_168 or-part_168(seteq))))))"
"(let-values(((delta-scs_0)"
"(set->list(set-subtract ext-scs_0 use-base-scs_0))))"
"(let-values(((maybe-taint_0)"
"(if(syntax-clean? ext-s_0) values syntax-taint$1)))"
"(let-values(((core82_0)"
"(lambda(s81_0 mode79_0 mode80_0)"
"(begin"
" 'core82"
"(let-values(((s_412) s81_0))"
"(let-values(((mode_14)(if mode80_0 mode79_0 'add)))"
"(let-values()"
"(maybe-taint_0"
"(let-values(((tmp_34) mode_14))"
"(if(equal? tmp_34 'add)"
"(let-values()(add-scopes s_412 delta-scs_0))"
"(if(equal? tmp_34 'remove)"
"(let-values()"
"(remove-scopes s_412 delta-scs_0))"
"(if(equal? tmp_34 'flip)"
"(let-values()"
"(flip-scopes s_412 delta-scs_0))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                                \"(or/c 'add 'remove 'flip)\""
" mode_14))))))))))))))"
"(case-lambda"
"((s_181)(core82_0 s_181 #f #f))"
"((s_399 mode79_1)(core82_0 s_399 mode79_1 #t))))))))))))))))))))"
"(case-lambda"
"((ext-s_1 base-s_1)(begin 'make-syntax-delta-introducer(make-syntax-delta-introducer9_0 ext-s_1 base-s_1 #f #f)))"
"((ext-s_2 base-s_2 phase5_1)(make-syntax-delta-introducer9_0 ext-s_2 base-s_2 phase5_1 #t)))))"
"(define-values"
"(do-syntax-local-value17.1)"
"(lambda(immediate?11_0 who13_0 id14_0 intdef15_0 failure-thunk16_0)"
"(begin"
" 'do-syntax-local-value17"
"(let-values(((who_15) who13_0))"
"(let-values(((id_74) id14_0))"
"(let-values(((intdef_11) intdef15_0))"
"(let-values(((failure-thunk_0) failure-thunk16_0))"
"(let-values(((immediate?_1) immediate?11_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_74)"
"(void)"
"                                    (let-values () (raise-argument-error who_15 \"identifier?\" id_74)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_73)(not failure-thunk_0)))"
"(if or-part_73"
" or-part_73"
"(if(procedure? failure-thunk_0)"
"(procedure-arity-includes? failure-thunk_0 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_15"
"                                         \"(or #f (procedure-arity-includes/c 0))\""
" failure-thunk_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_74)(not intdef_11)))"
"(if or-part_74 or-part_74(1/internal-definition-context? intdef_11)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_15"
"                                           \"(or #f internal-definition-context?)\""
" failure-thunk_0)))"
"(values))))"
"(let-values(((current-ctx_0)"
"(let-values(((who84_0) who_15))"
"(get-current-expand-context17.1 #f #f who84_0 #t))))"
"(let-values(((ctx_51)"
"(if intdef_11"
"(let-values(((v_189) current-ctx_0))"
"(let-values(((the-struct_8) v_189))"
"(if(expand-context/outer? the-struct_8)"
"(let-values(((env85_0)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_0)"
" intdef_11))"
"((inner86_0)(root-expand-context/outer-inner v_189)))"
"(expand-context/outer1.1"
" inner86_0"
"(root-expand-context/outer-post-expansion-scope the-struct_8)"
"(root-expand-context/outer-use-site-scopes the-struct_8)"
"(root-expand-context/outer-frame-id the-struct_8)"
"(expand-context/outer-context the-struct_8)"
" env85_0"
"(expand-context/outer-post-expansion-scope-action the-struct_8)"
"(expand-context/outer-scopes the-struct_8)"
"(expand-context/outer-def-ctx-scopes the-struct_8)"
"(expand-context/outer-binding-layer the-struct_8)"
"(expand-context/outer-reference-records the-struct_8)"
"(expand-context/outer-only-immediate? the-struct_8)"
"(expand-context/outer-need-eventually-defined the-struct_8)"
"(expand-context/outer-current-introduction-scopes the-struct_8)"
"(expand-context/outer-name the-struct_8)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_8))))"
" current-ctx_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_34)(expand-context-observer ctx_51)))"
"(if obs_34"
"(let-values()"
"(let-values()(call-expand-observe obs_34 'local-value id_74)))"
"(void)))"
"(values))))"
"(let-values(((phase_82)(expand-context-phase ctx_51)))"
"((letrec-values(((loop_96)"
"(lambda(id_75)"
"(begin"
" 'loop"
"(let-values(((b_20)"
"(if immediate?_1"
"(let-values(((temp89_2) #t))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp89_2"
" #t"
" #f"
" #f"
" id_75"
" phase_82))"
"(resolve+shift/extra-inspector"
" id_75"
" phase_82"
"(expand-context-namespace ctx_51)))))"
"(begin"
"(let-values(((obs_35)(expand-context-observer ctx_51)))"
"(if obs_35"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_35 'resolve id_75)))"
"(void)))"
"(if(not b_20)"
"(let-values()"
"(begin"
"(let-values(((obs_36)"
"(expand-context-observer ctx_51)))"
"(if obs_36"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_36"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_0"
"(failure-thunk_0)"
"(error"
" 'syntax-local-value"
"                                                                   \"unbound identifier: ~v\""
" id_75))))"
"(let-values()"
"(let-values(((v_190 primitive?_7 insp_17)"
"(let-values(((temp93_3) #t))"
"(lookup17.1"
" #f"
" #f"
" temp93_3"
" #t"
" b_20"
" ctx_51"
" id_75))))"
"(if(let-values(((or-part_282)(variable? v_190)))"
"(if or-part_282 or-part_282(core-form? v_190)))"
"(let-values()"
"(begin"
"(let-values(((obs_37)"
"(expand-context-observer ctx_51)))"
"(if obs_37"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_37"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_0"
"(failure-thunk_0)"
"(error"
" 'syntax-local-value"
"                                                                         \"identifier is not bound to syntax: ~v\""
" id_75))))"
"(let-values()"
"(begin"
"(let-values(((obs_38)"
"(expand-context-observer ctx_51)))"
"(if obs_38"
"(let-values()"
"(if(not"
"(if(1/rename-transformer? v_190)"
"(not immediate?_1)"
" #f))"
"(let-values()"
"(call-expand-observe"
" obs_38"
" 'local-value-result"
" #t))"
"(void)))"
"(void)))"
"(if(1/rename-transformer? v_190)"
"(let-values()"
"(if immediate?_1"
"(values"
" v_190"
"(1/rename-transformer-target v_190))"
"(loop_96"
"(1/rename-transformer-target v_190))))"
"(if immediate?_1"
"(let-values()(values v_190 #f))"
"(let-values() v_190)))))))))))))))"
" loop_96)"
"(flip-introduction-scopes id_74 ctx_51))))))))))))))))))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value25_0)"
"(lambda(id24_0 failure-thunk20_0 intdef21_0 failure-thunk22_0 intdef23_0)"
"(begin"
" 'syntax-local-value25"
"(let-values(((id_76) id24_0))"
"(let-values(((failure-thunk_1)(if failure-thunk22_0 failure-thunk20_0 #f)))"
"(let-values(((intdef_12)(if intdef23_0 intdef21_0 #f)))"
"(let-values()"
"(let-values(((temp94_2) 'syntax-local-value)"
"((temp95_1) #f)"
"((id96_0) id_76)"
"((intdef97_0) intdef_12)"
"((failure-thunk98_0) failure-thunk_1))"
"(do-syntax-local-value17.1 temp95_1 temp94_2 id96_0 intdef97_0 failure-thunk98_0))))))))))"
"(case-lambda"
"((id_77)(begin 'syntax-local-value(syntax-local-value25_0 id_77 #f #f #f #f)))"
"((id_78 failure-thunk_2 intdef21_1)(syntax-local-value25_0 id_78 failure-thunk_2 intdef21_1 #t #t))"
"((id_79 failure-thunk20_1)(syntax-local-value25_0 id_79 failure-thunk20_1 #f #t #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate32_0)"
"(lambda(id31_1 failure-thunk27_0 intdef28_0 failure-thunk29_0 intdef30_0)"
"(begin"
" 'syntax-local-value/immediate32"
"(let-values(((id_16) id31_1))"
"(let-values(((failure-thunk_3)(if failure-thunk29_0 failure-thunk27_0 #f)))"
"(let-values(((intdef_13)(if intdef30_0 intdef28_0 #f)))"
"(let-values()"
"(let-values(((temp99_1) 'syntax-local-value/immediate)"
"((temp100_0) #t)"
"((id101_1) id_16)"
"((intdef102_0) intdef_13)"
"((failure-thunk103_0) failure-thunk_3))"
"(do-syntax-local-value17.1"
" temp100_0"
" temp99_1"
" id101_1"
" intdef102_0"
" failure-thunk103_0))))))))))"
"(case-lambda"
"((id_80)(begin 'syntax-local-value/immediate(syntax-local-value/immediate32_0 id_80 #f #f #f #f)))"
"((id_81 failure-thunk_4 intdef28_1)(syntax-local-value/immediate32_0 id_81 failure-thunk_4 intdef28_1 #t #t))"
"((id_7 failure-thunk27_1)(syntax-local-value/immediate32_0 id_7 failure-thunk27_1 #f #t #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_16 n_28 s_413)"
"(begin"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_413) (void) (let-values () (raise-argument-error who_16 \"syntax?\" s_413)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_28)"
"(void)"
"                          (let-values () (raise-argument-error who_16 \"exact-nonnegative-integer?\" n_28)))"
"(values))))"
"(let-values(((ctx_24)(let-values(((who104_0) who_16))(get-current-expand-context17.1 #f #f who104_0 #t))))"
"(let-values(((lifts_8)(expand-context-lifts ctx_24)))"
"(let-values((()"
"(begin"
"                              (if lifts_8 (void) (let-values () (raise-arguments-error who_16 \"no lift target\")))"
"(values))))"
"(let-values(((counter_4)(root-expand-context-counter ctx_24)))"
"(let-values(((ids_26)"
"(reverse$1"
"(let-values(((start_40) 0)((end_29) n_28)((inc_23) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_40 end_29 inc_23)))"
"((letrec-values(((for-loop_246)"
"(lambda(fold-var_180 pos_102)"
"(begin"
" 'for-loop"
"(if(< pos_102 end_29)"
"(let-values()"
"(let-values(((fold-var_242)"
"(let-values(((fold-var_243) fold-var_180))"
"(let-values(((fold-var_229)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_4"
"(add1"
"(unbox"
" counter_4)))"
"(values))))"
"(let-values(((name_63)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                    \"lifted/~a\""
"(unbox"
" counter_4)))))"
"(add-scope"
"(datum->syntax$1"
" #f"
" name_63)"
"(new-scope"
" 'macro)))))"
" fold-var_243))))"
"(values fold-var_229)))))"
"(if(not #f)"
"(for-loop_246 fold-var_242(+ pos_102 inc_23))"
" fold-var_242)))"
" fold-var_180)))))"
" for-loop_246)"
" null"
" start_40))))))"
"(begin"
"(let-values(((obs_25)(expand-context-observer ctx_24)))"
"(if obs_25"
"(let-values()(let-values()(call-expand-observe obs_25 'local-lift ids_26 s_413)))"
"(void)))"
"(map2"
"(lambda(id_82)(flip-introduction-scopes id_82 ctx_24))"
"(add-lifted!"
" lifts_8"
" ids_26"
"(flip-introduction-scopes s_413 ctx_24)"
"(expand-context-phase ctx_24))))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_57)"
"(begin 'syntax-local-lift-expression(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_57)))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_29 s_414)"
"(begin"
" 'syntax-local-lift-values-expression"
"(do-lift-values-expression 'syntax-local-lift-values-expression n_29 s_414))))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(begin"
" 'syntax-local-lift-context"
"(let-values(((ctx_52)"
"(let-values(((temp105_0) 'syntax-local-lift-context))"
"(get-current-expand-context17.1 #f #f temp105_0 #t))))"
"(root-expand-context-lift-key ctx_52)))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_404)"
"(begin"
" 'syntax-local-lift-module"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_404)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_404)))"
"(values))))"
"(let-values(((ctx_53)"
"(let-values(((temp106_1) 'syntax-local-lift-module))"
"(get-current-expand-context17.1 #f #f temp106_1 #t))))"
"(let-values(((phase_113)(expand-context-phase ctx_53)))"
"(begin"
"(let-values(((tmp_35)(core-form-sym s_404 phase_113)))"
"(if(if(equal? tmp_35 'module) #t(equal? tmp_35 'module*))"
"(let-values()"
"(let-values(((lifts_0)(expand-context-module-lifts ctx_53)))"
"(begin"
"(if lifts_0"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                             \"not currently transforming within a module declaration or top level\""
"                             \"form to lift\""
" s_404)))"
"(add-lifted-module! lifts_0(flip-introduction-scopes s_404 ctx_53) phase_113))))"
"(let-values()"
"                    (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_404))))"
"(let-values(((obs_26)(expand-context-observer ctx_53)))"
"(if obs_26"
"(let-values()(let-values()(call-expand-observe obs_26 'lift-statement s_404)))"
"(void))))))))))"
"(define-values"
"(do-local-lift-to-module54.1)"
"(lambda(add-lifted!38_0"
" get-lift-ctx37_0"
" get-wrt-phase39_0"
" intro?35_0"
" intro?44_0"
" more-checks36_0"
" more-checks45_0"
" no-target-msg34_0"
" post-wrap42_0"
" post-wrap51_0"
" pre-wrap40_0"
" pre-wrap49_0"
" shift-wrap41_0"
" shift-wrap50_0"
" who52_0"
" s53_1)"
"(begin"
" 'do-local-lift-to-module54"
"(let-values(((who_17) who52_0))"
"(let-values(((s_64) s53_1))"
"(let-values(((no-target-msg_0) no-target-msg34_0))"
"(let-values(((intro?_0)(if intro?44_0 intro?35_0 #t)))"
"(let-values(((more-checks_0)(if more-checks45_0 more-checks36_0 void)))"
"(let-values(((get-lift-ctx_0) get-lift-ctx37_0))"
"(let-values(((add-lifted!_0) add-lifted!38_0))"
"(let-values(((get-wrt-phase_0) get-wrt-phase39_0))"
"(let-values(((pre-wrap_0)"
"(if pre-wrap49_0"
" pre-wrap40_0"
"(lambda(s_66 phase_114 lift-ctx_1)(begin 'pre-wrap s_66)))))"
"(let-values(((shift-wrap_0)"
"(if shift-wrap50_0"
" shift-wrap41_0"
"(lambda(s_415 phase_49 lift-ctx_2)(begin 'shift-wrap s_415)))))"
"(let-values(((post-wrap_0)"
"(if post-wrap51_0"
" post-wrap42_0"
"(lambda(s_406 phase_115 lift-ctx_3)(begin 'post-wrap s_406)))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_64)"
"(void)"
"                                                (let-values () (raise-argument-error who_17 \"syntax?\" s_64)))"
"(values))))"
"(let-values((()(begin(more-checks_0)(values))))"
"(let-values(((ctx_54)"
"(let-values(((who107_0) who_17))"
"(get-current-expand-context17.1 #f #f who107_0 #t))))"
"(let-values(((lift-ctx_4)(get-lift-ctx_0 ctx_54)))"
"(let-values((()"
"(begin"
"(if lift-ctx_4"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_17"
" no-target-msg_0"
"                                                           \"form to lift\""
" s_64)))"
"(values))))"
"(let-values(((phase_116)(expand-context-phase ctx_54)))"
"(let-values(((wrt-phase_1)(get-wrt-phase_0 lift-ctx_4)))"
"(let-values(((added-s_0)"
"(if intro?_0(flip-introduction-scopes s_64 ctx_54) s_64)))"
"(let-values(((pre-s_0)(pre-wrap_0 added-s_0 phase_116 lift-ctx_4)))"
"(let-values(((shift-s_0)"
"(let-values(((start_41) phase_116)"
"((end_30) wrt-phase_1)"
"((inc_24) -1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range start_41 end_30 inc_24)))"
"((letrec-values(((for-loop_173)"
"(lambda(s_416 pos_103)"
"(begin"
" 'for-loop"
"(if(> pos_103 end_30)"
"(let-values(((phase_117)"
" pos_103))"
"(let-values(((s_206)"
"(let-values(((s_39)"
" s_416))"
"(let-values(((s_417)"
"(let-values()"
"(shift-wrap_0"
" s_39"
"(sub1"
" phase_117)"
" lift-ctx_4))))"
"(values"
" s_417)))))"
"(if(not #f)"
"(for-loop_173"
" s_206"
"(+ pos_103 inc_24))"
" s_206)))"
" s_416)))))"
" for-loop_173)"
" pre-s_0"
" start_41)))))"
"(let-values(((post-s_1)"
"(post-wrap_0 shift-s_0 wrt-phase_1 lift-ctx_4)))"
"(begin"
"(add-lifted!_0 lift-ctx_4 post-s_1 wrt-phase_1)"
"(values ctx_54 post-s_1))))))))))))))))))))))))))))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_418 use-s_1)"
"(begin"
" 'syntax-local-lift-require"
"(let-values(((sc_29)(new-scope 'macro)))"
"(let-values(((ctx_55 added-s_1)"
"(let-values(((temp108_0) 'syntax-local-lift-require)"
"((temp109_0)(datum->syntax$1 #f s_418))"
"                                   ((temp110_1) \"could not find target context\")"
"((temp111_1) #f)"
"((temp112_0)"
"(lambda()"
"(if(syntax?$1 use-s_1)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_1)))))"
"((expand-context-require-lifts113_0) expand-context-require-lifts)"
"((require-lift-context-wrt-phase114_0) require-lift-context-wrt-phase)"
"((add-lifted-require!115_0) add-lifted-require!)"
"((temp116_0)"
"(lambda(s_109 phase_118 require-lift-ctx_0)(require-spec-shift-for-syntax s_109)))"
"((temp117_1)"
"(lambda(s_419 phase_119 require-lift-ctx_1)"
"(wrap-form '#%require(add-scope s_419 sc_29) phase_119))))"
"(do-local-lift-to-module54.1"
" add-lifted-require!115_0"
" expand-context-require-lifts113_0"
" require-lift-context-wrt-phase114_0"
" temp111_1"
" #t"
" temp112_0"
" #t"
" temp110_1"
" temp117_1"
" #t"
" #f"
" #f"
" temp116_0"
" #t"
" temp108_0"
" temp109_0))))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
"(expand-context-namespace ctx_55)"
"(expand-context-phase ctx_55))"
"(values))))"
"(let-values(((result-s_6)(add-scope use-s_1 sc_29)))"
"(begin"
"(let-values(((obs_39)(expand-context-observer ctx_55)))"
"(if obs_39"
"(let-values()"
"(let-values()(call-expand-observe obs_39 'lift-require added-s_1 use-s_1 result-s_6)))"
"(void)))"
" result-s_6))))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_215)"
"(begin"
" 'syntax-local-lift-provide"
"(let-values(((ctx_56 result-s_7)"
"(let-values(((temp118_1) 'syntax-local-lift-provide)"
"((s119_0) s_215)"
"                                 ((temp120_0) \"not expanding in a module run-time body\")"
"((expand-context-to-module-lifts121_0) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase122_0) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!123_0) add-lifted-to-module-provide!)"
"((temp124_1)"
"(lambda(s_420 phase_120 to-module-lift-ctx_0)(wrap-form 'for-syntax s_420 #f)))"
"((temp125_0)"
"(lambda(s_113 phase_121 to-module-lift-ctx_1)"
"(wrap-form '#%provide s_113 phase_121))))"
"(do-local-lift-to-module54.1"
" add-lifted-to-module-provide!123_0"
" expand-context-to-module-lifts121_0"
" to-module-lift-context-wrt-phase122_0"
" #f"
" #f"
" #f"
" #f"
" temp120_0"
" temp125_0"
" #t"
" #f"
" #f"
" temp124_1"
" #t"
" temp118_1"
" s119_0))))"
"(let-values(((obs_40)(expand-context-observer ctx_56)))"
"(if obs_40(let-values()(let-values()(call-expand-observe obs_40 'lift-provide result-s_7)))(void)))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_421)"
"(begin"
" 'syntax-local-lift-module-end-declaration"
"(let-values(((ctx_57 also-s_0)"
"(let-values(((temp126_1) 'syntax-local-lift-module-end-declaration)"
"((s127_0) s_421)"
"                                 ((temp128_1) \"not currently transforming an expression within a module declaration\")"
"((expand-context-to-module-lifts129_0) expand-context-to-module-lifts)"
"((temp130_0)(lambda(lift-ctx_5) 0))"
"((add-lifted-to-module-end!131_0) add-lifted-to-module-end!)"
"((temp132_0)"
"(lambda(orig-s_33 phase_122 to-module-lift-ctx_2)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_2)"
"(wrap-form '#%expression orig-s_33 phase_122)"
" orig-s_33)))"
"((temp133_0)"
"(lambda(s_221 phase_123 to-module-lift-ctx_3)"
"(wrap-form 'begin-for-syntax s_221 phase_123))))"
"(do-local-lift-to-module54.1"
" add-lifted-to-module-end!131_0"
" expand-context-to-module-lifts129_0"
" temp130_0"
" #f"
" #f"
" #f"
" #f"
" temp128_1"
" #f"
" #f"
" temp132_0"
" #t"
" temp133_0"
" #t"
" temp126_1"
" s127_0))))"
"(let-values(((obs_41)(expand-context-observer ctx_57)))"
"(if obs_41(let-values()(let-values()(call-expand-observe obs_41 'lift-statement s_421)))(void)))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_65 s_119 phase_124)"
"(begin"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_124(syntax-shift-phase-level$1 core-stx phase_124) #f) sym_65) s_119)))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(begin"
" 'syntax-local-module-defined-identifiers"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                           \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_58)"
"(let-values(((temp134_0) 'syntax-local-module-defined-identifiers))"
"(get-current-expand-context17.1 #f #f temp134_0 #t))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_58))))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_8 phase-level_20)"
"(begin"
" 'syntax-local-module-required-identifiers"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_184)(not mod-path_8)))"
"(if or-part_184 or-part_184(1/module-path? mod-path_8)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                           \"(or/c module-path? #f)\""
" mod-path_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_177)(eq? phase-level_20 #t)))"
"(if or-part_177 or-part_177(phase? phase-level_20)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                             (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_20)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                               \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_59)"
"(let-values(((temp135_0) 'syntax-local-module-required-identifiers))"
"(get-current-expand-context17.1 #f #f temp135_0 #t))))"
"(let-values(((requires+provides_5)(expand-context-requires+provides ctx_59)))"
"(let-values(((mpi_43)(if mod-path_8(module-path->mpi/context mod-path_8 ctx_59) #f)))"
"(let-values(((requireds_0)"
"(extract-all-module-requires"
" requires+provides_5"
" mpi_43"
"(if(eq? phase-level_20 #t) 'all phase-level_20))))"
"(if requireds_0"
"(reverse$1"
"(let-values(((ht_134)(requireds->phase-ht requireds_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_134)))"
"((letrec-values(((for-loop_247)"
"(lambda(fold-var_244 i_165)"
"(begin"
" 'for-loop"
"(if i_165"
"(let-values(((phase_125 ids_27)"
"(hash-iterate-key+value ht_134 i_165)))"
"(let-values(((fold-var_245)"
"(let-values(((fold-var_246) fold-var_244))"
"(let-values(((fold-var_247)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_125 ids_27))"
" fold-var_246))))"
"(values fold-var_247)))))"
"(if(not #f)"
"(for-loop_247 fold-var_245(hash-iterate-next ht_134 i_165))"
" fold-var_245)))"
" fold-var_244)))))"
" for-loop_247)"
" null"
"(hash-iterate-first ht_134)))))"
" #f)))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_1)"
"(begin"
"(let-values(((lst_291) requireds_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_291)))"
"((letrec-values(((for-loop_248)"
"(lambda(ht_135 lst_292)"
"(begin"
" 'for-loop"
"(if(pair? lst_292)"
"(let-values(((r_44)(unsafe-car lst_292))((rest_163)(unsafe-cdr lst_292)))"
"(let-values(((ht_136)"
"(let-values(((ht_137) ht_135))"
"(let-values(((ht_138)"
"(let-values()"
"(hash-update"
" ht_137"
"(required-phase r_44)"
"(lambda(l_71)(cons(required-id r_44) l_71))"
" null))))"
"(values ht_138)))))"
"(if(not #f)(for-loop_248 ht_136 rest_163) ht_136)))"
" ht_135)))))"
" for-loop_248)"
"(hasheqv)"
" lst_291))))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_9)"
"(begin"
" 'syntax-local-module-exports"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_283)(1/module-path? mod-path_9)))"
"(if or-part_283"
" or-part_283"
"(if(syntax?$1 mod-path_9)(1/module-path?(syntax->datum$1 mod-path_9)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                            \"(or/c module-path?\\n\""
"                            \"      (and/c syntax?\\n\""
"                            \"             (lambda (stx)\\n\""
"                            \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_9)))"
"(values))))"
"(let-values(((ctx_60)"
"(let-values(((temp136_0) 'syntax-local-module-exports))"
"(get-current-expand-context17.1 #f #f temp136_0 #t))))"
"(let-values(((ns_75)(expand-context-namespace ctx_60)))"
"(let-values(((mod-name_18)"
"(1/module-path-index-resolve"
"(module-path->mpi/context"
"(if(syntax?$1 mod-path_9)(syntax->datum$1 mod-path_9) mod-path_9)"
" ctx_60)"
" #t)))"
"(let-values(((m_19)(namespace->module ns_75 mod-name_18)))"
"(begin"
"(if m_19(void)(let-values()(raise-unknown-module-error 'syntax-local-module-exports mod-name_18)))"
"(reverse$1"
"(let-values(((ht_139)(module-provides m_19)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_139)))"
"((letrec-values(((for-loop_130)"
"(lambda(fold-var_248 i_8)"
"(begin"
" 'for-loop"
"(if i_8"
"(let-values(((phase_126 syms_22)(hash-iterate-key+value ht_139 i_8)))"
"(let-values(((fold-var_249)"
"(let-values(((fold-var_250) fold-var_248))"
"(let-values(((fold-var_251)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_126"
"(reverse$1"
"(let-values(((ht_140) syms_22))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-keys"
" ht_140)))"
"((letrec-values(((for-loop_249)"
"(lambda(fold-var_252"
" i_166)"
"(begin"
" 'for-loop"
"(if i_166"
"(let-values(((sym_66)"
"(hash-iterate-key"
" ht_140"
" i_166)))"
"(let-values(((fold-var_201)"
"(let-values(((fold-var_202)"
" fold-var_252))"
"(let-values(((fold-var_253)"
"(let-values()"
"(cons"
"(let-values()"
" sym_66)"
" fold-var_202))))"
"(values"
" fold-var_253)))))"
"(if(not"
" #f)"
"(for-loop_249"
" fold-var_201"
"(hash-iterate-next"
" ht_140"
" i_166))"
" fold-var_201)))"
" fold-var_252)))))"
" for-loop_249)"
" null"
"(hash-iterate-first"
" ht_140)))))))"
" fold-var_250))))"
"(values fold-var_251)))))"
"(if(not #f)"
"(for-loop_130 fold-var_249(hash-iterate-next ht_139 i_8))"
" fold-var_249)))"
" fold-var_248)))))"
" for-loop_130)"
" null"
"(hash-iterate-first ht_139))))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(begin"
" 'syntax-local-submodules"
"(let-values(((ctx_61)"
"(let-values(((temp137_1) 'syntax-local-submodules))"
"(get-current-expand-context17.1 #f #f temp137_1 #t))))"
"(let-values(((submods_3)(expand-context-declared-submodule-names ctx_61)))"
"(reverse$1"
"(let-values(((ht_141) submods_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_141)))"
"((letrec-values(((for-loop_250)"
"(lambda(fold-var_254 i_167)"
"(begin"
" 'for-loop"
"(if i_167"
"(let-values(((name_64 kind_8)(hash-iterate-key+value ht_141 i_167)))"
"(let-values(((fold-var_255)"
"(let-values(((fold-var_256) fold-var_254))"
"(if(eq? kind_8 'module)"
"(let-values(((fold-var_257) fold-var_256))"
"(let-values(((fold-var_204)"
"(let-values()"
"(cons"
"(let-values() name_64)"
" fold-var_257))))"
"(values fold-var_204)))"
" fold-var_256))))"
"(if(not #f)"
"(for-loop_250 fold-var_255(hash-iterate-next ht_141 i_167))"
" fold-var_255)))"
" fold-var_254)))))"
" for-loop_250)"
" null"
"(hash-iterate-first ht_141))))))))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower60_0)"
"(lambda(id59_0 only-generated?57_0 only-generated?58_0)"
"(begin"
" 'syntax-local-get-shadower60"
"(let-values(((id_83) id59_0))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_83)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'syntax-local-get-shadower \"identifier?\" id_83)))"
"(values))))"
"(let-values(((ctx_62)"
"(let-values(((temp138_1) 'syntax-local-get-shadower))"
"(get-current-expand-context17.1 #f #f temp138_1 #t))))"
"(let-values(((new-id_0)(add-scopes id_83(expand-context-scopes ctx_62))))"
"(if(syntax-clean? id_83) new-id_0(syntax-taint$1 new-id_0))))))))))))"
"(case-lambda"
"((id_84)(begin 'syntax-local-get-shadower(syntax-local-get-shadower60_0 id_84 #f #f)))"
"((id_85 only-generated?57_1)(syntax-local-get-shadower60_0 id_85 only-generated?57_1 #t)))))"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_0 srcloc-accessor_0)"
"(begin"
"(lambda(s_158)"
"(let-values((()"
"(begin"
"                        (if (syntax?$1 s_158) (void) (let-values () (raise-argument-error who_0 \"syntax?\" s_158)))"
"(values))))"
"(let-values(((srcloc_7)(syntax-srcloc s_158)))(if srcloc_7(srcloc-accessor_0 srcloc_7) #f)))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_66)"
"(begin"
"(let-values(((or-part_26)(if(list? v_66)(if(=(length v_66) 5)(srcloc-vector?(list->vector v_66)) #f) #f)))"
"(if or-part_26 or-part_26(if(vector? v_66)(if(=(vector-length v_66) 5)(srcloc-vector? v_66) #f) #f))))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_68)"
"(begin"
"(if(let-values(((or-part_284)(not(vector-ref v_68 1))))"
"(if or-part_284 or-part_284(exact-positive-integer?(vector-ref v_68 1))))"
"(if(let-values(((or-part_27)(not(vector-ref v_68 2))))"
"(if or-part_27 or-part_27(exact-nonnegative-integer?(vector-ref v_68 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_68 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_68 3))))"
"(let-values(((or-part_159)(not(vector-ref v_68 4))))"
"(if or-part_159 or-part_159(exact-nonnegative-integer?(vector-ref v_68 4))))"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_191)"
"(begin"
"(if(srcloc? v_191)"
"(let-values()"
"(let-values(((the-struct_69) empty-syntax))"
"(if(syntax?$1 the-struct_69)"
"(let-values(((srcloc1_2) v_191))"
"(syntax1.1"
"(syntax-content the-struct_69)"
"(syntax-scopes the-struct_69)"
"(syntax-shifted-multi-scopes the-struct_69)"
"(syntax-scope-propagations+tamper the-struct_69)"
"(syntax-mpi-shifts the-struct_69)"
" srcloc1_2"
"(syntax-props the-struct_69)"
"(syntax-inspector the-struct_69)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_69))))"
"(if(pair? v_191)"
"(let-values()(to-srcloc-stx(list->vector v_191)))"
"(if(vector? v_191)"
"(let-values()"
"(let-values(((the-struct_29) empty-syntax))"
"(if(syntax?$1 the-struct_29)"
"(let-values(((srcloc2_1)"
"(srcloc"
"(vector-ref v_191 0)"
"(vector-ref v_191 1)"
"(vector-ref v_191 2)"
"(vector-ref v_191 3)"
"(vector-ref v_191 4))))"
"(syntax1.1"
"(syntax-content the-struct_29)"
"(syntax-scopes the-struct_29)"
"(syntax-shifted-multi-scopes the-struct_29)"
"(syntax-scope-propagations+tamper the-struct_29)"
"(syntax-mpi-shifts the-struct_29)"
" srcloc2_1"
"(syntax-props the-struct_29)"
"(syntax-inspector the-struct_29)))"
"                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_29))))"
"(let-values() v_191)))))))"
"(define-values"
"(1/syntax-e)"
"(lambda(s_0)"
"(begin"
" 'syntax-e"
"(begin"
"        (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_0)))"
"(syntax-e$1 s_0)))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_157)"
"(begin"
" 'syntax->datum"
"(begin"
"        (if (syntax?$1 s_157) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_157)))"
"(syntax->datum$1 s_157)))))"
"(define-values(maybe-syntax->datum)(lambda(s_158)(begin(if(syntax?$1 s_158)(syntax->datum$1 s_158) s_158))))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax9_0)"
"(lambda(stx-c7_0 s8_0 stx-l1_0 stx-p2_0 ignored3_0 stx-l4_1 stx-p5_1 ignored6_0)"
"(begin"
" 'datum->syntax9"
"(let-values(((stx-c_4) stx-c7_0))"
"(let-values(((s_422) s8_0))"
"(let-values(((stx-l_2)(if stx-l4_1 stx-l1_0 #f)))"
"(let-values(((stx-p_1)(if stx-p5_1 stx-p2_0 #f)))"
"(let-values()"
"(let-values()"
"(begin"
"(if(let-values(((or-part_6)(not stx-c_4)))"
"(if or-part_6 or-part_6(syntax?$1 stx-c_4)))"
"(void)"
"                                    (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_4)))"
"(if(let-values(((or-part_285)(not stx-l_2)))"
"(if or-part_285"
" or-part_285"
"(let-values(((or-part_28)(syntax?$1 stx-l_2)))"
"(if or-part_28 or-part_28(encoded-srcloc? stx-l_2)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                        \"(or #f syntax?\\n\""
"                                        \"       (list/c any/c\\n\""
"                                        \"               (or/c exact-positive-integer? #f)\\n\""
"                                        \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                        \"               (or/c exact-positive-integer? #f)\\n\""
"                                        \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                        \"       (vector/c any/c\\n\""
"                                        \"                 (or/c exact-positive-integer? #f)\\n\""
"                                        \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                        \"                 (or/c exact-positive-integer? #f)\\n\""
"                                        \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_2)))"
"(if(let-values(((or-part_286)(not stx-p_1)))"
"(if or-part_286 or-part_286(syntax?$1 stx-p_1)))"
"(void)"
"                                    (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_1)))"
"(datum->syntax$1 stx-c_4 s_422(to-srcloc-stx stx-l_2) stx-p_1))))))))))))"
"(case-lambda"
"((stx-c_5 s_71)(begin 'datum->syntax(datum->syntax9_0 stx-c_5 s_71 #f #f #f #f #f #f)))"
"((stx-c_6 s_4 stx-l_3 stx-p_2 ignored3_1)(datum->syntax9_0 stx-c_6 s_4 stx-l_3 stx-p_2 ignored3_1 #t #t #t))"
"((stx-c_7 s_72 stx-l_4 stx-p2_1)(datum->syntax9_0 stx-c_7 s_72 stx-l_4 stx-p2_1 #f #t #t #f))"
"((stx-c_8 s_41 stx-l1_1)(datum->syntax9_0 stx-c_8 s_41 stx-l1_1 #f #f #t #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_423)"
"(begin"
" 'syntax->list"
"(begin"
"        (if (syntax?$1 s_423) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_423)))"
"(syntax->list$1 s_423)))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_424)"
"(begin"
" 'syntax-original?"
"(begin"
"        (if (syntax?$1 s_424) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_424)))"
"(if(syntax-property$1 s_424 original-property-sym)(not(syntax-any-macro-scopes? s_424)) #f)))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?15_0)"
"(lambda(a13_0 b14_1 phase11_1 phase12_0)"
"(begin"
" 'bound-identifier=?15"
"(let-values(((a_53) a13_0))"
"(let-values(((b_48) b14_1))"
"(let-values(((phase_127)(if phase12_0 phase11_1(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? a_53)"
"(void)"
"                                (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_53)))"
"(if(identifier? b_48)"
"(void)"
"                                (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_48)))"
"(if(phase? phase_127)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_127)))"
"(bound-identifier=?$1 a_53 b_48 phase_127))))))))))"
"(case-lambda"
"((a_54 b_81)(begin 'bound-identifier=?(bound-identifier=?15_0 a_54 b_81 #f #f)))"
"((a_55 b_82 phase11_2)(bound-identifier=?15_0 a_55 b_82 phase11_2 #t)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?23_0)"
"(lambda(a21_0 b22_0 a-phase17_0 b-phase18_0 a-phase19_0 b-phase20_0)"
"(begin"
" 'free-identifier=?23"
"(let-values(((a_56) a21_0))"
"(let-values(((b_83) b22_0))"
"(let-values(((a-phase_1)(if a-phase19_0 a-phase17_0(1/syntax-local-phase-level))))"
"(let-values(((b-phase_1)(if b-phase20_0 b-phase18_0 a-phase_1)))"
"(let-values()"
"(begin"
"(if(identifier? a_56)"
"(void)"
"                                  (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_56)))"
"(if(identifier? b_83)"
"(void)"
"                                  (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_83)))"
"(if(phase? a-phase_1)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_1)))"
"(if(phase? b-phase_1)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_1)))"
"(free-identifier=?$1 a_56 b_83 a-phase_1 b-phase_1)))))))))))"
"(case-lambda"
"((a_57 b_43)(begin 'free-identifier=?(free-identifier=?23_0 a_57 b_43 #f #f #f #f)))"
"((a_58 b_84 a-phase_2 b-phase18_1)(free-identifier=?23_0 a_58 b_84 a-phase_2 b-phase18_1 #t #t))"
"((a_59 b_85 a-phase17_1)(free-identifier=?23_0 a_59 b_85 a-phase17_1 #f #t #f)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_60 b_86)"
"(begin"
" 'free-transformer-identifier=?"
"(let-values((()"
"(begin"
"(if(identifier? a_60)"
"(void)"
"                        (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_60)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_86)"
"(void)"
"                          (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_86)))"
"(values))))"
"(let-values(((phase_128)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_60 b_86 phase_128 phase_128)))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_61 b_87)"
"(begin"
" 'free-template-identifier=?"
"(let-values((()"
"(begin"
"(if(identifier? a_61)"
"(void)"
"                        (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_61)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_87)"
"(void)"
"                          (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_87)))"
"(values))))"
"(let-values(((phase_129)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_61 b_87 phase_129 phase_129)))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_62 b_88)"
"(begin"
" 'free-label-identifier=?"
"(begin"
"(if(identifier? a_62)"
"(void)"
"          (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_62)))"
"(if(identifier? b_88)"
"(void)"
"          (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_88)))"
"(free-identifier=?$1 a_62 b_88 #f #f)))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding30_0)"
"(lambda(id29_0 phase25_1 top-level-symbol?26_0 phase27_0 top-level-symbol?28_0)"
"(begin"
" 'identifier-binding30"
"(let-values(((id_86) id29_0))"
"(let-values(((phase_86)(if phase27_0 phase25_1(1/syntax-local-phase-level))))"
"(let-values(((top-level-symbol?_1)(if top-level-symbol?28_0 top-level-symbol?26_0 #f)))"
"(let-values()"
"(begin"
"(if(identifier? id_86)"
"(void)"
"                                (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_86)))"
"(if(phase? phase_86)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_86)))"
"(identifier-binding$1 id_86 phase_86 top-level-symbol?_1))))))))))"
"(case-lambda"
"((id_87)(begin 'identifier-binding(identifier-binding30_0 id_87 #f #f #f #f)))"
"((id_88 phase_130 top-level-symbol?26_1)(identifier-binding30_0 id_88 phase_130 top-level-symbol?26_1 #t #t))"
"((id_89 phase25_2)(identifier-binding30_0 id_89 phase25_2 #f #t #f)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(let-values(((identifier-transformer-binding35_0)"
"(lambda(id34_0 phase32_2 phase33_2)"
"(begin"
" 'identifier-transformer-binding35"
"(let-values(((id_53) id34_0))"
"(let-values(((phase_96)(if phase33_2 phase32_2(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_53)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_53)))"
"(identifier-binding$1 id_53(if phase_96(add1 phase_96) #f))))))))))"
"(case-lambda"
"((id_90)(begin 'identifier-transformer-binding(identifier-transformer-binding35_0 id_90 #f #f)))"
"((id_91 phase32_3)(identifier-transformer-binding35_0 id_91 phase32_3 #t)))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_92)"
"(begin"
" 'identifier-template-binding"
"(begin"
"(if(identifier? id_92)"
"(void)"
"          (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_92)))"
"(identifier-binding$1 id_92(sub1(1/syntax-local-phase-level)))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_93)"
"(begin"
" 'identifier-label-binding"
"(begin"
"(if(identifier? id_93)"
"(void)"
"          (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_93)))"
"(identifier-binding$1 id_93 #f)))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol40_0)"
"(lambda(id39_0 phase37_2 phase38_0)"
"(begin"
" 'identifier-binding-symbol40"
"(let-values(((id_94) id39_0))"
"(let-values(((phase_131)(if phase38_0 phase37_2(1/syntax-local-phase-level))))"
"(let-values()"
"(begin"
"(if(identifier? id_94)"
"(void)"
"                              (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_94)))"
"(if(phase? phase_131)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding-symbol phase?-string phase_131)))"
"(identifier-binding-symbol$1 id_94 phase_131)))))))))"
"(case-lambda"
"((id_75)(begin 'identifier-binding-symbol(identifier-binding-symbol40_0 id_75 #f #f)))"
"((id_95 phase37_3)(identifier-binding-symbol40_0 id_95 phase37_3 #t)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context45_0)"
"(lambda(id44_0 syms42_0 syms43_0)"
"(begin"
" 'identifier-prune-lexical-context45"
"(let-values(((id_96) id44_0))"
"(let-values(((syms_23)(if syms43_0 syms42_0 null)))"
"(let-values()"
"(begin"
"(if(identifier? id_96)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_96)))"
"(if(if(list? syms_23)(andmap2 symbol? syms_23) #f)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'identifier-prune-lexical-context \"(listof symbol?)\" syms_23)))"
" id_96))))))))"
"(case-lambda"
"((id_55)(begin 'identifier-prune-lexical-context(identifier-prune-lexical-context45_0 id_55 #f #f)))"
"((id_67 syms42_1)(identifier-prune-lexical-context45_0 id_67 syms42_1 #t)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info52_0)"
"(lambda(s51_0 phase47_2 all-bindings?48_0 phase49_1 all-bindings?50_0)"
"(begin"
" 'syntax-debug-info52"
"(let-values(((s_397) s51_0))"
"(let-values(((phase_12)(if phase49_1 phase47_2(1/syntax-local-phase-level))))"
"(let-values(((all-bindings?_1)(if all-bindings?50_0 all-bindings?48_0 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_397)"
"(void)"
"                                (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_397)))"
"(if(phase? phase_12)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_12)))"
"(syntax-debug-info$1 s_397 phase_12 all-bindings?_1))))))))))"
"(case-lambda"
"((s_310)(begin 'syntax-debug-info(syntax-debug-info52_0 s_310 #f #f #f #f)))"
"((s_27 phase_132 all-bindings?48_1)(syntax-debug-info52_0 s_27 phase_132 all-bindings?48_1 #t #t))"
"((s_30 phase47_3)(syntax-debug-info52_0 s_30 phase47_3 #f #t #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_150 phase_20)"
"(begin"
" 'syntax-shift-phase-level"
"(begin"
"        (if (syntax?$1 s_150) (void) (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_150)))"
"(if(phase? phase_20)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_20)))"
"(syntax-shift-phase-level$1 s_150 phase_20)))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_8 old-stx_4 id_97)"
"(begin"
" 'syntax-track-origin"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_8)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_4)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_4)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_97)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_97)))"
"(values))))"
"(let-values(((s_425)(syntax-track-origin$1 new-stx_8 old-stx_4 id_97)))"
"(let-values(((ctx_63)(let-values(((temp54_2) #t))(get-current-expand-context17.1 temp54_2 #t #f #f))))"
"(begin"
"(if ctx_63"
"(let-values()"
"(let-values(((obs_16)(expand-context-observer ctx_63)))"
"(if obs_16"
"(let-values()(let-values()(call-expand-observe obs_16 'track-origin new-stx_8 s_425)))"
"(void))))"
"(void))"
" s_425)))))))))"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module5_0)"
"(lambda(src-namespace3_0 mod-path4_0 dest-namespace1_0 dest-namespace2_0)"
"(begin"
" 'namespace-attach-module5"
"(let-values(((src-namespace_0) src-namespace3_0))"
"(let-values(((mod-path_10) mod-path4_0))"
"(let-values(((dest-namespace_0)"
"(if dest-namespace2_0 dest-namespace1_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp22_4) 'namespace-attach-module)"
"((src-namespace23_0) src-namespace_0)"
"((mod-path24_0) mod-path_10)"
"((dest-namespace25_0) dest-namespace_0)"
"((temp26_3) #t))"
"(do-attach-module19.1"
" temp26_3"
" #t"
" temp22_4"
" src-namespace23_0"
" mod-path24_0"
" dest-namespace25_0))))))))))"
"(case-lambda"
"((src-namespace_1 mod-path_11)"
"(begin 'namespace-attach-module(namespace-attach-module5_0 src-namespace_1 mod-path_11 #f #f)))"
"((src-namespace_2 mod-path_12 dest-namespace1_1)"
"(namespace-attach-module5_0 src-namespace_2 mod-path_12 dest-namespace1_1 #t)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration11_0)"
"(lambda(src-namespace9_0 mod-path10_1 dest-namespace7_0 dest-namespace8_0)"
"(begin"
" 'namespace-attach-module-declaration11"
"(let-values(((src-namespace_3) src-namespace9_0))"
"(let-values(((mod-path_13) mod-path10_1))"
"(let-values(((dest-namespace_1)"
"(if dest-namespace8_0 dest-namespace7_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp27_5) 'namespace-attach-module-declaration)"
"((src-namespace28_0) src-namespace_3)"
"((mod-path29_0) mod-path_13)"
"((dest-namespace30_0) dest-namespace_1)"
"((temp31_3) #f))"
"(do-attach-module19.1"
" temp31_3"
" #t"
" temp27_5"
" src-namespace28_0"
" mod-path29_0"
" dest-namespace30_0))))))))))"
"(case-lambda"
"((src-namespace_4 mod-path_14)"
"(begin"
" 'namespace-attach-module-declaration"
"(namespace-attach-module-declaration11_0 src-namespace_4 mod-path_14 #f #f)))"
"((src-namespace_5 mod-path_15 dest-namespace7_1)"
"(namespace-attach-module-declaration11_0 src-namespace_5 mod-path_15 dest-namespace7_1 #t)))))"
"(define-values"
"(do-attach-module19.1)"
"(lambda(attach-instances?13_0 attach-instances?14_0 who15_1 src-namespace16_0 mod-path17_0 dest-namespace18_0)"
"(begin"
" 'do-attach-module19"
"(let-values(((who_18) who15_1))"
"(let-values(((src-namespace_6) src-namespace16_0))"
"(let-values(((mod-path_16) mod-path17_0))"
"(let-values(((dest-namespace_2) dest-namespace18_0))"
"(let-values(((attach-instances?_0)(if attach-instances?14_0 attach-instances?13_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_6)"
"(void)"
"                                    (let-values () (raise-argument-error who_18 \"namespace?\" src-namespace_6)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_56)(1/module-path? mod-path_16)))"
"(if or-part_56 or-part_56(1/resolved-module-path? mod-path_16)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_18"
"                                         \"(or/c module-path? resolved-module-path?)\""
" mod-path_16)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_2)"
"(void)"
"                                        (let-values () (raise-argument-error who_18 \"namespace?\" dest-namespace_2)))"
"(values))))"
"(let-values(((phase_133)(namespace-phase src-namespace_6)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_133(namespace-phase dest-namespace_2))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_18"
"                                               \"source and destination namespace phases do not match\""
"                                               \"source phase\""
" phase_133"
"                                               \"destination phase\""
"(namespace-phase dest-namespace_2))))"
"(values))))"
"(let-values(((todo_0)(make-hasheq)))"
"(let-values(((missing_0)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_77)"
"(lambda(mpi_44"
" phase_0"
" attach-instances?_1"
" attach-phase_0)"
"(begin"
" 'loop"
"(let-values(((mod-name_19)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_6)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_44)))))"
"(let-values(((attach-this-instance?_0)"
"(if attach-instances?_1"
"(eqv? phase_0 attach-phase_0)"
" #f)))"
"(let-values(((m-ns_12)"
"(hash-ref"
"(hash-ref"
" todo_0"
" mod-name_19"
" '#hasheqv())"
" phase_0"
" missing_0)))"
"(if(let-values(((or-part_167)"
"(eq? missing_0 m-ns_12)))"
"(if or-part_167"
" or-part_167"
"(if attach-this-instance?_0"
"(not m-ns_12)"
" #f)))"
"(let-values()"
"(let-values(((m_20)"
"(namespace->module"
" src-namespace_6"
" mod-name_19)))"
"(begin"
"(if m_20"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_18"
"                                                                                         \"module not declared (in the source namespace)\""
"                                                                                         \"module name\""
" mod-name_19)))"
"(if(if(module-cross-phase-persistent?"
" m_20)"
"(if(not"
"(label-phase? phase_0))"
"(not(zero-phase? phase_0))"
" #f)"
" #f)"
"(let-values()"
"(loop_77"
" mpi_44"
" 0"
" attach-instances?_1"
" 0))"
"(let-values()"
"(let-values(((already-m_0)"
"(namespace->module"
" dest-namespace_2"
" mod-name_19)))"
"(let-values((()"
"(begin"
"(if(if already-m_0"
"(not"
"(eq?"
" already-m_0"
" m_20))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_18"
"                                                                                                               \"a different declaration is already in the destination namespace\""
"                                                                                                               \"module name\""
" mod-name_19))"
"(void))"
"(values))))"
"(let-values(((m-ns_13"
" already?_0)"
"(if attach-this-instance?_0"
"(let-values()"
"(let-values(((m-ns_14)"
"(let-values(((src-namespace32_0)"
" src-namespace_6)"
"((mod-name33_0)"
" mod-name_19)"
"((phase34_0)"
" phase_0))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace32_0"
" mod-name33_0"
" phase34_0))))"
"(let-values((()"
"(begin"
"(if m-ns_14"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_18"
"                                                                                                                                     \"module not instantiated (in the source namespace)\""
"                                                                                                                                     \"module name\""
" mod-name_19)))"
"(values))))"
"(let-values(((already-m-ns_0)"
"(if already-m_0"
"(let-values(((dest-namespace35_0)"
" dest-namespace_2)"
"((mod-name36_0)"
" mod-name_19)"
"((phase37_4)"
" phase_0))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace35_0"
" mod-name36_0"
" phase37_4))"
" #f)))"
"(begin"
"(if(if already-m-ns_0"
"(if(not"
"(eq?"
" m-ns_14"
" already-m-ns_0))"
"(not"
"(namespace-same-instance?"
" m-ns_14"
" already-m-ns_0))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_18"
"                                                                                                                           \"a different instance is already in the destination namespace\""
"                                                                                                                           \"module name\""
" mod-name_19))"
"(void))"
"(values"
" m-ns_14"
"(if already-m-ns_0"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_0)"
"(not"
"(let-values(((src-namespace38_0)"
" src-namespace_6)"
"((mod-name39_0)"
" mod-name_19)"
"((phase40_0)"
" phase_0))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace38_0"
" mod-name39_0"
" phase40_0)))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_6)"
"(let-values()"
"(let-values(((src-namespace41_0)"
" src-namespace_6)"
"((mpi42_0)"
" mpi_44)"
"((phase43_1)"
" phase_0))"
"(namespace-module-instantiate!96.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" src-namespace41_0"
" mpi42_0"
" phase43_1)))))"
"(void))"
"(values"
" #f"
"(if already-m_0"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_0"
" mod-name_19"
"(lambda(ht_142)"
"(hash-set"
" ht_142"
" phase_0"
" m-ns_13))"
" '#hasheqv())"
"(if already?_0"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_293)"
"(module-requires"
" m_20)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_293)))"
"((letrec-values(((for-loop_251)"
"(lambda(lst_220)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_220)"
"(let-values(((phase+reqs_1)"
"(unsafe-car"
" lst_220))"
"((rest_164)"
"(unsafe-cdr"
" lst_220)))"
"(let-values((()"
"(let-values(((lst_158)"
"(cdr"
" phase+reqs_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_158)))"
"((letrec-values(((for-loop_252)"
"(lambda(lst_173)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_173)"
"(let-values(((req_5)"
"(unsafe-car"
" lst_173))"
"((rest_165)"
"(unsafe-cdr"
" lst_173)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_77"
"(module-path-index-shift"
" req_5"
"(module-self"
" m_20)"
" mpi_44)"
"(phase+"
" phase_0"
"(car"
" phase+reqs_1))"
" attach-instances?_1"
" attach-phase_0))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_252"
" rest_165)"
"(values))))"
"(values))))))"
" for-loop_252)"
" lst_158)))))"
"(if(not"
" #f)"
"(for-loop_251"
" rest_164)"
"(values))))"
"(values))))))"
" for-loop_251)"
" lst_293)))"
"(void)"
"(let-values(((lst_282)"
"(module-submodule-names"
" m_20)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_282)))"
"((letrec-values(((for-loop_253)"
"(lambda(lst_176)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_176)"
"(let-values(((submod-name_0)"
"(unsafe-car"
" lst_176))"
"((rest_91)"
"(unsafe-cdr"
" lst_176)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_77"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                           \".\""
" submod-name_0)"
" mpi_44)"
" #f"
" #f"
" attach-phase_0))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_253"
" rest_91)"
"(values))))"
"(values))))))"
" for-loop_253)"
" lst_282)))"
"(void)"
"(if(module-supermodule-name"
" m_20)"
"(let-values()"
"(loop_77"
"(1/module-path-index-join"
" '(submod"
"                                                                                                              \"..\")"
" mpi_44)"
" #f"
" #f"
" attach-phase_0))"
"(void))))))))))))))"
"(void)))))))))"
" loop_77)"
"(1/module-path-index-join"
"(if(1/resolved-module-path? mod-path_16)"
"(resolved-module-path->module-path mod-path_16)"
" mod-path_16)"
" #f)"
" phase_133"
" attach-instances?_0"
" phase_133)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_143) todo_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_143)))"
"((letrec-values(((for-loop_254)"
"(lambda(i_95)"
"(begin"
" 'for-loop"
"(if i_95"
"(let-values(((mod-name_20 phases_0)"
"(hash-iterate-key+value"
" ht_143"
" i_95)))"
"(let-values((()"
"(let-values(((ht_144)"
" phases_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_144)))"
"((letrec-values(((for-loop_238)"
"(lambda(i_168)"
"(begin"
" 'for-loop"
"(if i_168"
"(let-values(((phase_134"
" m-ns_15)"
"(hash-iterate-key+value"
" ht_144"
" i_168)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_21)"
"(namespace->module"
" src-namespace_6"
" mod-name_20)))"
"(begin"
"(module-force-bulk-binding!"
" m_21"
" src-namespace_6)"
"(let-values(((dest-namespace44_0)"
" dest-namespace_2)"
"((m45_0)"
" m_21)"
"((mod-name46_0)"
" mod-name_20))"
"(declare-module!58.1"
" #f"
" #f"
" dest-namespace44_0"
" m45_0"
" mod-name46_0))"
"(if m-ns_15"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_6"
" mod-name_20"
" phase_134)"
"(let-values(((or-part_261)"
"(let-values(((dest-namespace47_0)"
" dest-namespace_2)"
"((mod-name48_0)"
" mod-name_20)"
"((phase49_2)"
" phase_134))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" dest-namespace47_0"
" mod-name48_0"
" phase49_2))))"
"(if or-part_261"
" or-part_261"
"(namespace-install-module-namespace!"
" dest-namespace_2"
" mod-name_20"
" phase_134"
" m_21"
" m-ns_15)))))"
"(void)))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_238"
"(hash-iterate-next"
" ht_144"
" i_168))"
"(values))))"
"(values))))))"
" for-loop_238)"
"(hash-iterate-first"
" ht_144))))))"
"(if(not #f)"
"(for-loop_254"
"(hash-iterate-next ht_143 i_95))"
"(values))))"
"(values))))))"
" for-loop_254)"
"(hash-iterate-first ht_143))))"
"(values))))"
"(let-values()"
"(let-values(((mnr_0)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_2)"
"(let-values()"
"(begin"
"(let-values(((ht_145) todo_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_145)))"
"((letrec-values(((for-loop_110)"
"(lambda(i_169)"
"(begin"
" 'for-loop"
"(if i_169"
"(let-values(((mod-name_21)"
"(hash-iterate-key ht_145 i_169)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_0"
" mod-name_21"
" src-namespace_6))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_110"
"(hash-iterate-next ht_145 i_169))"
"(values))))"
"(values))))))"
" for-loop_110)"
"(hash-iterate-first ht_145))))"
"(void))))))))))))))))))))))))"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(begin"
" 'make-empty-namespace"
"(let-values(((current-ns_0)(1/current-namespace)))"
"(let-values(((phase_40)(namespace-phase current-ns_0)))"
"(let-values(((ns_58)(namespace->namespace-at-phase(make-namespace) phase_40)))"
"(begin"
"(1/namespace-attach-module current-ns_0 ''#%kernel ns_58)"
"(namespace-primitive-module-visit! ns_58 '#%kernel)"
" ns_58)))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce4_0)"
"(lambda(s3_1 ns1_2 ns2_0)"
"(begin"
" 'namespace-syntax-introduce4"
"(let-values(((s_3) s3_1))"
"(let-values(((ns_59)(if ns2_0 ns1_2(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_3)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_3)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_59)"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'namespace-syntax-introduce \"namespace?\" ns_59)))"
"(values))))"
"(let-values(((root-ctx_5)(namespace-get-root-expand-ctx ns_59)))"
"(let-values(((post-scope_1)(root-expand-context-post-expansion-scope root-ctx_5)))"
"(let-values(((other-namespace-scopes_0)"
"(reverse$1"
"(let-values(((ht_79)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_5)"
"(namespace-phase ns_59))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_79)))"
"((letrec-values(((for-loop_237)"
"(lambda(fold-var_220 i_170)"
"(begin"
" 'for-loop"
"(if i_170"
"(let-values(((sc_30)"
"(unsafe-immutable-hash-iterate-key"
" ht_79"
" i_170)))"
"(let-values(((fold-var_216)"
"(let-values(((fold-var_217)"
" fold-var_220))"
"(if(equal?"
" sc_30"
" post-scope_1)"
" fold-var_217"
"(let-values(((fold-var_30)"
" fold-var_217))"
"(let-values(((fold-var_218)"
"(let-values()"
"(cons"
"(let-values()"
" sc_30)"
" fold-var_30))))"
"(values"
" fold-var_218)))))))"
"(if(not #f)"
"(for-loop_237"
" fold-var_216"
"(unsafe-immutable-hash-iterate-next"
" ht_79"
" i_170))"
" fold-var_216)))"
" fold-var_220)))))"
" for-loop_237)"
" null"
"(unsafe-immutable-hash-iterate-first ht_79)))))))"
"(let-values(((add-ns-scopes_0)"
"(lambda(s_172)"
"(begin"
" 'add-ns-scopes"
"(let-values(((temp78_3)"
"(add-scopes"
"(push-scope s_172 post-scope_1)"
" other-namespace-scopes_0))"
"((temp79_1)"
"(root-expand-context-all-scopes-stx root-ctx_5))"
"((temp80_2)"
"(let-values(((or-part_164)"
"(namespace-declaration-inspector"
" ns_59)))"
"(if or-part_164"
" or-part_164"
"(current-code-inspector))))"
"((temp81_0) #t))"
"(syntax-transfer-shifts39.1"
" temp81_0"
" #t"
" temp78_3"
" temp79_1"
" temp80_2"
" #t))))))"
"(let-values(((maybe-module-id_0)"
"(if(pair?(1/syntax-e s_3))"
"(if(identifier?(car(1/syntax-e s_3)))"
"(add-ns-scopes_0(car(1/syntax-e s_3)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_0"
"(1/free-identifier=?"
" maybe-module-id_0"
"(1/namespace-module-identifier ns_59)"
"(namespace-phase ns_59))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_3"
"(cons maybe-module-id_0(cdr(1/syntax-e s_3)))"
" s_3"
" s_3))"
"(let-values()(add-ns-scopes_0 s_3)))))))))))))))))"
"(case-lambda"
"((s_72)(begin 'namespace-syntax-introduce(namespace-syntax-introduce4_0 s_72 #f #f)))"
"((s_426 ns1_3)(namespace-syntax-introduce4_0 s_426 ns1_3 #t)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier8_0)"
"(lambda(where6_0 where7_0)"
"(begin"
" 'namespace-module-identifier8"
"(let-values(((where_0)(if where7_0 where6_0(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_70)(1/namespace? where_0)))"
"(if or-part_70 or-part_70(phase? where_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                               (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_0)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_0)(namespace-phase where_0) where_0))"
" 'module))))))))"
"(case-lambda"
"(()(begin 'namespace-module-identifier(namespace-module-identifier8_0 #f #f)))"
"((where6_1)(namespace-module-identifier8_0 where6_1 #t)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_67)"
"(begin"
" 'namespace-symbol->identifier"
"(begin"
"(if(symbol? sym_67)"
"(void)"
"          (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_67)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_67))))))"
"(define-values"
"(do-namespace-require23.1)"
"(lambda(copy-variable-as-constant?13_0"
" copy-variable-as-constant?18_0"
" copy-variable-phase-level12_0"
" copy-variable-phase-level17_0"
" run?10_0"
" run?15_0"
" skip-variable-phase-level14_0"
" skip-variable-phase-level19_0"
" visit?11_0"
" visit?16_0"
" who20_0"
" req21_0"
" ns22_1)"
"(begin"
" 'do-namespace-require23"
"(let-values(((run?_3)(if run?15_0 run?10_0 #t)))"
"(let-values(((visit?_3)(if visit?16_0 visit?11_0 #f)))"
"(let-values(((who_19) who20_0))"
"(let-values(((req_6) req21_0))"
"(let-values(((ns_60) ns22_1))"
"(let-values(((copy-variable-phase-level_2)"
"(if copy-variable-phase-level17_0 copy-variable-phase-level12_0 #f)))"
"(let-values(((copy-variable-as-constant?_2)"
"(if copy-variable-as-constant?18_0 copy-variable-as-constant?13_0 #f)))"
"(let-values(((skip-variable-phase-level_2)"
"(if skip-variable-phase-level19_0 skip-variable-phase-level14_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_60)"
"(void)"
"                                          (let-values () (raise-argument-error who_19 \"namespace?\" ns_60)))"
"(values))))"
"(let-values(((ctx-stx_0)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_60)))))"
"(if(let-values(((or-part_168)(1/module-path-index? req_6)))"
"(if or-part_168 or-part_168(1/module-path? req_6)))"
"(let-values()"
"(let-values(((temp82_1)"
"(if(1/module-path-index? req_6)"
" req_6"
"(1/module-path-index-join req_6 #f)))"
"((temp83_1) #f)"
"((temp84_1) #f)"
"((ctx-stx85_0) ctx-stx_0)"
"((ns86_0) ns_60)"
"((run?87_0) run?_3)"
"((visit?88_0) visit?_3)"
"((temp89_3)(namespace-phase ns_60))"
"((temp90_0)(namespace-phase ns_60))"
"((copy-variable-phase-level91_0) copy-variable-phase-level_2)"
"((copy-variable-as-constant?92_0) copy-variable-as-constant?_2)"
"((skip-variable-phase-level93_0) skip-variable-phase-level_2)"
"((who94_0) who_19))"
"(perform-require!78.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" copy-variable-as-constant?92_0"
" #t"
" copy-variable-phase-level91_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp89_3"
" #f"
" #f"
" temp90_0"
" run?87_0"
" #t"
" skip-variable-phase-level93_0"
" #t"
" visit?88_0"
" #t"
" who94_0"
" temp82_1"
" temp83_1"
" temp84_1"
" ctx-stx85_0"
" ns86_0)))"
"(let-values()"
"(let-values(((run?95_0) run?_3)"
"((visit?96_0) visit?_3)"
"((temp97_2)(list(1/datum->syntax ctx-stx_0 req_6)))"
"((temp98_2) #f)"
"((ns99_0) ns_60)"
"((temp100_1)(namespace-phase ns_60))"
"((temp101_0)"
"(let-values(((temp104_0) #f))"
"(make-requires+provides8.1 #f #f temp104_0)))"
"((skip-variable-phase-level102_0) skip-variable-phase-level_2)"
"((who103_0) who_19))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" run?95_0"
" #t"
" #f"
" #f"
" skip-variable-phase-level102_0"
" #t"
" visit?96_0"
" #t"
" who103_0"
" temp97_2"
" temp98_2"
" ns99_0"
" temp100_1"
" temp101_0))))))))))))))))))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require29_0)"
"(lambda(req28_0 ns26_0 ns27_0)"
"(begin"
" 'namespace-require29"
"(let-values(((req_7) req28_0))"
"(let-values(((ns_76)(if ns27_0 ns26_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp105_1) 'namespace-require)((req106_0) req_7)((ns107_0) ns_76))"
"(do-namespace-require23.1 #f #f #f #f #f #f #f #f #f #f temp105_1 req106_0 ns107_0)))))))))"
"(case-lambda"
"((req_8)(begin 'namespace-require(namespace-require29_0 req_8 #f #f)))"
"((req_9 ns26_1)(namespace-require29_0 req_9 ns26_1 #t)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time34_0)"
"(lambda(req33_0 ns31_0 ns32_0)"
"(begin"
" 'namespace-require/expansion-time34"
"(let-values(((req_10) req33_0))"
"(let-values(((ns_77)(if ns32_0 ns31_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp108_1) #f)"
"((temp109_1) #t)"
"((temp110_2) 'namespace-require/expansion-time)"
"((req111_0) req_10)"
"((ns112_0) ns_77))"
"(do-namespace-require23.1"
" #f"
" #f"
" #f"
" #f"
" temp108_1"
" #t"
" #f"
" #f"
" temp109_1"
" #t"
" temp110_2"
" req111_0"
" ns112_0)))))))))"
"(case-lambda"
"((req_11)(begin 'namespace-require/expansion-time(namespace-require/expansion-time34_0 req_11 #f #f)))"
"((req_12 ns31_1)(namespace-require/expansion-time34_0 req_12 ns31_1 #t)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant39_0)"
"(lambda(req38_0 ns36_0 ns37_0)"
"(begin"
" 'namespace-require/constant39"
"(let-values(((req_13) req38_0))"
"(let-values(((ns_4)(if ns37_0 ns36_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp113_0) 'namespace-require/constant)"
"((req114_0) req_13)"
"((ns115_0) ns_4)"
"((temp116_1) 0)"
"((temp117_2) #t))"
"(do-namespace-require23.1"
" temp117_2"
" #t"
" temp116_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp113_0"
" req114_0"
" ns115_0)))))))))"
"(case-lambda"
"((req_14)(begin 'namespace-require/constant(namespace-require/constant39_0 req_14 #f #f)))"
"((req_15 ns36_1)(namespace-require/constant39_0 req_15 ns36_1 #t)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy44_0)"
"(lambda(req43_0 ns41_0 ns42_0)"
"(begin"
" 'namespace-require/copy44"
"(let-values(((req_16) req43_0))"
"(let-values(((ns_78)(if ns42_0 ns41_0(1/current-namespace))))"
"(let-values()"
"(let-values(((temp118_2) 'namespace-require/copy)"
"((req119_0) req_16)"
"((ns120_0) ns_78)"
"((temp121_2) 0)"
"((temp122_1) 0))"
"(do-namespace-require23.1"
" #f"
" #f"
" temp121_2"
" #t"
" #f"
" #f"
" temp122_1"
" #t"
" #f"
" #f"
" temp118_2"
" req119_0"
" ns120_0)))))))))"
"(case-lambda"
"((req_17)(begin 'namespace-require/copy(namespace-require/copy44_0 req_17 #f #f)))"
"((req_18 ns41_1)(namespace-require/copy44_0 req_18 ns41_1 #t)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value53_0)"
"(lambda(sym52_0 use-mapping?46_0 failure-thunk47_0 ns48_0 use-mapping?49_0 failure-thunk50_0 ns51_0)"
"(begin"
" 'namespace-variable-value53"
"(let-values(((sym_51) sym52_0))"
"(let-values(((use-mapping?_0)(if use-mapping?49_0 use-mapping?46_0 #f)))"
"(let-values(((failure-thunk_5)(if failure-thunk50_0 failure-thunk47_0 #f)))"
"(let-values(((ns_79)(if ns51_0 ns48_0(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_51)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_51)))"
"(if(let-values(((or-part_103)(not failure-thunk_5)))"
"(if or-part_103"
" or-part_103"
"(if(procedure? failure-thunk_5)"
"(procedure-arity-includes? failure-thunk_5 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                     \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_5)))"
"(if(1/namespace? ns_79)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_79)))"
"((call/ec"
"(lambda(escape_0)"
"(let-values(((var-ns_0 var-phase-level_0 var-sym_6)"
"(if use-mapping?_0"
"(let-values()"
"(let-values(((id_98)(1/datum->syntax #f sym_51)))"
"(let-values(((b_89)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_98 ns_79)"
"(namespace-phase ns_79)"
" ns_79)))"
"(let-values((()"
"(begin"
"(if b_89"
"(let-values()"
"(namespace-visit-available-modules!"
" ns_79))"
"(void))"
"(values))))"
"(let-values(((v_192 primitive?_8 extra-inspector_8)"
"(if b_89"
"(let-values(((b123_0) b_89)"
"((empty-env124_0) empty-env)"
"((null125_0) null)"
"((ns126_0) ns_79)"
"((temp127_1)"
"(namespace-phase ns_79))"
"((id128_0) id_98))"
"(binding-lookup48.1"
" #f"
" #f"
" #f"
" #f"
" b123_0"
" empty-env124_0"
" null125_0"
" ns126_0"
" temp127_1"
" id128_0))"
"(values variable #f #f))))"
"(begin"
"(if(variable? v_192)"
"(void)"
"(let-values()"
"(escape_0"
"(let-values(((or-part_287) failure-thunk_5))"
"(if or-part_287"
" or-part_287"
"(lambda()"
"(raise"
"(make-exn:fail:syntax$1"
"(format"
"(string-append"
"                                                                               \"namespace-variable-value: bound to syntax\\n\""
"                                                                               \"  in: ~s\")"
" sym_51)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_89)"
"(values"
"(if(top-level-module-path-index?"
"(module-binding-module b_89))"
" ns_79"
"(module-instance-namespace"
"(binding->module-instance"
" b_89"
" ns_79"
"(namespace-phase ns_79)"
" id_98)))"
"(module-binding-phase b_89)"
"(module-binding-sym b_89))"
"(values ns_79(namespace-phase ns_79) sym_51))))))))"
"(let-values()(values ns_79(namespace-phase ns_79) sym_51)))))"
"(let-values(((val_10)"
"(namespace-get-variable"
" var-ns_0"
" var-phase-level_0"
" var-sym_6"
"(lambda()"
"(escape_0"
"(let-values(((or-part_288) failure-thunk_5))"
"(if or-part_288"
" or-part_288"
"(raise"
"(exn:fail:contract:variable"
"(format"
"(string-append"
"                                                                \"namespace-variable-value: given name is not defined\\n\""
"                                                                \"  name: ~s\")"
" sym_51)"
"(current-continuation-marks)"
" sym_51)))))))))"
"(lambda() val_10))))))))))))))))"
"(case-lambda"
"((sym_68)(begin 'namespace-variable-value(namespace-variable-value53_0 sym_68 #f #f #f #f #f #f)))"
"((sym_69 use-mapping?_1 failure-thunk_6 ns48_1)"
"(namespace-variable-value53_0 sym_69 use-mapping?_1 failure-thunk_6 ns48_1 #t #t #t))"
"((sym_70 use-mapping?_2 failure-thunk47_1)"
"(namespace-variable-value53_0 sym_70 use-mapping?_2 failure-thunk47_1 #f #t #t #f))"
"((sym_71 use-mapping?46_1)(namespace-variable-value53_0 sym_71 use-mapping?46_1 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!63_0)"
"(lambda(sym61_0 val62_0 map?55_0 ns56_0 as-constant?57_0 map?58_0 ns59_0 as-constant?60_0)"
"(begin"
" 'namespace-set-variable-value!63"
"(let-values(((sym_72) sym61_0))"
"(let-values(((val_69) val62_0))"
"(let-values(((map?_0)(if map?58_0 map?55_0 #f)))"
"(let-values(((ns_80)(if ns59_0 ns56_0(1/current-namespace))))"
"(let-values(((as-constant?_2)(if as-constant?60_0 as-constant?57_0 #f)))"
"(let-values()"
"(begin"
"(if(symbol? sym_72)"
"(void)"
"                                    (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_72)))"
"(if(1/namespace? ns_80)"
"(void)"
"                                    (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_80)))"
"(namespace-set-variable! ns_80(namespace-phase ns_80) sym_72 val_69 as-constant?_2)"
"(if map?_0"
"(let-values()"
"(let-values((()"
"(begin"
"(namespace-unset-transformer!"
" ns_80"
"(namespace-phase ns_80)"
" sym_72)"
"(values))))"
"(let-values(((id_99)(1/datum->syntax #f sym_72)))"
"(let-values(((temp129_1)(1/namespace-syntax-introduce id_99 ns_80))"
"((temp130_1)"
"(let-values(((temp132_1)(namespace-mpi ns_80))"
"((temp133_1)(namespace-phase ns_80))"
"((sym134_0) sym_72))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp132_1"
" temp133_1"
" sym134_0)))"
"((temp131_0)(namespace-phase ns_80)))"
"(add-binding!17.1 #f #f #f #f temp129_1 temp130_1 temp131_0)))))"
"(void)))))))))))))"
"(case-lambda"
"((sym_73 val_70)"
"(begin 'namespace-set-variable-value!(namespace-set-variable-value!63_0 sym_73 val_70 #f #f #f #f #f #f)))"
"((sym_74 val_71 map?_1 ns_81 as-constant?57_1)"
"(namespace-set-variable-value!63_0 sym_74 val_71 map?_1 ns_81 as-constant?57_1 #t #t #t))"
"((sym_75 val_50 map?_2 ns56_1)(namespace-set-variable-value!63_0 sym_75 val_50 map?_2 ns56_1 #f #t #t #f))"
"((sym_76 val_72 map?55_1)(namespace-set-variable-value!63_0 sym_76 val_72 map?55_1 #f #f #t #f #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!68_0)"
"(lambda(sym67_0 ns65_0 ns66_0)"
"(begin"
" 'namespace-undefine-variable!68"
"(let-values(((sym_77) sym67_0))"
"(let-values(((ns_82)(if ns66_0 ns65_0(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(symbol? sym_77)"
"(void)"
"                              (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_77)))"
"(if(1/namespace? ns_82)"
"(void)"
"                              (let-values () (raise-argument-error 'namespace-variable-value \"namespace?\" ns_82)))"
"(namespace-unset-variable! ns_82(namespace-phase ns_82) sym_77)))))))))"
"(case-lambda"
"((sym_78)(begin 'namespace-undefine-variable!(namespace-undefine-variable!68_0 sym_78 #f #f)))"
"((sym_79 ns65_1)(namespace-undefine-variable!68_0 sym_79 ns65_1 #t)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols72_0)"
"(lambda(ns70_0 ns71_0)"
"(begin"
" 'namespace-mapped-symbols72"
"(let-values(((ns_83)(if ns71_0 ns70_0(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_83)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_83)))"
"(set->list"
"(set-union"
"(syntax-mapped-names"
"(root-expand-context-all-scopes-stx(namespace-get-root-expand-ctx ns_83))"
"(namespace-phase ns_83))"
"(list->set(1/instance-variable-names(namespace->instance ns_83 0))))))))))))"
"(case-lambda"
"(()(begin 'namespace-mapped-symbols(namespace-mapped-symbols72_0 #f #f)))"
"((ns70_1)(namespace-mapped-symbols72_0 ns70_1 #t)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase76_0)"
"(lambda(ns74_0 ns75_0)"
"(begin"
" 'namespace-base-phase76"
"(let-values(((ns_84)(if ns75_0 ns74_0(1/current-namespace))))"
"(let-values()"
"(begin"
"(if(1/namespace? ns_84)"
"(void)"
"                            (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_84)))"
"(namespace-phase ns_84))))))))"
"(case-lambda"
"(()(begin 'namespace-base-phase(namespace-base-phase76_0 #f #f)))"
"((ns74_1)(namespace-base-phase76_0 ns74_1 #t)))))"
"(define-values"
"(1/eval)"
"(let-values(((eval6_0)"
"(lambda(s5_1 ns1_4 compile2_0 ns3_0 compile4_0)"
"(begin"
" 'eval6"
"(let-values(((s_146) s5_1))"
"(let-values(((ns_42)(if ns3_0 ns1_4(1/current-namespace))))"
"(let-values(((compile_1)"
"(if compile4_0"
" compile2_0"
"(lambda(s_411 ns_67)(begin 'compile(1/compile s_411 ns_67 #f))))))"
"(let-values()"
"(if(let-values(((or-part_289)(compiled-in-memory? s_146)))"
"(if or-part_289"
" or-part_289"
"(let-values(((or-part_290)(1/linklet-directory? s_146)))"
"(if or-part_290 or-part_290(1/linklet-bundle? s_146)))))"
"(let-values()(eval-compiled s_146 ns_42))"
"(if(if(syntax?$1 s_146)"
"(let-values(((or-part_291)(compiled-in-memory?(1/syntax-e s_146))))"
"(if or-part_291"
" or-part_291"
"(let-values(((or-part_292)(1/linklet-directory?(1/syntax-e s_146))))"
"(if or-part_292 or-part_292(1/linklet-bundle?(1/syntax-e s_146))))))"
" #f)"
"(let-values()(eval-compiled(1/syntax->datum s_146) ns_42))"
"(let-values()"
"(let-values(((temp82_2)"
"(lambda(s_173 ns_85 tail?_52)"
"(eval-compiled(compile_1 s_173 ns_85) ns_85 tail?_52)))"
"((temp83_2) #f))"
"(per-top-level68.1"
" #f"
" #f"
" #f"
" #f"
" temp83_2"
" #f"
" #f"
" #f"
" #f"
" temp82_2"
" #f"
" #f"
" s_146"
" ns_42)))))))))))))"
"(case-lambda"
"((s_426)(begin 'eval(eval6_0 s_426 #f #f #f #f)))"
"((s_427 ns_44 compile2_1)(eval6_0 s_427 ns_44 compile2_1 #t #t))"
"((s_174 ns1_5)(eval6_0 s_174 ns1_5 #f #t #f)))))"
"(define-values"
"(eval-compiled)"
"(let-values(((eval-compiled12_0)"
"(lambda(c10_0 ns11_0 as-tail?8_0 as-tail?9_0)"
"(begin"
" 'eval-compiled12"
"(let-values(((c_52) c10_0))"
"(let-values(((ns_86) ns11_0))"
"(let-values(((as-tail?_3)(if as-tail?9_0 as-tail?8_0 #t)))"
"(let-values()"
"(if(1/compiled-module-expression? c_52)"
"(let-values()"
"(let-values(((ns85_0) ns_86))(eval-module8.1 ns85_0 #t #f #f #f #f c_52)))"
"(let-values()(eval-top c_52 ns_86 eval-compiled as-tail?_3)))))))))))"
"(case-lambda"
"((c_39 ns_87)(begin(eval-compiled12_0 c_39 ns_87 #f #f)))"
"((c_40 ns_88 as-tail?8_1)(eval-compiled12_0 c_40 ns_88 as-tail?8_1 #t)))))"
"(define-values"
"(1/compile)"
"(let-values(((compile23_0)"
"(lambda(s22_1"
" ns14_2"
" serializable?15_0"
" expand16_0"
" to-source?17_0"
" ns18_0"
" serializable?19_0"
" expand20_0"
" to-source?21_1)"
"(begin"
" 'compile23"
"(let-values(((s_162) s22_1))"
"(let-values(((ns_89)(if ns18_0 ns14_2(1/current-namespace))))"
"(let-values(((serializable?_4)(if serializable?19_0 serializable?15_0 #t)))"
"(let-values(((expand_0)(if expand20_0 expand16_0 expand$1)))"
"(let-values(((to-source?_5)(if to-source?21_1 to-source?17_0 #f)))"
"(let-values()"
"(let-values(((cs_0)"
"(if(1/compiled-expression? s_162)"
"(let-values()(list s_162))"
"(if(if(syntax?$1 s_162)"
"(1/compiled-expression?(1/syntax-e s_162))"
" #f)"
"(let-values()(list(1/syntax-e s_162)))"
"(let-values()"
"(let-values(((temp88_2)"
"(lambda(s_428 ns_45 as-tail?_4)"
"(list"
"(compile-single$1"
" s_428"
" ns_45"
" expand_0"
" serializable?_4"
" to-source?_5))))"
"((append89_0) append)"
"((temp90_1) #f))"
"(per-top-level68.1"
" append89_0"
" #t"
" #f"
" #f"
" temp90_1"
" #f"
" #f"
" #f"
" #f"
" temp88_2"
" #f"
" #f"
" s_162"
" ns_89)))))))"
"(if(if(= 1(length cs_0))(not(compiled-multiple-top?(car cs_0))) #f)"
"(car cs_0)"
"(let-values(((to-source?92_0) to-source?_5)"
"((serializable?93_0) serializable?_4)"
"((ns94_0) ns_89))"
"(compiled-tops->compiled-top8.1"
" serializable?93_0"
" #t"
" ns94_0"
" #t"
" to-source?92_0"
" #t"
" cs_0))))))))))))))"
"(case-lambda"
"((s_429)(begin 'compile(compile23_0 s_429 #f #f #f #f #f #f #f #f)))"
"((s_430 ns_47 serializable?_5 expand_1 to-source?17_1)"
"(compile23_0 s_430 ns_47 serializable?_5 expand_1 to-source?17_1 #t #t #t #t))"
"((s_149 ns_90 serializable?_6 expand16_1)(compile23_0 s_149 ns_90 serializable?_6 expand16_1 #f #t #t #t #f))"
"((s_186 ns_91 serializable?15_1)(compile23_0 s_186 ns_91 serializable?15_1 #f #f #t #t #f #f))"
"((s_17 ns14_3)(compile23_0 s_17 ns14_3 #f #f #f #t #f #f #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets28_0)"
"(lambda(s27_0 ns25_0 ns26_2)"
"(begin"
" 'compile-to-linklets28"
"(let-values(((s_22) s27_0))"
"(let-values(((ns_62)(if ns26_2 ns25_0(1/current-namespace))))"
"(let-values()(1/compile s_22 ns_62 #t expand$1 #t))))))))"
"(case-lambda"
"((s_431)(begin(compile-to-linklets28_0 s_431 #f #f)))"
"((s_24 ns25_1)(compile-to-linklets28_0 s_24 ns25_1 #t)))))"
"(define-values"
"(struct:lifted-parsed-begin"
" lifted-parsed-begin30.1"
" lifted-parsed-begin?"
" lifted-parsed-begin-seq"
" lifted-parsed-begin-last)"
"(let-values(((struct:_73 make-_73 ?_73 -ref_73 -set!_73)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lifted-parsed-begin"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'lifted-parsed-begin)))))"
"(values"
" struct:_73"
" make-_73"
" ?_73"
"(make-struct-field-accessor -ref_73 0 'seq)"
"(make-struct-field-accessor -ref_73 1 'last))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_432 ns_92 expand_2 serializable?_7 to-source?_6)"
"(begin"
" 'compile-single"
"(let-values(((exp-s_4)(expand_2 s_432 ns_92 #f #t serializable?_7)))"
"((letrec-values(((loop_97)"
"(lambda(exp-s_5)"
"(begin"
" 'loop"
"(if(parsed-module? exp-s_5)"
"(let-values()"
"(let-values(((temp97_3)"
"(let-values(((ns100_0) ns_92))"
"(make-compile-context14.1 #f #f #f #f #f #f ns100_0 #t #f #f #f #f)))"
"((serializable?98_0) serializable?_7)"
"((to-source?99_0) to-source?_6))"
"(compile-module13.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" serializable?98_0"
" #t"
" to-source?99_0"
" #t"
" exp-s_5"
" temp97_3)))"
"(if(lifted-parsed-begin? exp-s_5)"
"(let-values()"
"(let-values(((temp101_1)"
"(reverse$1"
"(let-values(((lst_163)"
"(append"
"(lifted-parsed-begin-seq exp-s_5)"
"(list(lifted-parsed-begin-last exp-s_5)))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_163)))"
"((letrec-values(((for-loop_183)"
"(lambda(fold-var_258 lst_180)"
"(begin"
" 'for-loop"
"(if(pair? lst_180)"
"(let-values(((e_72)"
"(unsafe-car lst_180))"
"((rest_95)"
"(unsafe-cdr lst_180)))"
"(let-values(((fold-var_160)"
"(let-values(((fold-var_161)"
" fold-var_258))"
"(let-values(((fold-var_259)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_97"
" e_72))"
" fold-var_161))))"
"(values"
" fold-var_259)))))"
"(if(not #f)"
"(for-loop_183 fold-var_160 rest_95)"
" fold-var_160)))"
" fold-var_258)))))"
" for-loop_183)"
" null"
" lst_163)))))"
"((to-source?102_0) to-source?_6))"
"(compiled-tops->compiled-top8.1 #f #f #f #f to-source?102_0 #t temp101_1)))"
"(let-values()"
"(let-values(((temp104_1)"
"(let-values(((ns107_1) ns_92))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns107_1"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((serializable?105_0) serializable?_7)"
"((to-source?106_0) to-source?_6))"
"(compile-top9.1"
" serializable?105_0"
" #t"
" #f"
" #f"
" to-source?106_0"
" #t"
" exp-s_5"
" temp104_1)))))))))"
" loop_97)"
" exp-s_4)))))"
"(define-values"
"(expand$1)"
"(let-values(((expand40_0)"
"(lambda(s39_0"
" ns31_2"
" observable?32_0"
" to-parsed?33_0"
" serializable?34_0"
" ns35_0"
" observable?36_0"
" to-parsed?37_0"
" serializable?38_0)"
"(begin"
" 'expand40"
"(let-values(((s_50) s39_0))"
"(let-values(((ns_93)(if ns35_0 ns31_2(1/current-namespace))))"
"(let-values(((observable?_1)(if observable?36_0 observable?32_0 #f)))"
"(let-values(((to-parsed?_2)(if to-parsed?37_0 to-parsed?33_0 #f)))"
"(let-values(((serializable?_8)(if serializable?38_0 serializable?34_0 #f)))"
"(let-values()"
"(begin"
"(if observable?_1(let-values()(log-expand-start))(void))"
"(let-values(((temp110_3)"
"(lambda(s_316 ns_94 as-tail?_5)"
"(expand-single"
" s_316"
" ns_94"
" observable?_1"
" to-parsed?_2"
" serializable?_8)))"
"((cons111_0) cons)"
"((re-pair112_0) re-pair)"
"((observable?113_0) observable?_1))"
"(per-top-level68.1"
" cons111_0"
" #t"
" #f"
" #f"
" observable?113_0"
" #f"
" #f"
" #f"
" #f"
" temp110_3"
" re-pair112_0"
" #t"
" s_50"
" ns_93)))))))))))))"
"(case-lambda"
"((s_433)(begin 'expand(expand40_0 s_433 #f #f #f #f #f #f #f #f)))"
"((s_434 ns_95 observable?_2 to-parsed?_3 serializable?34_1)"
"(expand40_0 s_434 ns_95 observable?_2 to-parsed?_3 serializable?34_1 #t #t #t #t))"
"((s_54 ns_96 observable?_3 to-parsed?33_1)(expand40_0 s_54 ns_96 observable?_3 to-parsed?33_1 #f #t #t #t #f))"
"((s_55 ns_97 observable?32_1)(expand40_0 s_55 ns_97 observable?32_1 #f #f #t #t #f #f))"
"((s_319 ns31_3)(expand40_0 s_319 ns31_3 #f #f #f #t #f #f #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_388 ns_98 observable?_4 to-parsed?_4 serializable?_9)"
"(begin"
"(let-values(((rebuild-s_2)(keep-properties-only s_388)))"
"(let-values(((ctx_64)"
"(let-values(((to-parsed?115_0) to-parsed?_4)"
"((serializable?116_0) serializable?_9)"
"((observable?117_0) observable?_4))"
"(make-expand-context10.1 serializable?116_0 #t observable?117_0 #t to-parsed?115_0 #t ns_98))))"
"(let-values(((require-lifts_3 lifts_9 exp-s_6)(expand-capturing-lifts s_388 ctx_64)))"
"(if(if(null? require-lifts_3)(null? lifts_9) #f)"
"(let-values() exp-s_6)"
"(if to-parsed?_4"
"(let-values()"
"(let-values(((temp122_2)"
"(lambda(form_0)"
"(expand-single form_0 ns_98 observable?_4 to-parsed?_4 serializable?_9))))"
"(wrap-lifts-as-lifted-parsed-begin77.1 temp122_2 require-lifts_3 lifts_9 exp-s_6 rebuild-s_2)))"
"(let-values()"
"(let-values((()"
"(begin"
"(log-top-lift-begin-before ctx_64 require-lifts_3 lifts_9 exp-s_6 ns_98)"
"(values))))"
"(let-values(((new-s_1)"
"(let-values(((temp123_2)(append require-lifts_3 lifts_9))"
"((temp124_2)"
"(lambda(form_1)"
"(begin"
"(let-values(((obs_26)(expand-context-observer ctx_64)))"
"(if obs_26"
"(let-values()"
"(let-values()(call-expand-observe obs_26 'next)))"
"(void)))"
"(expand-single"
" form_1"
" ns_98"
" observable?_4"
" to-parsed?_4"
" serializable?_9))))"
"((temp125_1)"
"(lambda(form_2)"
"(if to-parsed?_4"
"(let-values() form_2)"
"(let-values()"
"(begin"
"(let-values(((obs_42)(expand-context-observer ctx_64)))"
"(if obs_42"
"(let-values()"
"(let-values()(call-expand-observe obs_42 'next)))"
"(void)))"
"(expand-single"
" form_2"
" ns_98"
" observable?_4"
" to-parsed?_4"
" serializable?_9))))))"
"((exp-s126_0) exp-s_6)"
"((temp127_2)(namespace-phase ns_98)))"
"(wrap-lifts-as-begin16.1"
" temp125_1"
" #t"
" temp124_2"
" #t"
" temp123_2"
" exp-s126_0"
" temp127_2))))"
"(begin(log-top-begin-after ctx_64 new-s_1) new-s_1))))))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once45_0)"
"(lambda(s44_1 ns42_1 ns43_0)"
"(begin"
" 'expand-once45"
"(let-values(((s_197) s44_1))"
"(let-values(((ns_99)(if ns43_0 ns42_1(1/current-namespace))))"
"(let-values()"
"(let-values(((temp130_2)"
"(lambda(s_200 ns_100 as-tail?_6)(expand-single-once s_200 ns_100)))"
"((cons131_0) cons)"
"((re-pair132_0) re-pair)"
"((temp133_2) #t)"
"((temp134_1) #t))"
"(per-top-level68.1"
" cons131_0"
" #t"
" temp133_2"
" #t"
" temp134_1"
" #f"
" #f"
" #f"
" #f"
" temp130_2"
" re-pair132_0"
" #t"
" s_197"
" ns_99)))))))))"
"(case-lambda"
"((s_320)(begin 'expand-once(expand-once45_0 s_320 #f #f)))"
"((s_435 ns42_2)(expand-once45_0 s_435 ns42_2 #t)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_63 ns_101)"
"(begin"
"(let-values(((require-lifts_4 lifts_10 exp-s_7)"
"(expand-capturing-lifts"
" s_63"
"(let-values(((v_111)"
"(let-values(((temp136_1) #t))"
"(make-expand-context10.1 #f #f temp136_1 #t #f #f ns_101))))"
"(let-values(((the-struct_70) v_111))"
"(if(expand-context/outer? the-struct_70)"
"(let-values(((inner137_0)"
"(let-values(((the-struct_71)(root-expand-context/outer-inner v_111)))"
"(if(expand-context/inner? the-struct_71)"
"(let-values(((just-once?138_0) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_71)"
"(root-expand-context/inner-top-level-bind-scope the-struct_71)"
"(root-expand-context/inner-all-scopes-stx the-struct_71)"
"(root-expand-context/inner-defined-syms the-struct_71)"
"(root-expand-context/inner-counter the-struct_71)"
"(root-expand-context/inner-lift-key the-struct_71)"
"(expand-context/inner-to-parsed? the-struct_71)"
"(expand-context/inner-phase the-struct_71)"
"(expand-context/inner-namespace the-struct_71)"
" just-once?138_0"
"(expand-context/inner-module-begin-k the-struct_71)"
"(expand-context/inner-allow-unbound? the-struct_71)"
"(expand-context/inner-in-local-expand? the-struct_71)"
"(expand-context/inner-stops the-struct_71)"
"(expand-context/inner-declared-submodule-names the-struct_71)"
"(expand-context/inner-lifts the-struct_71)"
"(expand-context/inner-lift-envs the-struct_71)"
"(expand-context/inner-module-lifts the-struct_71)"
"(expand-context/inner-require-lifts the-struct_71)"
"(expand-context/inner-to-module-lifts the-struct_71)"
"(expand-context/inner-requires+provides the-struct_71)"
"(expand-context/inner-observer the-struct_71)"
"(expand-context/inner-for-serializable? the-struct_71)"
"(expand-context/inner-should-not-encounter-macros? the-struct_71)))"
"(raise-argument-error"
" 'struct-copy"
"                                              \"expand-context/inner?\""
" the-struct_71)))))"
"(expand-context/outer1.1"
" inner137_0"
"(root-expand-context/outer-post-expansion-scope the-struct_70)"
"(root-expand-context/outer-use-site-scopes the-struct_70)"
"(root-expand-context/outer-frame-id the-struct_70)"
"(expand-context/outer-context the-struct_70)"
"(expand-context/outer-env the-struct_70)"
"(expand-context/outer-post-expansion-scope-action the-struct_70)"
"(expand-context/outer-scopes the-struct_70)"
"(expand-context/outer-def-ctx-scopes the-struct_70)"
"(expand-context/outer-binding-layer the-struct_70)"
"(expand-context/outer-reference-records the-struct_70)"
"(expand-context/outer-only-immediate? the-struct_70)"
"(expand-context/outer-need-eventually-defined the-struct_70)"
"(expand-context/outer-current-introduction-scopes the-struct_70)"
"(expand-context/outer-name the-struct_70)))"
"                           (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_70)))))))"
"(if(if(null? require-lifts_4)(null? lifts_10) #f)"
"(let-values() exp-s_7)"
"(let-values()"
"(let-values(((temp139_0)(append require-lifts_4 lifts_10))"
"((exp-s140_0) exp-s_7)"
"((temp141_1)(namespace-phase ns_101)))"
"(wrap-lifts-as-begin16.1 #f #f #f #f temp139_0 exp-s140_0 temp141_1))))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form50_0)"
"(lambda(s49_0 ns47_0 ns48_2)"
"(begin"
" 'expand-to-top-form50"
"(let-values(((s_203) s49_0))"
"(let-values(((ns_102)(if ns48_2 ns47_0(1/current-namespace))))"
"(let-values()"
"(begin"
"(log-expand-start)"
"(let-values(((temp144_1) #f)((temp145_0) #f)((temp146_0) #t))"
"(per-top-level68.1"
" #f"
" #f"
" #f"
" #f"
" temp146_0"
" temp145_0"
" #t"
" #f"
" #f"
" temp144_1"
" #f"
" #f"
" s_203"
" ns_102))))))))))"
"(case-lambda"
"((s_436)(begin 'expand-to-top-form(expand-to-top-form50_0 s_436 #f #f)))"
"((s_437 ns47_1)(expand-to-top-form50_0 s_437 ns47_1 #t)))))"
"(define-values"
"(per-top-level68.1)"
"(lambda(combine53_0"
" combine60_0"
" just-once?55_0"
" just-once?62_0"
" observable?58_0"
" quick-immediate?56_0"
" quick-immediate?63_0"
" serializable?57_0"
" serializable?64_0"
" single52_0"
" wrap54_0"
" wrap61_0"
" given-s66_0"
" ns67_1)"
"(begin"
" 'per-top-level68"
"(let-values(((given-s_0) given-s66_0))"
"(let-values(((ns_103) ns67_1))"
"(let-values(((single_0) single52_0))"
"(let-values(((combine_0)(if combine60_0 combine53_0 #f)))"
"(let-values(((wrap_2)(if wrap61_0 wrap54_0 #f)))"
"(let-values(((just-once?_1)(if just-once?62_0 just-once?55_0 #f)))"
"(let-values(((quick-immediate?_0)(if quick-immediate?63_0 quick-immediate?56_0 #t)))"
"(let-values(((serializable?_10)(if serializable?64_0 serializable?57_0 #f)))"
"(let-values(((observable?_5) observable?58_0))"
"(let-values()"
"(let-values(((s_438)(maybe-intro given-s_0 ns_103)))"
"(let-values(((ctx_1)"
"(let-values(((observable?148_0) observable?_5))"
"(make-expand-context10.1 #f #f observable?148_0 #t #f #f ns_103))))"
"(let-values(((phase_135)(namespace-phase ns_103)))"
"((letrec-values(((loop_98)"
"(lambda(s_209 phase_50 ns_104 as-tail?_7)"
"(begin"
" 'loop"
"(let-values(((tl-ctx_0)"
"(let-values(((v_193) ctx_1))"
"(let-values(((the-struct_72) v_193))"
"(if(expand-context/outer? the-struct_72)"
"(let-values(((inner149_0)"
"(let-values(((the-struct_73)"
"(root-expand-context/outer-inner"
" v_193)))"
"(if(expand-context/inner?"
" the-struct_73)"
"(let-values(((phase150_0)"
" phase_50)"
"((namespace151_0)"
" ns_104)"
"((just-once?152_0)"
" just-once?_1)"
"((for-serializable?153_0)"
" serializable?_10))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_73)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_73)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_73)"
"(root-expand-context/inner-defined-syms"
" the-struct_73)"
"(root-expand-context/inner-counter"
" the-struct_73)"
"(root-expand-context/inner-lift-key"
" the-struct_73)"
"(expand-context/inner-to-parsed?"
" the-struct_73)"
" phase150_0"
" namespace151_0"
" just-once?152_0"
"(expand-context/inner-module-begin-k"
" the-struct_73)"
"(expand-context/inner-allow-unbound?"
" the-struct_73)"
"(expand-context/inner-in-local-expand?"
" the-struct_73)"
"(expand-context/inner-stops"
" the-struct_73)"
"(expand-context/inner-declared-submodule-names"
" the-struct_73)"
"(expand-context/inner-lifts"
" the-struct_73)"
"(expand-context/inner-lift-envs"
" the-struct_73)"
"(expand-context/inner-module-lifts"
" the-struct_73)"
"(expand-context/inner-require-lifts"
" the-struct_73)"
"(expand-context/inner-to-module-lifts"
" the-struct_73)"
"(expand-context/inner-requires+provides"
" the-struct_73)"
"(expand-context/inner-observer"
" the-struct_73)"
" for-serializable?153_0"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_73)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                             \"expand-context/inner?\""
" the-struct_73)))))"
"(expand-context/outer1.1"
" inner149_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_72)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_72)"
"(root-expand-context/outer-frame-id"
" the-struct_72)"
"(expand-context/outer-context"
" the-struct_72)"
"(expand-context/outer-env the-struct_72)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_72)"
"(expand-context/outer-scopes the-struct_72)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_72)"
"(expand-context/outer-binding-layer"
" the-struct_72)"
"(expand-context/outer-reference-records"
" the-struct_72)"
"(expand-context/outer-only-immediate?"
" the-struct_72)"
"(expand-context/outer-need-eventually-defined"
" the-struct_72)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_72)"
"(expand-context/outer-name the-struct_72)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                           \"expand-context/outer?\""
" the-struct_72))))))"
"(let-values(((wb-s_0)(if just-once?_1 s_209 #f)))"
"(let-values(((require-lifts_5 lifts_11 exp-s_8)"
"(if(if quick-immediate?_0"
"(core-form-sym s_209 phase_50)"
" #f)"
"(values null null s_209)"
"(expand-capturing-lifts"
" s_209"
"(let-values(((v_194) tl-ctx_0))"
"(let-values(((the-struct_74) v_194))"
"(if(expand-context/outer? the-struct_74)"
"(let-values(((only-immediate?154_0)"
" #t)"
"((def-ctx-scopes155_0)"
"(box null))"
"((inner156_0)"
"(let-values(((the-struct_75)"
"(root-expand-context/outer-inner"
" v_194)))"
"(if(expand-context/inner?"
" the-struct_75)"
"(let-values(((phase157_0)"
" phase_50)"
"((namespace158_0)"
" ns_104))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_75)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_75)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_75)"
"(root-expand-context/inner-defined-syms"
" the-struct_75)"
"(root-expand-context/inner-counter"
" the-struct_75)"
"(root-expand-context/inner-lift-key"
" the-struct_75)"
"(expand-context/inner-to-parsed?"
" the-struct_75)"
" phase157_0"
" namespace158_0"
"(expand-context/inner-just-once?"
" the-struct_75)"
"(expand-context/inner-module-begin-k"
" the-struct_75)"
"(expand-context/inner-allow-unbound?"
" the-struct_75)"
"(expand-context/inner-in-local-expand?"
" the-struct_75)"
"(expand-context/inner-stops"
" the-struct_75)"
"(expand-context/inner-declared-submodule-names"
" the-struct_75)"
"(expand-context/inner-lifts"
" the-struct_75)"
"(expand-context/inner-lift-envs"
" the-struct_75)"
"(expand-context/inner-module-lifts"
" the-struct_75)"
"(expand-context/inner-require-lifts"
" the-struct_75)"
"(expand-context/inner-to-module-lifts"
" the-struct_75)"
"(expand-context/inner-requires+provides"
" the-struct_75)"
"(expand-context/inner-observer"
" the-struct_75)"
"(expand-context/inner-for-serializable?"
" the-struct_75)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_75)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                    \"expand-context/inner?\""
" the-struct_75)))))"
"(expand-context/outer1.1"
" inner156_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_74)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_74)"
"(root-expand-context/outer-frame-id"
" the-struct_74)"
"(expand-context/outer-context"
" the-struct_74)"
"(expand-context/outer-env"
" the-struct_74)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_74)"
"(expand-context/outer-scopes"
" the-struct_74)"
" def-ctx-scopes155_0"
"(expand-context/outer-binding-layer"
" the-struct_74)"
"(expand-context/outer-reference-records"
" the-struct_74)"
" only-immediate?154_0"
"(expand-context/outer-need-eventually-defined"
" the-struct_74)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_74)"
"(expand-context/outer-name"
" the-struct_74)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                  \"expand-context/outer?\""
" the-struct_74))))))))"
"(let-values(((disarmed-exp-s_0)(syntax-disarm$1 exp-s_8)))"
"(if(let-values(((or-part_293)(pair? require-lifts_5)))"
"(if or-part_293 or-part_293(pair? lifts_11)))"
"(let-values()"
"(let-values(((new-s_2)"
"(let-values(((temp159_1)"
"(append"
" require-lifts_5"
" lifts_11))"
"((exp-s160_0) exp-s_8)"
"((phase161_0) phase_50))"
"(wrap-lifts-as-begin16.1"
" #f"
" #f"
" #f"
" #f"
" temp159_1"
" exp-s160_0"
" phase161_0))))"
"(begin"
"(let-values(((obs_43)"
"(expand-context-observer tl-ctx_0)))"
"(if obs_43"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_43"
" 'lift-loop"
" new-s_2)))"
"(void)))"
"(if just-once?_1"
" new-s_2"
"(loop_98 new-s_2 phase_50 ns_104 as-tail?_7)))))"
"(if(not single_0)"
"(let-values() exp-s_8)"
"(if(if just-once?_1(not(eq? exp-s_8 wb-s_0)) #f)"
"(let-values() exp-s_8)"
"(let-values()"
"(let-values(((tmp_36)"
"(core-form-sym"
" disarmed-exp-s_0"
" phase_50)))"
"(if(equal? tmp_36 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(log-top-begin-before"
" ctx_1"
" exp-s_8)"
"(values))))"
"(let-values(((ok?_28 begin162_0 e163_0)"
"(let-values(((s_395)"
" disarmed-exp-s_0))"
"(let-values(((orig-s_34)"
" s_395))"
"(let-values(((begin162_1"
" e163_1)"
"(let-values(((s_111)"
"(if(syntax?$1"
" s_395)"
"(syntax-e$1"
" s_395)"
" s_395)))"
"(if(pair?"
" s_111)"
"(let-values(((begin164_0)"
"(let-values(((s_439)"
"(car"
" s_111)))"
" s_439))"
"((e165_0)"
"(let-values(((s_112)"
"(cdr"
" s_111)))"
"(let-values(((s_420)"
"(if(syntax?$1"
" s_112)"
"(syntax-e$1"
" s_112)"
" s_112)))"
"(let-values(((flat-s_20)"
"(to-syntax-list.1"
" s_420)))"
"(if(not"
" flat-s_20)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_34))"
"(let-values()"
" flat-s_20)))))))"
"(values"
" begin164_0"
" e165_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_34)))))"
"(values"
" #t"
" begin162_1"
" e163_1))))))"
"(letrec-values(((begin-loop_0)"
"(lambda(es_2)"
"(begin"
" 'begin-loop"
"(if(null? es_2)"
"(let-values()"
"(if combine_0"
" null"
"(void)))"
"(if(if(not"
" combine_0)"
"(null?"
"(cdr"
" es_2))"
" #f)"
"(let-values()"
"(loop_98"
"(car es_2)"
" phase_50"
" ns_104"
" as-tail?_7))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_44)"
"(expand-context-observer"
" tl-ctx_0)))"
"(if obs_44"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_44"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((a_63)"
"(if combine_0"
"(loop_98"
"(car"
" es_2)"
" phase_50"
" ns_104"
" #f)"
"(begin"
"(loop_98"
"(car"
" es_2)"
" phase_50"
" ns_104"
" #f)"
"(void)))))"
"(if combine_0"
"(combine_0"
" a_63"
"(begin-loop_0"
"(cdr"
" es_2)))"
"(begin-loop_0"
"(cdr"
" es_2))))))))))))"
"(if wrap_2"
"(let-values()"
"(let-values(((new-s_3)"
"(wrap_2"
" begin162_0"
" exp-s_8"
"(begin-loop_0"
" e163_0))))"
"(begin"
"(log-top-begin-after"
" tl-ctx_0"
" new-s_3)"
" new-s_3)))"
"(let-values()"
"(begin-loop_0 e163_0)))))))"
"(if(equal? tmp_36 'begin-for-syntax)"
"(let-values()"
"(let-values(((ok?_29"
" begin-for-syntax166_0"
" e167_0)"
"(let-values(((s_221)"
" disarmed-exp-s_0))"
"(let-values(((orig-s_35)"
" s_221))"
"(let-values(((begin-for-syntax166_1"
" e167_1)"
"(let-values(((s_440)"
"(if(syntax?$1"
" s_221)"
"(syntax-e$1"
" s_221)"
" s_221)))"
"(if(pair?"
" s_440)"
"(let-values(((begin-for-syntax168_0)"
"(let-values(((s_441)"
"(car"
" s_440)))"
" s_441))"
"((e169_0)"
"(let-values(((s_442)"
"(cdr"
" s_440)))"
"(let-values(((s_224)"
"(if(syntax?$1"
" s_442)"
"(syntax-e$1"
" s_442)"
" s_442)))"
"(let-values(((flat-s_21)"
"(to-syntax-list.1"
" s_224)))"
"(if(not"
" flat-s_21)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_35))"
"(let-values()"
" flat-s_21)))))))"
"(values"
" begin-for-syntax168_0"
" e169_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_35)))))"
"(values"
" #t"
" begin-for-syntax166_1"
" e167_1))))))"
"(let-values(((next-phase_0)"
"(add1 phase_50)))"
"(let-values(((next-ns_0)"
"(namespace->namespace-at-phase"
" ns_104"
" next-phase_0)))"
"(let-values((()"
"(begin"
"(if quick-immediate?_0"
"(let-values()"
"(namespace-visit-available-modules!"
" ns_104))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_0)"
"(values))))"
"(let-values(((l_72)"
"(reverse$1"
"(let-values(((lst_294)"
" e167_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_294)))"
"((letrec-values(((for-loop_255)"
"(lambda(fold-var_260"
" lst_295)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_295)"
"(let-values(((s_443)"
"(unsafe-car"
" lst_295))"
"((rest_166)"
"(unsafe-cdr"
" lst_295)))"
"(let-values(((fold-var_261)"
"(let-values(((fold-var_262)"
" fold-var_260))"
"(let-values(((fold-var_263)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_98"
" s_443"
" next-phase_0"
" next-ns_0"
" #f))"
" fold-var_262))))"
"(values"
" fold-var_263)))))"
"(if(not"
" #f)"
"(for-loop_255"
" fold-var_261"
" rest_166)"
" fold-var_261)))"
" fold-var_260)))))"
" for-loop_255)"
" null"
" lst_294))))))"
"(if wrap_2"
"(let-values()"
"(wrap_2"
" begin-for-syntax166_0"
" exp-s_8"
" l_72))"
"(if combine_0"
"(let-values() l_72)"
"(let-values()"
"(void)))))))))))"
"(let-values()"
"(single_0"
" exp-s_8"
" ns_104"
" as-tail?_7)))))))))))))))))"
" loop_98)"
" s_438"
" phase_135"
" ns_103"
" #t)))))))))))))))))"
"(define-values"
"(maybe-intro)"
"(lambda(s_235 ns_105)"
"(begin(if(syntax?$1 s_235) s_235(1/namespace-syntax-introduce(1/datum->syntax #f s_235) ns_105)))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_0 s_444 r_45)"
"(begin(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_444)(cons form-id_0 r_45) s_444 s_444) s_444))))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_339 ctx_65)"
"(begin"
"(let-values()"
"(let-values(((ns_106)(expand-context-namespace ctx_65)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_106)(values))))"
"(let-values(((lift-ctx_6)"
"(let-values(((temp170_1)(make-top-level-lift ctx_65)))"
"(make-lift-context6.1 #f #f temp170_1))))"
"(let-values(((require-lift-ctx_2)"
"(make-require-lift-context"
"(namespace-phase ns_106)"
"(make-parse-top-lifted-require ns_106))))"
"(let-values(((exp-s_9)"
"(let-values(((s171_0) s_339)"
"((temp172_0)"
"(let-values(((v_195) ctx_65))"
"(let-values(((the-struct_76) v_195))"
"(if(expand-context/outer? the-struct_76)"
"(let-values(((inner173_0)"
"(let-values(((the-struct_77)"
"(root-expand-context/outer-inner v_195)))"
"(if(expand-context/inner? the-struct_77)"
"(let-values(((lifts174_0) lift-ctx_6)"
"((module-lifts175_0) lift-ctx_6)"
"((require-lifts176_0)"
" require-lift-ctx_2))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_77)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_77)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_77)"
"(root-expand-context/inner-defined-syms"
" the-struct_77)"
"(root-expand-context/inner-counter the-struct_77)"
"(root-expand-context/inner-lift-key"
" the-struct_77)"
"(expand-context/inner-to-parsed? the-struct_77)"
"(expand-context/inner-phase the-struct_77)"
"(expand-context/inner-namespace the-struct_77)"
"(expand-context/inner-just-once? the-struct_77)"
"(expand-context/inner-module-begin-k"
" the-struct_77)"
"(expand-context/inner-allow-unbound?"
" the-struct_77)"
"(expand-context/inner-in-local-expand?"
" the-struct_77)"
"(expand-context/inner-stops the-struct_77)"
"(expand-context/inner-declared-submodule-names"
" the-struct_77)"
" lifts174_0"
"(expand-context/inner-lift-envs the-struct_77)"
" module-lifts175_0"
" require-lifts176_0"
"(expand-context/inner-to-module-lifts"
" the-struct_77)"
"(expand-context/inner-requires+provides"
" the-struct_77)"
"(expand-context/inner-observer the-struct_77)"
"(expand-context/inner-for-serializable?"
" the-struct_77)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_77)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context/inner?\""
" the-struct_77)))))"
"(expand-context/outer1.1"
" inner173_0"
"(root-expand-context/outer-post-expansion-scope the-struct_76)"
"(root-expand-context/outer-use-site-scopes the-struct_76)"
"(root-expand-context/outer-frame-id the-struct_76)"
"(expand-context/outer-context the-struct_76)"
"(expand-context/outer-env the-struct_76)"
"(expand-context/outer-post-expansion-scope-action the-struct_76)"
"(expand-context/outer-scopes the-struct_76)"
"(expand-context/outer-def-ctx-scopes the-struct_76)"
"(expand-context/outer-binding-layer the-struct_76)"
"(expand-context/outer-reference-records the-struct_76)"
"(expand-context/outer-only-immediate? the-struct_76)"
"(expand-context/outer-need-eventually-defined the-struct_76)"
"(expand-context/outer-current-introduction-scopes the-struct_76)"
"(expand-context/outer-name the-struct_76)))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context/outer?\""
" the-struct_76))))))"
"(expand7.1 #f #f #f #f s171_0 temp172_0))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_2)"
"(get-and-clear-lifts! lift-ctx_6)"
" exp-s_9))))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_107)"
"(begin"
"(lambda(s_445 phase_136)"
"(let-values(((ok?_30 #%require177_0 req178_0)"
"(let-values(((s_350)(syntax-disarm$1 s_445)))"
"(let-values(((orig-s_36) s_350))"
"(let-values(((#%require177_1 req178_1)"
"(let-values(((s_244)(if(syntax?$1 s_350)(syntax-e$1 s_350) s_350)))"
"(if(pair? s_244)"
"(let-values(((#%require179_0)(let-values(((s_446)(car s_244))) s_446))"
"((req180_0)"
"(let-values(((s_447)(cdr s_244)))"
"(let-values(((s_448)"
"(if(syntax?$1 s_447)"
"(syntax-e$1 s_447)"
" s_447)))"
"(if(pair? s_448)"
"(let-values(((req181_0)"
"(let-values(((s_449)(car s_448)))"
" s_449))"
"(()"
"(let-values(((s_450)(cdr s_448)))"
"(let-values(((s_355)"
"(if(syntax?$1 s_450)"
"(syntax-e$1 s_450)"
" s_450)))"
"(if(null? s_355)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_36))))))"
"(values req181_0))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_36))))))"
"(values #%require179_0 req180_0))"
"                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_36)))))"
"(values #t #%require177_1 req178_1))))))"
"(let-values(((temp182_0)(list req178_0))"
"((s183_0) s_445)"
"((ns184_0) ns_107)"
"((phase185_0) phase_136)"
"((phase186_0) phase_136)"
"((temp187_0)(let-values(((temp189_0) #f))(make-requires+provides8.1 #f #f temp189_0)))"
"((temp188_0) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" phase186_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp188_0"
" temp182_0"
" s183_0"
" ns184_0"
" phase185_0"
" temp187_0)))))))"
"(define-values"
"(wrap-lifts-as-lifted-parsed-begin77.1)"
"(lambda(adjust-form71_0 require-lifts73_0 lifts74_0 exp-s75_0 rebuild-s76_0)"
"(begin"
" 'wrap-lifts-as-lifted-parsed-begin77"
"(let-values(((require-lifts_6) require-lifts73_0))"
"(let-values(((lifts_12) lifts74_0))"
"(let-values(((exp-s_10) exp-s75_0))"
"(let-values(((rebuild-s_3) rebuild-s76_0))"
"(let-values(((adjust-form_1) adjust-form71_0))"
"(let-values()"
"(lifted-parsed-begin30.1"
"(append"
"(reverse$1"
"(let-values(((lst_296) require-lifts_6))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_296)))"
"((letrec-values(((for-loop_256)"
"(lambda(fold-var_264 lst_297)"
"(begin"
" 'for-loop"
"(if(pair? lst_297)"
"(let-values(((req_19)(unsafe-car lst_297))"
"((rest_167)(unsafe-cdr lst_297)))"
"(let-values(((fold-var_265)"
"(let-values(((fold-var_266) fold-var_264))"
"(let-values(((fold-var_267)"
"(let-values()"
"(cons"
"(let-values()"
"(parsed-require23.1 req_19))"
" fold-var_266))))"
"(values fold-var_267)))))"
"(if(not #f)(for-loop_256 fold-var_265 rest_167) fold-var_265)))"
" fold-var_264)))))"
" for-loop_256)"
" null"
" lst_296))))"
"(reverse$1"
"(let-values(((lst_298)(get-lifts-as-lists lifts_12)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_298)))"
"((letrec-values(((for-loop_257)"
"(lambda(fold-var_268 lst_299)"
"(begin"
" 'for-loop"
"(if(pair? lst_299)"
"(let-values(((ids+syms+rhs_0)(unsafe-car lst_299))"
"((rest_168)(unsafe-cdr lst_299)))"
"(let-values(((fold-var_269)"
"(let-values(((fold-var_270) fold-var_268))"
"(let-values(((fold-var_271)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((exp-rhs_3)"
"(adjust-form_1"
"(caddr"
" ids+syms+rhs_0))))"
"(let-values(((just-rhs_0)"
"(if(lifted-parsed-begin?"
" exp-rhs_3)"
"(lifted-parsed-begin-last"
" exp-rhs_3)"
" exp-rhs_3)))"
"(let-values(((dv_0)"
"(parsed-define-values19.1"
" rebuild-s_3"
"(car"
" ids+syms+rhs_0)"
"(cadr"
" ids+syms+rhs_0)"
" just-rhs_0)))"
"(if(lifted-parsed-begin?"
" exp-rhs_3)"
"(let-values(((the-struct_78)"
" exp-rhs_3))"
"(if(lifted-parsed-begin?"
" the-struct_78)"
"(let-values(((last190_0)"
" dv_0))"
"(lifted-parsed-begin30.1"
"(lifted-parsed-begin-seq"
" the-struct_78)"
" last190_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"lifted-parsed-begin?\""
" the-struct_78)))"
" dv_0)))))"
" fold-var_270))))"
"(values fold-var_271)))))"
"(if(not #f)(for-loop_257 fold-var_269 rest_168) fold-var_269)))"
" fold-var_268)))))"
" for-loop_257)"
" null"
" lst_298)))))"
" exp-s_10))))))))))"
"(define-values"
"(log-top-lift-begin-before)"
"(lambda(ctx_66 require-lifts_7 lifts_13 exp-s_11 ns_108)"
"(begin"
"(let-values(((obs_45)(expand-context-observer ctx_66)))"
"(if obs_45"
"(let-values()"
"(let-values(((new-s_4)"
"(let-values(((temp191_0)(append require-lifts_7 lifts_13))"
"((exp-s192_0) exp-s_11)"
"((temp193_0)(namespace-phase ns_108)))"
"(wrap-lifts-as-begin16.1 #f #f #f #f temp191_0 exp-s192_0 temp193_0))))"
"(begin(call-expand-observe obs_45 'lift-loop new-s_4)(log-top-begin-before ctx_66 new-s_4))))"
"(void))))))"
"(define-values"
"(log-top-begin-before)"
"(lambda(ctx_67 new-s_5)"
"(begin"
"(let-values(((obs_46)(expand-context-observer ctx_67)))"
"(if obs_46"
"(let-values()"
"(let-values(((ok?_31 begin194_0 e195_0)"
"(let-values(((s_262) new-s_5))"
"(let-values(((orig-s_37) s_262))"
"(let-values(((begin194_1 e195_1)"
"(let-values(((s_451)(if(syntax?$1 s_262)(syntax-e$1 s_262) s_262)))"
"(if(pair? s_451)"
"(let-values(((begin196_0)(let-values(((s_266)(car s_451))) s_266))"
"((e197_0)"
"(let-values(((s_267)(cdr s_451)))"
"(let-values(((s_452)"
"(if(syntax?$1 s_267)"
"(syntax-e$1 s_267)"
" s_267)))"
"(let-values(((flat-s_22)(to-syntax-list.1 s_452)))"
"(if(not flat-s_22)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_37))"
"(let-values() flat-s_22)))))))"
"(values begin196_0 e197_0))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_37)))))"
"(values #t begin194_1 e195_1))))))"
"(begin"
"(call-expand-observe obs_46 'visit new-s_5)"
"(call-expand-observe obs_46 'resolve begin194_0)"
"(call-expand-observe obs_46 'enter-prim new-s_5)"
"(call-expand-observe obs_46 'prim-begin)"
"(call-expand-observe obs_46 'enter-list(1/datum->syntax #f e195_0 new-s_5)))))"
"(void))))))"
"(define-values"
"(log-top-begin-after)"
"(lambda(ctx_68 new-s_6)"
"(begin"
"(let-values(((obs_47)(expand-context-observer ctx_68)))"
"(if obs_47"
"(let-values()"
"(let-values(((ok?_32 begin198_0 e199_0)"
"(let-values(((s_453) new-s_6))"
"(let-values(((orig-s_38) s_453))"
"(let-values(((begin198_1 e199_1)"
"(let-values(((s_454)(if(syntax?$1 s_453)(syntax-e$1 s_453) s_453)))"
"(if(pair? s_454)"
"(let-values(((begin200_0)(let-values(((s_455)(car s_454))) s_455))"
"((e201_0)"
"(let-values(((s_456)(cdr s_454)))"
"(let-values(((s_457)"
"(if(syntax?$1 s_456)"
"(syntax-e$1 s_456)"
" s_456)))"
"(let-values(((flat-s_23)(to-syntax-list.1 s_457)))"
"(if(not flat-s_23)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_38))"
"(let-values() flat-s_23)))))))"
"(values begin200_0 e201_0))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_38)))))"
"(values #t begin198_1 e199_1))))))"
"(let-values(((obs_48)(expand-context-observer ctx_68)))"
"(if obs_48"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_48 'exit-list(1/datum->syntax #f e199_0 new-s_6))"
"(call-expand-observe obs_48 'exit-prim new-s_6)"
"(call-expand-observe obs_48 'return new-s_6))))"
"(void)))))"
"(void))))))"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require6_0)"
"(lambda(who3_0 mod-path4_0 sym5_0 fail-k1_0 fail-k2_0)"
"(begin"
" 'do-dynamic-require6"
"(let-values(((who_20) who3_0))"
"(let-values(((mod-path_5) mod-path4_0))"
"(let-values(((sym_80) sym5_0))"
"(let-values(((fail-k_2)(if fail-k2_0 fail-k1_0 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_3)(1/module-path? mod-path_5)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(1/module-path-index? mod-path_5)))"
"(if or-part_4 or-part_4(1/resolved-module-path? mod-path_5)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_20"
"                                                   \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_5)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_5)(symbol? sym_80)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(not sym_80)))"
"(if or-part_6"
" or-part_6"
"(let-values(((or-part_285)(equal? sym_80 0)))"
"(if or-part_285 or-part_285(void? sym_80)))))))"
"(void)"
"(let-values()"
"                                                    (raise-argument-error who_20 \"(or/c symbol? #f 0 void?)\" sym_80)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_2)"
"(procedure-arity-includes? fail-k_2 0)"
" #f)"
"(void)"
"                                                    (let-values () (raise-argument-error who_20 \"(-> any)\" fail-k_2)))"
"(values))))"
"(let-values(((ns_57)(1/current-namespace)))"
"(let-values(((mpi_45)"
"(if(1/module-path? mod-path_5)"
"(let-values()(1/module-path-index-join mod-path_5 #f))"
"(if(1/module-path-index? mod-path_5)"
"(let-values() mod-path_5)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_5)"
" #f))))))"
"(let-values(((mod-name_22)(1/module-path-index-resolve mpi_45 #t)))"
"(let-values(((phase_137)(namespace-phase ns_57)))"
"(if(not sym_80)"
"(let-values()"
"(let-values(((phase23_0) phase_137)((temp24_5) #f))"
"(namespace-module-instantiate!96.1"
" temp24_5"
" #t"
" phase23_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns_57"
" mpi_45"
" phase_137)))"
"(if(equal? sym_80 0)"
"(let-values()"
"(let-values(((phase28_1) phase_137))"
"(namespace-module-instantiate!96.1"
" #f"
" #f"
" phase28_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns_57"
" mpi_45"
" phase_137)))"
"(if(void? sym_80)"
"(let-values()"
"(let-values(((phase32_4) phase_137))"
"(namespace-module-visit!104.1"
" phase32_4"
" #t"
" ns_57"
" mpi_45"
" phase_137)))"
"(let-values()"
"(let-values(((m_22)(namespace->module ns_57 mod-name_22)))"
"(let-values((()"
"(begin"
"(if m_22"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'dynamic-require"
" mod-name_22)))"
"(values))))"
"(let-values(((binding/p_5)"
"(hash-ref"
"(hash-ref(module-provides m_22) 0 '#hasheq())"
" sym_80"
" #f)))"
"(if(not binding/p_5)"
"(let-values()"
"(if(eq? fail-k_2 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                 \"name is not provided\""
"                                                                 \"name\""
" sym_80"
"                                                                 \"module\""
" mod-name_22)"
"(fail-k_2)))"
"(let-values()"
"(let-values(((binding_26)"
"(provided-as-binding binding/p_5)))"
"(let-values(((ex-sym_2)"
"(module-binding-sym binding_26)))"
"(let-values(((ex-phase_0)"
"(module-binding-phase binding_26)))"
"(let-values((()"
"(begin"
"(let-values(((phase36_0)"
" phase_137))"
"(namespace-module-instantiate!96.1"
" #f"
" #f"
" phase36_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" ns_57"
" mpi_45"
" phase_137))"
"(values))))"
"(let-values(((ex-mod-name_0)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module binding_26)"
"(module-self m_22)"
" mpi_45))))"
"(let-values(((m-ns_16)"
"(let-values(((temp39_4)"
"(phase-"
" phase_137"
" ex-phase_0))"
"((temp40_2) #t))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" temp40_2"
" #t"
" #f"
" #f"
" ns_57"
" ex-mod-name_0"
" temp39_4))))"
"(let-values(((ex-m_0)"
"(namespace->module"
" ns_57"
" ex-mod-name_0)))"
"(let-values(((access_4)"
"(let-values(((or-part_70)"
"(module-access"
" ex-m_0)))"
"(if or-part_70"
" or-part_70"
"(module-compute-access!"
" ex-m_0)))))"
"(let-values((()"
"(begin"
"(if(if(not"
"(eq?"
" 'provided"
"(hash-ref"
"(hash-ref"
" access_4"
" ex-phase_0"
" '#hasheq())"
" ex-sym_2"
" #f)))"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_16)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_26)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_26)"
"(namespace-inspector"
" m-ns_16))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                   \"name is protected\""
"                                                                                                   \"name\""
" sym_80"
"                                                                                                   \"module\""
" mod-name_22))"
"(void))"
"(values))))"
"(let-values(((fail_1)"
"(lambda()"
"(begin"
" 'fail"
"(if(eq?"
" fail-k_2"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                     \"name's binding is missing\""
"                                                                                                     \"name\""
" sym_80"
"                                                                                                     \"module\""
" mod-name_22)"
"(fail-k_2))))))"
"(if(not"
"(provided-as-transformer?"
" binding/p_5))"
"(let-values()"
"(namespace-get-variable"
" m-ns_16"
" ex-phase_0"
" ex-sym_2"
" fail_1))"
"(let-values()"
"(let-values(((missing_1)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((phase44_0)"
" phase_137))"
"(namespace-module-visit!104.1"
" phase44_0"
" #t"
" ns_57"
" mpi_45"
" phase_137))"
"(values))))"
"(let-values(((t_54)"
"(namespace-get-transformer"
" m-ns_16"
" ex-phase_0"
" ex-sym_2"
" missing_1)))"
"(if(eq? t_54 missing_1)"
"(let-values()(fail_1))"
"(let-values()"
"(let-values(((tmp-ns_0)"
"(let-values(((ns45_1)"
" ns_57))"
"(new-namespace9.1"
" #f"
" #f"
" #f"
" #f"
" ns45_1"
" #t))))"
"(let-values(((mod-path_17)"
"(resolved-module-path->module-path"
" mod-name_22)))"
"(begin"
"(1/namespace-require"
" mod-path_17"
" tmp-ns_0)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" tmp-ns_0)"
"(let-values()"
"(1/eval"
" sym_80"
" tmp-ns_0))))))))))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_21 mod-path_16 sym_81)(begin(do-dynamic-require6_0 who_21 mod-path_16 sym_81 #f #f)))"
"((who_22 mod-path_18 sym_82 fail-k1_1)(do-dynamic-require6_0 who_22 mod-path_18 sym_82 fail-k1_1 #t)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (begin (error \"failed\"))))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require12_0)"
"(lambda(mod-path10_2 sym11_0 fail-k8_0 fail-k9_0)"
"(begin"
" 'dynamic-require12"
"(let-values(((mod-path_19) mod-path10_2))"
"(let-values(((sym_83) sym11_0))"
"(let-values(((fail-k_3)(if fail-k9_0 fail-k8_0 default-dynamic-require-fail-thunk)))"
"(let-values()(do-dynamic-require 'dynamic-require mod-path_19 sym_83 fail-k_3)))))))))"
"(case-lambda"
"((mod-path_20 sym_10)(begin 'dynamic-require(dynamic-require12_0 mod-path_20 sym_10 #f #f)))"
"((mod-path_21 sym_84 fail-k8_1)(dynamic-require12_0 mod-path_21 sym_84 fail-k8_1 #t)))))"
"(define-values"
"(1/dynamic-require-for-syntax)"
"(let-values(((dynamic-require-for-syntax18_0)"
"(lambda(mod-path16_0 sym17_1 fail-k14_0 fail-k15_0)"
"(begin"
" 'dynamic-require-for-syntax18"
"(let-values(((mod-path_22) mod-path16_0))"
"(let-values(((sym_85) sym17_1))"
"(let-values(((fail-k_4)(if fail-k15_0 fail-k14_0 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
"(let-values(((ns_109)(1/current-namespace)))"
"(namespace->namespace-at-phase ns_109(add1(namespace-phase ns_109)))))"
"(let-values()"
"(do-dynamic-require 'dynamic-require-for-syntax mod-path_22 sym_85 fail-k_4)))))))))))"
"(case-lambda"
"((mod-path_23 sym_86)"
"(begin 'dynamic-require-for-syntax(dynamic-require-for-syntax18_0 mod-path_23 sym_86 #f #f)))"
"((mod-path_24 sym_87 fail-k14_1)(dynamic-require-for-syntax18_0 mod-path_24 sym_87 fail-k14_1 #t)))))"
" (define-values (replace-me) (lambda (who_0) (begin (lambda args_6 (error who_0 \"this stub must be replaced\")))))"
"(define-values"
"(1/current-eval)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-eval)"
"(lambda(p_45)"
"(begin"
"(if((lambda(p_46)(if(procedure? p_46)(procedure-arity-includes? p_46 1) #f)) p_45)"
"(void)"
"             (let-values () (raise-argument-error 'current-eval \"(procedure-arity-includes/c 1)\" p_45)))"
" p_45))))))"
"(define-values"
"(1/current-compile)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-compile)"
"(lambda(p_30)"
"(begin"
"(if((lambda(p_47)(if(procedure? p_47)(procedure-arity-includes? p_47 2) #f)) p_30)"
"(void)"
"             (let-values () (raise-argument-error 'current-compile \"(procedure-arity-includes/c 2)\" p_30)))"
" p_30))))))"
"(define-values"
"(1/current-load)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-load)"
"(lambda(p_48)"
"(begin"
"(if((lambda(p_49)(if(procedure? p_49)(procedure-arity-includes? p_49 2) #f)) p_48)"
"(void)"
"             (let-values () (raise-argument-error 'current-load \"(procedure-arity-includes/c 2)\" p_48)))"
" p_48))))))"
"(define-values"
"(1/current-load/use-compiled)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-load/use-compiled)"
"(lambda(p_34)"
"(begin"
"(if((lambda(p_50)(if(procedure? p_50)(procedure-arity-includes? p_50 2) #f)) p_34)"
"(void)"
"             (let-values () (raise-argument-error 'current-load/use-compiled \"(procedure-arity-includes/c 2)\" p_34)))"
" p_34))))))"
"(define-values"
"(1/current-library-collection-paths)"
"(let-values()"
"(let-values()"
"(make-parameter"
" null"
"(lambda(l_7)"
"(begin"
"(if((lambda(l_73)(if(list? l_73)(andmap2 complete-path-string? l_73) #f)) l_7)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-library-collection-paths"
"                \"(listof (and/c path-string? complete-path?))\""
" l_7)))"
"(map2 to-path l_7)))))))"
"(define-values"
"(1/current-library-collection-links)"
"(let-values()"
"(let-values()"
"(make-parameter"
" null"
"(lambda(l_74)"
"(begin"
"(if((lambda(l_8)"
"(if(list? l_8)"
"(andmap2"
"(lambda(p_51)"
"(let-values(((or-part_289)(not p_51)))"
"(if or-part_289"
" or-part_289"
"(let-values(((or-part_290)(complete-path-string? p_51)))"
"(if or-part_290"
" or-part_290"
"(if(hash? p_51)"
"(let-values(((ht_146) p_51))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_146)))"
"((letrec-values(((for-loop_177)"
"(lambda(result_109 i_85)"
"(begin"
" 'for-loop"
"(if i_85"
"(let-values(((k_34 v_3)"
"(hash-iterate-key+value ht_146 i_85)))"
"(let-values(((result_110)"
"(let-values()"
"(let-values(((result_111)"
"(let-values()"
"(let-values()"
"(if(let-values(((or-part_78)"
"(not"
" k_34)))"
"(if or-part_78"
" or-part_78"
"(if(symbol?"
" k_34)"
"(1/module-path?"
" k_34)"
" #f)))"
"(if(list? v_3)"
"(andmap2"
" complete-path-string?"
" v_3)"
" #f)"
" #f)))))"
"(values result_111)))))"
"(if(if(not((lambda x_79(not result_110)) k_34 v_3))"
"(not #f)"
" #f)"
"(for-loop_177"
" result_110"
"(hash-iterate-next ht_146 i_85))"
" result_110)))"
" result_109)))))"
" for-loop_177)"
" #t"
"(hash-iterate-first ht_146))))"
" #f))))))"
" l_8)"
" #f))"
" l_74)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-library-collection-links"
"(string-append"
"                 \"(listof (or/c #f\\n\""
"                 \"              (and/c path-string? complete-path?)\\n\""
"                 \"              (hash/c (or/c (and/c symbol? module-path?) #f)\\n\""
"                 \"                      (listof (and/c path-string? complete-path?)))))\")"
" l_74)))"
"(map2"
"(lambda(p_3)"
"(if(not p_3)"
"(let-values() #f)"
"(if(path? p_3)"
"(let-values() p_3)"
"(if(string? p_3)"
"(let-values()(string->path p_3))"
"(let-values()"
"(let-values(((ht_147) p_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_147)))"
"((letrec-values(((for-loop_258)"
"(lambda(table_201 i_86)"
"(begin"
" 'for-loop"
"(if i_86"
"(let-values(((k_35 v_196)(hash-iterate-key+value ht_147 i_86)))"
"(let-values(((table_202)"
"(let-values(((table_103) table_201))"
"(let-values(((table_203)"
"(let-values()"
"(let-values(((key_82 val_73)"
"(let-values()"
"(values"
" k_35"
"(to-path v_196)))))"
"(hash-set"
" table_103"
" key_82"
" val_73)))))"
"(values table_203)))))"
"(if(not #f)"
"(for-loop_258 table_202(hash-iterate-next ht_147 i_86))"
" table_202)))"
" table_201)))))"
" for-loop_258)"
" '#hash()"
"(hash-iterate-first ht_147)))))))))"
" l_74)))))))"
"(define-values"
"(1/use-compiled-file-paths)"
"(let-values()"
"(let-values()"
"(make-parameter"
"       (list (string->path \"compiled\"))"
"(lambda(l_48)"
"(begin"
"(if((lambda(l_75)(if(list? l_75)(andmap2 relative-path-string?$1 l_75) #f)) l_48)"
"(void)"
"(let-values()"
"               (raise-argument-error 'use-compiled-file-paths \"(listof (and/c path-string? relative-path?))\" l_48)))"
"(map2 to-path l_48)))))))"
"(define-values"
"(1/current-compiled-file-roots)"
"(let-values()"
"(let-values()"
"(make-parameter"
" '(same)"
"(lambda(l_76)"
"(begin"
"(if((lambda(l_77)"
"(if(list? l_77)"
"(andmap2"
"(lambda(p_52)"
"(let-values(((or-part_8)(path-string? p_52)))(if or-part_8 or-part_8(eq? p_52 'same))))"
" l_77)"
" #f))"
" l_76)"
"(void)"
"(let-values()"
"               (raise-argument-error 'current-compiled-file-roots \"(listof (or/c path-string? 'same))\" l_76)))"
"(map2 to-path l_76)))))))"
"(define-values"
"(1/use-compiled-file-check)"
"(let-values()"
"(let-values()"
"(make-parameter"
" 'modify-seconds"
"(lambda(v_181)"
"(begin"
"(if((lambda(v_64)"
"(let-values(((or-part_21)(eq? v_64 'modify-seconds)))"
"(if or-part_21 or-part_21(eq? v_64 'exists))))"
" v_181)"
"(void)"
"             (let-values () (raise-argument-error 'use-compiled-file-check \"(or/c 'modify-seconds 'exists)\" v_181)))"
" v_181))))))"
"(define-values(1/use-collection-link-paths)(make-parameter #t(lambda(v_76)(if v_76 #t #f))))"
"(define-values(1/use-user-specific-search-paths)(make-parameter #t(lambda(v_197)(if v_197 #t #f))))"
"(define-values(complete-path-string?)(lambda(p_20)(begin(if(path-string? p_20)(complete-path? p_20) #f))))"
"(define-values"
"(relative-path-string?$1)"
"(lambda(p_53)(begin 'relative-path-string?(if(path-string? p_53)(relative-path? p_53) #f))))"
"(define-values(to-path)(lambda(p_54)(begin(if(string? p_54)(string->path p_54) p_54))))"
"(define-values"
"(1/load)"
"(lambda(s_0)"
"(begin"
" 'load"
"(let-values()"
"(let-values()"
"(begin"
"            (if (path-string? s_0) (void) (let-values () (raise-argument-error 'load \"path-string?\" s_0)))"
"(call-with-current-load-relative-directory s_0(lambda()((1/current-load) s_0 #f)))))))))"
"(define-values"
"(1/load-extension)"
"(lambda(s_158)"
"(begin"
" 'load-extension"
"(let-values()"
"(let-values()"
"(begin"
"            (if (path-string? s_158) (void) (let-values () (raise-argument-error 'load-extension \"path-string?\" s_158)))"
"(call-with-current-load-relative-directory s_158(lambda()((current-load-extension) s_158 #f)))))))))"
"(define-values"
"(call-with-current-load-relative-directory)"
"(lambda(p_46 thunk_4)"
"(begin"
"(let-values(((base_2 name_3 dir?_2)(split-path p_46)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(eq? base_2 'relative)(current-directory)(path->complete-path base_2)))"
"(let-values()(thunk_4)))))))"
"(define-values"
"(1/load/use-compiled)"
"(lambda(f_35)"
"(begin"
" 'load/use-compiled"
"(let-values()"
"(let-values()"
"(begin"
"(if(path-string? f_35)"
"(void)"
"              (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" f_35)))"
"((1/current-load/use-compiled) f_35 #f)))))))"
"(define-values"
"(embedded-load)"
"(lambda(start_42 end_31 str_24 as-predefined?_0)"
"(begin"
"(let-values(((s_171)"
"(if str_24"
" str_24"
"(let-values(((sp_0)(find-system-path 'exec-file)))"
"(let-values(((exe_0)(find-executable-path sp_0 #f)))"
"(let-values(((start_43)"
"(let-values(((or-part_28)(1/string->number start_42)))"
"(if or-part_28 or-part_28 0))))"
"(let-values(((end_32)"
"(let-values(((or-part_289)(1/string->number end_31)))"
"(if or-part_289 or-part_289 0))))"
"(let-values(((exe4_0) exe_0)"
"((temp5_6)"
"(lambda()"
"(begin"
" 'temp5"
"(begin"
"(file-position(current-input-port) start_43)"
"(read-bytes(max 0(- end_32 start_43))))))))"
"(with-input-from-file45.1 #f #f exe4_0 temp5_6)))))))))"
"(let-values(((p_55)(open-input-bytes s_171)))"
"((letrec-values(((loop_2)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((e_73)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-compiled"
" #t"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(1/read p_55)))))"
"(if(eof-object? e_73)"
"(void)"
"(let-values()"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-module-declare-as-predefined"
" as-predefined?_0)"
"(let-values()((1/current-eval) e_73)))"
"(loop_2)))))))))"
" loop_2)))))))"
"(define-values"
"(find-main-collects)"
"(lambda()"
"(begin(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir)))))))"
"(define-values"
"(find-main-config)"
"(lambda()"
"(begin(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir)))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_0)"
"(begin"
"(if(complete-path? collects-path_0)"
"(let-values()(simplify-path collects-path_0))"
"(if(absolute-path? collects-path_0)"
"(let-values()"
"(let-values(((exec_0)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_18 name_65 dir?_3)(split-path exec_0)))"
"(simplify-path(path->complete-path collects-path_0 base_18)))))"
"(let-values()"
"(let-values(((p_56)(find-executable-path(find-system-path 'exec-file) collects-path_0 #t)))"
"(if p_56(simplify-path p_56) #f))))))))"
"(define-values(relative-path-string?)(lambda(s_0)(begin(if(path-string? s_0)(relative-path? s_0) #f))))"
"(define-values"
"(check-collection)"
"(lambda(who_23 s_158 l_4)"
"(begin"
"(begin"
"(if(relative-path-string? s_158)"
"(void)"
"          (let-values () (raise-argument-error who_23 \"(and/c path-string? relative-path?)\" s_158)))"
"(if((lambda(l_2)(if(list? l_2)(andmap2 relative-path-string? l_2) #f)) l_4)"
"(void)"
"          (let-values () (raise-argument-error who_23 \"(listof (and/c path-string? relative-path?))\" l_4)))))))"
"(define-values"
"(check-fail)"
"(lambda(who_24 fail_2)"
"(begin"
"(if((lambda(p_47)(if(procedure? p_47)(procedure-arity-includes? p_47 1) #f)) fail_2)"
"(void)"
"        (let-values () (raise-argument-error who_24 \"(procedure-arity-includes/c 1)\" fail_2))))))"
"(define-values"
"(1/collection-path)"
"(lambda(fail_3 collection_0 collection-path_0)"
"(begin"
" 'collection-path"
"(let-values()"
"(let-values()"
"(begin"
"(check-collection 'collection-path collection_0 collection-path_0)"
"(check-fail 'collection-path fail_3)"
"(find-col-file fail_3 collection_0 collection-path_0 #f #f)))))))"
"(define-values"
"(1/collection-file-path)"
"(lambda(fail_4 check-compiled?_0 file-name_0 collection_1 collection-path_1)"
"(begin"
" 'collection-file-path"
"(let-values()"
"(let-values()"
"(begin"
"(if(relative-path-string? file-name_0)"
"(void)"
"(let-values()"
"                (raise-argument-error 'collection-file-path \"(and/c path-string? relative-path?)\" file-name_0)))"
"(check-collection 'collection-file-path collection_1 collection-path_1)"
"(check-fail 'collection-file-path fail_4)"
"(find-col-file fail_4 collection_1 collection-path_1 file-name_0 check-compiled?_0)))))))"
"(define-values"
"(get-config-table)"
"(lambda(d_34)"
"(begin"
"      (let-values (((p_57) (if d_34 (build-path d_34 \"config.rktd\") #f)))"
"(let-values(((or-part_286)"
"(if p_57"
"(if(file-exists? p_57)"
"(let-values(((p9_0) p_57)"
"((temp10_3)"
"(lambda()"
"(begin"
" 'temp10"
"(let-values(((v_2)(call-with-default-reading-parameterization 1/read)))"
"(if(hash? v_2) v_2 #f))))))"
"(with-input-from-file45.1 #f #f p9_0 temp10_3))"
" #f)"
" #f)))"
"(if or-part_286 or-part_286 '#hash()))))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_0)(begin(hash-ref config-table_0 'installation-name(version)))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_1)"
"(begin"
"(if(string? p_1)"
"(let-values()(collects-relative-path->complete-path(string->path p_1)))"
"(if(bytes? p_1)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_1)))"
"(if(path? p_1)(let-values()(collects-relative-path->complete-path p_1))(let-values() p_1)))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_58)"
"(begin"
"(if(complete-path? p_58)"
"(let-values() p_58)"
"(let-values()"
"(path->complete-path"
" p_58"
"(let-values(((or-part_160)(find-main-collects)))(if or-part_160 or-part_160(current-directory)))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_148 key_83 orig-l_9)"
"(begin"
"(let-values(((l_66)(hash-ref ht_148 key_83 #f)))"
"(if l_66"
"((letrec-values(((loop_99)"
"(lambda(l_67)"
"(begin"
" 'loop"
"(if(null? l_67)"
"(let-values() null)"
"(if(not(car l_67))"
"(let-values()(append orig-l_9(loop_99(cdr l_67))))"
"(let-values()(cons(coerce-to-path(car l_67))(loop_99(cdr l_67))))))))))"
" loop_99)"
" l_66)"
" orig-l_9)))))"
"(define-values"
"(1/find-library-collection-links)"
"(lambda()"
"(begin"
" 'find-library-collection-links"
"(let-values(((ht_149)(get-config-table(find-main-config))))"
"(let-values(((lf_0)"
"(coerce-to-path"
"(let-values(((or-part_70)(hash-ref ht_149 'links-file #f)))"
"(if or-part_70"
" or-part_70"
"(build-path"
"(let-values(((or-part_71)(hash-ref ht_149 'share-dir #f)))"
"                              (if or-part_71 or-part_71 (build-path 'up \"share\")))"
"                            \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(1/use-user-specific-search-paths)(1/use-collection-link-paths) #f)"
"             (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_149) \"links.rktd\"))"
" null)"
"(if(1/use-collection-link-paths)(add-config-search ht_149 'links-search-files(list lf_0)) null)))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_7 old-stamp_0)"
"(begin"
"(if(if old-stamp_0(if(cdr old-stamp_0)(not(sync/timeout 0(cdr old-stamp_0))) #f) #f)"
"(let-values() old-stamp_0)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-exception-handler"
"(lambda(exn_0)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_0)(lambda() #f)(lambda()(raise exn_0)))))"
"(lambda()"
"(let-values(((dir-evt_0)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_62)"
"(lambda(path_8)"
"(begin"
" 'loop"
"(let-values(((base_19 name_66 dir?_4)(split-path path_8)))"
"(if(path? base_19)"
"(if(directory-exists? base_19)"
"(filesystem-change-evt base_19(lambda() #f))"
"(loop_62 base_19))"
" #f))))))"
" loop_62)"
" path_7)"
" #f)))"
"(if(not(file-exists? path_7))"
"(let-values()(cons #f dir-evt_0))"
"(let-values()"
"(let-values(((evt_0)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_7(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_0(let-values()(filesystem-change-evt-cancel dir-evt_0))(void))"
"(cons(file->bytes path_7) evt_0)))))))))"
" stamp-prompt-tag))))))"
"(define-values"
"(file->bytes)"
"(lambda(path_9)"
"(begin"
"(let-values(((path11_0) path_9)"
"((temp12_3)"
"(lambda(p_59)"
"(begin"
" 'temp12"
"(let-values(((bstr_1)(read-bytes 8192 p_59)))"
"(if(if(bytes? bstr_1)(>=(bytes-length bstr_1) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_1"
"((letrec-values(((loop_100)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((bstr_2)(read-bytes 8192 p_59)))"
"(if(eof-object? bstr_2) null(cons bstr_2(loop_100))))))))"
" loop_100))))"
" bstr_1))))))"
"(call-with-input-file*61.1 #f #f path11_0 temp12_3)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_64)(begin(let-values(((or-part_53)(not a_64)))(if or-part_53 or-part_53(not(car a_64)))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_0)"
"(begin"
"(call/ec"
"(lambda(esc_1)"
"(let-values(((make-handler_0)"
"(lambda(ts_0)"
"(begin"
" 'make-handler"
"(lambda(exn_1)"
"(begin"
"(if(exn:fail? exn_1)"
"(let-values(((l_78)(current-logger)))"
"(if(log-level? l_78 'error)"
"(let-values()"
"(log-message"
" l_78"
" 'error"
"(format"
"                                         \"error reading collection links file ~s: ~a\""
" links-path_0"
"(exn-message exn_1))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_0"
"(let-values()(hash-set! links-cache links-path_0(cons ts_0 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_1)(esc_1(make-hasheq)) exn_1)))))))"
"(call-with-exception-handler"
"(make-handler_0 #f)"
"(lambda()"
"(let-values(((links-stamp+cache_0)(hash-ref links-cache links-path_0 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_0)(car links-stamp+cache_0)))"
"(let-values(((ts_1)(file->stamp links-path_0 a-links-stamp_0)))"
"(if(equal? ts_1 a-links-stamp_0)"
"(let-values()(cdr links-stamp+cache_0))"
"(let-values()"
"(call-with-exception-handler"
"(make-handler_0 ts_1)"
"(lambda()"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_131)"
"(if(no-file-stamp? ts_1)"
" null"
"(let-values(((links-path13_0) links-path_0)"
"((temp14_5)"
"(lambda(p_60)"
"(begin"
" 'temp14"
"(begin0"
"(1/read p_60)"
"(if(eof-object?(1/read p_60))"
"(void)"
"(let-values()"
"                                                                      (error \"expected a single S-expression\"))))))))"
"(call-with-input-file*61.1 #f #f links-path13_0 temp14_5)))))"
"(let-values((()"
"(begin"
"(if(if(list? v_131)"
"(andmap2"
"(lambda(p_61)"
"(if(list? p_61)"
"(if(let-values(((or-part_64)(= 2(length p_61))))"
"(if or-part_64 or-part_64(= 3(length p_61))))"
"(if(let-values(((or-part_294)(string?(car p_61))))"
"(if or-part_294"
" or-part_294"
"(let-values(((or-part_262)"
"(eq? 'root(car p_61))))"
"(if or-part_262"
" or-part_262"
"(eq? 'static-root(car p_61))))))"
"(if(path-string?(cadr p_61))"
"(let-values(((or-part_65)(null?(cddr p_61))))"
"(if or-part_65 or-part_65(regexp?(caddr p_61))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_131)"
" #f)"
"(void)"
"                                                  (let-values () (error \"ill-formed content\")))"
"(values))))"
"(let-values(((ht_150)(make-hasheq)))"
"(let-values(((dir_0)"
"(let-values(((base_20 name_42 dir?_5)(split-path links-path_0)))"
" base_20)))"
"(begin"
"(for-each2"
"(lambda(p_62)"
"(if(let-values(((or-part_66)(null?(cddr p_62))))"
"(if or-part_66 or-part_66(regexp-match?(caddr p_62)(version))))"
"(let-values()"
"(let-values(((dir_1)"
"(simplify-path(path->complete-path(cadr p_62) dir_0))))"
"(if(eq?(car p_62) 'static-root)"
"(let-values()"
"(for-each2"
"(lambda(sub_1)"
"(if(directory-exists?(build-path dir_1 sub_1))"
"(let-values()"
"(let-values(((k_36)(string->symbol(path->string sub_1))))"
"(hash-set!"
" ht_150"
" k_36"
"(cons dir_1(hash-ref ht_150 k_36 null)))))"
"(void)))"
"(directory-list dir_1)))"
"(if(eq?(car p_62) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_150 #f #f)"
"(void)"
"(let-values()(hash-set! ht_150 #f null)))"
"(hash-for-each"
" ht_150"
"(lambda(k_37 v_198)"
"(hash-set! ht_150 k_37(cons dir_1 v_198))))))"
"(let-values()"
"(let-values(((s_16)(string->symbol(car p_62))))"
"(hash-set!"
" ht_150"
" s_16"
"(cons(box dir_1)(hash-ref ht_150 s_16 null)))))))))"
"(void)))"
" v_131)"
"(hash-for-each"
" ht_150"
"(lambda(k_38 v_199)(hash-set! ht_150 k_38(reverse$1 v_199))))"
"(hash-set! links-cache links-path_0(cons ts_1 ht_150))"
" ht_150))))))))))))))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_2 collection-path_2)"
"(begin"
"(if(string? collection_2)"
"(let-values()"
"          (let-values (((m_23) (regexp-match-positions '#rx\"/+\" collection_2)))"
"(if m_23"
"(if(=(caar m_23)(sub1(string-length collection_2)))"
"(let-values()(values(substring collection_2 0(caar m_23)) collection-path_2))"
"(let-values()"
"(values"
"(substring collection_2 0(caar m_23))"
"(cons(substring collection_2(cdar m_23)) collection-path_2))))"
"(values collection_2 collection-path_2))))"
"(let-values()"
"(let-values(((base_21 name_67 dir?_6)(split-path collection_2)))"
"(if(eq? base_21 'relative)"
"(values name_67 collection-path_2)"
"(normalize-collection-reference base_21(cons name_67 collection-path_2)))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_5 collection-in_0 collection-path-in_0 file-name_1 check-compiled?_1)"
"(begin"
"(let-values(((collection_3 collection-path_3)"
"(normalize-collection-reference collection-in_0 collection-path-in_0)))"
"(let-values(((all-paths_0)"
"(let-values(((sym_88)"
"(string->symbol"
"(if(path? collection_3)(path->string collection_3) collection_3))))"
"((letrec-values(((loop_96)"
"(lambda(l_79)"
"(begin"
" 'loop"
"(if(null? l_79)"
"(let-values() null)"
"(if(not(car l_79))"
"(let-values()"
"(append(1/current-library-collection-paths)(loop_96(cdr l_79))))"
"(if(hash?(car l_79))"
"(let-values()"
"(append"
"(map2 box(hash-ref(car l_79) sym_88 null))"
"(hash-ref(car l_79) #f null)"
"(loop_96(cdr l_79))))"
"(let-values()"
"(let-values(((ht_151)(get-linked-collections(car l_79))))"
"(append"
"(hash-ref ht_151 sym_88 null)"
"(hash-ref ht_151 #f null)"
"(loop_96(cdr l_79))))))))))))"
" loop_96)"
"(1/current-library-collection-links)))))"
"(let-values(((done_1)(lambda(p_11)(begin 'done(if file-name_1(build-path p_11 file-name_1) p_11)))))"
"(let-values(((*build-path-rep_0)"
"(lambda(p_25 c_53)"
"(begin '*build-path-rep(if(path? p_25)(build-path p_25 c_53)(unbox p_25))))))"
"(let-values(((*directory-exists?_0)"
"(lambda(orig_0 p_63)"
"(begin '*directory-exists?(if(path? orig_0)(directory-exists? p_63) #t)))))"
"(let-values(((to-string_0)"
"(lambda(p_64)(begin 'to-string(if(path? p_64)(path->string p_64) p_64)))))"
"((letrec-values(((cloop_0)"
"(lambda(paths_1 found-col_0)"
"(begin"
" 'cloop"
"(if(null? paths_1)"
"(if found-col_0"
"(done_1 found-col_0)"
"(let-values(((rest-coll_0)"
"(if(null? collection-path_3)"
"                                                            \"\""
"(apply"
" string-append"
"((letrec-values(((loop_48)"
"(lambda(cp_0)"
"(begin"
" 'loop"
"(if(null?(cdr cp_0))"
"(list(to-string_0(car cp_0)))"
"(list*"
"(to-string_0(car cp_0))"
"                                                                                      \"/\""
"(loop_48(cdr cp_0))))))))"
" loop_48)"
" collection-path_3)))))"
"(letrec-values(((filter_1)"
"(lambda(f_37 l_28)"
"(begin"
" 'filter"
"(if(null? l_28)"
" null"
"(if(f_37(car l_28))"
"(cons(car l_28)(filter_1 f_37(cdr l_28)))"
"(filter_1 f_37(cdr l_28))))))))"
"(fail_5"
"(format"
"                                                  \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_3)"
"(to-string_0 collection_3)"
"                                                    (string-append (to-string_0 collection_3) \"/\" rest-coll_0))"
"(apply"
" string-append"
"(map2"
"                                                    (lambda (p_26) (format \"\\n ~a ~a\" \" \" p_26))"
"(let-values(((len_34)(length all-paths_0))"
"((clen_0)"
"(length(1/current-library-collection-paths))))"
"(if(<(- len_34 clen_0) 5)"
" all-paths_0"
"(append"
"(1/current-library-collection-paths)"
"(list"
"(format"
"                                                           \"... [~a additional linked and package directories]\""
"(- len_34 clen_0))))))))"
"(if(ormap2 box? all-paths_0)"
"(format"
"                                                     \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_0"
"(apply"
" string-append"
"(map2"
"                                                       (lambda (p_65) (format \"\\n   ~a\" (unbox p_65)))"
"(filter_1 box? all-paths_0))))"
"                                                    \"\"))))))"
"(let-values(((dir_2)(*build-path-rep_0(car paths_1) collection_3)))"
"(if(*directory-exists?_0(car paths_1) dir_2)"
"(let-values(((cpath_0)(apply build-path dir_2 collection-path_3)))"
"(if(if(null? collection-path_3) #t(directory-exists? cpath_0))"
"(if file-name_1"
"(if(let-values(((or-part_146)"
"(file-exists?/maybe-compiled"
" cpath_0"
" file-name_1"
" check-compiled?_1)))"
"(if or-part_146"
" or-part_146"
"(let-values(((alt-file-name_0)"
"(let-values(((file-name_2)"
"(if(path? file-name_1)"
"(path->string file-name_1)"
" file-name_1)))"
"(let-values(((len_35)"
"(string-length file-name_2)))"
"(if(>= len_35 4)"
"(if(string=?"
"                                                                                     \".rkt\""
"(substring"
" file-name_2"
"(- len_35 4)))"
"(string-append"
"(substring"
" file-name_2"
" 0"
"(- len_35 4))"
"                                                                                   \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_0"
"(file-exists?/maybe-compiled"
" cpath_0"
" alt-file-name_0"
" check-compiled?_1)"
" #f))))"
"(done_1 cpath_0)"
"(cloop_0"
"(cdr paths_1)"
"(let-values(((or-part_218) found-col_0))"
"(if or-part_218 or-part_218 cpath_0))))"
"(done_1 cpath_0))"
"(cloop_0(cdr paths_1) found-col_0)))"
"(cloop_0(cdr paths_1) found-col_0))))))))"
" cloop_0)"
" all-paths_0"
" #f))))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_3 path_10 check-compiled?_2)"
"(begin"
"(let-values(((or-part_98)(file-exists?(build-path dir_3 path_10))))"
"(if or-part_98"
" or-part_98"
"(if check-compiled?_2"
"            (let-values (((try-path_0) (path-add-extension path_10 #\".zo\"))"
"((modes_0)(1/use-compiled-file-paths))"
"((roots_0)(1/current-compiled-file-roots)))"
"(ormap2"
"(lambda(d_35)"
"(ormap2"
"(lambda(mode_15)"
"(file-exists?"
"(let-values(((p_66)(build-path dir_3 mode_15 try-path_0)))"
"(if(eq? d_35 'same)"
"(let-values() p_66)"
"(if(relative-path? d_35)"
"(let-values()(build-path p_66 d_35))"
"(let-values()(reroot-path p_66 d_35)))))))"
" modes_0))"
" roots_0))"
" #f))))))"
"(define-values"
"(1/find-library-collection-paths)"
"(let-values(((find-library-collection-paths5_0)"
"(lambda(extra-collects-dirs1_0 post-collects-dirs2_0 extra-collects-dirs3_0 post-collects-dirs4_0)"
"(begin"
" 'find-library-collection-paths5"
"(let-values(((extra-collects-dirs_0)(if extra-collects-dirs3_0 extra-collects-dirs1_0 null)))"
"(let-values(((post-collects-dirs_0)(if post-collects-dirs4_0 post-collects-dirs2_0 null)))"
"(let-values()"
"(let-values(((user-too?_0)(1/use-user-specific-search-paths))"
"((cons-if_0)"
"(lambda(f_38 r_46)(begin 'cons-if(if f_38(cons f_38 r_46) r_46))))"
"((config-table_1)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_0"
"(let-values(((c_11)"
"(environment-variables-ref"
"(current-environment-variables)"
"                                              #\"PLTCOLLECTS\")))"
"                                 (if c_11 (bytes->string/locale c_11 '#\\?) \"\"))"
"                               \"\")"
"(add-config-search"
" config-table_1"
" 'collects-search-dirs"
"(cons-if_0"
"(if user-too?_0"
"(build-path"
"(find-system-path 'addon-dir)"
"(get-installation-name config-table_1)"
"                                  \"collects\")"
" #f)"
"((letrec-values(((loop_83)"
"(lambda(l_80)"
"(begin"
" 'loop"
"(if(null? l_80)"
" null"
"(let-values(((collects-path_1)(car l_80)))"
"(let-values(((v_200)"
"(exe-relative-path->complete-path"
" collects-path_1)))"
"(if v_200"
"(cons"
"(simplify-path"
"(path->complete-path v_200(current-directory)))"
"(loop_83(cdr l_80)))"
"(loop_83(cdr l_80))))))))))"
" loop_83)"
"(append"
" extra-collects-dirs_0"
"(list(find-system-path 'collects-dir))"
" post-collects-dirs_0)))))))))))))"
"(case-lambda"
"(()(begin 'find-library-collection-paths(find-library-collection-paths5_0 #f #f #f #f)))"
"((extra-collects-dirs_1 post-collects-dirs2_1)"
"(find-library-collection-paths5_0 extra-collects-dirs_1 post-collects-dirs2_1 #t #t))"
"((extra-collects-dirs1_1)(find-library-collection-paths5_0 extra-collects-dirs1_1 #f #t #f)))))"
"(define-values(prop:readtable prop:readtable? prop:readtable-ref)(make-struct-type-property 'readtable))"
"(define-values"
"(1/current-readtable)"
"(make-parameter"
" #f"
"(lambda(v_26)"
"(begin"
"(if(let-values(((or-part_0)(not v_26)))(if or-part_0 or-part_0(prop:readtable? v_26)))"
"(void)"
"         (let-values () (raise-argument-error 'current-readtable \"(or/c readtable? #f)\" v_26)))"
" v_26))))"
"(define-values"
"(struct:read-config/outer"
" read-config/outer1.1"
" read-config/outer?"
" read-config/outer-inner"
" read-config/outer-wrap"
" read-config/outer-line"
" read-config/outer-col"
" read-config/outer-pos"
" read-config/outer-indentations"
" read-config/outer-keep-comment?)"
"(let-values(((struct:_39 make-_39 ?_39 -ref_39 -set!_39)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config"
" #f"
" 7"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'read-config/outer)))))"
"(values"
" struct:_39"
" make-_39"
" ?_39"
"(make-struct-field-accessor -ref_39 0 'inner)"
"(make-struct-field-accessor -ref_39 1 'wrap)"
"(make-struct-field-accessor -ref_39 2 'line)"
"(make-struct-field-accessor -ref_39 3 'col)"
"(make-struct-field-accessor -ref_39 4 'pos)"
"(make-struct-field-accessor -ref_39 5 'indentations)"
"(make-struct-field-accessor -ref_39 6 'keep-comment?))))"
"(define-values"
"(struct:read-config/inner"
" read-config/inner2.1"
" read-config/inner?"
" read-config/inner-readtable"
" read-config/inner-next-readtable"
" read-config/inner-for-syntax?"
" read-config/inner-source"
" read-config/inner-read-compiled"
" read-config/inner-dynamic-require"
" read-config/inner-module-declared?"
" read-config/inner-coerce"
" read-config/inner-coerce-key"
" read-config/inner-parameter-override"
" read-config/inner-parameter-cache"
" read-config/inner-st)"
"(let-values(((struct:_74 make-_74 ?_74 -ref_74 -set!_74)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config/inner"
" #f"
" 12"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11)"
" #f"
" 'read-config/inner)))))"
"(values"
" struct:_74"
" make-_74"
" ?_74"
"(make-struct-field-accessor -ref_74 0 'readtable)"
"(make-struct-field-accessor -ref_74 1 'next-readtable)"
"(make-struct-field-accessor -ref_74 2 'for-syntax?)"
"(make-struct-field-accessor -ref_74 3 'source)"
"(make-struct-field-accessor -ref_74 4 'read-compiled)"
"(make-struct-field-accessor -ref_74 5 'dynamic-require)"
"(make-struct-field-accessor -ref_74 6 'module-declared?)"
"(make-struct-field-accessor -ref_74 7 'coerce)"
"(make-struct-field-accessor -ref_74 8 'coerce-key)"
"(make-struct-field-accessor -ref_74 9 'parameter-override)"
"(make-struct-field-accessor -ref_74 10 'parameter-cache)"
"(make-struct-field-accessor -ref_74 11 'st))))"
"(define-values"
"(read-config/make)"
"(lambda(readtable_0"
" next-readtable_0"
" for-syntax?_0"
" source_1"
" wrap_3"
" read-compiled_0"
" dynamic-require_0"
" module-declared?_0"
" coerce_0"
" coerce-key_0"
" line_1"
" col_0"
" pos_104"
" indentations_0"
" keep-comment?_0"
" parameter-override_0"
" parameter-cache_0"
" st_0)"
"(begin"
"(read-config/outer1.1"
"(read-config/inner2.1"
" readtable_0"
" next-readtable_0"
" for-syntax?_0"
" source_1"
" read-compiled_0"
" dynamic-require_0"
" module-declared?_0"
" coerce_0"
" coerce-key_0"
" parameter-override_0"
" parameter-cache_0"
" st_0)"
" wrap_3"
" line_1"
" col_0"
" pos_104"
" indentations_0"
" keep-comment?_0))))"
"(define-values(read-config-wrap)(lambda(v_183)(begin(read-config/outer-wrap v_183))))"
"(define-values(read-config-line)(lambda(v_201)(begin(read-config/outer-line v_201))))"
"(define-values(read-config-col)(lambda(v_202)(begin(read-config/outer-col v_202))))"
"(define-values(read-config-pos)(lambda(v_203)(begin(read-config/outer-pos v_203))))"
"(define-values(read-config-indentations)(lambda(v_204)(begin(read-config/outer-indentations v_204))))"
"(define-values(read-config-keep-comment?)(lambda(v_205)(begin(read-config/outer-keep-comment? v_205))))"
"(define-values"
"(read-config-readtable)"
"(lambda(v_206)(begin(read-config/inner-readtable(read-config/outer-inner v_206)))))"
"(define-values"
"(read-config-next-readtable)"
"(lambda(v_92)(begin(read-config/inner-next-readtable(read-config/outer-inner v_92)))))"
"(define-values"
"(read-config-for-syntax?)"
"(lambda(v_207)(begin(read-config/inner-for-syntax?(read-config/outer-inner v_207)))))"
"(define-values(read-config-source)(lambda(v_71)(begin(read-config/inner-source(read-config/outer-inner v_71)))))"
"(define-values"
"(read-config-read-compiled)"
"(lambda(v_208)(begin(read-config/inner-read-compiled(read-config/outer-inner v_208)))))"
"(define-values"
"(read-config-dynamic-require)"
"(lambda(v_209)(begin(read-config/inner-dynamic-require(read-config/outer-inner v_209)))))"
"(define-values"
"(read-config-module-declared?)"
"(lambda(v_38)(begin(read-config/inner-module-declared?(read-config/outer-inner v_38)))))"
"(define-values"
"(read-config-coerce)"
"(lambda(v_210)(begin(read-config/inner-coerce(read-config/outer-inner v_210)))))"
"(define-values"
"(read-config-coerce-key)"
"(lambda(v_211)(begin(read-config/inner-coerce-key(read-config/outer-inner v_211)))))"
"(define-values"
"(read-config-parameter-override)"
"(lambda(v_200)(begin(read-config/inner-parameter-override(read-config/outer-inner v_200)))))"
"(define-values"
"(read-config-parameter-cache)"
"(lambda(v_212)(begin(read-config/inner-parameter-cache(read-config/outer-inner v_212)))))"
"(define-values(read-config-st)(lambda(v_213)(begin(read-config/inner-st(read-config/outer-inner v_213)))))"
"(define-values"
"(struct:read-config-state"
" read-config-state3.1"
" read-config-state?"
" read-config-state-accum-str"
" read-config-state-graph"
" set-read-config-state-accum-str!"
" set-read-config-state-graph!)"
"(let-values(((struct:_75 make-_75 ?_75 -ref_75 -set!_75)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config-state"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'read-config-state)))))"
"(values"
" struct:_75"
" make-_75"
" ?_75"
"(make-struct-field-accessor -ref_75 0 'accum-str)"
"(make-struct-field-accessor -ref_75 1 'graph)"
"(make-struct-field-mutator -set!_75 0 'accum-str)"
"(make-struct-field-mutator -set!_75 1 'graph))))"
"(define-values(current-read-config)(make-parameter #f))"
"(define-values"
"(make-read-config26.1)"
"(lambda(coerce12_0"
" coerce23_0"
" coerce-key13_0"
" coerce-key24_0"
" dynamic-require10_0"
" dynamic-require21_0"
" for-syntax?5_0"
" for-syntax?16_0"
" keep-comment?14_0"
" keep-comment?25_0"
" module-declared?11_0"
" module-declared?22_0"
" next-readtable7_0"
" next-readtable18_0"
" read-compiled9_0"
" read-compiled20_0"
" readtable6_0"
" readtable17_0"
" source4_0"
" source15_0"
" wrap8_0"
" wrap19_0)"
"(begin"
" 'make-read-config26"
"(let-values(((source_2)(if source15_0 source4_0 #f)))"
"(let-values(((for-syntax?_1)(if for-syntax?16_0 for-syntax?5_0 #f)))"
"(let-values(((readtable_1)(if readtable17_0 readtable6_0(1/current-readtable))))"
"(let-values(((next-readtable_1)(if next-readtable18_0 next-readtable7_0 readtable_1)))"
"(let-values(((wrap_4)(if wrap19_0 wrap8_0 #f)))"
"(let-values(((read-compiled_1)(if read-compiled20_0 read-compiled9_0 #f)))"
"(let-values(((dynamic-require_1)(if dynamic-require21_0 dynamic-require10_0 #f)))"
"(let-values(((module-declared?_1)(if module-declared?22_0 module-declared?11_0 #f)))"
"(let-values(((coerce_1)(if coerce23_0 coerce12_0 #f)))"
"(let-values(((coerce-key_1)(if coerce-key24_0 coerce-key13_0 #f)))"
"(let-values(((keep-comment?_1)(if keep-comment?25_0 keep-comment?14_0 #f)))"
"(let-values()"
"(read-config/make"
" readtable_1"
" next-readtable_1"
" for-syntax?_1"
" source_2"
" wrap_4"
"(let-values(((or-part_92) read-compiled_1))"
"                                 (if or-part_92 or-part_92 (lambda (in_0) (error 'read \"no `read-compiled` provided\"))))"
"(let-values(((or-part_94) dynamic-require_1))"
"(if or-part_94"
" or-part_94"
"(lambda(mod-path_25 sym_89 failure-k_0)"
"                                     (error 'read \"no `dynamic-require` provided\"))))"
"(let-values(((or-part_221) module-declared?_1))"
"(if or-part_221"
" or-part_221"
"                                   (lambda (mod-path_26) (error 'read \"no `module-declare?` provided\"))))"
"(let-values(((or-part_295) coerce_1))"
"(if or-part_295 or-part_295(lambda(for-syntax?_2 v_111 srcloc_8) v_111)))"
"(let-values(((or-part_296) coerce-key_1))"
"(if or-part_296 or-part_296(lambda(for-syntax?_3 v_115) v_115)))"
" #f"
" #f"
" #f"
" null"
" keep-comment?_1"
" '#hasheq()"
"(make-hasheq)"
"(read-config-state3.1 #f #f)))))))))))))))))"
"(define-values"
"(read-config-update42.1)"
"(lambda(for-syntax?29_0"
" keep-comment?34_0"
" next-readtable32_0"
" next-readtable38_0"
" readtable31_0"
" reset-graph?33_0"
" wrap30_0"
" config41_0)"
"(begin"
" 'read-config-update42"
"(let-values(((config_0) config41_0))"
"(let-values(((for-syntax?_4) for-syntax?29_0))"
"(let-values(((wrap_5) wrap30_0))"
"(let-values(((readtable_2) readtable31_0))"
"(let-values(((next-readtable_2)"
"(if next-readtable38_0 next-readtable32_0(read-config-readtable config_0))))"
"(let-values(((local-graph?_0) reset-graph?33_0))"
"(let-values(((keep-comment?_2) keep-comment?34_0))"
"(let-values()"
"(let-values(((v_214) config_0))"
"(let-values(((the-struct_79) v_214))"
"(if(read-config/outer? the-struct_79)"
"(let-values(((wrap48_0) wrap_5)"
"((keep-comment?49_0) keep-comment?_2)"
"((inner50_0)"
"(let-values(((the-struct_80)(read-config/outer-inner v_214)))"
"(if(read-config/inner? the-struct_80)"
"(let-values(((for-syntax?51_0) for-syntax?_4)"
"((readtable52_0) readtable_2)"
"((next-readtable53_0) next-readtable_2)"
"((st54_0)"
"(if local-graph?_0"
"(read-config-state3.1 #f #f)"
"(read-config-st config_0))))"
"(read-config/inner2.1"
" readtable52_0"
" next-readtable53_0"
" for-syntax?51_0"
"(read-config/inner-source the-struct_80)"
"(read-config/inner-read-compiled the-struct_80)"
"(read-config/inner-dynamic-require the-struct_80)"
"(read-config/inner-module-declared? the-struct_80)"
"(read-config/inner-coerce the-struct_80)"
"(read-config/inner-coerce-key the-struct_80)"
"(read-config/inner-parameter-override the-struct_80)"
"(read-config/inner-parameter-cache the-struct_80)"
" st54_0))"
"                                              (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_80)))))"
"(read-config/outer1.1"
" inner50_0"
" wrap48_0"
"(read-config/outer-line the-struct_79)"
"(read-config/outer-col the-struct_79)"
"(read-config/outer-pos the-struct_79)"
"(read-config/outer-indentations the-struct_79)"
" keep-comment?49_0))"
"                            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_79)))))))))))))))"
"(define-values"
"(port+config->srcloc)"
"(lambda(in_1 config_1)"
"(begin"
"(let-values(((end-line_0 end-col_0 end-pos_0)(port-next-location in_1)))"
"(srcloc"
"(read-config-source config_1)"
"(read-config-line config_1)"
"(read-config-col config_1)"
"(read-config-pos config_1)"
"(if(read-config-pos config_1)(if end-pos_0(- end-pos_0(read-config-pos config_1)) #f) #f))))))"
"(define-values"
"(reading-at)"
"(lambda(config_2 line_2 col_1 pos_105)"
"(begin"
"(let-values(((v_215) config_2))"
"(let-values(((the-struct_81) v_215))"
"(if(read-config/outer? the-struct_81)"
"(let-values(((line55_0) line_2)"
"((col56_0) col_1)"
"((pos57_0) pos_105)"
"((inner58_1)(read-config/outer-inner v_215)))"
"(read-config/outer1.1"
" inner58_1"
"(read-config/outer-wrap the-struct_81)"
" line55_0"
" col56_0"
" pos57_0"
"(read-config/outer-indentations the-struct_81)"
"(read-config/outer-keep-comment? the-struct_81)))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_81)))))))"
"(define-values"
"(disable-wrapping)"
"(lambda(config_3)"
"(begin"
"(let-values(((v_216) config_3))"
"(let-values(((the-struct_82) v_216))"
"(if(read-config/outer? the-struct_82)"
"(let-values(((wrap59_0) #f)((inner60_0)(read-config/outer-inner v_216)))"
"(read-config/outer1.1"
" inner60_0"
" wrap59_0"
"(read-config/outer-line the-struct_82)"
"(read-config/outer-col the-struct_82)"
"(read-config/outer-pos the-struct_82)"
"(read-config/outer-indentations the-struct_82)"
"(read-config/outer-keep-comment? the-struct_82)))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_82)))))))"
"(define-values"
"(keep-comment)"
"(lambda(config_4)"
"(begin"
"(let-values(((v_144) config_4))"
"(let-values(((the-struct_83) v_144))"
"(if(read-config/outer? the-struct_83)"
"(let-values(((keep-comment?61_0) #t)((inner62_0)(read-config/outer-inner v_144)))"
"(read-config/outer1.1"
" inner62_0"
"(read-config/outer-wrap the-struct_83)"
"(read-config/outer-line the-struct_83)"
"(read-config/outer-col the-struct_83)"
"(read-config/outer-pos the-struct_83)"
"(read-config/outer-indentations the-struct_83)"
" keep-comment?61_0))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_83)))))))"
"(define-values"
"(discard-comment)"
"(lambda(config_5)"
"(begin"
"(if(not(read-config-keep-comment? config_5))"
"(let-values() config_5)"
"(let-values()"
"(let-values(((v_217) config_5))"
"(let-values(((the-struct_84) v_217))"
"(if(read-config/outer? the-struct_84)"
"(let-values(((keep-comment?63_0) #f)((inner64_0)(read-config/outer-inner v_217)))"
"(read-config/outer1.1"
" inner64_0"
"(read-config/outer-wrap the-struct_84)"
"(read-config/outer-line the-struct_84)"
"(read-config/outer-col the-struct_84)"
"(read-config/outer-pos the-struct_84)"
"(read-config/outer-indentations the-struct_84)"
" keep-comment?63_0))"
"                (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_84)))))))))"
"(define-values"
"(next-readtable)"
"(lambda(config_6)"
"(begin"
"(if(eq?(read-config-readtable config_6)(read-config-next-readtable config_6))"
"(let-values() config_6)"
"(let-values()"
"(let-values(((v_218) config_6))"
"(let-values(((the-struct_85) v_218))"
"(if(read-config/outer? the-struct_85)"
"(let-values(((inner65_0)"
"(let-values(((the-struct_86)(read-config/outer-inner v_218)))"
"(if(read-config/inner? the-struct_86)"
"(let-values(((readtable66_0)(read-config-next-readtable config_6)))"
"(read-config/inner2.1"
" readtable66_0"
"(read-config/inner-next-readtable the-struct_86)"
"(read-config/inner-for-syntax? the-struct_86)"
"(read-config/inner-source the-struct_86)"
"(read-config/inner-read-compiled the-struct_86)"
"(read-config/inner-dynamic-require the-struct_86)"
"(read-config/inner-module-declared? the-struct_86)"
"(read-config/inner-coerce the-struct_86)"
"(read-config/inner-coerce-key the-struct_86)"
"(read-config/inner-parameter-override the-struct_86)"
"(read-config/inner-parameter-cache the-struct_86)"
"(read-config/inner-st the-struct_86)))"
"                                  (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_86)))))"
"(read-config/outer1.1"
" inner65_0"
"(read-config/outer-wrap the-struct_85)"
"(read-config/outer-line the-struct_85)"
"(read-config/outer-col the-struct_85)"
"(read-config/outer-pos the-struct_85)"
"(read-config/outer-indentations the-struct_85)"
"(read-config/outer-keep-comment? the-struct_85)))"
"                (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_85)))))))))"
"(define-values"
"(coerce)"
"(lambda(val_74 in_2 config_7)"
"(begin"
"(let-values(((for-syntax?_5)(read-config-for-syntax? config_7)))"
"((read-config-coerce config_7)"
" for-syntax?_5"
" val_74"
"(if for-syntax?_5(port+config->srcloc in_2 config_7) #f))))))"
"(define-values(default-reader-guard$1)(lambda(v_219)(begin 'default-reader-guard v_219)))"
"(define-values"
"(1/current-reader-guard)"
"(make-parameter"
" default-reader-guard$1"
"(lambda(v_220)"
"(begin"
"(if(if(procedure? v_220)(procedure-arity-includes? v_220 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'current-reader-guard \"(procedure-arity-includes/c 1)\" v_220)))"
" v_220))))"
"(define-values(1/read-square-bracket-as-paren)(make-parameter #t(lambda(v_1)(if v_1 #t #f))))"
"(define-values(1/read-curly-brace-as-paren)(make-parameter #t(lambda(v_221)(if v_221 #t #f))))"
"(define-values(1/read-square-bracket-with-tag)(make-parameter #f(lambda(v_222)(if v_222 #t #f))))"
"(define-values(1/read-curly-brace-with-tag)(make-parameter #f(lambda(v_62)(if v_62 #t #f))))"
"(define-values(1/read-cdot)(make-parameter #f(lambda(v_29)(if v_29 #t #f))))"
"(define-values(1/read-accept-graph)(make-parameter #t(lambda(v_63)(if v_63 #t #f))))"
"(define-values(1/read-accept-compiled)(make-parameter #f(lambda(v_2)(if v_2 #t #f))))"
"(define-values(1/read-accept-box)(make-parameter #t(lambda(v_82)(if v_82 #t #f))))"
"(define-values(1/read-decimal-as-inexact)(make-parameter #t(lambda(v_30)(if v_30 #t #f))))"
"(define-values(1/read-accept-dot)(make-parameter #t(lambda(v_75)(if v_75 #t #f))))"
"(define-values(1/read-accept-infix-dot)(make-parameter #t(lambda(v_31)(if v_31 #t #f))))"
"(define-values(1/read-accept-quasiquote)(make-parameter #t(lambda(v_3)(if v_3 #t #f))))"
"(define-values(1/read-accept-reader)(make-parameter #f(lambda(v_32)(if v_32 #t #f))))"
"(define-values(1/read-accept-lang)(make-parameter #t(lambda(v_4)(if v_4 #t #f))))"
"(define-values(unknown)(gensym 'unknown))"
"(define-values"
"(check-parameter)"
"(lambda(param_0 config_8)"
"(begin"
"(let-values(((cache_4)(read-config-parameter-cache config_8)))"
"(let-values(((v_65)"
"(hash-ref(read-config-parameter-override config_8) param_0(hash-ref cache_4 param_0 unknown))))"
"(if(eq? v_65 unknown)"
"(let-values()(let-values(((v_66)(param_0)))(begin(hash-set! cache_4 param_0 v_66) v_66)))"
"(let-values() v_65)))))))"
"(define-values"
"(override-parameter)"
"(lambda(param_1 config_9 v_28)"
"(begin"
"(let-values(((v_93) config_9))"
"(let-values(((the-struct_87) v_93))"
"(if(read-config/outer? the-struct_87)"
"(let-values(((inner1_0)"
"(let-values(((the-struct_88)(read-config/outer-inner v_93)))"
"(if(read-config/inner? the-struct_88)"
"(let-values(((parameter-override2_0)"
"(hash-set(read-config-parameter-override config_9) param_1 v_28)))"
"(read-config/inner2.1"
"(read-config/inner-readtable the-struct_88)"
"(read-config/inner-next-readtable the-struct_88)"
"(read-config/inner-for-syntax? the-struct_88)"
"(read-config/inner-source the-struct_88)"
"(read-config/inner-read-compiled the-struct_88)"
"(read-config/inner-dynamic-require the-struct_88)"
"(read-config/inner-module-declared? the-struct_88)"
"(read-config/inner-coerce the-struct_88)"
"(read-config/inner-coerce-key the-struct_88)"
" parameter-override2_0"
"(read-config/inner-parameter-cache the-struct_88)"
"(read-config/inner-st the-struct_88)))"
"                              (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_88)))))"
"(read-config/outer1.1"
" inner1_0"
"(read-config/outer-wrap the-struct_87)"
"(read-config/outer-line the-struct_87)"
"(read-config/outer-col the-struct_87)"
"(read-config/outer-pos the-struct_87)"
"(read-config/outer-indentations the-struct_87)"
"(read-config/outer-keep-comment? the-struct_87)))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_87)))))))"
"(define-values"
"(force-parameters!)"
"(lambda(config_10)"
"(begin"
"(let-values(((cache_5)(read-config-parameter-cache config_10)))"
"(if(hash-ref cache_5 'all-forced #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-set! cache_5 'all-forced #t)"
"(check-parameter read-case-sensitive config_10)"
"(check-parameter 1/read-square-bracket-as-paren config_10)"
"(check-parameter 1/read-curly-brace-as-paren config_10)"
"(check-parameter 1/read-square-bracket-with-tag config_10)"
"(check-parameter 1/read-curly-brace-with-tag config_10)"
"(check-parameter 1/read-cdot config_10)"
"(check-parameter 1/read-accept-graph config_10)"
"(check-parameter 1/read-accept-compiled config_10)"
"(check-parameter 1/read-accept-box config_10)"
"(check-parameter read-accept-bar-quote config_10)"
"(check-parameter 1/read-decimal-as-inexact config_10)"
"(check-parameter 1/read-accept-dot config_10)"
"(check-parameter 1/read-accept-infix-dot config_10)"
"(check-parameter 1/read-accept-quasiquote config_10)"
"(check-parameter 1/read-accept-reader config_10)"
"(check-parameter 1/read-accept-lang config_10))))))))"
"(define-values"
"(struct:special-comment 1/make-special-comment 1/special-comment? 1/special-comment-value)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'special-comment"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'make-special-comment)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'value))))"
"(define-values"
"(struct:readtable"
" readtable1.1"
" 1/readtable?"
" readtable-symbol-parser"
" readtable-char-ht"
" readtable-dispatch-ht"
" readtable-delimiter-ht)"
"(let-values(((struct:_19 make-_19 ?_19 -ref_19 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'readtable"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:readtable #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'readtable)))))"
"(values"
" struct:_19"
" make-_19"
" ?_19"
"(make-struct-field-accessor -ref_19 0 'symbol-parser)"
"(make-struct-field-accessor -ref_19 1 'char-ht)"
"(make-struct-field-accessor -ref_19 2 'dispatch-ht)"
"(make-struct-field-accessor -ref_19 3 'delimiter-ht))))"
"(define-values"
"(1/make-readtable)"
"(lambda(rt_0 . args_7)"
"(begin"
" 'make-readtable"
"(begin"
"(if(let-values(((or-part_55)(not rt_0)))(if or-part_55 or-part_55(1/readtable? rt_0)))"
"(void)"
"          (let-values () (raise-argument-error 'make-readtable \"(or/c readtable? #f)\" rt_0)))"
"((letrec-values(((loop_101)"
"(lambda(args_8 symbol-parser_0 char-ht_0 dispatch-ht_0 delimiter-ht_0)"
"(begin"
" 'loop"
"(if(null? args_8)"
"(let-values()(readtable1.1 symbol-parser_0 char-ht_0 dispatch-ht_0 delimiter-ht_0))"
"(let-values()"
"(let-values(((key_84)(car args_8)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_168)(not key_84)))"
"(if or-part_168 or-part_168(char? key_84)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                         \"(or/c char? #f)\""
" key_84)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(null? args_8)"
"(let-values()"
"(if key_84"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"(string-append"
"                                                                \"expected 'terminating-macro, 'non-terminating-macro, 'dispatch-macro,\""
"                                                                \" or character argument after character argument\")"
"                                                               \"character\""
" key_84))"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"                                                               \"expected 'non-terminating-macro after #f\"))))"
"(void))"
"(values))))"
"(let-values(((mode_16)(cadr args_8)))"
"(let-values((()"
"(begin"
"(if key_84"
"(let-values()"
"(if(let-values(((or-part_169)"
"(eq? mode_16 'terminating-macro)))"
"(if or-part_169"
" or-part_169"
"(let-values(((or-part_33)"
"(eq?"
" mode_16"
" 'non-terminating-macro)))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_297)"
"(eq? mode_16 'dispatch-macro)))"
"(if or-part_297"
" or-part_297"
"(char? mode_16)))))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                   \"(or/c 'terminating-macro 'non-terminating-macro 'dispatch-macro char?)\""
" mode_16))))"
"(let-values()"
"(if(eq? mode_16 'non-terminating-macro)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"                                                                   \"expected 'non-terminating-macro after #f\")))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(null?(cddr args_8))"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"(if key_84"
"                                                                   \"expected readtable or #f argument after character argument\""
"                                                                   \"expected procedure argument after symbol argument\")"
"                                                                 \"given\""
" mode_16))"
"(void))"
"(values))))"
"(let-values(((target_0)(caddr args_8)))"
"(let-values(((rest-args_0)(cdddr args_8)))"
"(if(not key_84)"
"(let-values()"
"(begin"
"(if(if(procedure? target_0)"
"(procedure-arity-includes? target_0 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                             \"(procedure-arity-includes/c 6)\""
" target_0)))"
"(loop_101"
" rest-args_0"
" target_0"
" char-ht_0"
" dispatch-ht_0"
" delimiter-ht_0)))"
"(if(eq? mode_16 'dispatch-macro)"
"(let-values()"
"(begin"
"(if(if(procedure? target_0)"
"(procedure-arity-includes? target_0 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                               \"(procedure-arity-includes/c 6)\""
" target_0)))"
"(loop_101"
" rest-args_0"
" symbol-parser_0"
" char-ht_0"
"(hash-set dispatch-ht_0 key_84 target_0)"
" delimiter-ht_0)))"
"(if(char? mode_16)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_99)"
"(not target_0)))"
"(if or-part_99"
" or-part_99"
"(1/readtable? target_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                               \"(or/c readtable? #f)\""
" target_0)))"
"(values))))"
"(let-values(((actual-target_0)"
"(let-values(((or-part_170)"
"(if target_0"
"(hash-ref"
"(readtable-char-ht target_0)"
" mode_16"
" #f)"
" #f)))"
"(if or-part_170 or-part_170 mode_16))))"
"(let-values(((new-char-ht_0)"
"(if actual-target_0"
"(hash-set"
" char-ht_0"
" key_84"
" actual-target_0)"
"(hash-remove char-ht_0 key_84))))"
"(let-values(((new-delimiter-ht_0)"
"(hash-set"
" delimiter-ht_0"
" key_84"
"(if target_0"
"(hash-ref"
"(readtable-delimiter-ht target_0)"
" mode_16"
" mode_16)"
" mode_16))))"
"(loop_101"
" rest-args_0"
" symbol-parser_0"
" new-char-ht_0"
" dispatch-ht_0"
" new-delimiter-ht_0))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(procedure? target_0)"
"(procedure-arity-includes? target_0 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                               \"(procedure-arity-includes/c 6)\""
" target_0)))"
"(values))))"
"(let-values(((new-char-ht_1)"
"(hash-set char-ht_0 key_84 target_0)))"
"(let-values(((new-delimiter-ht_1)"
"(hash-set"
" delimiter-ht_0"
" key_84"
"(if(eq? mode_16 'terminating-macro)"
" 'delimit"
" 'no-delimit))))"
"(loop_101"
" rest-args_0"
" symbol-parser_0"
" new-char-ht_1"
" dispatch-ht_0"
" new-delimiter-ht_1))))))))))))))))))))))"
" loop_101)"
" args_7"
"(if rt_0(readtable-symbol-parser rt_0) #f)"
"(if rt_0(readtable-char-ht rt_0) '#hasheqv())"
"(if rt_0(readtable-dispatch-ht rt_0) '#hasheqv())"
"(if rt_0(readtable-delimiter-ht rt_0) '#hasheqv()))))))"
"(define-values"
"(*readtable-effective-char)"
"(lambda(rt_1 c_54)"
"(begin"
"(let-values(((target_1)(hash-ref(readtable-char-ht rt_1) c_54 #f)))"
"(if(not target_1)(let-values() c_54)(if(char? target_1)(let-values() target_1)(let-values() '#\\x)))))))"
"(define-values"
"(effective-char)"
"(lambda(c_55 config_11)"
"(begin"
"(let-values(((rt_2)(read-config-readtable config_11))((c_56) c_55))"
"(if(let-values(((or-part_23)(not rt_2)))(if or-part_23 or-part_23(not(char? c_56))))"
"(let-values() c_56)"
"(let-values()(*readtable-effective-char rt_2 c_56)))))))"
"(define-values"
"(readtable-handler)"
"(lambda(config_12 c_57)"
"(begin"
"(let-values(((rt_3)(read-config-readtable config_12)))"
"(if rt_3"
"(let-values(((target_2)(hash-ref(readtable-char-ht rt_3) c_57 #f)))"
"(if target_2(if(not(char? target_2)) target_2 #f) #f))"
" #f)))))"
"(define-values"
"(readtable-dispatch-handler)"
"(lambda(config_13 c_58)"
"(begin"
"(let-values((()(begin(force-parameters! config_13)(values))))"
"(let-values(((rt_4)(read-config-readtable config_13)))"
"(if rt_4(hash-ref(readtable-dispatch-ht rt_4) c_58 #f) #f))))))"
"(define-values"
"(readtable-apply)"
"(lambda(handler_0 c_59 in_3 config_14 line_3 col_2 pos_106)"
"(begin"
"(let-values(((for-syntax?_6)(read-config-for-syntax? config_14)))"
"(let-values(((v_88)"
"(if(not for-syntax?_6)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_14)"
"(let-values()"
"(if(procedure-arity-includes? handler_0 2)"
"(handler_0 c_59 in_3)"
"(handler_0 c_59 in_3 #f line_3 col_2 pos_106)))))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_14)"
"(let-values()"
"(handler_0 c_59 in_3(read-config-source config_14) line_3 col_2 pos_106)))))))"
"(if(1/special-comment? v_88) v_88(coerce v_88 in_3 config_14)))))))"
"(define-values"
"(1/readtable-mapping)"
"(lambda(rt_5 c_60)"
"(begin"
" 'readtable-mapping"
"(let-values((()"
"(begin"
"(if(1/readtable? rt_5)"
"(void)"
"                        (let-values () (raise-argument-error 'readtable-mapping \"readtable?\" rt_5)))"
"(values))))"
"(let-values((()"
"(begin"
"                        (if (char? c_60) (void) (let-values () (raise-argument-error 'readtable-mapping \"char?\" c_60)))"
"(values))))"
"(let-values(((handler_1)(hash-ref(readtable-char-ht rt_5) c_60 #f)))"
"(values"
"(let-values(((or-part_228)"
"(if handler_1"
"(if(char? handler_1)"
"(let-values() handler_1)"
"(if(eq? 'delimit(hash-ref(readtable-delimiter-ht rt_5) c_60 #f))"
"(let-values() 'terminating-macro)"
"(let-values() 'non-terminating-macro)))"
" #f)))"
"(if or-part_228 or-part_228 c_60))"
"(if(char? handler_1) #f handler_1)"
"(hash-ref(readtable-dispatch-ht rt_5) c_60 #f))))))))"
"(define-values"
"(readtable-equivalent-chars)"
"(lambda(rt_6 c_61)"
"(begin"
"(let-values(((ht_152)(readtable-char-ht rt_6)))"
"(append"
"(if(hash-ref ht_152 c_61 #f) null(list c_61))"
"(reverse$1"
"(let-values(((ht_153) ht_152))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_153)))"
"((letrec-values(((for-loop_259)"
"(lambda(fold-var_79 i_171)"
"(begin"
" 'for-loop"
"(if i_171"
"(let-values(((k_39 v_223)(hash-iterate-key+value ht_153 i_171)))"
"(let-values(((fold-var_272)"
"(let-values(((fold-var_82) fold-var_79))"
"(if(eqv? v_223 c_61)"
"(let-values(((fold-var_232) fold-var_82))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons(let-values() k_39) fold-var_232))))"
"(values fold-var_13)))"
" fold-var_82))))"
"(if(not #f)"
"(for-loop_259 fold-var_272(hash-iterate-next ht_153 i_171))"
" fold-var_272)))"
" fold-var_79)))))"
" for-loop_259)"
" null"
"(hash-iterate-first ht_153))))))))))"
"(define-values"
"(struct:special special1.1 special? special-value)"
"(let-values(((struct:_76 make-_76 ?_76 -ref_76 -set!_76)"
"(let-values()"
"(let-values()(make-struct-type 'special #f 1 0 #f null(current-inspector) #f '(0) #f 'special)))))"
"(values struct:_76 make-_76 ?_76(make-struct-field-accessor -ref_76 0 'value))))"
"(define-values"
"(wrap)"
"(lambda(s-exp_3 in_2 config_7 rep_0)"
"(begin"
"(let-values(((wrap_6)(read-config-wrap config_7)))"
"(if wrap_6(wrap_6 s-exp_3(port+config->srcloc in_2 config_7) rep_0) s-exp_3)))))"
"(define-values(consume-char)(lambda(in_4 c_32)(begin(begin(read-char in_4)(void)))))"
"(define-values"
"(consume-char/special)"
"(lambda(in_5 config_15 c_33)"
"(begin(begin(read-char-or-special in_5 special1.1(read-config-source config_15))(void)))))"
"(define-values"
"(reader-error10.1)"
"(lambda(continuation-marks1_0"
" continuation-marks4_0"
" due-to2_0"
" due-to5_0"
" who3_1"
" who6_0"
" in7_0"
" config8_0"
" str9_0"
" new-rest_0)"
"(begin"
" 'reader-error10"
"(let-values(((in_6) in7_0))"
"(let-values(((config_16) config8_0))"
"(let-values(((continuation-marks_0)"
"(if continuation-marks4_0 continuation-marks1_0(current-continuation-marks))))"
"(let-values(((due-to_0)(if due-to5_0 due-to2_0 '#\\x)))"
"(let-values(((who_25)(if who6_0 who3_1(if(read-config-for-syntax? config_16) 'read-syntax 'read))))"
"(let-values(((str_25) str9_0))"
"(let-values(((args_9) new-rest_0))"
"                    (let-values (((msg_0) (format \"~a: ~a\" who_25 (apply format str_25 args_9))))"
"(let-values(((srcloc_9)(if in_6(port+config->srcloc in_6 config_16) #f)))"
"(raise"
"((if(eof-object? due-to_0)"
"(let-values() exn:fail:read:eof)"
"(if(not(char? due-to_0))"
"(let-values() exn:fail:read:non-char)"
"(let-values() exn:fail:read)))"
"(let-values(((s_161)"
"(if(error-print-source-location)"
"(if srcloc_9(srcloc->string srcloc_9) #f)"
" #f)))"
"                            (if s_161 (string-append s_161 \": \" msg_0) msg_0))"
" continuation-marks_0"
"(if srcloc_9(list srcloc_9) null)))))))))))))))"
"(define-values"
"(bad-syntax-error18.1)"
"(lambda(due-to13_0 due-to14_0 in15_0 config16_0 str17_0)"
"(begin"
" 'bad-syntax-error18"
"(let-values(((in_7) in15_0))"
"(let-values(((config_17) config16_0))"
"(let-values(((str_26) str17_0))"
"(let-values(((due-to_1)(if due-to14_0 due-to13_0 '#\\x)))"
"(let-values()"
"                (let-values (((due-to23_0) due-to_1) ((temp24_6) \"bad syntax `~a`\") ((str25_0) str_26))"
"(reader-error10.1 #f #f due-to23_0 #t #f #f in_7 config_17 temp24_6(list str25_0)))))))))))"
"(define-values"
"(catch-and-reraise-as-reader/proc)"
"(lambda(in_8 config_18 thunk_5)"
"(begin"
"(let-values(((with-handlers-predicate26_0) exn:fail?)"
"((with-handlers-handler27_0)"
"(lambda(exn_2)"
"(begin"
" 'with-handlers-handler27"
"                        (let-values (((temp30_2) \"~a\")"
"((temp31_4)"
"(let-values(((s_458)(exn-message exn_2)))"
"                                        (regexp-replace \"^[a-z-]*: \" s_458 \"\")))"
"((temp32_2)(exn-continuation-marks exn_2)))"
"(reader-error10.1 temp32_2 #t #f #f #f #f in_8 config_18 temp30_2(list temp31_4)))))))"
"(let-values(((bpz_3)(continuation-mark-set-first #f break-enabled-key)))"
"(call-handled-body"
" bpz_3"
"(lambda(e_74)"
"(select-handler/no-breaks e_74 bpz_3(list(cons with-handlers-predicate26_0 with-handlers-handler27_0))))"
"(lambda()(thunk_5))))))))"
"(define-values"
"(port-next-location*)"
"(lambda(in_4 init-c_0)"
"(begin"
"(if(not init-c_0)"
"(let-values()(port-next-location in_4))"
"(let-values()"
"(let-values(((line_4 col_3 pos_107)(port-next-location in_4)))"
"(values line_4(if col_3(max 0(sub1 col_3)) #f)(if pos_107(max 1(sub1 pos_107)) #f))))))))"
"(define-values"
"(read-char/skip-whitespace-and-comments)"
"(lambda(init-c_1 read-one_0 in_5 config_15)"
"(begin"
"(let-values(((rt_7)(read-config-readtable config_15)))"
"(let-values(((source_3)(read-config-source config_15)))"
"((letrec-values(((skip-loop_0)"
"(lambda(init-c_2)"
"(begin"
" 'skip-loop"
"(let-values(((c_36)"
"(let-values(((or-part_159) init-c_2))"
"(if or-part_159"
" or-part_159"
"(let-values(((in_9) in_5)((source_4) source_3))"
"(read-char-or-special in_9 special1.1 source_4))))))"
"(let-values(((ec_0)"
"(let-values(((rt_8) rt_7)((c_62) c_36))"
"(if(let-values(((or-part_5)(not rt_8)))"
"(if or-part_5 or-part_5(not(char? c_62))))"
"(let-values() c_62)"
"(let-values()(*readtable-effective-char rt_8 c_62))))))"
"(if(eof-object? ec_0)"
"(let-values() c_36)"
"(if(not(char? ec_0))"
"(let-values()"
"(let-values(((v_1)(special-value c_36)))"
"(if(if(1/special-comment? v_1)"
"(not(read-config-keep-comment? config_15))"
" #f)"
"(let-values()(skip-loop_0 #f))"
"(let-values() c_36))))"
"(if(char-whitespace? ec_0)"
"(let-values()(skip-loop_0 #f))"
"(if(char=? '#\\; ec_0)"
"(let-values()"
"(begin"
"((letrec-values(((loop_76)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_48)"
"(let-values(((in_10) in_5)"
"((source_5) source_3))"
"(read-char-or-special"
" in_10"
" special1.1"
" source_5))))"
"(if(let-values(((or-part_291)"
"(eof-object? c_48)))"
"(if or-part_291"
" or-part_291"
"(eqv?"
" '#\\newline"
"(effective-char c_48 config_15))))"
"(void)"
"(let-values()(loop_76))))))))"
" loop_76))"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))"
"(if(if(char=? '#\\# ec_0)"
"(eqv?"
" '#\\|"
"(let-values(((in_11) in_5)((skip-count_0) 0)((source_6) source_3))"
"(peek-char-or-special in_11 skip-count_0 special1.1 source_6)))"
" #f)"
"(let-values()"
"(begin"
"(skip-pipe-comment! c_36 in_5 config_15)"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))"
"(if(if(char=? '#\\# ec_0)"
"(if(eqv?"
" '#\\!"
"(let-values(((in_6) in_5)"
"((skip-count_1) 0)"
"((source_7) source_3))"
"(peek-char-or-special"
" in_6"
" skip-count_1"
" special1.1"
" source_7)))"
"(let-values(((c3_1)"
"(let-values(((in_12) in_5)"
"((skip-count_2) 1)"
"((source_8) source_3))"
"(peek-char-or-special"
" in_12"
" skip-count_2"
" special1.1"
" source_8))))"
"(let-values(((or-part_71)(eqv? '#\\space c3_1)))"
"(if or-part_71 or-part_71(eqv? '#\\/ c3_1))))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(skip-unix-line-comment! in_5 config_15)"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))"
"(if(if(char=? '#\\# ec_0)"
"(eqv?"
" '#\\;"
"(let-values(((in_13) in_5)"
"((skip-count_3) 0)"
"((source_9) source_3))"
"(peek-char-or-special in_13 skip-count_3 special1.1 source_9)))"
" #f)"
"(let-values()"
"(let-values((()(begin(consume-char in_5 '#\\;)(values))))"
"(let-values(((v_224)(read-one_0 #f in_5 config_15)))"
"(begin"
"(if(eof-object? v_224)"
"(let-values()"
"(let-values(((v3_0) v_224)"
"((temp4_3)"
"                                                                            \"expected a commented-out element for `~a;', but found end-of-file\")"
"((ec5_0) ec_0))"
"(reader-error10.1"
" #f"
" #f"
" v3_0"
" #t"
" #f"
" #f"
" in_5"
" config_15"
" temp4_3"
"(list ec5_0))))"
"(void))"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))))"
"(let-values() c_36))))))))))))))"
" skip-loop_0)"
" init-c_1))))))"
"(define-values(result-special-comment)(lambda()(begin(special1.1(1/make-special-comment #f)))))"
"(define-values"
"(skip-pipe-comment!)"
"(lambda(init-c_3 in_14 config_19)"
"(begin"
"(let-values(((source_10)(read-config-source config_19)))"
"(let-values(((line_5 col_4 pos_108)(port-next-location in_14)))"
"(begin"
"(consume-char in_14 '#\\|)"
"((letrec-values(((loop_100)"
"(lambda(prev-c_0 depth_10)"
"(begin"
" 'loop"
"(let-values(((c_63)"
"(let-values(((in_15) in_14)((source_11) source_10))"
"(read-char-or-special in_15 special1.1 source_11))))"
"(if(eof-object? c_63)"
"(let-values()"
"(let-values(((temp7_2)(reading-at config_19 line_5 col_4 pos_108))"
"((c8_0) c_63)"
"                                                     ((temp9_2) \"end of file in `#|` comment\"))"
"(reader-error10.1 #f #f c8_0 #t #f #f in_14 temp7_2 temp9_2(list))))"
"(if(not(char? c_63))"
"(let-values()(loop_100 #f depth_10))"
"(if(if(char=? '#\\| c_63)(eqv? prev-c_0 '#\\#) #f)"
"(let-values()(loop_100 #f(add1 depth_10)))"
"(if(if(char=? '#\\# c_63)(eqv? prev-c_0 '#\\|) #f)"
"(let-values()"
"(if(positive? depth_10)"
"(let-values()(loop_100 #f(sub1 depth_10)))"
"(void)))"
"(let-values()(loop_100 c_63 depth_10)))))))))))"
" loop_100)"
" #f"
" 0)))))))"
"(define-values"
"(skip-unix-line-comment!)"
"(lambda(in_16 config_20)"
"(begin"
"((letrec-values(((loop_102)"
"(lambda(backslash?_0)"
"(begin"
" 'loop"
"(let-values(((c_64)"
"(let-values(((in_17) in_16)((source_12)(read-config-source config_20)))"
"(read-char-or-special in_17 special1.1 source_12))))"
"(if(eof-object? c_64)"
"(let-values()(void))"
"(if(not(char? c_64))"
"(let-values()(loop_102 #f))"
"(if(char=? c_64 '#\\newline)"
"(let-values()(if backslash?_0(let-values()(loop_102 #f))(void)))"
"(if(char=? c_64 '#\\\\)"
"(let-values()(loop_102 #t))"
"(let-values()(loop_102 #f)))))))))))"
" loop_102)"
" #f))))"
"(define-values"
"(readtable-char-delimiter?)"
"(lambda(rt_9 c_32 config_7)"
"(begin"
"(let-values(((dc_0)"
"(let-values(((or-part_2)(if rt_9(hash-ref(readtable-delimiter-ht rt_9) c_32 #f) #f)))"
"(if or-part_2 or-part_2 c_32))))"
"(if(eq? dc_0 'no-delimit)"
"(let-values() #f)"
"(if(not(char? dc_0))"
"(let-values() #t)"
"(let-values()"
"(let-values(((or-part_26)(char-whitespace? dc_0)))"
"(if or-part_26"
" or-part_26"
"(let-values(((or-part_298)(char=? dc_0 '#\\()))"
"(if or-part_298"
" or-part_298"
"(let-values(((or-part_284)(char=? dc_0 '#\\))))"
"(if or-part_284"
" or-part_284"
"(let-values(((or-part_27)(char=? dc_0 '#\\[)))"
"(if or-part_27"
" or-part_27"
"(let-values(((or-part_10)(char=? dc_0 '#\\])))"
"(if or-part_10"
" or-part_10"
"(let-values(((or-part_159)(char=? dc_0 '#\\{)))"
"(if or-part_159"
" or-part_159"
"(let-values(((or-part_12)(char=? dc_0 '#\\})))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)(char=? dc_0 '#\\')))"
"(if or-part_13"
" or-part_13"
"(let-values(((or-part_215)(char=? dc_0 '#\\`)))"
"(if or-part_215"
" or-part_215"
"(let-values(((or-part_3)(char=? dc_0 '#\\,)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(char=? dc_0 '#\\;)))"
"(if or-part_4"
" or-part_4"
"                                                          (let-values (((or-part_5) (char=? dc_0 '#\\\")))"
"(if or-part_5"
" or-part_5"
"(if(char=? dc_0 '#\\.)"
"(check-parameter 1/read-cdot config_7)"
" #f))))))))))))))))))))))))))))))))"
"(define-values"
"(char-delimiter?)"
"(lambda(c_14 config_21)(begin(readtable-char-delimiter?(read-config-readtable config_21) c_14 config_21))))"
"(define-values"
"(char-closer?)"
"(lambda(ec_1 config_8)"
"(begin"
"(if(not(eof-object? ec_1))"
"(let-values(((or-part_1)(char=? ec_1 '#\\))))"
"(if or-part_1"
" or-part_1"
"(let-values(((or-part_11)(char=? ec_1 '#\\])))(if or-part_11 or-part_11(char=? ec_1 '#\\})))))"
" #f))))"
" (define-values (closer-name) (lambda (c_33 config_22) (begin (effective-char-names c_33 config_22 \"closer\"))))"
" (define-values (opener-name) (lambda (c_34 config_23) (begin (effective-char-names c_34 config_23 \"opener\"))))"
"(define-values"
"(effective-char-names)"
"(lambda(c_36 config_24 fallback-str_0)"
"(begin"
"(let-values(((rt_10)(read-config-readtable config_24)))"
"(if(not rt_10)"
"          (let-values () (format \"`~a`\" c_36))"
"(let-values()"
"(let-values(((cs_1)(readtable-equivalent-chars rt_10 c_36)))"
"(if(null? cs_1)"
"(let-values() fallback-str_0)"
"(if(null?(cdr cs_1))"
"                  (let-values () (format \"`~a`\" (car cs_1)))"
"(if(null?(cddr cs_1))"
"                    (let-values () (format \"`~a` or `~a`\" (car cs_1) (cadr cs_1)))"
"(let-values()"
"(apply"
" string-append"
"((letrec-values(((loop_103)"
"(lambda(cs_2)"
"(begin"
" 'loop"
"(if(null?(cdr cs_2))"
"                                               (let-values () (list (format \"or `~a`\" (car cs_2))))"
"(let-values()"
"                                                 (cons (format \"`~a`, \" (car cs_2)) (loop_103 (cdr cs_2)))))))))"
" loop_103)"
" cs_1)))))))))))))"
"(define-values"
"(closer->opener)"
"(lambda(c_62)"
"(begin"
"(let-values(((tmp_37) c_62))"
"(if(equal? tmp_37 '#\\))"
"(let-values() '#\\()"
"(if(equal? tmp_37 '#\\])"
"(let-values() '#\\[)"
"(if(equal? tmp_37 '#\\})(let-values() '#\\{)(let-values() c_62))))))))"
" (define-values (dot-name) (lambda (config_25) (begin \"`.`\")))"
"(define-values"
"(all-openers-str)"
"(lambda(config_21)"
"(begin"
"(let-values(((p_57)(opener-name '#\\( config_21)))"
"(let-values(((s_10)"
"(if(check-parameter 1/read-square-bracket-as-paren config_21)(opener-name '#\\[ config_21) #f)))"
"(let-values(((c_49)"
"(if(check-parameter 1/read-curly-brace-as-paren config_21)(opener-name '#\\{ config_21) #f)))"
"(if(if s_10 c_49 #f)"
"              (let-values () (format \"~a, ~a, or ~a\" p_57 s_10 c_49))"
"(if(let-values(((or-part_290) s_10))(if or-part_290 or-part_290 c_49))"
"(let-values()"
"                  (format \"~a or ~a\" p_57 (let-values (((or-part_291) s_10)) (if or-part_291 or-part_291 c_49))))"
"(let-values() p_57)))))))))"
"(define-values"
"(struct:accum-string"
" accum-string1.1"
" accum-string?"
" accum-string-pos"
" accum-string-str"
" set-accum-string-pos!"
" set-accum-string-str!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'accum-string #f 2 0 #f null(current-inspector) #f '() #f 'accum-string)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'pos)"
"(make-struct-field-accessor -ref_0 1 'str)"
"(make-struct-field-mutator -set!_0 0 'pos)"
"(make-struct-field-mutator -set!_0 1 'str))))"
"(define-values"
"(accum-string-init!)"
"(lambda(config_26)"
"(begin"
"(let-values(((st_1)(read-config-st config_26)))"
"(let-values(((a_65)(read-config-state-accum-str st_1)))"
"(if a_65"
"(let-values()(begin(set-read-config-state-accum-str! st_1 #f)(set-accum-string-pos! a_65 0) a_65))"
"(let-values()(accum-string1.1 0(make-string 32)))))))))"
"(define-values"
"(accum-string-add!)"
"(lambda(a_66 c_65)"
"(begin"
"(let-values(((pos_109)(accum-string-pos a_66)))"
"(let-values(((str_27)(accum-string-str a_66)))"
"(let-values(((str2_0)"
"(if(< pos_109(string-length str_27))"
"(let-values() str_27)"
"(let-values()"
"(let-values(((str2_1)(make-string(*(string-length str_27) 2))))"
"(begin(string-copy! str2_1 0 str_27)(set-accum-string-str! a_66 str2_1) str2_1))))))"
"(begin(string-set! str2_0 pos_109 c_65)(set-accum-string-pos! a_66(add1 pos_109)))))))))"
"(define-values(accum-string-count)(lambda(a_67)(begin(accum-string-pos a_67))))"
"(define-values(set-accum-string-count!)(lambda(a_68 pos_11)(begin(set-accum-string-pos! a_68 pos_11))))"
"(define-values"
"(accum-string-convert!)"
"(lambda(a_69 convert_1 start-pos_6)"
"(begin"
"(let-values(((str_28)(accum-string-str a_69)))"
"(let-values(((s_74)(convert_1(substring str_28 start-pos_6(accum-string-pos a_69)))))"
"(let-values(((len_36)(string-length s_74)))"
"(begin"
"(if(<(+ len_36 start-pos_6)(string-length str_28))"
"(void)"
"(let-values()"
"(let-values(((str2_2)(make-string(+ start-pos_6 len_36))))"
"(begin(string-copy! str2_2 0 str_28 0 start-pos_6)(set-accum-string-str! a_69 str2_2)))))"
"(string-copy!(accum-string-str a_69) start-pos_6 s_74)"
"(set-accum-string-pos! a_69(+ start-pos_6 len_36)))))))))"
"(define-values"
"(accum-string-get!6.1)"
"(lambda(start-pos2_0 start-pos3_0 a4_0 config5_0)"
"(begin"
" 'accum-string-get!6"
"(let-values(((a_70) a4_0))"
"(let-values(((config_27) config5_0))"
"(let-values(((start-pos_7)(if start-pos3_0 start-pos2_0 0)))"
"(let-values()"
"(let-values(((s_185)(substring(accum-string-str a_70) start-pos_7(accum-string-pos a_70))))"
"(begin(accum-string-abandon! a_70 config_27) s_185)))))))))"
"(define-values"
"(accum-string-get-bytes!13.1)"
"(lambda(start-pos9_0 start-pos10_0 a11_0 config12_0)"
"(begin"
" 'accum-string-get-bytes!13"
"(let-values(((a_61) a11_0))"
"(let-values(((config_28) config12_0))"
"(let-values(((start-pos_8)(if start-pos10_0 start-pos9_0 0)))"
"(let-values()"
"(let-values(((bstr_3)"
"(string->bytes/latin-1(accum-string-str a_61) #f start-pos_8(accum-string-pos a_61))))"
"(begin(accum-string-abandon! a_61 config_28) bstr_3)))))))))"
"(define-values"
"(accum-string-abandon!)"
"(lambda(a_71 config_29)(begin(set-read-config-state-accum-str!(read-config-st config_29) a_71))))"
"(define-values"
"(struct:indentation"
" indentation1.1"
" indentation?"
" indentation-closer"
" indentation-suspicious-closer"
" indentation-multiline?"
" indentation-start-line"
" indentation-last-line"
" indentation-suspicious-line"
" indentation-max-indent"
" indentation-suspicious-quote"
" set-indentation-suspicious-closer!"
" set-indentation-multiline?!"
" set-indentation-last-line!"
" set-indentation-suspicious-line!"
" set-indentation-max-indent!"
" set-indentation-suspicious-quote!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'indentation #f 8 0 #f null(current-inspector) #f '(0 3) #f 'indentation)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'closer)"
"(make-struct-field-accessor -ref_0 1 'suspicious-closer)"
"(make-struct-field-accessor -ref_0 2 'multiline?)"
"(make-struct-field-accessor -ref_0 3 'start-line)"
"(make-struct-field-accessor -ref_0 4 'last-line)"
"(make-struct-field-accessor -ref_0 5 'suspicious-line)"
"(make-struct-field-accessor -ref_0 6 'max-indent)"
"(make-struct-field-accessor -ref_0 7 'suspicious-quote)"
"(make-struct-field-mutator -set!_0 1 'suspicious-closer)"
"(make-struct-field-mutator -set!_0 2 'multiline?)"
"(make-struct-field-mutator -set!_0 4 'last-line)"
"(make-struct-field-mutator -set!_0 5 'suspicious-line)"
"(make-struct-field-mutator -set!_0 6 'max-indent)"
"(make-struct-field-mutator -set!_0 7 'suspicious-quote))))"
"(define-values"
"(make-indentation)"
"(lambda(closer_0 in_18 config_30)"
"(begin"
"(let-values(((line_6 col_5 pos_110)(port-next-location in_18)))"
"(indentation1.1 closer_0 #f #f line_6 line_6 #f(if col_5(add1 col_5) #f) #f)))))"
"(define-values"
"(track-indentation!)"
"(lambda(config_31 line_7 col_6)"
"(begin"
"(let-values(((indts_0)(read-config-indentations config_31)))"
"(let-values(((indt_0)(if(pair? indts_0)(car indts_0) #f)))"
"(if(if indt_0"
"(if line_7(if(indentation-last-line indt_0)(> line_7(indentation-last-line indt_0)) #f) #f)"
" #f)"
"(let-values()"
"(begin"
"(set-indentation-last-line! indt_0 line_7)"
"(set-indentation-multiline?! indt_0 #t)"
"(if(>= col_6(indentation-max-indent indt_0))"
"(let-values()(set-indentation-max-indent! indt_0 col_6))"
"(let-values()"
"(if(indentation-suspicious-line indt_0)"
"(void)"
"(let-values()"
"(begin"
"(set-indentation-suspicious-closer! indt_0(indentation-closer indt_0))"
"(set-indentation-suspicious-line! indt_0 line_7))))))))"
"(void)))))))"
"(define-values"
"(indentation-possible-cause)"
"(lambda(config_32)"
"(begin"
"(let-values(((indt_1)(car(read-config-indentations config_32))))"
"(if(indentation-suspicious-line indt_1)"
"(let-values()"
"(format"
"             \"\\n  possible cause: indentation suggests a missing ~a before line ~a\""
"(closer-name(indentation-suspicious-closer indt_1) config_32)"
"(indentation-suspicious-line indt_1)))"
"          (let-values () \"\"))))))"
"(define-values"
"(indentation-unexpected-closer-message)"
"(lambda(ec_2 c_43 config_33)"
"(begin"
"(let-values(((indts_1)(read-config-indentations config_33)))"
"(if(null? indts_1)"
"          (let-values () (format \"unexpected `~a`\" c_43))"
"(let-values()"
"(let-values(((indt_2)(car indts_1)))"
"(string-append"
"(if(char=? ec_2(indentation-closer indt_2))"
"                 (let-values () (format \"unexpected `~a`\" c_43))"
"(let-values()"
"(let-values(((missing_2)"
"(let-values(((or-part_262)"
"(let-values(((lst_300)(cdr indts_1)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_300)))"
"((letrec-values(((for-loop_260)"
"(lambda(result_37 lst_301)"
"(begin"
" 'for-loop"
"(if(pair? lst_301)"
"(let-values(((indt_3)(unsafe-car lst_301))"
"((rest_169)"
"(unsafe-cdr lst_301)))"
"(let-values(((result_112)"
"(let-values()"
"(let-values(((result_76)"
"(let-values()"
"(let-values()"
"(if(char=?"
" ec_2"
"(indentation-closer"
" indt_3))"
"                                                                                                                 \"missing\""
" #f)))))"
"(values result_76)))))"
"(if(if(not"
"((lambda x_80 result_112)"
" indt_3))"
"(not #f)"
" #f)"
"(for-loop_260 result_112 rest_169)"
" result_112)))"
" result_37)))))"
" for-loop_260)"
" #f"
" lst_300)))))"
"                                   (if or-part_262 or-part_262 \"expected\"))))"
"(let-values(((opener-str_0)(opener-name(closer->opener(indentation-closer indt_2)) config_33)))"
"(format"
"                        \"~a ~a to close ~a, found instead `~a`\""
" missing_2"
"(closer-name(indentation-closer indt_2) config_33)"
"(if(indentation-multiline? indt_2)"
"                          (let-values () (format \"~a on line ~a\" opener-str_0 (indentation-start-line indt_2)))"
"                          (let-values () (format \"preceding ~a\" opener-str_0)))"
" c_43)))))"
"(indentation-possible-cause config_33)))))))))"
"(define-values"
"(read-unwrapped-sequence17.1)"
"(lambda(dot-mode2_0"
" dot-mode7_0"
" elem-config1_0"
" elem-config6_0"
" first-read-one5_0"
" first-read-one10_0"
" shape-tag?3_0"
" shape-tag?8_0"
" whitespace-read-one4_0"
" whitespace-read-one9_0"
" read-one11_0"
" opener-c12_0"
" opener13_0"
" closer14_0"
" in15_1"
" seq-config16_0)"
"(begin"
" 'read-unwrapped-sequence17"
"(let-values(((read-one_1) read-one11_0))"
"(let-values(((opener-c_0) opener-c12_0))"
"(let-values(((opener_0) opener13_0))"
"(let-values(((closer_1) closer14_0))"
"(let-values(((in_10) in15_1))"
"(let-values(((seq-config_0) seq-config16_0))"
"(let-values(((elem-config_0)(if elem-config6_0 elem-config1_0(next-readtable seq-config_0))))"
"(let-values(((dot-mode_0)(if dot-mode7_0 dot-mode2_0 'all)))"
"(let-values(((shape-tag?_0)(if shape-tag?8_0 shape-tag?3_0 #f)))"
"(let-values(((whitespace-read-one_0)"
"(if whitespace-read-one9_0 whitespace-read-one4_0 read-one_1)))"
"(let-values(((first-read-one_0)(if first-read-one10_0 first-read-one5_0 read-one_1)))"
"(let-values()"
"(let-values(((head_0) #f))"
"(let-values(((indentation_0)(make-indentation closer_1 in_10 seq-config_0)))"
"(let-values(((config_16)"
"(let-values(((v_5) elem-config_0))"
"(let-values(((the-struct_56) v_5))"
"(if(read-config/outer? the-struct_56)"
"(let-values(((indentations20_0)"
"(cons"
" indentation_0"
"(read-config-indentations seq-config_0)))"
"((inner21_0)(read-config/outer-inner v_5)))"
"(read-config/outer1.1"
" inner21_0"
"(read-config/outer-wrap the-struct_56)"
"(read-config/outer-line the-struct_56)"
"(read-config/outer-col the-struct_56)"
"(read-config/outer-pos the-struct_56)"
" indentations20_0"
"(read-config/outer-keep-comment? the-struct_56)))"
"(raise-argument-error"
" 'struct-copy"
"                                                       \"read-config/outer?\""
" the-struct_56))))))"
"(let-values(((config/keep-comment_0)(keep-comment config_16)))"
"(let-values(((read-one/not-eof_0)"
"(lambda(init-c_4 read-one_2 config_34)"
"(begin"
" 'read-one/not-eof"
"(let-values(((e_69)(read-one_2 init-c_4 in_10 config_34)))"
"(begin"
"(if(eof-object? e_69)"
"(let-values()"
"(let-values(((e24_0) e_69)"
"((temp25_5)"
"                                                                              \"expected a ~a to close `~a`~a\")"
"((temp26_4)"
"(closer-name closer_1 config_34))"
"((opener-c27_0) opener-c_0)"
"((temp28_0)"
"(indentation-possible-cause config_34)))"
"(reader-error10.1"
" #f"
" #f"
" e24_0"
" #t"
" #f"
" #f"
" in_10"
" config_34"
" temp25_5"
"(list temp26_4 opener-c27_0 temp28_0))))"
"(void))"
" e_69))))))"
"(let-values(((seq_0)"
"((letrec-values(((loop_104)"
"(lambda(depth_11"
" accum_0"
" init-c_5"
" first?_1"
" first-read-one_1)"
"(begin"
" 'loop"
"(let-values(((c_66)"
"(read-char/skip-whitespace-and-comments"
" init-c_5"
" whitespace-read-one_0"
" in_10"
" seq-config_0)))"
"(let-values(((ec_3)"
"(effective-char"
" c_66"
" seq-config_0)))"
"(if(eqv? ec_3 closer_1)"
"(let-values()"
"(if(null? accum_0)"
" null"
"(reverse$1 accum_0)))"
"(if(if(not first?_1)"
"(if(eqv? ec_3 '#\\.)"
"(if(check-parameter"
" 1/read-accept-dot"
" config_16)"
"(char-delimiter?"
"(let-values(((in_19)"
" in_10)"
"((skip-count_4)"
" 0)"
"((source_13)"
"(read-config-source"
" config_16)))"
"(peek-char-or-special"
" in_19"
" skip-count_4"
" special1.1"
" source_13))"
" seq-config_0)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((dot-line_0"
" dot-col_0"
" dot-pos_0)"
"(port-next-location*"
" in_10"
" c_66)))"
"(let-values((()"
"(begin"
"(track-indentation!"
" config_16"
" dot-line_0"
" dot-col_0)"
"(values))))"
"(let-values((()"
"(begin"
"(if(if dot-mode_0"
"(not"
" head_0)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((in29_1)"
" in_10)"
"((temp30_3)"
"(reading-at"
" config_16"
" dot-line_0"
" dot-col_0"
" dot-pos_0))"
"((temp31_5)"
"                                                                                                                            \"illegal use of `.`\"))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in29_1"
" temp30_3"
" temp31_5"
"(list)))))"
"(values))))"
"(let-values(((v_35)"
"(read-one/not-eof_0"
" #f"
" first-read-one_1"
" config_16)))"
"(let-values(((rest-c_0)"
"(read-char/skip-whitespace-and-comments"
" #f"
" whitespace-read-one_0"
" in_10"
" seq-config_0)))"
"(let-values(((rest-ec_0)"
"(effective-char"
" rest-c_0"
" seq-config_0)))"
"(if(eqv?"
" rest-ec_0"
" closer_1)"
"(let-values()"
"(if(null?"
" accum_0)"
" v_35"
"(append"
"(reverse$1"
" accum_0)"
" v_35)))"
"(if(if(eqv?"
" rest-ec_0"
" '#\\.)"
"(if(check-parameter"
" 1/read-accept-dot"
" config_16)"
"(if(check-parameter"
" 1/read-accept-infix-dot"
" config_16)"
"(char-delimiter?"
"(let-values(((in_17)"
" in_10)"
"((skip-count_5)"
" 0)"
"((source_14)"
"(read-config-source"
" config_16)))"
"(peek-char-or-special"
" in_17"
" skip-count_5"
" special1.1"
" source_14))"
" seq-config_0)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! head_0"
"(box"
" v_35))"
"(values))))"
"(let-values(((dot2-line_0"
" dot2-col_0"
" dot2-pos_0)"
"(port-next-location"
" in_10)))"
"(let-values((()"
"(begin"
"(track-indentation!"
" config_16"
" dot2-line_0"
" dot2-col_0)"
"(values))))"
"(let-values(((post-c_0)"
"(read-char/skip-whitespace-and-comments"
" #f"
" whitespace-read-one_0"
" in_10"
" seq-config_0)))"
"(let-values(((post-ec_0)"
"(effective-char"
" post-c_0"
" seq-config_0)))"
"(begin"
"(if(let-values(((or-part_299)"
"(eof-object?"
" post-ec_0)))"
"(if or-part_299"
" or-part_299"
"(eqv?"
" post-ec_0"
" closer_1)))"
"(let-values()"
"(let-values(((temp33_2)"
"(reading-at"
" config_16"
" dot-line_0"
" dot-col_0"
" dot-pos_0))"
"((post-ec34_0)"
" post-ec_0)"
"((temp35_1)"
"                                                                                                                                      \"illegal use of `.`\"))"
"(reader-error10.1"
" #f"
" #f"
" post-ec34_0"
" #t"
" #f"
" #f"
" in_10"
" temp33_2"
" temp35_1"
"(list))))"
"(void))"
"(loop_104"
" depth_11"
" accum_0"
" post-c_0"
" #f"
" read-one_1))))))))"
"(let-values()"
"(let-values(((temp37_2)"
"(reading-at"
" config_16"
" dot-line_0"
" dot-col_0"
" dot-pos_0))"
"((rest-c38_0)"
" rest-c_0)"
"((temp39_5)"
"                                                                                                                      \"illegal use of `.`\"))"
"(reader-error10.1"
" #f"
" #f"
" rest-c38_0"
" #t"
" #f"
" #f"
" in_10"
" temp37_2"
" temp39_5"
"(list)))))))))))))"
"(let-values()"
"(let-values(((v_55)"
"(read-one/not-eof_0"
" c_66"
" first-read-one_1"
" config/keep-comment_0)))"
"(if(1/special-comment? v_55)"
"(let-values()"
"(loop_104"
" depth_11"
" accum_0"
" #f"
" #f"
" read-one_1))"
"(if(> depth_11 1024)"
"(let-values()"
"(loop_104"
" depth_11"
"(cons v_55 accum_0)"
" #f"
" #f"
" read-one_1))"
"(let-values()"
"(cons"
" v_55"
"(loop_104"
"(add1 depth_11)"
" null"
" #f"
" #f"
" read-one_1)))))))))))))))"
" loop_104)"
" 0"
" null"
" #f"
" #t"
" first-read-one_0)))"
"(let-values(((full-seq_0)(if head_0(cons(unbox head_0) seq_0) seq_0)))"
"(if shape-tag?_0"
"(add-shape-tag opener_0 in_10 config_16 full-seq_0)"
" full-seq_0)))))))))))))))))))))))"
"(define-values"
"(add-shape-tag)"
"(lambda(opener_1 in_20 config_35 seq_1)"
"(begin"
"(let-values(((tag_0)"
"(let-values(((tmp_38) opener_1))"
"(if(equal? tmp_38 '#\\[)"
"(let-values()(if(check-parameter 1/read-square-bracket-with-tag config_35) '#%brackets #f))"
"(if(equal? tmp_38 '#\\{)"
"(let-values()(if(check-parameter 1/read-curly-brace-with-tag config_35) '#%braces #f))"
"(let-values() #f))))))"
"(if tag_0(cons(wrap tag_0 in_20 config_35 #f) seq_1) seq_1)))))"
" (define-values (not-an-fX.1) (lambda (who_26 v_225) (begin 'not-an-fX (raise-argument-error who_26 \"fixnum?\" v_225))))"
"(define-values"
"(not-an-fX.1$1)"
"  (lambda (who_26 v_225) (begin 'not-an-fX (raise-argument-error who_26 \"flonum?\" v_225))))"
"(define-values"
"(read-digits13.1)"
"(lambda(base1_0"
" init3_0"
" init7_0"
" max-count2_0"
" zero-digits-result4_0"
" zero-digits-result8_0"
" in11_0"
" config12_1"
" accum-str9_0"
" accum-str10_0)"
"(begin"
" 'read-digits13"
"(let-values(((in_21) in11_0))"
"(let-values(((config_36) config12_1))"
"(let-values(((accum-str_0)(if accum-str10_0 accum-str9_0 #f)))"
"(let-values(((base_22) base1_0))"
"(let-values(((max-count_0) max-count2_0))"
"(let-values(((init-v_0)(if init7_0 init3_0 0)))"
"(let-values(((zero-digits-result_0)(if zero-digits-result8_0 zero-digits-result4_0 #f)))"
"(let-values()"
"(let-values(((c_67)"
"(let-values(((in_22) in_21)"
"((skip-count_6) 0)"
"((source_15)(read-config-source config_36)))"
"(peek-char-or-special in_22 skip-count_6 special1.1 source_15))))"
"(if(digit?$1 c_67 base_22)"
"(let-values()"
"(begin"
"(consume-char in_21 c_67)"
"(if accum-str_0(let-values()(accum-string-add! accum-str_0 c_67))(void))"
"((letrec-values(((loop_105)"
"(lambda(v_224 max-count_1)"
"(begin"
" 'loop"
"(if(zero? max-count_1)"
"(let-values() v_224)"
"(let-values()"
"(let-values(((c_51)"
"(let-values(((in_23) in_21)"
"((skip-count_7) 0)"
"((source_16)"
"(read-config-source config_36)))"
"(peek-char-or-special"
" in_23"
" skip-count_7"
" special1.1"
" source_16))))"
"(if(digit?$1 c_51 base_22)"
"(let-values()"
"(begin"
"(consume-char in_21 c_51)"
"(if accum-str_0"
"(let-values()(accum-string-add! accum-str_0 c_51))"
"(void))"
"(loop_105"
"(+(digit->number c_51)(* v_224 base_22))"
"(sub1 max-count_1))))"
"(let-values() v_224)))))))))"
" loop_105)"
"(+(digit->number c_67)(* init-v_0 base_22))"
"(sub1 max-count_0))))"
"(if zero-digits-result_0"
"(let-values() zero-digits-result_0)"
"(let-values() c_67)))))))))))))))"
"(define-values"
"(digit?$1)"
"(lambda(c_56 base_23)"
"(begin"
" 'digit?"
"(if(not(char? c_56))"
"(let-values() #f)"
"(if(= base_23 8)"
"(let-values()(octal-digit? c_56))"
"(if(= base_23 16)(let-values()(hex-digit? c_56))(let-values()(decimal-digit? c_56))))))))"
"(define-values(decimal-digit?)(lambda(c_68)(begin(if(char>=? c_68 '#\\0)(char<=? c_68 '#\\9) #f))))"
"(define-values(octal-digit?)(lambda(c_57)(begin(if(char>=? c_57 '#\\0)(char<=? c_57 '#\\7) #f))))"
"(define-values"
"(hex-digit?)"
"(lambda(c_69)"
"(begin"
"(let-values(((or-part_67)(if(char>=? c_69 '#\\0)(char<=? c_69 '#\\9) #f)))"
"(if or-part_67"
" or-part_67"
"(let-values(((or-part_101)(if(char>=? c_69 '#\\A)(char<=? c_69 '#\\F) #f)))"
"(if or-part_101 or-part_101(if(char>=? c_69 '#\\a)(char<=? c_69 '#\\f) #f))))))))"
"(define-values"
"(digit->number)"
"(lambda(c_58)"
"(begin"
"(if(if(char>=? c_58 '#\\0)(char<=? c_58 '#\\9) #f)"
"(let-values()(-(char->integer c_58)(char->integer '#\\0)))"
"(if(if(char>=? c_58 '#\\A)(char<=? c_58 '#\\F) #f)"
"(let-values()(-(char->integer c_58)(-(char->integer '#\\A) 10)))"
"(let-values()(-(char->integer c_58)(-(char->integer '#\\a) 10))))))))"
"(define-values(string->number$1) string->number)"
"(define-values"
"(1/string->number)"
"(let-values(((string->number8_0)"
"(lambda(s7_2 radix1_0 convert-mode2_0 decimal-mode3_0 radix4_0 convert-mode5_0 decimal-mode6_0)"
"(begin"
" 'string->number8"
"(let-values(((s_183) s7_2))"
"(let-values(((radix_0)(if radix4_0 radix1_0 10)))"
"(let-values(((convert-mode_0)(if convert-mode5_0 convert-mode2_0 'number-or-false)))"
"(let-values(((decimal-mode_0)"
"(if decimal-mode6_0"
" decimal-mode3_0"
"(if(1/read-decimal-as-inexact) 'decimal-as-inexact 'decimal-as-exact))))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(string? s_183)"
"(void)"
"                                      (let-values () (raise-argument-error 'string->number \"string?\" s_183)))"
"(if((lambda(p_67)(if(exact-integer? radix_0)(<= 2 radix_0 16) #f)) radix_0)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'string->number \"(integer-in 2 16)\" radix_0)))"
"(if((lambda(p_59)"
"(let-values(((or-part_7)(eq? p_59 'number-or-false)))"
"(if or-part_7 or-part_7(eq? p_59 'read))))"
" convert-mode_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'string->number"
"                                         \"(or/c 'number-or-false 'read)\""
" convert-mode_0)))"
"(if((lambda(p_68)"
"(let-values(((or-part_9)(eq? p_68 'decimal-as-inexact)))"
"(if or-part_9 or-part_9(eq? p_68 'decimal-as-exact))))"
" decimal-mode_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'string->number"
"                                         \"(or/c 'decimal-as-inexact decimal-as-exact)\""
" decimal-mode_0)))"
"(let-values(((temp70_1) 0)"
"((temp71_0)(string-length s_183))"
"((radix72_0) radix_0)"
"((temp73_0) #f)"
"((decimal-mode74_0) decimal-mode_0)"
"((convert-mode75_0) convert-mode_0))"
"(do-string->number20.1"
" #f"
" #f"
" temp73_0"
" s_183"
" temp70_1"
" temp71_0"
" radix72_0"
" decimal-mode74_0"
" convert-mode75_0))))))))))))))"
"(case-lambda"
"((s_459)(begin 'string->number(string->number8_0 s_459 #f #f #f #f #f #f)))"
"((s_460 radix_1 convert-mode_1 decimal-mode3_1)"
"(string->number8_0 s_460 radix_1 convert-mode_1 decimal-mode3_1 #t #t #t))"
"((s_78 radix_2 convert-mode2_1)(string->number8_0 s_78 radix_2 convert-mode2_1 #f #t #t #f))"
"((s_428 radix1_1)(string->number8_0 s_428 radix1_1 #f #f #t #f #f)))))"
"(define-values"
"(do-string->number20.1)"
"(lambda(in-complex11_0"
" in-complex13_0"
" radix-set?10_0"
" s14_0"
" start15_0"
" end16_0"
" radix17_0"
" exactness18_0"
" convert-mode19_0)"
"(begin"
" 'do-string->number20"
"(let-values(((s_22) s14_0))"
"(let-values(((start_44) start15_0))"
"(let-values(((end_33) end16_0))"
"(let-values(((radix_3) radix17_0))"
"(let-values(((radix-set?_0) radix-set?10_0))"
"(let-values(((exactness_0) exactness18_0))"
"(let-values(((in-complex_0)(if in-complex13_0 in-complex11_0 #f)))"
"(let-values(((convert-mode_2) convert-mode19_0))"
"(let-values()"
"(if(= start_44 end_33)"
"(let-values()"
"(if(eq? convert-mode_2 'must-read)"
"                              (let-values () (format \"no digits\"))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((c_70)(string-ref s_22 start_44)))"
"(if(char=? '#\\# c_70)"
"(let-values()"
"(let-values(((next_4)(add1 start_44)))"
"(if(= next_4 end_33)"
"(let-values()"
"(if(eq? convert-mode_2 'must-read)"
"                                          (let-values () (format \"no character after `#` indicator in `~.a`\" s_22))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((i_35)(string-ref s_22 next_4)))"
"(let-values(((tmp_39) i_35))"
"(let-values(((index_2)"
"(if(char? tmp_39)"
"(let-values(((codepoint_0)(char->integer tmp_39)))"
"(if(if(unsafe-fx>= codepoint_0 66)"
"(unsafe-fx< codepoint_0 121)"
" #f)"
"(let-values(((tbl_0)"
" '#(2"
" 0"
" 2"
" 1"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 2"
" 1"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2)))"
"(unsafe-vector*-ref"
" tbl_0"
"(unsafe-fx- codepoint_0 66)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_2 1)"
"(let-values()"
"(if(eq?(read-complains convert-mode_2) 'must-read)"
"(let-values()"
"(format"
"                                                       \"bad `#` indicator `~a` at `~.a`\""
" i_35"
"(substring s_22 start_44 end_33)))"
"(let-values() #f)))"
"(if(unsafe-fx< index_2 2)"
"(let-values()"
"(if(let-values(((or-part_261)(exactness-set? exactness_0)))"
"(if or-part_261 or-part_261 in-complex_0))"
"(let-values()"
"(if(eq? convert-mode_2 'must-read)"
"(let-values()"
"(format"
"                                                             \"misplaced exactness specification at `~.a`\""
"(substring s_22 start_44 end_33)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((temp77_0)(add1 next_4))"
"((end78_0) end_33)"
"((radix79_0) radix_3)"
"((radix-set?80_0) radix-set?_0)"
"((temp81_1)"
"(if(let-values(((or-part_300)"
"(char=? i_35 '#\\e)))"
"(if or-part_300"
" or-part_300"
"(char=? i_35 '#\\E)))"
" 'exact"
" 'inexact))"
"((temp82_3)"
"(if(eq? convert-mode_2 'read)"
" 'must-read"
" convert-mode_2)))"
"(do-string->number20.1"
" #f"
" #f"
" radix-set?80_0"
" s_22"
" temp77_0"
" end78_0"
" radix79_0"
" temp81_1"
" temp82_3)))))"
"(let-values()"
"(if(let-values(((or-part_135) radix-set?_0))"
"(if or-part_135 or-part_135 in-complex_0))"
"(let-values()"
"(if(eq? convert-mode_2 'must-read)"
"(let-values()"
"(format"
"                                                             \"misplaced radix specification at `~.a`\""
"(substring s_22 start_44 end_33)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((radix_4)"
"(let-values(((tmp_40) i_35))"
"(if(if(equal? tmp_40 '#\\b)"
" #t"
"(equal? tmp_40 '#\\B))"
"(let-values() 2)"
"(if(if(equal? tmp_40 '#\\o)"
" #t"
"(equal? tmp_40 '#\\O))"
"(let-values() 8)"
"(if(if(equal? tmp_40 '#\\d)"
" #t"
"(equal? tmp_40 '#\\D))"
"(let-values() 10)"
"(let-values() 16)))))))"
"(let-values(((temp84_2)(add1 next_4))"
"((end85_0) end_33)"
"((radix86_0) radix_4)"
"((temp87_2) #t)"
"((exactness88_0) exactness_0)"
"((temp89_4)"
"(if(eq? convert-mode_2 'read)"
" 'must-read"
" convert-mode_2)))"
"(do-string->number20.1"
" #f"
" #f"
" temp87_2"
" s_22"
" temp84_2"
" end85_0"
" radix86_0"
" exactness88_0"
" temp89_4)))))))))))))))"
"(let-values(((c1_27)"
"(if(char-sign? c_70)"
"(read-special-number s_22 start_44 end_33 convert-mode_2)"
" #f)))"
"(if c1_27"
"((lambda(v_226)"
"(if(eq? exactness_0 'exact)"
"(let-values()"
"(if(eq? convert-mode_2 'must-read)"
"                                             (let-values () (format \"no exact representation for `~a`\" v_226))"
"(let-values() #f)))"
"(let-values() v_226)))"
" c1_27)"
"(let-values(((c2_3)"
"(if(char-sign? c_70)"
"(if(not in-complex_0)"
"(if(>(- end_33 start_44) 7)"
"(if(char=? '#\\i(string-ref s_22(sub1 end_33)))"
"(if(char-sign?(string-ref s_22 6))"
"(read-special-number"
" s_22"
" start_44"
"(+ start_44 6)"
" convert-mode_2)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if c2_3"
"((lambda(v_227)"
"(let-values(((temp91_0)(+ start_44 6))"
"((temp92_1)(sub1 end_33))"
"((radix93_0) radix_3)"
"((exactness94_0) exactness_0)"
"((convert-mode95_0) convert-mode_2)"
"((temp96_3) 'i)"
"((v97_0) v_227)"
"((temp98_3)"
"(lambda(v_228 v2_0)"
"(begin 'temp98(make-rectangular v_228 v2_0)))))"
"(read-for-special-compound65.1"
" temp96_3"
" #f"
" #f"
" s_22"
" temp91_0"
" temp92_1"
" radix93_0"
" exactness94_0"
" convert-mode95_0"
" v97_0"
" temp98_3)))"
" c2_3)"
"(let-values(((c3_2)"
"(if(not in-complex_0)"
"(if(>=(- end_33 start_44) 7)"
"(if(char=? '#\\i(string-ref s_22(sub1 end_33)))"
"(if(char-sign?(string-ref s_22(- end_33 7)))"
"(read-special-number"
" s_22"
"(- end_33 7)"
"(sub1 end_33)"
" convert-mode_2)"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if c3_2"
"((lambda(v2_1)"
"(if(if(= start_44(- end_33 7))(not(extflonum? v2_1)) #f)"
"(let-values()(make-rectangular 0 v2_1))"
"(let-values()"
"(let-values(((temp101_2)(- end_33 7))"
"((radix102_0) radix_3)"
"((exactness103_0) exactness_0)"
"((convert-mode104_0) convert-mode_2)"
"((temp105_2) 'i)"
"((temp106_2) #t)"
"((v2107_0) v2_1)"
"((temp108_2)"
"(lambda(v2_2 v_202)"
"(begin 'temp108(make-rectangular v_202 v2_2)))))"
"(read-for-special-compound65.1"
" temp105_2"
" temp106_2"
" #t"
" s_22"
" start_44"
" temp101_2"
" radix102_0"
" exactness103_0"
" convert-mode104_0"
" v2107_0"
" temp108_2)))))"
" c3_2)"
"(let-values(((c4_0)"
"(if(char-sign? c_70)"
"(if(not in-complex_0)"
"(if(>(- end_33 start_44) 7)"
"(if(char=? '#\\@(string-ref s_22(+ start_44 6)))"
"(read-special-number"
" s_22"
" start_44"
"(+ start_44 6)"
" convert-mode_2)"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if c4_0"
"((lambda(v_204)"
"(let-values(((temp110_4)(+ start_44 7))"
"((end111_0) end_33)"
"((radix112_0) radix_3)"
"((exactness113_0) exactness_0)"
"((convert-mode114_0) convert-mode_2)"
"((temp115_0) '@)"
"((v116_0) v_204)"
"((temp117_3)"
"(lambda(v_210 v2_3)"
"(begin 'temp117(make-polar v_210 v2_3)))))"
"(read-for-special-compound65.1"
" temp115_0"
" #f"
" #f"
" s_22"
" temp110_4"
" end111_0"
" radix112_0"
" exactness113_0"
" convert-mode114_0"
" v116_0"
" temp117_3)))"
" c4_0)"
"(let-values(((c5_1)"
"(if(not in-complex_0)"
"(if(>(- end_33 start_44) 7)"
"(if(char=? '#\\@(string-ref s_22(- end_33 7)))"
"(read-special-number"
" s_22"
"(- end_33 6)"
" end_33"
" convert-mode_2)"
" #f)"
" #f)"
" #f)))"
"(if c5_1"
"((lambda(v2_4)"
"(let-values(((temp120_1)(- end_33 7))"
"((radix121_0) radix_3)"
"((exactness122_0) exactness_0)"
"((convert-mode123_0) convert-mode_2)"
"((temp124_3) '@)"
"((temp125_2) #t)"
"((v2126_0) v2_4)"
"((temp127_3)"
"(lambda(v2_5 v_229)"
"(begin 'temp127(make-polar v_229 v2_5)))))"
"(read-for-special-compound65.1"
" temp124_3"
" temp125_2"
" #t"
" s_22"
" start_44"
" temp120_1"
" radix121_0"
" exactness122_0"
" convert-mode123_0"
" v2126_0"
" temp127_3)))"
" c5_1)"
"(let-values()"
"(let-values(((radix-set?132_0) radix-set?_0)"
"((exactness133_0) exactness_0)"
"((in-complex134_0) in-complex_0)"
"((convert-mode135_0) convert-mode_2))"
"(do-string->non-special-number33.1"
" in-complex134_0"
" #t"
" radix-set?132_0"
" s_22"
" start_44"
" end_33"
" radix_3"
" exactness133_0"
" convert-mode135_0)))))))))))))))))))))))))))))"
"(define-values"
"(do-string->non-special-number33.1)"
"(lambda(in-complex24_0"
" in-complex26_0"
" radix-set?23_0"
" s27_1"
" start28_0"
" end29_0"
" radix30_0"
" exactness31_0"
" convert-mode32_0)"
"(begin"
" 'do-string->non-special-number33"
"(let-values(((s_86) s27_1))"
"(let-values(((start_45) start28_0))"
"(let-values(((end_34) end29_0))"
"(let-values(((radix_5) radix30_0))"
"(let-values(((radix-set?_1) radix-set?23_0))"
"(let-values(((exactness_1) exactness31_0))"
"(let-values(((in-complex_1)(if in-complex26_0 in-complex24_0 #f)))"
"(let-values(((convert-mode_3) convert-mode32_0))"
"(let-values()"
"((letrec-values(((loop_106)"
"(lambda(i_172"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" dot-pos_1"
" slash-pos_0"
" exp-pos_0"
" must-i?_0)"
"(begin"
" 'loop"
"(if(= i_172 end_34)"
"(let-values()"
"(if(if(not any-digits?_0)(not i-pos_3) #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                           \"no digits in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(if(if must-i?_0(not i-pos_3) #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                             \"too many signs in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(if(if sign-pos_0"
"(let-values(((or-part_301)"
"(if dot-pos_1(< dot-pos_1 sign-pos_0) #f)))"
"(if or-part_301"
" or-part_301"
"(if slash-pos_0(< slash-pos_0 sign-pos_0) #f)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                               \"misplaced sign in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(if i-pos_3"
"(let-values()"
"(let-values(((temp140_0)(sub1 end_34))"
"((i-pos141_0) i-pos_3)"
"((sign-pos142_0) sign-pos_0)"
"((radix143_0) radix_5)"
"((radix-set?144_0) radix-set?_1)"
"((exactness145_0) exactness_1)"
"((temp146_0) 'i)"
"((convert-mode147_0) convert-mode_3))"
"(string->complex-number50.1"
" temp146_0"
" radix-set?144_0"
" s_86"
" start_45"
" sign-pos_0"
" sign-pos_0"
" temp140_0"
" i-pos141_0"
" sign-pos142_0"
" radix143_0"
" exactness145_0"
" convert-mode147_0)))"
"(if @-pos_0"
"(let-values()"
"(let-values(((temp151_1)(add1 @-pos_0))"
"((end152_0) end_34)"
"((i-pos153_0) i-pos_3)"
"((sign-pos154_0) sign-pos_0)"
"((radix155_0) radix_5)"
"((radix-set?156_0) radix-set?_1)"
"((exactness157_0) exactness_1)"
"((temp158_0) '@)"
"((convert-mode159_0) convert-mode_3))"
"(string->complex-number50.1"
" temp158_0"
" radix-set?156_0"
" s_86"
" start_45"
" @-pos_0"
" temp151_1"
" end152_0"
" i-pos153_0"
" sign-pos154_0"
" radix155_0"
" exactness157_0"
" convert-mode159_0)))"
"(let-values()"
"(string->real-number"
" s_86"
" start_45"
" end_34"
" dot-pos_1"
" slash-pos_0"
" exp-pos_0"
" any-hashes?_0"
" radix_5"
" exactness_1"
" convert-mode_3))))))))"
"(let-values()"
"(let-values(((c_71)(string-ref s_86 i_172)))"
"(if(digit? c_71 radix_5)"
"(let-values()"
"(loop_106"
"(add1 i_172)"
" #t"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" dot-pos_1"
" slash-pos_0"
" exp-pos_0"
" must-i?_0))"
"(if(char=? c_71 '#\\#)"
"(let-values()"
"(loop_106"
"(add1 i_172)"
" #t"
" #t"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" dot-pos_1"
" slash-pos_0"
" exp-pos_0"
" must-i?_0))"
"(if(char-sign? c_71)"
"(let-values()"
"(if(if sign-pos_0 must-i?_0 #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                     \"too many signs in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(let-values()"
"(loop_106"
"(add1 i_172)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" i_172"
" dot-pos_1"
" slash-pos_0"
" #f"
"(if(> i_172 start_45)"
"(let-values(((or-part_302)(not @-pos_0)))"
"(if or-part_302"
" or-part_302"
"(> i_172(add1 @-pos_0))))"
" #f)))))"
"(if(char=? c_71 '#\\.)"
"(let-values()"
"(if(let-values(((or-part_303)"
"(if exp-pos_0"
"(let-values(((or-part_304)"
"(not sign-pos_0)))"
"(if or-part_304"
" or-part_304"
"(> exp-pos_0 sign-pos_0)))"
" #f)))"
"(if or-part_303"
" or-part_303"
"(if dot-pos_1"
"(let-values(((or-part_305)(not sign-pos_0)))"
"(if or-part_305"
" or-part_305"
"(> dot-pos_1 sign-pos_0)))"
" #f)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                       \"misplaced `.` in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(if(if slash-pos_0"
"(let-values(((or-part_106)(not sign-pos_0)))"
"(if or-part_106"
" or-part_106"
"(> slash-pos_0 sign-pos_0)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                         \"decimal points and fractions annot be mixed `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(let-values()"
"(loop_106"
"(add1 i_172)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" i_172"
" #f"
" #f"
" must-i?_0)))))"
"(if(char=? c_71 '#\\/)"
"(let-values()"
"(if(if dot-pos_1"
"(let-values(((or-part_61)(not sign-pos_0)))"
"(if or-part_61"
" or-part_61"
"(> dot-pos_1 sign-pos_0)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                         \"decimal points and fractions annot be mixed `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(if(let-values(((or-part_107)"
"(if exp-pos_0"
"(let-values(((or-part_62)"
"(not sign-pos_0)))"
"(if or-part_62"
" or-part_62"
"(> exp-pos_0 sign-pos_0)))"
" #f)))"
"(if or-part_107"
" or-part_107"
"(if slash-pos_0"
"(let-values(((or-part_63)"
"(not sign-pos_0)))"
"(if or-part_63"
" or-part_63"
"(> slash-pos_0 sign-pos_0)))"
" #f)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                           \"misplaced `/` in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(let-values()"
"(loop_106"
"(add1 i_172)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" #f"
" i_172"
" #f"
" must-i?_0)))))"
"(if(let-values(((or-part_306)(char=? c_71 '#\\e)))"
"(if or-part_306"
" or-part_306"
"(let-values(((or-part_307)(char=? c_71 '#\\E)))"
"(if or-part_307"
" or-part_307"
"(let-values(((or-part_308)"
"(char=? c_71 '#\\f)))"
"(if or-part_308"
" or-part_308"
"(let-values(((or-part_181)"
"(char=? c_71 '#\\F)))"
"(if or-part_181"
" or-part_181"
"(let-values(((or-part_309)"
"(char=? c_71 '#\\d)))"
"(if or-part_309"
" or-part_309"
"(let-values(((or-part_310)"
"(char=? c_71 '#\\D)))"
"(if or-part_310"
" or-part_310"
"(let-values(((or-part_311)"
"(char=?"
" c_71"
" '#\\s)))"
"(if or-part_311"
" or-part_311"
"(let-values(((or-part_312)"
"(char=?"
" c_71"
" '#\\S)))"
"(if or-part_312"
" or-part_312"
"(let-values(((or-part_313)"
"(char=?"
" c_71"
" '#\\l)))"
"(if or-part_313"
" or-part_313"
"(let-values(((or-part_314)"
"(char=?"
" c_71"
" '#\\L)))"
"(if or-part_314"
" or-part_314"
"(let-values(((or-part_315)"
"(char=?"
" c_71"
" '#\\t)))"
"(if or-part_315"
" or-part_315"
"(char=?"
" c_71"
" '#\\T)))))))))))))))))))))))"
"(let-values()"
"(if exp-pos_0"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                           \"misplaced `~a` in `~.a`\""
" c_71"
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(if(if(<(add1 i_172) end_34)"
"(char-sign?(string-ref s_86(add1 i_172)))"
" #f)"
"(let-values()"
"(loop_106"
"(+ i_172 2)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" dot-pos_1"
" slash-pos_0"
"(let-values(((or-part_316) exp-pos_0))"
"(if or-part_316 or-part_316 i_172))"
" must-i?_0))"
"(let-values()"
"(loop_106"
"(+ i_172 1)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" dot-pos_1"
" slash-pos_0"
"(let-values(((or-part_317) exp-pos_0))"
"(if or-part_317 or-part_317 i_172))"
" must-i?_0)))))"
"(if(char=? c_71 '#\\@)"
"(let-values()"
"(if(eq? in-complex_1 'i)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                             \"cannot mix `@` and `i` in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(if(let-values(((or-part_318) @-pos_0))"
"(if or-part_318"
" or-part_318"
"(eq? in-complex_1 '@)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                               \"too many `@`s in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(if(= i_172 start_45)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                                 \"`@` cannot be at start in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(if must-i?_0"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                                   \"too many signs in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(let-values()"
"(loop_106"
"(add1 i_172)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" i_172"
" #f"
" #f"
" #f"
" #f"
" must-i?_0)))))))"
"(if(if(let-values(((or-part_319)"
"(char=? c_71 '#\\i)))"
"(if or-part_319"
" or-part_319"
"(char=? c_71 '#\\I)))"
" sign-pos_0"
" #f)"
"(let-values()"
"(if(let-values(((or-part_320) @-pos_0))"
"(if or-part_320"
" or-part_320"
"(eq? in-complex_1 '@)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                               \"cannot mix `@` and `i` in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(if(let-values(((or-part_321)"
"(<(add1 i_172) end_34)))"
"(if or-part_321"
" or-part_321"
"(eq? in-complex_1 'i)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                                 \"`i' must be at the end in `~.a`\""
"(substring s_86 start_45 end_34)))"
"(let-values() #f)))"
"(let-values()"
"(loop_106"
"(add1 i_172)"
" any-digits?_0"
" any-hashes?_0"
" i_172"
" @-pos_0"
" sign-pos_0"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values()"
"(if(char=? c_71 '#\\nul)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"                                                                              (format \"nul character in `~.a`\" s_86))"
"(let-values() #f)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"                                                                              (format \"bad digit `~a`\" c_71))"
"(let-values() #f))))))))))))))))))))"
" loop_106)"
" start_45"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))))))))))))"
"(define-values"
"(string->complex-number50.1)"
"(lambda(in-complex37_0"
" radix-set?36_0"
" s40_0"
" start141_0"
" end142_0"
" start243_0"
" end244_0"
" i-pos45_0"
" sign-pos46_0"
" radix47_0"
" exactness48_0"
" convert-mode49_0)"
"(begin"
" 'string->complex-number50"
"(let-values(((s_461) s40_0))"
"(let-values(((start1_0) start141_0))"
"(let-values(((end1_0) end142_0))"
"(let-values(((start2_0) start243_0))"
"(let-values(((end2_0) end244_0))"
"(let-values()"
"(let-values()"
"(let-values(((radix_6) radix47_0))"
"(let-values(((radix-set?_2) radix-set?36_0))"
"(let-values(((exactness_2) exactness48_0))"
"(let-values(((in-complex_2) in-complex37_0))"
"(let-values(((convert-mode_4) convert-mode49_0))"
"(let-values()"
"(let-values(((v1_0)"
"(if(= start1_0 end1_0)"
"(let-values()(if(eq? exactness_2 'inexact) 0.0 0))"
"(let-values()"
"(let-values(((radix-set?164_0) radix-set?_2)"
"((exactness165_0) exactness_2)"
"((in-complex166_0) in-complex_2)"
"((convert-mode167_0) convert-mode_4))"
"(do-string->number20.1"
" in-complex166_0"
" #t"
" radix-set?164_0"
" s_461"
" start1_0"
" end1_0"
" radix_6"
" exactness165_0"
" convert-mode167_0))))))"
"(let-values(((v2_6)"
"(if(if(eq? in-complex_2 'i)(=(- end2_0 start2_0) 1) #f)"
"(let-values()"
"(let-values(((neg?_0)(char=?(string-ref s_461 start2_0) '#\\-)))"
"(if(eq? exactness_2 'inexact)"
"(let-values()(if neg?_0 -1.0 1.0))"
"(let-values()(if neg?_0 -1 1)))))"
"(let-values()"
"(let-values(((radix-set?172_0) radix-set?_2)"
"((exactness173_0) exactness_2)"
"((in-complex174_0) in-complex_2)"
"((convert-mode175_0) convert-mode_4))"
"(do-string->number20.1"
" in-complex174_0"
" #t"
" radix-set?172_0"
" s_461"
" start2_0"
" end2_0"
" radix_6"
" exactness173_0"
" convert-mode175_0))))))"
"(if(let-values(((or-part_322)(not v1_0)))"
"(if or-part_322 or-part_322(not v2_6)))"
"(let-values() #f)"
"(if(if(let-values(((or-part_323)(extflonum? v1_0)))"
"(if or-part_323 or-part_323(extflonum? v2_6)))"
"(not(eq? convert-mode_4 'must-read))"
" #f)"
"(let-values()(fail-extflonum convert-mode_4 v1_0))"
"(if(string? v1_0)"
"(let-values() v1_0)"
"(if(extflonum? v1_0)"
"(let-values()(fail-extflonum convert-mode_4 v1_0))"
"(if(string? v2_6)"
"(let-values() v2_6)"
"(if(extflonum? v2_6)"
"(let-values()(fail-extflonum convert-mode_4 v2_6))"
"(if(eq? in-complex_2 'i)"
"(let-values()(make-rectangular v1_0 v2_6))"
"(let-values()"
"(let-values(((p_69)(make-polar v1_0 v2_6)))"
"(if(eq? exactness_2 'exact)"
"(inexact->exact p_69)"
" p_69))))))))))))))))))))))))))))"
"(define-values"
"(string->real-number)"
"(lambda(s_462 start_46 end_35 dot-pos_2 slash-pos_1 exp-pos_1 any-hashes?_1 radix_7 exactness_3 convert-mode_5)"
"(begin"
"(let-values(((extfl-mark?_0)"
"(lambda()(begin 'extfl-mark?(char=?(char-downcase(string-ref s_462 exp-pos_1)) '#\\t)))))"
"(let-values(((simple?_0)"
"(if(not slash-pos_1)"
"(if(let-values(((or-part_324)(eq? exactness_3 'inexact)))"
"(if or-part_324"
" or-part_324"
"(let-values(((or-part_325)(eq? exactness_3 'decimal-as-inexact)))"
"(if or-part_325 or-part_325(if(not dot-pos_2)(not exp-pos_1) #f)))))"
"(if(let-values(((or-part_326)(not exp-pos_1)))"
"(if or-part_326"
" or-part_326"
"(let-values(((or-part_229)(not(eq? convert-mode_5 'number-or-false))))"
"(if or-part_229 or-part_229(not(extfl-mark?_0))))))"
"(not(if any-hashes?_1(hashes? s_462 start_46 end_35) #f))"
" #f)"
" #f)"
" #f)))"
"(let-values(((has-sign?_0)(if(> end_35 start_46)(char-sign?(string-ref s_462 start_46)) #f)))"
"(if(=(- end_35 start_46)(+(if dot-pos_2 1 0)(if exp-pos_1 1 0)(if has-sign?_0 1 0)))"
"(let-values()"
"(if(= end_35 start_46)"
"                  (if (eq? convert-mode_5 'must-read) (let-values () (format \"missing digits\")) (let-values () #f))"
"(if(eq? convert-mode_5 'must-read)"
"                    (let-values () (format \"missing digits in `~.a`\" (substring s_462 start_46 end_35)))"
"(let-values() #f))))"
"(if simple?_0"
"(let-values()"
"(if(if exp-pos_1"
"(="
"(- exp-pos_1 start_46)"
"(+(if(if dot-pos_2(< dot-pos_2 exp-pos_1) #f) 1 0)(if has-sign?_0 1 0)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_5 'must-read)"
"(let-values()"
"                          (format \"missing digits before exponent marker in `~.a`\" (substring s_462 start_46 end_35)))"
"(let-values() #f)))"
"(if(if exp-pos_1"
"(let-values(((or-part_327)(= exp-pos_1(sub1 end_35))))"
"(if or-part_327"
" or-part_327"
"(if(= exp-pos_1(- end_35 2))(char-sign?(string-ref s_462(sub1 end_35))) #f)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_5 'must-read)"
"(let-values()"
"                            (format \"missing digits after exponent marker in `~.a`\" (substring s_462 start_46 end_35)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_30)"
"(string->number$1"
"(maybe-substring s_462 start_46 end_35)"
" radix_7"
"(if(let-values(((or-part_328)(eq? convert-mode_5 'number-or-false)))"
"(if or-part_328"
" or-part_328"
"(let-values(((or-part_230)(not exp-pos_1)))"
"(if or-part_230 or-part_230(not(extfl-mark?_0))))))"
" 'number-or-false"
" 'read))))"
"(if(let-values(((or-part_329)(not n_30)))(if or-part_329 or-part_329(string? n_30)))"
"(let-values()"
"(error"
" 'string->number"
"                               \"host `string->number` failed on ~s\""
"(substring s_462 start_46 end_35)))"
"(if(eq? exactness_3 'inexact)"
"(let-values()"
"(if(extflonum? n_30)"
"(let-values()"
"(if(eq? convert-mode_5 'must-read)"
"(let-values()"
"(format"
"                                         \"cannot convert extflonum `~.a` to inexact\""
"(substring s_462 start_46 end_35)))"
"(let-values() #f)))"
"(if(if(eqv? n_30 0)(char=?(string-ref s_462 start_46) '#\\-) #f)"
"(let-values() -0.0)"
"(let-values()(exact->inexact n_30)))))"
"(let-values() n_30))))))))"
"(if exp-pos_1"
"(let-values()"
"(let-values(((m-v_0)"
"(string->real-number"
" s_462"
" start_46"
" exp-pos_1"
" dot-pos_2"
" slash-pos_1"
" #f"
" any-hashes?_1"
" radix_7"
" 'exact"
" convert-mode_5)))"
"(let-values(((e-v_0)"
"(string->exact-integer-number s_462(+ exp-pos_1 1) end_35 radix_7 convert-mode_5)))"
"(let-values(((real->precision-inexact_0)"
"(lambda(r_47)"
"(begin"
" 'real->precision-inexact"
"(let-values(((tmp_41)(string-ref s_462 exp-pos_1)))"
"(if(if(equal? tmp_41 '#\\s)"
" #t"
"(if(equal? tmp_41 '#\\S)"
" #t"
"(if(equal? tmp_41 '#\\f) #t(equal? tmp_41 '#\\F))))"
"(let-values()(real->single-flonum r_47))"
"(if(if(equal? tmp_41 '#\\t) #t(equal? tmp_41 '#\\T))"
"(let-values()"
"(if(extflonum-available?)"
"(real->extfl r_47)"
"(string->number$1"
"(replace-hashes s_462 start_46 end_35)"
" radix_7"
" 'read)))"
"(let-values()(real->double-flonum r_47)))))))))"
"(let-values(((get-extfl?_0)(extfl-mark?_0)))"
"(if(let-values(((or-part_330)(not m-v_0)))(if or-part_330 or-part_330(not e-v_0)))"
"(let-values() #f)"
"(if(string? m-v_0)"
"(let-values() m-v_0)"
"(if(string? e-v_0)"
"(let-values() e-v_0)"
"(if(if(eq? convert-mode_5 'number-or-false) get-extfl?_0 #f)"
"(let-values() #f)"
"(if(if(let-values(((or-part_331)(eq? exactness_3 'inexact)))"
"(if or-part_331 or-part_331(eq? exactness_3 'decimal-as-inexact)))"
"(>(abs e-v_0)(if get-extfl?_0 6000 400))"
" #f)"
"(let-values()"
"(real->precision-inexact_0"
"(if(eqv? m-v_0 0)"
"(let-values()(if(char=?(string-ref s_462 start_46) '#\\-) -0.0 0.0))"
"(if(positive? m-v_0)"
"(let-values()(if(positive? e-v_0) +inf.0 0.0))"
"(let-values()(if(positive? e-v_0) -inf.0 -0.0))))))"
"(if(if(exactness-set? exactness_3) get-extfl?_0 #f)"
"(let-values()"
"(if(eq? convert-mode_5 'must-read)"
"(let-values()"
"(format"
"                                               \"cannot convert extflonum `~.a` to ~a\""
"(substring s_462 start_46 end_35)"
" exactness_3))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_31)(* m-v_0(expt radix_7 e-v_0))))"
"(if(if(not get-extfl?_0)"
"(let-values(((or-part_332)(eq? exactness_3 'exact)))"
"(if or-part_332 or-part_332(eq? exactness_3 'decimal-as-exact)))"
" #f)"
"(let-values() n_31)"
"(if(if(eqv? n_31 0)(char=?(string-ref s_462 start_46) '#\\-) #f)"
"(let-values()(real->precision-inexact_0 -0.0))"
"(let-values()(real->precision-inexact_0 n_31)))))))))))))))))"
"(if slash-pos_1"
"(let-values()"
"(let-values(((n-v_0)"
"(string->real-number"
" s_462"
" start_46"
" slash-pos_1"
" #f"
" #f"
" #f"
" any-hashes?_1"
" radix_7"
" 'exact"
" convert-mode_5)))"
"(let-values(((d-v_0)"
"(string->real-number"
" s_462"
"(add1 slash-pos_1)"
" end_35"
" #f"
" #f"
" #f"
" any-hashes?_1"
" radix_7"
" 'exact"
" convert-mode_5)))"
"(let-values(((get-inexact?_0)"
"(lambda(from-pos_0)"
"(begin"
" 'get-inexact?"
"(let-values(((or-part_333)(eq? exactness_3 'inexact)))"
"(if or-part_333"
" or-part_333"
"(if(not(eq? exactness_3 'exact))"
"(hashes? s_462 from-pos_0 end_35)"
" #f)))))))"
"(if(let-values(((or-part_334)(not n-v_0)))(if or-part_334 or-part_334(not d-v_0)))"
"(let-values() #f)"
"(if(string? n-v_0)"
"(let-values() n-v_0)"
"(if(string? d-v_0)"
"(let-values() d-v_0)"
"(if(eqv? d-v_0 0)"
"(let-values()"
"(if(get-inexact?_0(add1 slash-pos_1))"
"(let-values()(if(negative? n-v_0) -inf.0 +inf.0))"
"(let-values()"
"(if(eq?(read-complains convert-mode_5) 'must-read)"
"(let-values()"
"                                              (format \"division by zero in `~.a`\" (substring s_462 start_46 end_35)))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((n_32)(/ n-v_0 d-v_0)))"
"(if(get-inexact?_0 start_46)(exact->inexact n_32) n_32)))))))))))"
"(let-values()"
"(string->decimal-number"
" s_462"
" start_46"
" end_35"
" dot-pos_2"
" radix_7"
" exactness_3"
" convert-mode_5))))))))))))"
"(define-values"
"(string->decimal-number)"
"(lambda(s_445 start_47 end_36 dot-pos_3 radix_8 exactness_4 convert-mode_6)"
"(begin"
"(let-values(((get-exact?_0)"
"(let-values(((or-part_335)(eq? exactness_4 'exact)))"
"(if or-part_335 or-part_335(eq? exactness_4 'decimal-as-exact)))))"
"(let-values(((new-str_0)(make-string(- end_36 start_47(if(if dot-pos_3 get-exact?_0 #f) 1 0)))))"
"((letrec-values(((loop_107)"
"(lambda(i_173 j_3 hashes-pos_0)"
"(begin"
" 'loop"
"(if(< i_173 start_47)"
"(let-values()"
"(if(= hashes-pos_0 start_47)"
"(let-values()"
"(if(eq? convert-mode_6 'must-read)"
"(let-values()"
"                                            (format \"misplaced `#` in `~.a`\" (substring s_445 start_47 end_36)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_33)(string->number$1 new-str_0 radix_8)))"
"(if(not n_33)"
"(let-values()(fail-bad-number convert-mode_6 s_445 start_47 end_36))"
"(if(not get-exact?_0)"
"(let-values()"
"(if(if(eqv? n_33 0)(char=?(string-ref s_445 start_47) '#\\-) #f)"
" -0.0"
"(exact->inexact n_33)))"
"(if(if dot-pos_3 get-exact?_0 #f)"
"(let-values()(/ n_33(expt 10(- end_36 dot-pos_3 1))))"
"(let-values() n_33))))))))"
"(let-values()"
"(let-values(((c_72)(string-ref s_445 i_173)))"
"(if(char=? c_72 '#\\.)"
"(let-values()"
"(if get-exact?_0"
"(let-values()"
"(loop_107"
"(sub1 i_173)"
" j_3"
"(if(= hashes-pos_0(add1 i_173)) i_173 hashes-pos_0)))"
"(let-values()"
"(begin"
"(string-set! new-str_0 j_3 c_72)"
"(loop_107"
"(sub1 i_173)"
"(sub1 j_3)"
"(if(= hashes-pos_0(add1 i_173)) i_173 hashes-pos_0))))))"
"(if(let-values(((or-part_336)(char=? c_72 '#\\-)))"
"(if or-part_336 or-part_336(char=? c_72 '#\\+)))"
"(let-values()"
"(begin"
"(string-set! new-str_0 j_3 c_72)"
"(loop_107"
"(sub1 i_173)"
"(sub1 j_3)"
"(if(= hashes-pos_0(add1 i_173)) i_173 hashes-pos_0))))"
"(if(char=? c_72 '#\\#)"
"(let-values()"
"(if(= hashes-pos_0(add1 i_173))"
"(let-values()"
"(begin"
"(string-set! new-str_0 j_3 '#\\0)"
"(loop_107(sub1 i_173)(sub1 j_3) i_173)))"
"(let-values()"
"(if(eq? convert-mode_6 'must-read)"
"(let-values()"
"(format"
"                                                       \"misplaced `#` in `~.a`\""
"(substring s_445 start_47 end_36)))"
"(let-values() #f)))))"
"(let-values()"
"(begin"
"(string-set! new-str_0 j_3 c_72)"
"(loop_107(sub1 i_173)(sub1 j_3) hashes-pos_0)))))))))))))"
" loop_107)"
"(sub1 end_36)"
"(sub1(string-length new-str_0))"
" end_36))))))"
"(define-values"
"(string->exact-integer-number)"
"(lambda(s_352 start_48 end_37 radix_9 convert-mode_7)"
"(begin"
"(if(hashes? s_352 start_48 end_37)"
"(let-values()"
"(if(eq? convert-mode_7 'must-read)"
"            (let-values () (format \"misplaced `#` in `~.a`\" (substring s_352 start_48 end_37)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_34)(string->number$1(maybe-substring s_352 start_48 end_37) radix_9)))"
"(if(not n_34)"
"(let-values()"
"(if(eq? convert-mode_7 'must-read)"
"                  (let-values () (format \"bad exponent `~.a`\" (substring s_352 start_48 end_37)))"
"(let-values() #f)))"
"(let-values() n_34))))))))"
"(define-values"
"(read-special-number)"
"(lambda(s_447 start_49 end_38 convert-mode_8)"
"(begin"
"(if(=(- end_38 start_49) 6)"
"(if(let-values(((or-part_337)(char=?(string-ref s_447 start_49) '#\\+)))"
"(if or-part_337 or-part_337(char=?(string-ref s_447 start_49) '#\\-)))"
"(let-values(((or-part_224)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 1))) '#\\i)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 2))) '#\\n)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 3))) '#\\f)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 4))) '#\\.)"
"(let-values(((or-part_338)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 5))) '#\\0)"
"(if(char=?(string-ref s_447 start_49) '#\\+) +inf.0 -inf.0)"
" #f)))"
"(if or-part_338"
" or-part_338"
"(let-values(((or-part_339)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 5))) '#\\f)"
"(if(char=?(string-ref s_447 start_49) '#\\+) +inf.f -inf.f)"
" #f)))"
"(if or-part_339"
" or-part_339"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 5))) '#\\t)"
"(if(not(eq? convert-mode_8 'number-or-false))"
"(if(char=?(string-ref s_447 start_49) '#\\+) '+inf.t '-inf.t)"
" #f)"
" #f)))))"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if or-part_224"
" or-part_224"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 1))) '#\\n)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 2))) '#\\a)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 3))) '#\\n)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 4))) '#\\.)"
"(let-values(((or-part_340)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 5))) '#\\0) +nan.0 #f)))"
"(if or-part_340"
" or-part_340"
"(let-values(((or-part_341)"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 5))) '#\\f) +nan.f #f)))"
"(if or-part_341"
" or-part_341"
"(if(char=?(char-downcase(string-ref s_447(+ start_49 5))) '#\\t)"
"(if(not(eq? convert-mode_8 'number-or-false)) '+nan.t #f)"
" #f)))))"
" #f)"
" #f)"
" #f)"
" #f)))"
" #f)"
" #f))))"
"(define-values"
"(fail-extflonum)"
"(lambda(convert-mode_9 v_230)"
"(begin"
"(if(eq? convert-mode_9 'must-read)"
"        (let-values () (format \"cannot combine extflonum `~a` into complex number\" v_230))"
"(let-values() #f)))))"
"(define-values"
"(read-for-special-compound65.1)"
"(lambda(in-complex53_0"
" reading-first?54_0"
" reading-first?56_0"
" s57_0"
" start58_0"
" end59_0"
" radix60_0"
" exactness61_0"
" convert-mode62_0"
" v63_0"
" combine64_0)"
"(begin"
" 'read-for-special-compound65"
"(let-values(((s_463) s57_0))"
"(let-values(((start_50) start58_0))"
"(let-values(((end_39) end59_0))"
"(let-values(((radix_10) radix60_0))"
"(let-values(((exactness_5) exactness61_0))"
"(let-values(((convert-mode_10) convert-mode62_0))"
"(let-values(((in-complex_3) in-complex53_0))"
"(let-values(((reading-first?_0)(if reading-first?56_0 reading-first?54_0 #f)))"
"(let-values(((v_231) v63_0))"
"(let-values(((combine_1) combine64_0))"
"(let-values()"
"(if(eq? exactness_5 'exact)"
"(let-values()"
"(if(eq? convert-mode_10 'must-read)"
"                                  (let-values () (format \"no exact representation for `~a`\" v_231))"
"(let-values() #f)))"
"(if(if(extflonum? v_231)"
"(let-values(((or-part_342)(not reading-first?_0)))"
"(if or-part_342 or-part_342(not(eq? convert-mode_10 'must-read))))"
" #f)"
"(let-values()(fail-extflonum convert-mode_10 v_231))"
"(let-values()"
"(let-values(((v2_7)"
"(let-values(((temp180_0) #t)"
"((exactness181_0) exactness_5)"
"((in-complex182_0) in-complex_3)"
"((convert-mode183_0) convert-mode_10))"
"(do-string->number20.1"
" in-complex182_0"
" #t"
" temp180_0"
" s_463"
" start_50"
" end_39"
" radix_10"
" exactness181_0"
" convert-mode183_0))))"
"(if(string? v2_7)"
"(let-values() v2_7)"
"(if(not v2_7)"
"(let-values() v2_7)"
"(if(extflonum? v_231)"
"(let-values()(fail-extflonum convert-mode_10 v_231))"
"(let-values()(combine_1 v_231 v2_7)))))))))))))))))))))))"
"(define-values"
"(hashes?)"
"(lambda(s_464 start_51 end_40)"
"(begin"
"(let-values(((v*_6 start*_5 stop*_6 step*_5)"
"(normalise-inputs"
" 'in-string"
"                     \"string\""
"(lambda(x_81)(string? x_81))"
"(lambda(x_82)(unsafe-string-length x_82))"
" s_464"
" start_51"
" end_40"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_261)"
"(lambda(result_113 idx_5)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< idx_5 stop*_6)"
"(let-values(((c_73)(string-ref v*_6 idx_5)))"
"(let-values(((result_114)"
"(let-values()"
"(let-values(((result_115)"
"(let-values()(let-values()(char=? c_73 '#\\#)))))"
"(values result_115)))))"
"(if(if(not((lambda x_83 result_114) c_73))(not #f) #f)"
"(for-loop_261 result_114(unsafe-fx+ idx_5 1))"
" result_114)))"
" result_113)))))"
" for-loop_261)"
" #f"
" start*_5))))))"
"(define-values"
"(replace-hashes)"
"(lambda(s_264 start_52 end_41)"
"(begin"
"(let-values(((new-s_7)(make-string(- end_41 start_52))))"
"(begin"
"(let-values(((v*_7 start*_6 stop*_7 step*_6)"
"(normalise-inputs"
" 'in-string"
"                         \"string\""
"(lambda(x_84)(string? x_84))"
"(lambda(x_85)(unsafe-string-length x_85))"
" s_264"
" start_52"
" end_41"
" 1))"
"((start_53) 0))"
"(begin"
" #t"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_53)))"
"((letrec-values(((for-loop_262)"
"(lambda(idx_6 pos_111)"
"(begin"
" 'for-loop"
"(if(if(unsafe-fx< idx_6 stop*_7) #t #f)"
"(let-values(((c_74)(string-ref v*_7 idx_6))((i_174) pos_111))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(char=? c_74 '#\\#)"
"(string-set! new-s_7 i_174 '#\\0)"
"(string-set! new-s_7 i_174 c_74)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_262(unsafe-fx+ idx_6 1)(+ pos_111 1))(values))))"
"(values))))))"
" for-loop_262)"
" start*_6"
" start_53)))"
"(void)"
" new-s_7)))))"
"(define-values"
"(maybe-substring)"
"(lambda(s_465 start_54 end_42)"
"(begin(if(if(= 0 start_54)(= end_42(string-length s_465)) #f) s_465(substring s_465 start_54 end_42)))))"
"(define-values"
"(exactness-set?)"
"(lambda(exactness_6)"
"(begin"
"(let-values(((or-part_343)(eq? exactness_6 'exact)))(if or-part_343 or-part_343(eq? exactness_6 'inexact))))))"
"(define-values"
"(char-sign?)"
"(lambda(c_75)"
"(begin(let-values(((or-part_344)(char=? c_75 '#\\-)))(if or-part_344 or-part_344(char=? c_75 '#\\+))))))"
"(define-values"
"(digit?)"
"(lambda(c_76 radix_11)"
"(begin"
"(let-values(((v_232)(char->integer c_76)))"
"(let-values(((or-part_345)"
"(if(>= v_232(char->integer '#\\0))(<(- v_232(char->integer '#\\0)) radix_11) #f)))"
"(if or-part_345"
" or-part_345"
"(if(> radix_11 10)"
"(let-values(((or-part_346)"
"(if(>= v_232(char->integer '#\\a))(<(- v_232(-(char->integer '#\\a) 10)) radix_11) #f)))"
"(if or-part_346"
" or-part_346"
"(if(>= v_232(char->integer '#\\A))(<(- v_232(-(char->integer '#\\A) 10)) radix_11) #f)))"
" #f)))))))"
"(define-values"
"(fail-bad-number)"
"(lambda(convert-mode_11 s_454 start_55 end_43)"
"(begin"
"(if(eq? convert-mode_11 'must-read)"
"        (let-values () (format \"bad number `~.a`\" (substring s_454 start_55 end_43)))"
"(let-values() #f)))))"
"(define-values"
"(read-complains)"
"(lambda(convert-mode_12)(begin(if(eq? convert-mode_12 'read) 'must-read convert-mode_12))))"
"(define-values"
"(read-symbol-or-number8.1)"
"(lambda(extra-prefix2_0 extra-prefix4_0 mode1_0 mode3_0 init-c5_0 in6_0 config7_0)"
"(begin"
" 'read-symbol-or-number8"
"(let-values(((init-c_2) init-c5_0))"
"(let-values(((in_24) in6_0))"
"(let-values(((config_24) config7_0))"
"(let-values(((mode_17)(if mode3_0 mode1_0 'symbol-or-number)))"
"(let-values(((extra-prefix_0)(if extra-prefix4_0 extra-prefix2_0 #f)))"
"(let-values()"
"(let-values(((rt_11)(read-config-readtable config_24)))"
"(let-values(((c1_28)"
"(if rt_11"
"(if(let-values(((or-part_3)(eq? mode_17 'symbol-or-number)))"
"(if or-part_3 or-part_3(eq? mode_17 'symbol/indirect)))"
"(readtable-symbol-parser rt_11)"
" #f)"
" #f)))"
"(if c1_28"
"((lambda(handler_2)"
"(readtable-apply"
" handler_2"
" init-c_2"
" in_24"
" config_24"
"(read-config-line config_24)"
"(read-config-col config_24)"
"(read-config-pos config_24)))"
" c1_28)"
"(let-values()"
"(let-values(((accum-str_1)(accum-string-init! config_24)))"
"(let-values(((quoted-ever?_0) #f))"
"(let-values(((case-sens?_0)(check-parameter read-case-sensitive config_24)))"
"(let-values((()"
"(begin"
"(if extra-prefix_0"
"(let-values()(accum-string-add! accum-str_1 extra-prefix_0))"
"(void))"
"(values))))"
"(let-values(((source_17)(read-config-source config_24)))"
"(let-values(((unexpected-quoted_0)"
"(lambda(c_77 after-c_0)"
"(begin"
" 'unexpected-quoted"
"(let-values(((c13_1) c_77)"
"                                                                   ((temp14_6) \"~a following `~a` in ~a\")"
"((temp15_5)"
"(if(eof-object? c_77)"
"                                                                      \"end-of-file\""
"                                                                      \"non-character\"))"
"((after-c16_0) after-c_0)"
"((temp17_2)"
"(if(eq? mode_17 'keyword)"
"                                                                      (let-values () \"keyword\")"
"(if(string? mode_17)"
"                                                                        (let-values () \"number\")"
"                                                                        (let-values () \"symbol\")))))"
"(reader-error10.1"
" #f"
" #f"
" c13_1"
" #t"
" #f"
" #f"
" in_24"
" config_24"
" temp14_6"
"(list temp15_5 after-c16_0 temp17_2)))))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_108)"
"(lambda(init-c_6"
" pipe-quote-c_0"
" foldcase-from_0)"
"(begin"
" 'loop"
"(let-values(((c_78)"
"(let-values(((or-part_70)"
" init-c_6))"
"(if or-part_70"
" or-part_70"
"(let-values(((in_22)"
" in_24)"
"((skip-count_6)"
" 0)"
"((source_15)"
" source_17))"
"(peek-char-or-special"
" in_22"
" skip-count_6"
" special1.1"
" source_15))))))"
"(let-values(((ec_4)"
"(let-values(((rt_12) rt_11)"
"((c_79) c_78))"
"(if(let-values(((or-part_165)"
"(not"
" rt_12)))"
"(if or-part_165"
" or-part_165"
"(not"
"(char? c_79))))"
"(let-values() c_79)"
"(let-values()"
"(*readtable-effective-char"
" rt_12"
" c_79))))))"
"(if(if pipe-quote-c_0"
"(not(char? ec_4))"
" #f)"
"(let-values()"
"(begin"
"(if init-c_6"
"(void)"
"(let-values()"
"(consume-char/special"
" in_24"
" config_24"
" c_78)))"
"(unexpected-quoted_0"
" c_78"
" pipe-quote-c_0)))"
"(if(if(not pipe-quote-c_0)"
"(readtable-char-delimiter?"
" rt_11"
" c_78"
" config_24)"
" #f)"
"(let-values()"
"(if case-sens?_0"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_1"
" string-foldcase"
" foldcase-from_0))))"
"(if(if pipe-quote-c_0"
"(char=? c_78 pipe-quote-c_0)"
" #f)"
"(let-values()"
"(begin"
"(if init-c_6"
"(void)"
"(let-values()"
"(consume-char"
" in_24"
" c_78)))"
"(loop_108"
" #f"
" #f"
"(accum-string-count"
" accum-str_1))))"
"(if(if(char=? ec_4 '#\\|)"
"(check-parameter"
" read-accept-bar-quote"
" config_24)"
" #f)"
"(let-values()"
"(begin"
"(if init-c_6"
"(void)"
"(let-values()"
"(consume-char"
" in_24"
" c_78)))"
"(set! quoted-ever?_0 #t)"
"(if case-sens?_0"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_1"
" string-foldcase"
" foldcase-from_0)))"
"(loop_108"
" #f"
" c_78"
"(accum-string-count"
" accum-str_1))))"
"(if(if(char=? ec_4 '#\\\\)"
"(not pipe-quote-c_0)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if init-c_6"
"(void)"
"(let-values()"
"(consume-char"
" in_24"
" c_78)))"
"(values))))"
"(let-values(((next-c_0)"
"(let-values(((in_23)"
" in_24)"
"((source_18)"
" source_17))"
"(read-char-or-special"
" in_23"
" special1.1"
" source_18))))"
"(begin"
"(if(char? next-c_0)"
"(void)"
"(let-values()"
"(unexpected-quoted_0"
" next-c_0"
" c_78)))"
"(if(let-values(((or-part_31)"
" pipe-quote-c_0))"
"(if or-part_31"
" or-part_31"
" case-sens?_0))"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_1"
" string-foldcase"
" foldcase-from_0)))"
"(accum-string-add!"
" accum-str_1"
" next-c_0)"
"(set! quoted-ever?_0"
" #t)"
"(loop_108"
" #f"
" #f"
"(accum-string-count"
" accum-str_1))))))"
"(let-values()"
"(begin"
"(if init-c_6"
"(void)"
"(let-values()"
"(consume-char"
" in_24"
" c_78)))"
"(accum-string-add!"
" accum-str_1"
" c_78)"
"(loop_108"
" #f"
" pipe-quote-c_0"
" foldcase-from_0))))))))))))))"
" loop_108)"
" init-c_2"
" #f"
" 0)"
"(values))))"
"(let-values(((str_29)"
"(let-values(((accum-str18_0) accum-str_1)"
"((config19_0) config_24))"
"(accum-string-get!6.1 #f #f accum-str18_0 config19_0))))"
"(let-values((()"
"(begin"
"(if(if(= 1(string-length str_29))"
"(if(not quoted-ever?_0)"
"(char=?"
" '#\\."
"(effective-char(string-ref str_29 0) config_24))"
" #f)"
" #f)"
"(let-values()"
"(let-values(((in20_1) in_24)"
"((config21_0) config_24)"
"                                                                           ((temp22_5) \"illegal use of `.`\"))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in20_1"
" config21_0"
" temp22_5"
"(list))))"
"(void))"
"(values))))"
"(let-values(((num_0)"
"(if(let-values(((or-part_9)"
"(eq? mode_17 'symbol-or-number)))"
"(if or-part_9 or-part_9(string? mode_17)))"
"(if(not quoted-ever?_0)"
"(1/string->number"
"(if(string? mode_17)"
"(string-append mode_17 str_29)"
" str_29)"
" 10"
" 'read"
"(if(check-parameter 1/read-decimal-as-inexact config_24)"
" 'decimal-as-inexact"
" 'decimal-as-exact))"
" #f)"
" #f)))"
"(begin"
"(if(string? num_0)"
"(let-values()"
"(let-values(((in23_0) in_24)"
"((config24_0) config_24)"
"                                                                 ((temp25_6) \"~a\")"
"((num26_0) num_0))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in23_0"
" config24_0"
" temp25_6"
"(list num26_0))))"
"(void))"
"(if(if(not num_0)(string? mode_17) #f)"
"(let-values()"
"(let-values(((in27_0) in_24)"
"((config28_0) config_24)"
"                                                                 ((temp29_2) \"bad number: `~a`\")"
"((temp30_4)(string-append mode_17 str_29)))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in27_0"
" config28_0"
" temp29_2"
"(list temp30_4))))"
"(void))"
"(wrap"
"(let-values(((or-part_33) num_0))"
"(if or-part_33"
" or-part_33"
"(let-values(((or-part_297)"
"(if(eq? mode_17 'keyword)"
"(string->keyword str_29)"
" #f)))"
"(if or-part_297 or-part_297(string->symbol str_29)))))"
" in_24"
" config_24"
" str_29)))))))))))))))))))))))))"
"(define-values"
"(read-fixnum)"
"(lambda(read-one_3 init-c_0 in_5 config_15)"
"(begin"
"(let-values(((c_33)(read-char/skip-whitespace-and-comments init-c_0 read-one_3 in_5 config_15)))"
"(let-values(((line_8 col_7 pos_112)(port-next-location* in_5 c_33)))"
"          (let-values (((v_93) (read-number-literal c_33 in_5 config_15 \"#e\")))"
"(if(fixnum? v_93)"
"(let-values() v_93)"
"(if(eof-object? v_93)"
"(let-values() v_93)"
"(let-values()"
"(let-values(((in1_0) in_5)"
"((temp2_5)(reading-at config_15 line_8 col_7 pos_112))"
"                               ((temp3_6) \"expected a fixnum, found ~a\")"
"((v4_1) v_93))"
"(reader-error10.1 #f #f #f #f #f #f in1_0 temp2_5 temp3_6(list v4_1))))))))))))"
"(define-values"
"(read-flonum)"
"(lambda(read-one_4 init-c_7 in_25 config_37)"
"(begin"
"(let-values(((c_14)(read-char/skip-whitespace-and-comments init-c_7 read-one_4 in_25 config_37)))"
"(let-values(((line_9 col_8 pos_92)(port-next-location* in_25 c_14)))"
"          (let-values (((v_29) (read-number-literal c_14 in_25 config_37 \"#i\")))"
"(if(flonum? v_29)"
"(let-values() v_29)"
"(if(eof-object? v_29)"
"(let-values() v_29)"
"(let-values()"
"(let-values(((in5_0) in_25)"
"((temp6_2)(reading-at config_37 line_9 col_8 pos_92))"
"                               ((temp7_3) \"expected a flonum, found ~a\")"
"((v8_0) v_29))"
"(reader-error10.1 #f #f #f #f #f #f in5_0 temp6_2 temp7_3(list v8_0))))))))))))"
"(define-values"
"(read-number-literal)"
"(lambda(c_80 in_26 config_38 mode_18)"
"(begin"
"(if(not(char? c_80))"
"(let-values() c_80)"
"(let-values()"
"(let-values(((mode12_0) mode_18))(read-symbol-or-number8.1 #f #f mode12_0 #t c_80 in_26 config_38)))))))"
"(define-values"
"(read-vector11.1)"
"(lambda(length2_0 length4_0 mode1_0 mode3_0 read-one5_0 opener-c6_0 opener7_0 closer8_0 in9_1 config10_0)"
"(begin"
" 'read-vector11"
"(let-values(((read-one_5) read-one5_0))"
"(let-values(((opener-c_1) opener-c6_0))"
"(let-values(((opener_2) opener7_0))"
"(let-values(((closer_2) closer8_0))"
"(let-values(((in_27) in9_1))"
"(let-values(((config_39) config10_0))"
"(let-values(((vector-mode_0)(if mode3_0 mode1_0 'any)))"
"(let-values(((expected-len_0)(if length4_0 length2_0 #f)))"
"(let-values()"
"(let-values(((read-one-element_0)"
"(let-values(((tmp_31) vector-mode_0))"
"(if(equal? tmp_31 'any)"
"(let-values() read-one_5)"
"(if(equal? tmp_31 'fixnum)"
"(let-values()"
"(lambda(init-c_8 in_28 config_40)"
"(begin"
" 'read-one-element"
"(read-fixnum read-one_5 init-c_8 in_28 config_40))))"
"(if(equal? tmp_31 'flonum)"
"(let-values()"
"(lambda(init-c_9 in_29 config_41)"
"(begin"
" 'read-one-element"
"(read-flonum read-one_5 init-c_9 in_29 config_41))))"
"(let-values()(void))))))))"
"(let-values(((seq_2)"
"(let-values(((read-one20_0) read-one_5)((temp21_1) #f))"
"(read-unwrapped-sequence17.1"
" temp21_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" read-one20_0"
" #t"
" read-one-element_0"
" opener-c_1"
" opener_2"
" closer_2"
" in_27"
" config_39))))"
"(let-values(((vec_64)"
"(if(not expected-len_0)"
"(let-values()"
"(let-values(((tmp_42) vector-mode_0))"
"(if(equal? tmp_42 'any)"
"(let-values()(list->vector seq_2))"
"(if(equal? tmp_42 'fixnum)"
"(let-values()"
"(let-values(((len_37)(length seq_2)))"
"(begin"
"(if(exact-nonnegative-integer? len_37)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/fxvector"
"                                                               \"exact-nonnegative-integer?\""
" len_37)))"
"(let-values(((fill_0) 0))"
"(let-values(((v_83)(make-fxvector len_37 fill_0)))"
"(begin"
"(if(zero? len_37)"
"(void)"
"(let-values()"
"(let-values(((lst_263) seq_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_263)))"
"((letrec-values(((for-loop_97)"
"(lambda(i_1 lst_302)"
"(begin"
" 'for-loop"
"(if(pair? lst_302)"
"(let-values(((e_75)"
"(unsafe-car"
" lst_302))"
"((rest_170)"
"(unsafe-cdr"
" lst_302)))"
"(let-values(((i_175)"
"(let-values(((i_3)"
" i_1))"
"(let-values(((i_36)"
"(let-values()"
"(begin"
"(let-values(((elem_0)"
"(let-values()"
" e_75)))"
"(if(fixnum?"
" elem_0)"
"(unsafe-fxvector-set!"
" v_83"
" i_3"
" elem_0)"
"(not-an-fX.1"
" 'for*/vector"
" elem_0)))"
"(unsafe-fx+"
" 1"
" i_3)))))"
"(values"
" i_36)))))"
"(if(if(not"
"((lambda x_86"
"(unsafe-fx="
" i_175"
" len_37))"
" e_75))"
"(not #f)"
" #f)"
"(for-loop_97"
" i_175"
" rest_170)"
" i_175)))"
" i_1)))))"
" for-loop_97)"
" 0"
" lst_263)))))"
" v_83))))))"
"(if(equal? tmp_42 'flonum)"
"(let-values()"
"(let-values(((len_38)(length seq_2)))"
"(begin"
"(if(exact-nonnegative-integer? len_38)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/flvector"
"                                                                 \"exact-nonnegative-integer?\""
" len_38)))"
"(let-values(((fill_1) 0.0))"
"(let-values(((v_233)(make-flvector len_38 fill_1)))"
"(begin"
"(if(zero? len_38)"
"(void)"
"(let-values()"
"(let-values(((lst_78) seq_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_78)))"
"((letrec-values(((for-loop_263)"
"(lambda(i_56 lst_54)"
"(begin"
" 'for-loop"
"(if(pair? lst_54)"
"(let-values(((e_76)"
"(unsafe-car"
" lst_54))"
"((rest_171)"
"(unsafe-cdr"
" lst_54)))"
"(let-values(((i_176)"
"(let-values(((i_177)"
" i_56))"
"(let-values(((i_89)"
"(let-values()"
"(begin"
"(let-values(((elem_1)"
"(let-values()"
" e_76)))"
"(if(flonum?"
" elem_1)"
"(unsafe-flvector-set!"
" v_233"
" i_177"
" elem_1)"
"(not-an-fX.1$1"
" 'for*/vector"
" elem_1)))"
"(unsafe-fx+"
" 1"
" i_177)))))"
"(values"
" i_89)))))"
"(if(if(not"
"((lambda x_24"
"(unsafe-fx="
" i_176"
" len_38))"
" e_76))"
"(not #f)"
" #f)"
"(for-loop_263"
" i_176"
" rest_171)"
" i_176)))"
" i_56)))))"
" for-loop_263)"
" 0"
" lst_78)))))"
" v_233))))))"
"(let-values()(void)))))))"
"(let-values()"
"(let-values(((len_39)(length seq_2)))"
"(if(= expected-len_0 len_39)"
"(let-values()(list->vector seq_2))"
"(if(< expected-len_0 len_39)"
"(let-values()"
"(let-values(((in22_0) in_27)"
"((config23_0) config_39)"
"((temp24_7)"
"                                                                    \"~avector length ~a is too small, ~a values provided\")"
"((temp25_7)"
"(let-values(((tmp_43) vector-mode_0))"
"(if(equal? tmp_43 'any)"
"                                                                        (let-values () \"\")"
"(if(equal? tmp_43 'fixnum)"
"                                                                          (let-values () \"fx\")"
"(if(equal? tmp_43 'flonum)"
"                                                                            (let-values () \"fl\")"
"(let-values()(void)))))))"
"((expected-len26_0) expected-len_0)"
"((len27_0) len_39))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in22_0"
" config23_0"
" temp24_7"
"(list temp25_7 expected-len26_0 len27_0))))"
"(let-values()"
"(let-values(((last-or_0)"
"(lambda(v_234)"
"(begin"
" 'last-or"
"(if(null? seq_2)"
"(wrap v_234 in_27 config_39 #f)"
"((letrec-values(((loop_109)"
"(lambda(seq_3)"
"(begin"
" 'loop"
"(if(null?(cdr seq_3))"
"(car seq_3)"
"(loop_109"
"(cdr seq_3)))))))"
" loop_109)"
" seq_2))))))"
"(let-values((()"
"(begin"
"(if(>=(integer-length expected-len_0) 48)"
"(let-values()"
"(raise"
"(exn:fail:out-of-memory"
"                                                                              \"out of memory\""
"(current-continuation-marks))))"
"(void))"
"(values))))"
"(let-values(((vec_65)"
"(let-values(((tmp_44) vector-mode_0))"
"(if(equal? tmp_44 'any)"
"(let-values()"
"(make-vector"
" expected-len_0"
"(last-or_0 0)))"
"(if(equal? tmp_44 'fixnum)"
"(let-values()"
"(make-fxvector"
" expected-len_0"
"(last-or_0 0)))"
"(if(equal? tmp_44 'flonum)"
"(let-values()"
"(make-flvector"
" expected-len_0"
"(last-or_0 0.0)))"
"(let-values()(void))))))))"
"(begin"
"(let-values(((tmp_45) vector-mode_0))"
"(if(equal? tmp_45 'any)"
"(let-values()"
"(begin"
"(let-values(((lst_8) seq_2)((start_17) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_8)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_17)))"
"((letrec-values(((for-loop_16)"
"(lambda(lst_303 pos_113)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_303)"
" #t"
" #f)"
"(let-values(((e_77)"
"(unsafe-car"
" lst_303))"
"((rest_172)"
"(unsafe-cdr"
" lst_303))"
"((i_92)"
" pos_113))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" vec_65"
" i_92"
" e_77))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_16"
" rest_172"
"(+ pos_113 1))"
"(values))))"
"(values))))))"
" for-loop_16)"
" lst_8"
" start_17)))"
"(void)))"
"(if(equal? tmp_45 'fixnum)"
"(let-values()"
"(begin"
"(let-values(((lst_220) seq_2)((start_56) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_220)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_56)))"
"((letrec-values(((for-loop_17)"
"(lambda(lst_158 pos_114)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_158)"
" #t"
" #f)"
"(let-values(((e_40)"
"(unsafe-car"
" lst_158))"
"((rest_7)"
"(unsafe-cdr"
" lst_158))"
"((i_178)"
" pos_114))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(fxvector-set!"
" vec_65"
" i_178"
" e_40))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_17"
" rest_7"
"(+"
" pos_114"
" 1))"
"(values))))"
"(values))))))"
" for-loop_17)"
" lst_220"
" start_56)))"
"(void)))"
"(if(equal? tmp_45 'flonum)"
"(let-values()"
"(begin"
"(let-values(((lst_282) seq_2)((start_57) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_282)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-naturals start_57)))"
"((letrec-values(((for-loop_264)"
"(lambda(lst_304"
" pos_115)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_304)"
" #t"
" #f)"
"(let-values(((e_78)"
"(unsafe-car"
" lst_304))"
"((rest_92)"
"(unsafe-cdr"
" lst_304))"
"((i_95)"
" pos_115))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(flvector-set!"
" vec_65"
" i_95"
" e_78))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_264"
" rest_92"
"(+"
" pos_115"
" 1))"
"(values))))"
"(values))))))"
" for-loop_264)"
" lst_282"
" start_57)))"
"(void)))"
"(let-values()(void))))))"
" vec_65))))))))))))"
"(wrap vec_64 in_27 config_39 opener_2))))))))))))))))"
"(define-values"
"(read-fixnum-or-flonum-vector)"
"(lambda(read-one_6 dispatch-c_0 c_81 c2_4 in_30 config_42)"
"(begin"
"(let-values(((vector-mode_1)(if(char=? c2_4 '#\\x) 'fixnum 'flonum)))"
"(let-values((()(begin(consume-char in_30 c2_4)(values))))"
"(let-values((()"
"(begin"
"(if(read-config-for-syntax? config_42)"
"(let-values()"
"(let-values(((in28_0) in_30)"
"((config29_0) config_42)"
"                                           ((temp30_5) \"literal f~avectors not allowed\")"
"((c231_0) c2_4))"
"(reader-error10.1 #f #f #f #f #f #f in28_0 config29_0 temp30_5(list c231_0))))"
"(void))"
"(values))))"
"(let-values(((c3_2)"
"(let-values(((in_31) in_30)((source_19)(read-config-source config_42)))"
"(read-char-or-special in_31 special1.1 source_19))))"
"(let-values(((vector-len_0 len-str_0 c4_1)"
"(if(decimal-digit? c3_2)"
"(let-values()(read-simple-number in_30 config_42 c3_2))"
"                              (let-values () (values #f \"\" c3_2)))))"
"(let-values(((tmp_46) c4_1))"
"(if(equal? tmp_46 '#\\()"
"(let-values()"
"(let-values(((temp33_3) '#\\()"
"((temp34_1) '#\\()"
"((temp35_2) '#\\))"
"((in36_0) in_30)"
"((config37_0) config_42)"
"((vector-mode38_0) vector-mode_1)"
"((vector-len39_0) vector-len_0))"
"(read-vector11.1"
" vector-len39_0"
" #t"
" vector-mode38_0"
" #t"
" read-one_6"
" temp33_3"
" temp34_1"
" temp35_2"
" in36_0"
" config37_0)))"
"(if(equal? tmp_46 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_42)"
"(let-values()"
"(let-values(((temp41_3) '#\\[)"
"((temp42_2) '#\\[)"
"((temp43_2) '#\\])"
"((in44_0) in_30)"
"((config45_0) config_42)"
"((vector-mode46_0) vector-mode_1)"
"((vector-len47_0) vector-len_0))"
"(read-vector11.1"
" vector-len47_0"
" #t"
" vector-mode46_0"
" #t"
" read-one_6"
" temp41_3"
" temp42_2"
" temp43_2"
" in44_0"
" config45_0)))"
"(let-values()"
"(let-values(((in48_0) in_30)"
"((config49_0) config_42)"
"                                         ((temp50_2) (format \"~a~a\" dispatch-c_0 (format \"~a~a\" c_81 c2_4))))"
"(bad-syntax-error18.1 #f #f in48_0 config49_0 temp50_2)))))"
"(if(equal? tmp_46 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_42)"
"(let-values()"
"(let-values(((temp52_3) '#\\{)"
"((temp53_3) '#\\{)"
"((temp54_3) '#\\})"
"((in55_0) in_30)"
"((config56_0) config_42)"
"((vector-mode57_0) vector-mode_1)"
"((vector-len58_0) vector-len_0))"
"(read-vector11.1"
" vector-len58_0"
" #t"
" vector-mode57_0"
" #t"
" read-one_6"
" temp52_3"
" temp53_3"
" temp54_3"
" in55_0"
" config56_0)))"
"(let-values()"
"(let-values(((in59_0) in_30)"
"((config60_0) config_42)"
"                                           ((temp61_2) (format \"~a~a\" dispatch-c_0 (format \"~a~a\" c_81 c2_4))))"
"(bad-syntax-error18.1 #f #f in59_0 config60_0 temp61_2)))))"
"(let-values()"
"(let-values(((c464_0) c4_1)"
"                                       ((temp65_2) \"expected `(`, `[`, or `{` after `#~a~a~a`\")"
"((c66_0) c_81)"
"((c267_0) c2_4)"
"((len-str68_0) len-str_0))"
"(reader-error10.1"
" #f"
" #f"
" c464_0"
" #t"
" #f"
" #f"
" in_30"
" config_42"
" temp65_2"
"(list c66_0 c267_0 len-str68_0))))))))))))))))"
"(define-values"
"(read-simple-number)"
"(lambda(in_32 config_43 init-c_10)"
"(begin"
"(let-values(((accum-str_2)(accum-string-init! config_43)))"
"(let-values((()(begin(accum-string-add! accum-str_2 init-c_10)(values))))"
"(let-values(((init-v_1)(digit->number init-c_10)))"
"(let-values(((v_235)"
"(let-values(((temp72_0) 10)"
"((temp73_1) +inf.0)"
"((init-v74_0) init-v_1)"
"((init-v75_0) init-v_1))"
"(read-digits13.1"
" temp72_0"
" init-v74_0"
" #t"
" temp73_1"
" init-v75_0"
" #t"
" in_32"
" config_43"
" accum-str_2"
" #t))))"
"(values"
" v_235"
"(let-values(((accum-str76_0) accum-str_2)((config77_0) config_43))"
"(accum-string-get!6.1 #f #f accum-str76_0 config77_0))"
"(let-values(((in_33) in_32)((source_20)(read-config-source config_43)))"
"(read-char-or-special in_33 special1.1 source_20))))))))))"
"(define-values"
"(read-struct)"
"(lambda(read-one_3 dispatch-c_1 in_5 config_15)"
"(begin"
"(let-values(((c_33)"
"(let-values(((in_28) in_5)((source_21)(read-config-source config_15)))"
"(read-char-or-special in_28 special1.1 source_21))))"
"(let-values(((ec_5)(effective-char c_33 config_15)))"
"(let-values(((seq_4)"
"(let-values(((tmp_47) ec_5))"
"(if(equal? tmp_47 '#\\()"
"(let-values()(read-struct-sequence read-one_3 c_33 '#\\( '#\\) in_5 config_15))"
"(if(equal? tmp_47 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_15)"
"(let-values()(read-struct-sequence read-one_3 c_33 '#\\[ '#\\] in_5 config_15))"
"(let-values()"
"(let-values(((in1_1) in_5)"
"((config2_0) config_15)"
"                                                 ((temp3_7) (format \"~as~a\" dispatch-c_1 c_33)))"
"(bad-syntax-error18.1 #f #f in1_1 config2_0 temp3_7)))))"
"(if(equal? tmp_47 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_15)"
"(let-values()(read-struct-sequence read-one_3 c_33 '#\\{ '#\\} in_5 config_15))"
"(let-values()"
"(let-values(((in4_1) in_5)"
"((config5_1) config_15)"
"                                                   ((temp6_3) (format \"~as~a\" dispatch-c_1 c_33)))"
"(bad-syntax-error18.1 #f #f in4_1 config5_1 temp6_3)))))"
"(let-values()"
"(let-values(((in7_1) in_5)"
"((config8_1) config_15)"
"                                               ((temp9_3) \"expected ~a after `~as`\")"
"((temp10_0)(all-openers-str config_15))"
"((dispatch-c11_0) dispatch-c_1))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in7_1"
" config8_1"
" temp9_3"
"(list temp10_0 dispatch-c11_0))))))))))"
"(let-values((()"
"(begin"
"(if(null? seq_4)"
"(let-values()"
"(let-values(((in12_2) in_5)"
"((config13_0) config_15)"
"                                             ((temp14_1) \"missing structure description in `~as' form\")"
"((dispatch-c15_0) dispatch-c_1))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in12_2"
" config13_0"
" temp14_1"
"(list dispatch-c15_0))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(prefab-key?(car seq_4))"
"(void)"
"(let-values()"
"(let-values(((in16_0) in_5)"
"((config17_0) config_15)"
"                                               ((temp18_4) \"invalid structure description in `~as' form\")"
"((dispatch-c19_0) dispatch-c_1))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in16_0"
" config17_0"
" temp18_4"
"(list dispatch-c19_0)))))"
"(values))))"
"(let-values(((st_2)"
"(let-values(((with-handlers-predicate20_0) exn:fail?)"
"((with-handlers-handler21_0)"
"(lambda(exn_3)(begin 'with-handlers-handler21 #f))))"
"(let-values(((bpz_4)(continuation-mark-set-first #f break-enabled-key)))"
"(call-handled-body"
" bpz_4"
"(lambda(e_79)"
"(select-handler/no-breaks"
" e_79"
" bpz_4"
"(list(cons with-handlers-predicate20_0 with-handlers-handler21_0))))"
"(lambda()(prefab-key->struct-type(car seq_4)(length(cdr seq_4)))))))))"
"(begin"
"(if st_2"
"(void)"
"(let-values()"
"(let-values(((in22_1) in_5)"
"((config23_1) config_15)"
"((temp24_8)"
"(string-append"
"                                       \"mismatch between structure description\""
"                                       \" and number of provided field values in `~as' form\"))"
"((dispatch-c25_0) dispatch-c_1))"
"(reader-error10.1 #f #f #f #f #f #f in22_1 config23_1 temp24_8(list dispatch-c25_0)))))"
"(if(read-config-for-syntax? config_15)"
"(let-values()"
"(if(all-fields-immutable?(car seq_4))"
"(void)"
"(let-values()"
"(let-values(((in26_0) in_5)"
"((config27_0) config_15)"
"                                         ((temp28_3) \"cannot read mutable `~as' form as syntax\")"
"((dispatch-c29_0) dispatch-c_1))"
"(reader-error10.1 #f #f #f #f #f #f in26_0 config27_0 temp28_3(list dispatch-c29_0))))))"
"(void))"
"(wrap(apply make-prefab-struct seq_4) in_5 config_15 ec_5)))))))))))"
"(define-values"
"(read-struct-sequence)"
"(lambda(read-one_7 opener-c_2 opener_3 closer_3 in_16 config_20)"
"(begin"
"(let-values(((temp36_4)"
"(lambda(init-c_11 in_34 config_44)(read-one_7 init-c_11 in_34(disable-wrapping config_44)))))"
"(read-unwrapped-sequence17.1"
" #f"
" #f"
" #f"
" #f"
" temp36_4"
" #t"
" #f"
" #f"
" #f"
" #f"
" read-one_7"
" opener-c_2"
" opener_3"
" closer_3"
" in_16"
" config_20)))))"
"(define-values"
"(read-vector-or-graph)"
"(lambda(read-one_3 dispatch-c_1 init-c_12 in_35 config_45)"
"(begin"
"(let-values(((accum-str_3)(accum-string-init! config_45)))"
"(let-values((()(begin(accum-string-add! accum-str_3 init-c_12)(values))))"
"(let-values(((init-v_2)(digit->number init-c_12)))"
"(let-values(((v_28)"
"(let-values(((temp4_4) 10)((temp5_7) +inf.0)((init-v6_0) init-v_2)((init-v7_0) init-v_2))"
"(read-digits13.1"
" temp4_4"
" init-v6_0"
" #t"
" temp5_7"
" init-v7_0"
" #t"
" in_35"
" config_45"
" accum-str_3"
" #t))))"
"(let-values(((post-line_0 post-col_0 post-pos_0)(port-next-location in_35)))"
"(let-values(((get-accum_0)"
"(lambda(c_67)"
"(begin"
" 'get-accum"
"(format"
"                                   \"~a~a~a\""
" dispatch-c_1"
"(let-values(((accum-str8_0) accum-str_3)((config9_0) config_45))"
"(accum-string-get!6.1 #f #f accum-str8_0 config9_0))"
" c_67)))))"
"(let-values(((c_82)"
"(let-values(((in_36) in_35)((source_9)(read-config-source config_45)))"
"(read-char-or-special in_36 special1.1 source_9))))"
"(let-values(((ec_6)(effective-char c_82 config_45)))"
"(let-values(((tmp_48) ec_6))"
"(if(equal? tmp_48 '#\\()"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_3 config_45)"
"(let-values(((temp12_4) '#\\()"
"((temp13_2) '#\\))"
"((in14_0) in_35)"
"((config15_0) config_45)"
"((v16_0) v_28))"
"(read-vector11.1 v16_0 #t #f #f read-one_3 c_82 temp12_4 temp13_2 in14_0 config15_0))))"
"(if(equal? tmp_48 '#\\[)"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_3 config_45)"
"(if(check-parameter 1/read-square-bracket-as-paren config_45)"
"(let-values()"
"(let-values(((temp19_1) '#\\[)"
"((temp20_2) '#\\])"
"((in21_1) in_35)"
"((config22_0) config_45)"
"((v23_0) v_28))"
"(read-vector11.1"
" v23_0"
" #t"
" #f"
" #f"
" read-one_3"
" c_82"
" temp19_1"
" temp20_2"
" in21_1"
" config22_0)))"
"(let-values()"
"(let-values(((in24_0) in_35)"
"((config25_0) config_45)"
"((temp26_5)(get-accum_0(get-accum_0 c_82))))"
"(bad-syntax-error18.1 #f #f in24_0 config25_0 temp26_5))))))"
"(if(equal? tmp_48 '#\\{)"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_3 config_45)"
"(if(check-parameter 1/read-curly-brace-as-paren config_45)"
"(let-values()"
"(let-values(((temp29_3) '#\\{)"
"((temp30_6) '#\\})"
"((in31_1) in_35)"
"((config32_0) config_45)"
"((v33_0) v_28))"
"(read-vector11.1"
" v33_0"
" #t"
" #f"
" #f"
" read-one_3"
" c_82"
" temp29_3"
" temp30_6"
" in31_1"
" config32_0)))"
"(let-values()"
"(let-values(((in34_0) in_35)"
"((config35_0) config_45)"
"((temp36_5)(get-accum_0(get-accum_0 c_82))))"
"(bad-syntax-error18.1 #f #f in34_0 config35_0 temp36_5))))))"
"(let-values()"
"(let-values(((tmp_6) c_82))"
"(if(if(equal? tmp_6 '#\\=) #t(equal? tmp_6 '#\\#))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_347)(read-config-for-syntax? config_45)))"
"(if or-part_347"
" or-part_347"
"(not(check-parameter 1/read-accept-graph config_45))))"
"(let-values()"
"(let-values(((in37_0) in_35)"
"((config38_0) config_45)"
"                                                         ((temp39_6) \"`#...~a` forms not ~a\")"
"((c40_0) c_82)"
"((temp41_4)"
"(if(read-config-for-syntax? config_45)"
"                                                            \"enabled\""
"                                                            \"allowed in `read-syntax` mode\")))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in37_0"
" config38_0"
" temp39_6"
"(list c40_0 temp41_4))))"
"(void))"
"(if(<=(accum-string-count accum-str_3) 8)"
"(void)"
"(let-values()"
"(let-values(((in42_0) in_35)"
"((config43_0) config_45)"
"                                                         ((temp44_2) \"graph ID too long in `~a~a~a`\")"
"((dispatch-c45_0) dispatch-c_1)"
"((temp46_3)"
"(let-values(((accum-str48_0) accum-str_3)"
"((config49_1) config_45))"
"(accum-string-get!6.1 #f #f accum-str48_0 config49_1)))"
"((c47_0) c_82))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in42_0"
" config43_0"
" temp44_2"
"(list dispatch-c45_0 temp46_3 c47_0)))))"
"(let-values(((tmp_49) c_82))"
"(if(equal? tmp_49 '#\\=)"
"(let-values()"
"(let-values(((ph_1)(make-placeholder 'placeholder)))"
"(let-values(((ht_154)(get-graph-hash config_45)))"
"(let-values((()"
"(begin"
"(if(hash-ref ht_154 v_28 #f)"
"(let-values()"
"(let-values(((in50_0) in_35)"
"((config51_0) config_45)"
"                                                                                   ((temp52_4) \"multiple `~a~a~a` tags\")"
"((dispatch-c53_0) dispatch-c_1)"
"((temp54_4)"
"(let-values(((accum-str56_0)"
" accum-str_3)"
"((config57_0)"
" config_45))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str56_0"
" config57_0)))"
"((c55_0) c_82))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in50_0"
" config51_0"
" temp52_4"
"(list dispatch-c53_0 temp54_4 c55_0))))"
"(void))"
"(values))))"
"(let-values((()(begin(hash-set! ht_154 v_28 ph_1)(values))))"
"(let-values(((result-v_0)"
"(read-one_3 #f in_35(next-readtable config_45))))"
"(begin"
"(if(eof-object? result-v_0)"
"(let-values()"
"(let-values(((result-v60_0) result-v_0)"
"((temp61_3)"
"                                                                            \"expected an element for graph after `~a~a~a`, found end-of-file\")"
"((dispatch-c62_0) dispatch-c_1)"
"((temp63_2)"
"(let-values(((accum-str65_0) accum-str_3)"
"((config66_0) config_45))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str65_0"
" config66_0)))"
"((c64_0) c_82))"
"(reader-error10.1"
" #f"
" #f"
" result-v60_0"
" #t"
" #f"
" #f"
" in_35"
" config_45"
" temp61_3"
"(list dispatch-c62_0 temp63_2 c64_0))))"
"(void))"
"(accum-string-abandon! accum-str_3 config_45)"
"(placeholder-set! ph_1 result-v_0)"
" ph_1)))))))"
"(if(equal? tmp_49 '#\\#)"
"(let-values()"
"(begin0"
"(hash-ref"
"(let-values(((or-part_227)"
"(read-config-state-graph(read-config-st config_45))))"
"(if or-part_227 or-part_227 '#hash()))"
" v_28"
"(lambda()"
"(let-values(((in67_0) in_35)"
"((config68_0) config_45)"
"                                                                  ((temp69_1) \"no preceding `~a~a=` for `~a~a~a`\")"
"((dispatch-c70_0) dispatch-c_1)"
"((v71_0) v_28)"
"((dispatch-c72_0) dispatch-c_1)"
"((temp73_2)"
"(let-values(((accum-str75_0) accum-str_3)"
"((config76_0) config_45))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str75_0"
" config76_0)))"
"((c74_0) c_82))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in67_0"
" config68_0"
" temp69_1"
"(list dispatch-c70_0 v71_0 dispatch-c72_0 temp73_2 c74_0)))))"
"(accum-string-abandon! accum-str_3 config_45)))"
"(let-values()(void)))))))"
"(let-values()"
"(let-values(((c79_0) c_82)"
"                                                   ((temp80_3) \"bad syntax `~a`\")"
"((temp81_2)(get-accum_0 c_82)))"
"(reader-error10.1"
" #f"
" #f"
" c79_0"
" #t"
" #f"
" #f"
" in_35"
" config_45"
" temp80_3"
"(list temp81_2))))))))))))))))))))))"
"(define-values"
"(get-graph-hash)"
"(lambda(config_46)"
"(begin"
"(let-values(((st_3)(read-config-st config_46)))"
"(let-values(((or-part_263)(read-config-state-graph st_3)))"
"(if or-part_263"
" or-part_263"
"(let-values(((ht_155)(make-hasheqv)))(begin(set-read-config-state-graph! st_3 ht_155) ht_155))))))))"
"(define-values"
"(coerce-key)"
"(lambda(key_85 config_8)"
"(begin"
"(let-values(((for-syntax?_7)(read-config-for-syntax? config_8)))"
"((read-config-coerce-key config_8) for-syntax?_7 key_85)))))"
"(define-values"
"(read-hash)"
"(lambda(read-one_3 dispatch-c_1 init-c_12 in_35 config_45)"
"(begin"
"(let-values(((accum-str_3)(accum-string-init! config_45)))"
"(let-values((()(begin(accum-string-add! accum-str_3 dispatch-c_1)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_3 init-c_12)(values))))"
"(let-values(((get-next!_0)"
"(lambda(expect-c_0 expect-alt-c_0)"
"(begin"
" 'get-next!"
"(let-values(((c_83)"
"(let-values(((in_27) in_35)((source_22)(read-config-source config_45)))"
"(read-char-or-special in_27 special1.1 source_22))))"
"(begin"
"(if(let-values(((or-part_6)(eqv? c_83 expect-c_0)))"
"(if or-part_6 or-part_6(eqv? c_83 expect-alt-c_0)))"
"(void)"
"(let-values()"
"(let-values(((c3_3) c_83)"
"                                                   ((temp4_5) \"expected `~a` after `~a`\")"
"((expect-c5_0) expect-c_0)"
"((temp6_0)"
"(let-values(((accum-str7_0) accum-str_3)((config8_2) config_45))"
"(accum-string-get!6.1 #f #f accum-str7_0 config8_2))))"
"(reader-error10.1"
" #f"
" #f"
" c3_3"
" #t"
" #f"
" #f"
" in_35"
" config_45"
" temp4_5"
"(list expect-c5_0 temp6_0)))))"
"(accum-string-add! accum-str_3 c_83)))))))"
"(let-values((()(begin(get-next!_0 '#\\a '#\\A)(values))))"
"(let-values((()(begin(get-next!_0 '#\\s '#\\S)(values))))"
"(let-values((()(begin(get-next!_0 '#\\h '#\\H)(values))))"
"(let-values(((content_10 opener_4 mode_19)"
"((letrec-values(((loop_110)"
"(lambda(mode_3)"
"(begin"
" 'loop"
"(let-values(((c_80)"
"(let-values(((in_6) in_35)"
"((source_23)"
"(read-config-source config_45)))"
"(read-char-or-special"
" in_6"
" special1.1"
" source_23))))"
"(let-values(((ec_7)(effective-char c_80 config_45)))"
"(let-values(((tmp_50) ec_7))"
"(if(equal? tmp_50 '#\\()"
"(let-values()"
"(let-values(((read-one-key+value_0)"
"(make-read-one-key+value"
" read-one_3"
" c_80"
" '#\\))))"
"(values"
"(let-values(((temp11_3) '#\\()"
"((temp12_5) '#\\))"
"((in13_0) in_35)"
"((config14_0) config_45)"
"((config15_1) config_45)"
"((temp16_6) #f))"
"(read-unwrapped-sequence17.1"
" temp16_6"
" #t"
" config15_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" read-one-key+value_0"
" c_80"
" temp11_3"
" temp12_5"
" in13_0"
" config14_0))"
" ec_7"
" mode_3)))"
"(if(equal? tmp_50 '#\\[)"
"(let-values()"
"(if(check-parameter"
" 1/read-square-bracket-as-paren"
" config_45)"
"(let-values()"
"(let-values(((read-one-key+value_1)"
"(make-read-one-key+value"
" read-one_3"
" c_80"
" '#\\])))"
"(values"
"(let-values(((temp19_2) '#\\[)"
"((temp20_3) '#\\])"
"((in21_2) in_35)"
"((config22_1) config_45)"
"((config23_2) config_45)"
"((temp24_9) #f))"
"(read-unwrapped-sequence17.1"
" temp24_9"
" #t"
" config23_2"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" read-one-key+value_1"
" c_80"
" temp19_2"
" temp20_3"
" in21_2"
" config22_1))"
" ec_7"
" mode_3)))"
"(let-values()"
"(let-values(((in25_0) in_35)"
"((config26_0) config_45)"
"                                                                                     ((temp27_6) \"illegal use of `~a`\")"
"((c28_0) c_80))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in25_0"
" config26_0"
" temp27_6"
"(list c28_0))))))"
"(if(equal? tmp_50 '#\\{)"
"(let-values()"
"(if(check-parameter"
" 1/read-curly-brace-as-paren"
" config_45)"
"(let-values()"
"(let-values(((read-one-key+value_2)"
"(make-read-one-key+value"
" read-one_3"
" c_80"
" '#\\})))"
"(values"
"(let-values(((temp31_6) '#\\{)"
"((temp32_3) '#\\})"
"((in33_0) in_35)"
"((config34_0) config_45)"
"((config35_1) config_45)"
"((temp36_0) #f))"
"(read-unwrapped-sequence17.1"
" temp36_0"
" #t"
" config35_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" read-one-key+value_2"
" c_80"
" temp31_6"
" temp32_3"
" in33_0"
" config34_0))"
" ec_7"
" mode_3)))"
"(let-values()"
"(let-values(((in37_1) in_35)"
"((config38_1) config_45)"
"((temp39_7)"
"                                                                                        \"illegal use of `~a`\")"
"((c40_1) c_80))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in37_1"
" config38_1"
" temp39_7"
"(list c40_1))))))"
"(if(if(equal? tmp_50 '#\\e)"
" #t"
"(equal? tmp_50 '#\\E))"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_3 c_80)"
"(get-next!_0 '#\\q '#\\Q)"
"(loop_110 'eq)))"
"(if(if(equal? tmp_50 '#\\v)"
" #t"
"(equal? tmp_50 '#\\V))"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_3 c_80)"
"(if(eq? mode_3 'eq)"
"(loop_110 'eqv)"
"(let-values(((in41_0) in_35)"
"((config42_0) config_45)"
"((temp43_3)"
"                                                                                            \"bad syntax `~a`\")"
"((temp44_3)"
"(let-values(((accum-str45_0)"
" accum-str_3)"
"((config46_0)"
" config_45))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str45_0"
" config46_0))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in41_0"
" config42_0"
" temp43_3"
"(list temp44_3))))))"
"(let-values()"
"(begin"
"(if(char? c_80)"
"(let-values()"
"(accum-string-add! accum-str_3 c_80))"
"(void))"
"(let-values(((c49_0) c_80)"
"                                                                                         ((temp50_3) \"bad syntax `~a`\")"
"((temp51_2)"
"(let-values(((accum-str52_0)"
" accum-str_3)"
"((config53_0)"
" config_45))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str52_0"
" config53_0))))"
"(reader-error10.1"
" #f"
" #f"
" c49_0"
" #t"
" #f"
" #f"
" in_35"
" config_45"
" temp50_3"
"(list temp51_2)))))))))))))))))"
" loop_110)"
" 'equal)))"
"(let-values(((graph?_0)(if(read-config-state-graph(read-config-st config_45)) #t #f)))"
"(wrap"
"(let-values(((tmp_44) mode_19))"
"(if(equal? tmp_44 'equal)"
"(let-values()"
"(if graph?_0(make-hash-placeholder content_10)(make-immutable-hash content_10)))"
"(if(equal? tmp_44 'eq)"
"(let-values()"
"(if graph?_0(make-hasheq-placeholder content_10)(make-immutable-hasheq content_10)))"
"(if(equal? tmp_44 'eqv)"
"(let-values()"
"(if graph?_0"
"(make-hasheqv-placeholder content_10)"
"(make-immutable-hasheqv content_10)))"
"(let-values()(void))))))"
" in_35"
" config_45"
" opener_4)))))))))))))"
"(define-values"
"(make-read-one-key+value)"
"(lambda(read-one_8 overall-opener-c_0 overall-closer-ec_0)"
"(begin"
"(lambda(init-c_13 in_37 config_47)"
"(let-values(((c_84)(read-char/skip-whitespace-and-comments init-c_13 read-one_8 in_37 config_47)))"
"(let-values(((open-line_0 open-col_0 open-pos_0)(port-next-location* in_37 c_84)))"
"(let-values(((ec_8)(effective-char c_84 config_47)))"
"(let-values(((elem-config_1)(next-readtable config_47)))"
"(let-values(((closer_4)"
"(let-values(((tmp_51) ec_8))"
"(if(equal? tmp_51 '#\\()"
"(let-values() '#\\))"
"(if(equal? tmp_51 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_47) '#\\] #f))"
"(if(equal? tmp_51 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_47) '#\\} #f))"
"(let-values() #f)))))))"
"(if(not closer_4)"
"(let-values()"
"(if(eof-object? c_84)"
"(let-values()"
"(let-values(((temp55_2)(reading-at config_47 open-line_0 open-col_0 open-pos_0))"
"((c56_0) c_84)"
"                                       ((temp57_1) \"expected ~a to close `~a`\")"
"((temp58_3)(closer-name overall-closer-ec_0 config_47))"
"((overall-opener-c59_0) overall-opener-c_0))"
"(reader-error10.1"
" #f"
" #f"
" c56_0"
" #t"
" #f"
" #f"
" in_37"
" temp55_2"
" temp57_1"
"(list temp58_3 overall-opener-c59_0))))"
"(if(char-closer? ec_8 config_47)"
"(let-values()"
"(let-values(((in60_0) in_37)"
"((temp61_4)(reading-at config_47 open-line_0 open-col_0 open-pos_0))"
"                                         ((temp62_1) \"~a\")"
"((temp63_3)(indentation-unexpected-closer-message ec_8 c_84 config_47)))"
"(reader-error10.1 #f #f #f #f #f #f in60_0 temp61_4 temp62_1(list temp63_3))))"
"(let-values()"
"(let-values(((v_89)(read-one_8 c_84 in_37(keep-comment elem-config_1))))"
"(if(1/special-comment? v_89)"
"(let-values()"
"((make-read-one-key+value read-one_8 overall-opener-c_0 overall-closer-ec_0)"
" #f"
" in_37"
" config_47))"
"(let-values()"
"(let-values(((in64_0) in_37)"
"((temp65_3)(reading-at config_47 open-line_0 open-col_0 open-pos_0))"
"                                               ((temp66_3) \"expected ~a to start a hash pair\")"
"((temp67_1)(all-openers-str config_47)))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in64_0"
" temp65_3"
" temp66_3"
"(list temp67_1))))))))))"
"(let-values()"
"(let-values(((k_40)(read-one_8 #f in_37(disable-wrapping elem-config_1))))"
"(let-values(((dot-c_0)(read-char/skip-whitespace-and-comments #f read-one_8 in_37 config_47)))"
"(let-values(((dot-line_1 dot-col_1 dot-pos_4)(port-next-location* in_37 dot-c_0)))"
"(let-values(((dot-ec_0)(effective-char dot-c_0 config_47)))"
"(let-values((()"
"(begin"
"(if(if(eqv? dot-ec_0 '#\\.)"
"(char-delimiter?"
"(let-values(((in_38) in_37)"
"((skip-count_8) 0)"
"((source_24)(read-config-source config_47)))"
"(peek-char-or-special in_38 skip-count_8 special1.1 source_24))"
" config_47)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((temp69_2)"
"(reading-at config_47 dot-line_1 dot-col_1 dot-pos_4))"
"((dot-c70_0) dot-c_0)"
"                                                               ((temp71_1) \"expected ~a and value for hash\")"
"((temp72_1)(dot-name config_47)))"
"(reader-error10.1"
" #f"
" #f"
" dot-c70_0"
" #t"
" #f"
" #f"
" in_37"
" temp69_2"
" temp71_1"
"(list temp72_1)))))"
"(values))))"
"(let-values(((v_236)(read-one_8 #f in_37 elem-config_1)))"
"(let-values(((closer-c_0)"
"(read-char/skip-whitespace-and-comments #f read-one_8 in_37 config_47)))"
"(let-values(((closer-line_0 closer-col_0 closer-pos_0)"
"(port-next-location* in_37 closer-c_0)))"
"(let-values(((closer-ec_0)(effective-char closer-c_0 config_47)))"
"(begin"
"(if(eqv? closer-ec_0 closer_4)"
"(void)"
"(let-values()"
"(let-values(((temp74_0)"
"(reading-at"
" config_47"
" closer-line_0"
" closer-col_0"
" closer-pos_0))"
"((closer-c75_0) closer-c_0)"
"                                                           ((temp76_0) \"expected ~a after value within a hash\")"
"((temp77_1)(closer-name closer_4 config_47)))"
"(reader-error10.1"
" #f"
" #f"
" closer-c75_0"
" #t"
" #f"
" #f"
" in_37"
" temp74_0"
" temp76_0"
"(list temp77_1)))))"
"(cons(coerce-key k_40 elem-config_1) v_236))))))))))))))))))))))"
"(define-values"
"(read-string5.1)"
"(lambda(mode1_1 mode2_0 in3_0 config4_0)"
"(begin"
" 'read-string5"
"(let-values(((in_39) in3_0))"
"(let-values(((config_22) config4_0))"
"(let-values(((mode_0)(if mode2_0 mode1_1 'string)))"
"(let-values()"
"(let-values(((source_25)(read-config-source config_22)))"
"(let-values(((accum-str_4)(accum-string-init! config_22)))"
"(let-values(((bad-end_0)"
"(lambda(c_85)"
"(begin"
" 'bad-end"
"(if(eof-object? c_85)"
"(let-values()"
"                                        (let-values (((c10_1) c_85) ((temp11_4) \"expected a closing `\\\"`\"))"
"(reader-error10.1 #f #f c10_1 #t #f #f in_39 config_22 temp11_4(list))))"
"(let-values()"
"(let-values(((c14_0) c_85)"
"                                                     ((temp15_6) \"found non-character while reading a ~a\")"
"((mode16_0) mode_0))"
"(reader-error10.1"
" #f"
" #f"
" c14_0"
" #t"
" #f"
" #f"
" in_39"
" config_22"
" temp15_6"
"(list mode16_0)))))))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_111)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_86)"
"(let-values(((in_40) in_39)"
"((source_26) source_25))"
"(read-char-or-special"
" in_40"
" special1.1"
" source_26))))"
"(if(not(char? c_86))"
"(let-values()(bad-end_0 c_86))"
"(if(char=? '#\\\\ c_86)"
"(let-values()"
"(let-values(((escaping-c_0) c_86))"
"(let-values(((escaped-c_0)"
"(let-values(((in_41) in_39)"
"((source_6) source_25))"
"(read-char-or-special"
" in_41"
" special1.1"
" source_6))))"
"(let-values((()"
"(begin"
"(if(not(char? escaped-c_0))"
"(let-values()"
"(bad-end_0 escaped-c_0))"
"(void))"
"(values))))"
"(let-values(((unknown-error_0)"
"(lambda()"
"(begin"
" 'unknown-error"
"(let-values(((in17_0) in_39)"
"((config18_0)"
" config_22)"
"((temp19_3)"
"                                                                                                        \"unknown escape sequence `~a~a` in ~a\")"
"((escaping-c20_0)"
" escaping-c_0)"
"((escaped-c21_0)"
" escaped-c_0)"
"((mode22_0)"
" mode_0))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in17_0"
" config18_0"
" temp19_3"
"(list"
" escaping-c20_0"
" escaped-c21_0"
" mode22_0)))))))"
"(begin"
"(let-values(((tmp_52) escaped-c_0))"
"(let-values(((index_3)"
"(if(char? tmp_52)"
"(let-values(((codepoint_1)"
"(char->integer"
" tmp_52)))"
"(if(if(unsafe-fx>="
" codepoint_1"
" 10)"
"(unsafe-fx<"
" codepoint_1"
" 121)"
" #f)"
"(let-values(((tbl_1)"
" '#(10"
" 0"
" 0"
" 11"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 15"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 2"
" 3"
" 0"
" 0"
" 9"
" 7"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 5"
" 0"
" 0"
" 0"
" 8"
" 0"
" 4"
" 14"
" 6"
" 0"
" 13)))"
"(unsafe-vector*-ref"
" tbl_1"
"(unsafe-fx-"
" codepoint_1"
" 10)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_3 7)"
"(if(unsafe-fx< index_3 3)"
"(if(unsafe-fx< index_3 1)"
"(let-values()(unknown-error_0))"
"(if(unsafe-fx< index_3 2)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" escaped-c_0))"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\u0007))))"
"(if(unsafe-fx< index_3 4)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\backspace))"
"(if(unsafe-fx< index_3 5)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\tab))"
"(if(unsafe-fx< index_3 6)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\newline))"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\vtab))))))"
"(if(unsafe-fx< index_3 11)"
"(if(unsafe-fx< index_3 8)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\page))"
"(if(unsafe-fx< index_3 9)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\return))"
"(if(unsafe-fx< index_3 10)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\u001B))"
"(let-values()(void)))))"
"(if(unsafe-fx< index_3 13)"
"(if(unsafe-fx< index_3 12)"
"(let-values()"
"(let-values(((maybe-newline-c_0)"
"(let-values(((in_36)"
" in_39)"
"((skip-count_9)"
" 0)"
"((source_27)"
" source_25))"
"(peek-char-or-special"
" in_36"
" skip-count_9"
" special1.1"
" source_27))))"
"(begin"
"(if(eqv?"
" maybe-newline-c_0"
" '#\\newline)"
"(let-values()"
"(consume-char"
" in_39"
" maybe-newline-c_0))"
"(void))"
"(void))))"
"(let-values()"
"(let-values(((pos_97)"
"(accum-string-count"
" accum-str_4)))"
"(let-values((()"
"(begin"
"(accum-string-add!"
" accum-str_4"
" escaped-c_0)"
"(values))))"
"(let-values(((init-v_3)"
"(digit->number"
" escaped-c_0)))"
"(let-values(((v_133)"
"(let-values(((temp26_6)"
" 8)"
"((temp27_7)"
" 2)"
"((init-v28_0)"
" init-v_3)"
"((init-v29_0)"
" init-v_3))"
"(read-digits13.1"
" temp26_6"
" init-v28_0"
" #t"
" temp27_7"
" init-v29_0"
" #t"
" in_39"
" config_22"
" accum-str_4"
" #t))))"
"(begin"
"(if(<= v_133 255)"
"(void)"
"(let-values()"
"(let-values(((in30_0)"
" in_39)"
"((config31_0)"
" config_22)"
"((temp32_3)"
"                                                                                                                      \"escape sequence `~a~a` is out of range in ~a\")"
"((escaping-c33_0)"
" escaping-c_0)"
"((temp34_2)"
"(let-values(((pos38_0)"
" pos_97))"
"(accum-string-get!6.1"
" pos38_0"
" #t"
" accum-str_4"
" config_22)))"
"((mode35_0)"
" mode_0))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in30_0"
" config31_0"
" temp32_3"
"(list"
" escaping-c33_0"
" temp34_2"
" mode35_0)))))"
"(set-accum-string-count!"
" accum-str_4"
" pos_97)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_133)))))))))"
"(if(unsafe-fx< index_3 14)"
"(let-values()"
"(let-values(((pos_96)"
"(accum-string-count"
" accum-str_4)))"
"(let-values(((v_76)"
"(let-values(((temp42_3)"
" 16)"
"((temp43_4)"
" 2))"
"(read-digits13.1"
" temp42_3"
" #f"
" #f"
" temp43_4"
" #f"
" #f"
" in_39"
" config_22"
" accum-str_4"
" #t))))"
"(begin"
"(if(integer? v_76)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_39"
" config_22"
" v_76"
" escaping-c_0"
" escaped-c_0)))"
"(set-accum-string-count!"
" accum-str_4"
" pos_96)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_76))))))"
"(if(unsafe-fx< index_3 15)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(eq?"
" mode_0"
" 'string)"
"(void)"
"(let-values()"
"(unknown-error_0)))"
"(values))))"
"(let-values(((pos_95)"
"(accum-string-count"
" accum-str_4)))"
"(let-values(((v_35)"
"(let-values(((temp47_1)"
" 16)"
"((temp48_1)"
" 4))"
"(read-digits13.1"
" temp47_1"
" #f"
" #f"
" temp48_1"
" #f"
" #f"
" in_39"
" config_22"
" accum-str_4"
" #t))))"
"(begin"
"(if(integer? v_35)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_39"
" config_22"
" v_35"
" escaping-c_0"
" escaped-c_0)))"
"(if(let-values(((or-part_347)"
"(<"
" v_35"
" 55296)))"
"(if or-part_347"
" or-part_347"
"(>"
" v_35"
" 57343)))"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_4"
" pos_95)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_35))))"
"(let-values()"
"(let-values(((next!_0)"
"(lambda()"
"(begin"
" 'next!"
"(let-values(((next-c_1)"
"(let-values(((in_42)"
" in_39)"
"((source_14)"
" source_25))"
"(read-char-or-special"
" in_42"
" special1.1"
" source_14))))"
"(begin"
"(if(char?"
" next-c_1)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" next-c_1))"
"(void))"
" next-c_1))))))"
"(let-values(((v2_8)"
"(let-values(((next-c_2)"
"(next!_0)))"
"(if(char=?"
" next-c_2"
" '#\\\\)"
"(let-values()"
"(let-values(((next-c_3)"
"(next!_0)))"
"(if(char=?"
" next-c_3"
" '#\\u)"
"(let-values()"
"(let-values(((v2_9)"
"(let-values(((temp52_5)"
" 16)"
"((temp53_4)"
" 4))"
"(read-digits13.1"
" temp52_5"
" #f"
" #f"
" temp53_4"
" #f"
" #f"
" in_39"
" config_22"
" accum-str_4"
" #t))))"
"(if(integer?"
" v2_9)"
"(let-values()"
"(if(>="
" v2_9"
" 56320)"
"(if(<="
" v2_9"
" 57343)"
" v2_9"
" #f)"
" #f))"
"(let-values()"
" v2_9))))"
"(let-values()"
" next-c_3))))"
"(let-values()"
" next-c_2)))))"
"(if(integer?"
" v2_8)"
"(let-values()"
"(let-values(((combined-v_0)"
"(+"
"(arithmetic-shift"
"(-"
" v_35"
" 55296)"
" 10)"
"(-"
" v2_8"
" 56320)"
" 65536)))"
"(if(>"
" combined-v_0"
" 1114111)"
"(let-values()"
"(let-values(((in54_0)"
" in_39)"
"((config55_0)"
" config_22)"
"((temp56_0)"
"                                                                                                                                    \"escape sequence `~au~a` is out of range in string\")"
"((escaping-c57_0)"
" escaping-c_0)"
"((temp58_4)"
"(let-values(((pos61_0)"
" pos_95))"
"(accum-string-get!6.1"
" pos61_0"
" #t"
" accum-str_4"
" config_22))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in54_0"
" config55_0"
" temp56_0"
"(list"
" escaping-c57_0"
" temp58_4))))"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_4"
" pos_95)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" combined-v_0)))))))"
"(let-values()"
"(let-values(((v264_0)"
" v2_8)"
"((temp65_4)"
"                                                                                                                              \"bad or incomplete surrogate-style encoding at `~au~a`\")"
"((escaping-c66_0)"
" escaping-c_0)"
"((temp67_2)"
"(let-values(((pos70_0)"
" pos_95))"
"(accum-string-get!6.1"
" pos70_0"
" #t"
" accum-str_4"
" config_22))))"
"(reader-error10.1"
" #f"
" #f"
" v264_0"
" #t"
" #f"
" #f"
" in_39"
" config_22"
" temp65_4"
"(list"
" escaping-c66_0"
" temp67_2))))))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(eq?"
" mode_0"
" 'string)"
"(void)"
"(let-values()"
"(unknown-error_0)))"
"(values))))"
"(let-values(((pos_116)"
"(accum-string-count"
" accum-str_4)))"
"(let-values(((v_84)"
"(let-values(((temp74_1)"
" 16)"
"((temp75_1)"
" 8))"
"(read-digits13.1"
" temp74_1"
" #f"
" #f"
" temp75_1"
" #f"
" #f"
" in_39"
" config_22"
" accum-str_4"
" #t))))"
"(begin"
"(if(integer? v_84)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_39"
" config_22"
" v_84"
" escaping-c_0"
" escaped-c_0)))"
"(if(if(let-values(((or-part_37)"
"(<"
" v_84"
" 55296)))"
"(if or-part_37"
" or-part_37"
"(>"
" v_84"
" 57343)))"
"(<="
" v_84"
" 1114111)"
" #f)"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_4"
" pos_116)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_84))))"
"(let-values()"
"(let-values(((in76_0)"
" in_39)"
"((config77_1)"
" config_22)"
"((temp78_4)"
"                                                                                                                      \"escape sequence `~aU~a` is out of range in string\")"
"((escaping-c79_0)"
" escaping-c_0)"
"((temp80_4)"
"(let-values(((pos83_0)"
" pos_116))"
"(accum-string-get!6.1"
" pos83_0"
" #t"
" accum-str_4"
" config_22))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in76_0"
" config77_1"
" temp78_4"
"(list"
" escaping-c79_0"
" temp80_4)))))))))))))))))"
"(loop_111)))))))"
"                                                                (if (char=? '#\\\" c_86)"
"(let-values() null)"
"(let-values()"
"(begin"
"(if(eq? mode_0 '|byte string|)"
"(let-values()"
"(if(byte?(char->integer c_86))"
"(void)"
"(let-values()"
"(let-values(((in84_0) in_39)"
"((config85_0) config_22)"
"((temp86_0)"
"                                                                                            \"character `~a` is out of range in byte string\")"
"((c87_0) c_86))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in84_0"
" config85_0"
" temp86_0"
"(list c87_0))))))"
"(void))"
"(accum-string-add! accum-str_4 c_86)"
"(loop_111)))))))))))"
" loop_111))"
"(values))))"
"(let-values(((str_30)"
"(if(eq? mode_0 '|byte string|)"
"(let-values(((accum-str88_0) accum-str_4)((config89_0) config_22))"
"(accum-string-get-bytes!13.1 #f #f accum-str88_0 config89_0))"
"(let-values(((accum-str90_0) accum-str_4)((config91_0) config_22))"
"(accum-string-get!6.1 #f #f accum-str90_0 config91_0)))))"
"(wrap str_30 in_39 config_22 str_30)))))))))))))"
"(define-values"
"(read-here-string)"
"(lambda(in_43 config_48)"
"(begin"
"(let-values(((source_28)(read-config-source config_48)))"
"(let-values(((accum-str_5)(accum-string-init! config_48)))"
"(let-values(((full-terminator_0)"
"((letrec-values(((loop_112)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_87)"
"(let-values(((in_44) in_43)((source_29) source_28))"
"(read-char-or-special in_44 special1.1 source_29))))"
"(if(eof-object? c_87)"
"(let-values()"
"(let-values(((c94_0) c_87)"
"((temp95_2)"
"                                                                  \"found end-of-file after `#<<` and before a newline\"))"
"(reader-error10.1"
" #f"
" #f"
" c94_0"
" #t"
" #f"
" #f"
" in_43"
" config_48"
" temp95_2"
"(list))))"
"(if(not(char? c_87))"
"(let-values()"
"(let-values(((c98_0) c_87)"
"((temp99_2)"
"                                                                    \"found non-character while reading `#<<`\"))"
"(reader-error10.1"
" #f"
" #f"
" c98_0"
" #t"
" #f"
" #f"
" in_43"
" config_48"
" temp99_2"
"(list))))"
"(if(char=? c_87 '#\\newline)"
"(let-values() null)"
"(let-values()(cons c_87(loop_112)))))))))))"
" loop_112))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_113)"
"(lambda(terminator_0 terminator-accum_0)"
"(begin"
" 'loop"
"(let-values(((c_88)"
"(let-values(((in_45) in_43)((source_30) source_28))"
"(read-char-or-special in_45 special1.1 source_30))))"
"(if(eof-object? c_88)"
"(let-values()"
"(if(null? terminator_0)"
"(void)"
"(let-values()"
"(let-values(((c102_0) c_88)"
"((temp103_2)"
"                                                                          \"found end-of-file before terminating `~a`\")"
"((temp104_2)(list->string full-terminator_0)))"
"(reader-error10.1"
" #f"
" #f"
" c102_0"
" #t"
" #f"
" #f"
" in_43"
" config_48"
" temp103_2"
"(list temp104_2))))))"
"(if(not(char? c_88))"
"(let-values()"
"(let-values(((c107_0) c_88)"
"((temp108_3)"
"                                                                        \"found non-character while reading `#<<`\"))"
"(reader-error10.1"
" #f"
" #f"
" c107_0"
" #t"
" #f"
" #f"
" in_43"
" config_48"
" temp108_3"
"(list))))"
"(if(if(pair? terminator_0)"
"(char=? c_88(car terminator_0))"
" #f)"
"(let-values()"
"(loop_113"
"(cdr terminator_0)"
"(cons(car terminator_0) terminator-accum_0)))"
"(if(if(null? terminator_0)(char=? c_88 '#\\newline) #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(if(null? terminator-accum_0)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_96)"
"(reverse$1 terminator-accum_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_96)))"
"((letrec-values(((for-loop_6)"
"(lambda(lst_305)"
"(begin"
" 'for-loop"
"(if(pair? lst_305)"
"(let-values(((c_89)"
"(unsafe-car"
" lst_305))"
"((rest_173)"
"(unsafe-cdr"
" lst_305)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(accum-string-add!"
" accum-str_5"
" c_89))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_6"
" rest_173)"
"(values))))"
"(values))))))"
" for-loop_6)"
" lst_96)))"
"(void))))"
"(accum-string-add! accum-str_5 c_88)"
"(loop_113 full-terminator_0 null))))))))))))"
" loop_113)"
" full-terminator_0"
" null)"
"(values))))"
"(let-values(((str_31)"
"(let-values(((accum-str109_0) accum-str_5)((config110_0) config_48))"
"(accum-string-get!6.1 #f #f accum-str109_0 config110_0))))"
"(wrap str_31 in_43 config_48 str_31)))))))))"
"(define-values"
"(no-hex-digits)"
"(lambda(in_46 config_49 c_90 escaping-c_1 escaped-c_1)"
"(begin"
"(let-values(((c113_0) c_90)"
"                   ((temp114_1) \"no hex digit following `~a~a`\")"
"((escaping-c115_0) escaping-c_1)"
"((escaped-c116_0) escaped-c_1))"
"(reader-error10.1 #f #f c113_0 #t #f #f in_46 config_49 temp114_1(list escaping-c115_0 escaped-c116_0))))))"
"(define-values"
"(read-character)"
"(lambda(in_4 config_8)"
"(begin"
"(let-values(((c_91)"
"(let-values(((in_39) in_4)((source_31)(read-config-source config_8)))"
"(read-char-or-special in_39 special1.1 source_31))))"
"(let-values(((char_0)"
"(if(eof-object? c_91)"
"(let-values()"
"                          (let-values (((c3_4) c_91) ((temp4_0) \"expected a character after `#\\\\`\"))"
"(reader-error10.1 #f #f c3_4 #t #f #f in_4 config_8 temp4_0(list))))"
"(if(not(char? c_91))"
"(let-values()"
"                            (let-values (((c7_1) c_91) ((temp8_4) \"found non-character after `#\\\\`\"))"
"(reader-error10.1 #f #f c7_1 #t #f #f in_4 config_8 temp8_4(list))))"
"(if(octal-digit? c_91)"
"(let-values()"
"(let-values(((c2_5)"
"(let-values(((in_47) in_4)"
"((skip-count_10) 0)"
"((source_32)(read-config-source config_8)))"
"(peek-char-or-special in_47 skip-count_10 special1.1 source_32))))"
"(if(if(char? c2_5)(octal-digit? c2_5) #f)"
"(let-values()"
"(let-values((()(begin(consume-char in_4 c2_5)(values))))"
"(let-values(((c3_5)"
"(let-values(((in_48) in_4)"
"((source_33)(read-config-source config_8)))"
"(read-char-or-special in_48 special1.1 source_33))))"
"(let-values(((v_1)"
"(if(if(char? c3_5)(octal-digit? c3_5) #f)"
"(let-values()"
"(+"
"(arithmetic-shift(digit->number c_91) 6)"
"(arithmetic-shift(digit->number c2_5) 3)"
"(digit->number c3_5)))"
"(let-values() #f))))"
"(begin"
"(if(if v_1(<= v_1 255) #f)"
"(void)"
"(let-values()"
"(let-values(((c311_0) c3_5)"
"                                                             ((temp12_6) \"bad character constant `#\\\\~a~a~a`\")"
"((c13_2) c_91)"
"((c214_0) c2_5)"
"                                                             ((temp15_7) (if (char? c3_5) c3_5 \"\")))"
"(reader-error10.1"
" #f"
" #f"
" c311_0"
" #t"
" #f"
" #f"
" in_4"
" config_8"
" temp12_6"
"(list c13_2 c214_0 temp15_7)))))"
"(integer->char v_1))))))"
"(let-values() c_91))))"
"(if(let-values(((or-part_259)(char=? c_91 '#\\u)))"
"(if or-part_259 or-part_259(char=? c_91 '#\\U)))"
"(let-values()"
"(let-values(((accum-str_6)(accum-string-init! config_8)))"
"(let-values(((v_3)"
"(let-values(((temp19_4) 16)((temp20_4)(if(char=? c_91 '#\\u) 4 8)))"
"(read-digits13.1"
" temp19_4"
" #f"
" #f"
" temp20_4"
" #f"
" #f"
" in_4"
" config_8"
" accum-str_6"
" #t))))"
"(if(integer? v_3)"
"(let-values()"
"(if(if(let-values(((or-part_29)(< v_3 55296)))"
"(if or-part_29 or-part_29(> v_3 57343)))"
"(<= v_3 1114111)"
" #f)"
"(let-values()"
"(begin(accum-string-abandon! accum-str_6 config_8)(integer->char v_3)))"
"(let-values()"
"(let-values(((in21_3) in_4)"
"((config22_2) config_8)"
"                                                         ((temp23_4) \"bad character constant `#\\\\u~a`\")"
"((temp24_10)"
"(let-values(((accum-str25_0) accum-str_6)"
"((config26_1) config_8))"
"(accum-string-get!6.1 #f #f accum-str25_0 config26_1))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in21_3"
" config22_2"
" temp23_4"
"(list temp24_10))))))"
"(let-values()(begin(accum-string-abandon! accum-str_6 config_8) c_91))))))"
"(if(char-alphabetic? c_91)"
"(let-values()"
"(let-values(((next-c_4)"
"(let-values(((in_36) in_4)"
"((skip-count_9) 0)"
"((source_27)(read-config-source config_8)))"
"(peek-char-or-special in_36 skip-count_9 special1.1 source_27))))"
"(if(if(char? next-c_4)(char-alphabetic? next-c_4) #f)"
"(let-values()"
"(let-values(((accum-str_7)(accum-string-init! config_8)))"
"(let-values((()(begin(accum-string-add! accum-str_7 c_91)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_7 next-c_4)(values))))"
"(let-values((()(begin(consume-char in_4 next-c_4)(values))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_114)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((next-c_5)"
"(let-values(((in_14)"
" in_4)"
"((skip-count_11)"
" 0)"
"((source_34)"
"(read-config-source"
" config_8)))"
"(peek-char-or-special"
" in_14"
" skip-count_11"
" special1.1"
" source_34))))"
"(if(if(char? next-c_5)"
"(char-alphabetic?"
" next-c_5)"
" #f)"
"(let-values()"
"(begin"
"(accum-string-add!"
" accum-str_7"
" next-c_5)"
"(consume-char"
" in_4"
" next-c_5)"
"(loop_114)))"
"(void)))))))"
" loop_114))"
"(values))))"
"(let-values(((name_58)"
"(string-foldcase"
"(let-values(((accum-str27_0) accum-str_7)"
"((config28_1) config_8))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str27_0"
" config28_1)))))"
"(let-values(((tmp_53) name_58))"
"                                                      (if (if (equal? tmp_53 \"nul\") #t (equal? tmp_53 \"null\"))"
"(let-values() '#\\nul)"
"                                                        (if (equal? tmp_53 \"backspace\")"
"(let-values() '#\\backspace)"
"                                                          (if (equal? tmp_53 \"tab\")"
"(let-values() '#\\tab)"
"                                                            (if (if (equal? tmp_53 \"newline\")"
" #t"
"                                                                  (equal? tmp_53 \"linefeed\"))"
"(let-values() '#\\newline)"
"                                                              (if (equal? tmp_53 \"vtab\")"
"(let-values() '#\\vtab)"
"                                                                (if (equal? tmp_53 \"page\")"
"(let-values() '#\\page)"
"                                                                  (if (equal? tmp_53 \"return\")"
"(let-values() '#\\return)"
"                                                                    (if (equal? tmp_53 \"space\")"
"(let-values() '#\\space)"
"                                                                      (if (equal? tmp_53 \"rubout\")"
"(let-values() '#\\rubout)"
"(let-values()"
"(let-values(((in29_2) in_4)"
"((config30_0) config_8)"
"((temp31_7)"
"                                                                                        \"bad character constant `#\\\\~a`\")"
"((name32_0) name_58))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in29_2"
" config30_0"
" temp31_7"
"(list name32_0)))))))))))))))))))))"
"(let-values() c_91))))"
"(let-values() c_91))))))))"
"(wrap char_0 in_4 config_8 char_0))))))"
"(define-values"
"(read-quote)"
"(lambda(read-one_3 sym_27 desc_0 c_35 in_39 config_22)"
"(begin"
"(let-values(((wrapped-sym_0)(wrap sym_27 in_39 config_22 c_35)))"
"(let-values(((e_80)(read-one_3 #f in_39 config_22)))"
"(begin"
"(if(eof-object? e_80)"
"(let-values()"
"(let-values(((e3_0) e_80)"
"                             ((temp4_6) \"expected an element for ~a, found end-of-file\")"
"((desc5_0) desc_0))"
"(reader-error10.1 #f #f e3_0 #t #f #f in_39 config_22 temp4_6(list desc5_0))))"
"(void))"
"(wrap(list wrapped-sym_0 e_80) in_39 config_22 #f)))))))"
"(define-values"
"(read-delimited-constant)"
"(lambda(init-c_1 can-match?_0 chars_0 val_75 in_39 config_22)"
"(begin"
"(let-values(((accum-str_8)(accum-string-init! config_22)))"
"(begin"
"(accum-string-add! accum-str_8 init-c_1)"
"((letrec-values(((loop_115)"
"(lambda(chars_1)"
"(begin"
" 'loop"
"(let-values(((c_92)"
"(let-values(((in_49) in_39)"
"((skip-count_12) 0)"
"((source_4)(read-config-source config_22)))"
"(peek-char-or-special in_49 skip-count_12 special1.1 source_4))))"
"(if(char-delimiter? c_92 config_22)"
"(let-values()"
"(if(null? chars_1)"
"(void)"
"(let-values()"
"(let-values(((c3_6) c_92)"
"                                                       ((temp4_7) \"bad syntax `#~a`\")"
"((temp5_8)"
"(let-values(((accum-str6_0) accum-str_8)"
"((config7_1) config_22))"
"(accum-string-get!6.1 #f #f accum-str6_0 config7_1))))"
"(reader-error10.1"
" #f"
" #f"
" c3_6"
" #t"
" #f"
" #f"
" in_39"
" config_22"
" temp4_7"
"(list temp5_8))))))"
"(if(null? chars_1)"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_8 c_92)"
"(let-values(((in8_0) in_39)"
"((config9_1) config_22)"
"                                                       ((temp10_4) \"bad syntax `#~a`\")"
"((temp11_2)"
"(let-values(((accum-str12_0) accum-str_8)"
"((config13_1) config_22))"
"(accum-string-get!6.1 #f #f accum-str12_0 config13_1))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in8_0"
" config9_1"
" temp10_4"
"(list temp11_2)))))"
"(if(if can-match?_0(char=? c_92(car chars_1)) #f)"
"(let-values()"
"(begin"
"(consume-char in_39 c_92)"
"(accum-string-add! accum-str_8 c_92)"
"(loop_115(cdr chars_1))))"
"(let-values()"
"(begin"
"(consume-char/special in_39 config_22 c_92)"
"(accum-string-add! accum-str_8 c_92)"
"(let-values(((in14_1) in_39)"
"((config15_2) config_22)"
"                                                         ((temp16_7) \"bad syntax `#~a`\")"
"((temp17_3)"
"(let-values(((accum-str18_1) accum-str_8)"
"((config19_1) config_22))"
"(accum-string-get!6.1 #f #f accum-str18_1 config19_1))))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in14_1"
" config15_2"
" temp16_7"
"(list temp17_3)))))))))))))"
" loop_115)"
" chars_0)"
"(wrap"
" val_75"
" in_39"
" config_22"
"(let-values(((accum-str20_0) accum-str_8)((config21_1) config_22))"
"(accum-string-get!6.1 #f #f accum-str20_0 config21_1))))))))"
"(define-values"
"(read-box)"
"(lambda(read-one_3 dispatch-c_1 in_5 config_15)"
"(begin"
"(let-values((()"
"(begin"
"(if(check-parameter 1/read-accept-box config_15)"
"(void)"
"(let-values()"
"(let-values(((in1_2) in_5)"
"((config2_1) config_15)"
"                                       ((temp3_8) \"`~a&` forms not enabled\")"
"((dispatch-c4_0) dispatch-c_1))"
"(reader-error10.1 #f #f #f #f #f #f in1_2 config2_1 temp3_8(list dispatch-c4_0)))))"
"(values))))"
"(let-values(((e_70)(read-one_3 #f in_5(next-readtable config_15))))"
"(begin"
"(if(eof-object? e_70)"
"(let-values()"
"(let-values(((e7_1) e_70)"
"                             ((temp8_4) \"expected an element for `~a&` box, found end-of-file\")"
"((dispatch-c9_0) dispatch-c_1))"
"(reader-error10.1 #f #f e7_1 #t #f #f in_5 config_15 temp8_4(list dispatch-c9_0))))"
"(void))"
"(wrap(box e_70) in_5 config_15 #f)))))))"
"(define-values"
"(read-regexp)"
"(lambda(mode-c_0 accum-str_9 in_5 config_15)"
"(begin"
"(let-values(((c3_7)"
"(let-values(((in_50) in_5)((source_35)(read-config-source config_15)))"
"(read-char-or-special in_50 special1.1 source_35))))"
"(let-values(((no-wrap-config_0)(disable-wrapping config_15)))"
"(let-values(((rx_0)"
"(let-values(((tmp_17) c3_7))"
"                          (if (equal? tmp_17 '#\\\")"
"(let-values()"
"(let-values((()(begin(accum-string-abandon! accum-str_9 config_15)(values))))"
"(let-values(((str_32)"
"(let-values(((in1_3) in_5)((no-wrap-config2_0) no-wrap-config_0))"
"(read-string5.1 #f #f in1_3 no-wrap-config2_0))))"
"(catch-and-reraise-as-reader/proc"
" in_5"
" config_15"
"(lambda()((if(char=? mode-c_0 '#\\r) regexp pregexp) str_32))))))"
"(if(equal? tmp_17 '#\\#)"
"(let-values()"
"(let-values((()(begin(accum-string-add! accum-str_9 c3_7)(values))))"
"(let-values(((c4_2)"
"(let-values(((in_25) in_5)"
"((source_36)(read-config-source config_15)))"
"(read-char-or-special in_25 special1.1 source_36))))"
"(let-values(((tmp_54) c4_2))"
"                                      (if (equal? tmp_54 '#\\\")"
"(let-values()"
"(let-values((()"
"(begin(accum-string-abandon! accum-str_9 config_15)(values))))"
"(let-values(((bstr_4)"
"(let-values(((temp5_9) '|byte string|))"
"(read-string5.1 temp5_9 #t in_5 no-wrap-config_0))))"
"(catch-and-reraise-as-reader/proc"
" in_5"
" config_15"
"(lambda()"
"((if(char=? mode-c_0 '#\\r) byte-regexp byte-pregexp) bstr_4))))))"
"(let-values()"
"(let-values(((c48_0) c4_2)"
"                                                       ((temp9_4) \"expected `\\\"` after `~a`\")"
"((temp10_5)"
"(let-values(((accum-str11_0) accum-str_9)"
"((config12_2) config_15))"
"(accum-string-get!6.1 #f #f accum-str11_0 config12_2))))"
"(reader-error10.1"
" #f"
" #f"
" c48_0"
" #t"
" #f"
" #f"
" in_5"
" config_15"
" temp9_4"
"(list temp10_5)))))))))"
"(let-values()"
"(let-values(((c315_0) c3_7)"
"                                             ((temp16_7) \"expected `\\\"` or `#` after `~a`\")"
"((temp17_3)"
"(let-values(((accum-str18_1) accum-str_9)((config19_1) config_15))"
"(accum-string-get!6.1 #f #f accum-str18_1 config19_1))))"
"(reader-error10.1"
" #f"
" #f"
" c315_0"
" #t"
" #f"
" #f"
" in_5"
" config_15"
" temp16_7"
"(list temp17_3)))))))))"
"(wrap rx_0 in_5 config_15 #f)))))))"
"(define-values"
"(read-extension-reader)"
"(lambda(read-one_9 read-recur_0 dispatch-c_2 in_24 config_24)"
"(begin"
"(let-values(((extend-str_0)"
"(read-extension-prefix(cons dispatch-c_2 '(#\\r #\\e)) '(#\\a #\\d #\\e #\\r) in_24 config_24)))"
"(let-values((()"
"(begin"
"(if(check-parameter 1/read-accept-reader config_24)"
"(void)"
"(let-values()"
"(let-values(((in52_0) in_24)"
"((config53_1) config_24)"
"                                         ((temp54_5) \"`~a` not enabled\")"
"((extend-str55_0) extend-str_0))"
"(reader-error10.1 #f #f #f #f #f #f in52_0 config53_1 temp54_5(list extend-str55_0)))))"
"(values))))"
"(let-values(((mod-path-wrapped_0)(read-one_9 #f in_24(next-readtable config_24))))"
"(begin"
"(if(eof-object? mod-path-wrapped_0)"
"(let-values()"
"(let-values(((mod-path-wrapped58_0) mod-path-wrapped_0)"
"                               ((temp59_3) \"expected a datum after `~a`, found end-of-file\")"
"((extend-str60_0) extend-str_0))"
"(reader-error10.1"
" #f"
" #f"
" mod-path-wrapped58_0"
" #t"
" #f"
" #f"
" in_24"
" config_24"
" temp59_3"
"(list extend-str60_0))))"
"(void))"
"(let-values(((temp47_2)((read-config-coerce config_24) #f mod-path-wrapped_0 #f))"
"((read-recur48_0) read-recur_0)"
"((in49_0) in_24)"
"((config50_0) config_24)"
"((mod-path-wrapped51_0) mod-path-wrapped_0))"
"(read-extension44.1"
" #f"
" #f"
" mod-path-wrapped51_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp47_2"
" read-recur48_0"
" in49_0"
" config50_0)))))))))"
"(define-values"
"(read-extension-lang7.1)"
"(lambda(get-info?1_0 get-info?2_0 read-recur3_0 dispatch-c4_1 in5_1 config6_0)"
"(begin"
" 'read-extension-lang7"
"(let-values(((read-recur_1) read-recur3_0))"
"(let-values(((dispatch-c_3) dispatch-c4_1))"
"(let-values(((in_51) in5_1))"
"(let-values(((config_50) config6_0))"
"(let-values(((get-info?_0)(if get-info?2_0 get-info?1_0 #f)))"
"(let-values()"
"(let-values(((extend-str_1)"
"(read-extension-prefix(cons dispatch-c_3 '(#\\l)) '(#\\a #\\n #\\g) in_51 config_50)))"
"(let-values(((c_67)"
"(let-values(((in_22) in_51)((source_37)(read-config-source config_50)))"
"(read-char-or-special in_22 special1.1 source_37))))"
"(begin"
"(if(char=? c_67 '#\\space)"
"(void)"
"(let-values()"
"(let-values(((in67_1) in_51)"
"((config68_1) config_50)"
"                                         ((temp69_3) \"expected a single space after `~a`\")"
"((extend-str70_0) extend-str_1))"
"(reader-error10.1 #f #f #f #f #f #f in67_1 config68_1 temp69_3(list extend-str70_0)))))"
"(let-values(((temp65_5) '|#lang|)((get-info?66_0) get-info?_0))"
"(read-lang29.1"
" get-info?66_0"
" #t"
" #f"
" #f"
" temp65_5"
" extend-str_1"
" read-recur_1"
" in_51"
" config_50))))))))))))))"
"(define-values"
"(read-extension-#!16.1)"
"(lambda(get-info?10_0 get-info?11_0 read-recur12_0 dispatch-c13_0 in14_2 config15_3)"
"(begin"
" 'read-extension-#!16"
"(let-values(((read-recur_2) read-recur12_0))"
"(let-values(((dispatch-c_4) dispatch-c13_0))"
"(let-values(((in_37) in14_2))"
"(let-values(((config_47) config15_3))"
"(let-values(((get-info?_1)(if get-info?11_0 get-info?10_0 #f)))"
"(let-values()"
"(let-values(((c_68)"
"(let-values(((in_52) in_37)((source_38)(read-config-source config_47)))"
"(read-char-or-special in_52 special1.1 source_38))))"
"(begin"
"(if(char-lang-nonsep? c_68)"
"(void)"
"(let-values()"
"(let-values(((in78_0) in_37)"
"((config79_0) config_47)"
"((temp80_5)"
"(if(char? c_68)(string dispatch-c_4 '#\\! c_68)(string dispatch-c_4 '#\\!))))"
"(bad-syntax-error18.1 #f #f in78_0 config79_0 temp80_5))))"
"(let-values(((temp71_2)(string dispatch-c_4 '#\\!))"
"((read-recur72_0) read-recur_2)"
"((in73_0) in_37)"
"((config74_0) config_47)"
"((c75_0) c_68)"
"((temp76_1) '|#!|)"
"((get-info?77_0) get-info?_1))"
"(read-lang29.1"
" get-info?77_0"
" #t"
" c75_0"
" #t"
" temp76_1"
" temp71_2"
" read-recur72_0"
" in73_0"
" config74_0)))))))))))))"
"(define-values"
"(read-lang29.1)"
"(lambda(get-info?20_0 get-info?23_0 init-c19_0 init-c22_0 who21_0 extend-str25_0 read-recur26_0 in27_1 config28_2)"
"(begin"
" 'read-lang29"
"(let-values(((extend-str_2) extend-str25_0))"
"(let-values(((read-recur_3) read-recur26_0))"
"(let-values(((in_53) in27_1))"
"(let-values(((config_51) config28_2))"
"(let-values(((init-c_14)(if init-c22_0 init-c19_0 #f)))"
"(let-values(((get-info?_2)(if get-info?23_0 get-info?20_0 #f)))"
"(let-values(((who_27) who21_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(check-parameter 1/read-accept-reader config_51)"
"(check-parameter 1/read-accept-lang config_51)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((in88_0) in_53)"
"((config89_1) config_51)"
"                                                       ((temp90_2) \"`~a` not enabled\")"
"((extend-str91_0) extend-str_2))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in88_0"
" config89_1"
" temp90_2"
"(list extend-str91_0)))))"
"(values))))"
"(let-values(((accum-str_10)(accum-string-init! config_51)))"
"(let-values((()"
"(begin"
"(if init-c_14"
"(let-values()(accum-string-add! accum-str_10 init-c_14))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_116)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_93)"
"(let-values(((in_54) in_53)"
"((skip-count_13) 0)"
"((source_39)"
"(read-config-source"
" config_51)))"
"(peek-char-or-special"
" in_54"
" skip-count_13"
" special1.1"
" source_39))))"
"(if(eof-object? c_93)"
"(let-values()(void))"
"(if(not(char? c_93))"
"(let-values()"
"(begin"
"(consume-char/special in_53 config_51 c_93)"
"(let-values(((c94_1) c_93)"
"((temp95_3)"
"                                                                                          \"found non-character while reading `#~a'\")"
"((extend-str96_0)"
" extend-str_2))"
"(reader-error10.1"
" #f"
" #f"
" c94_1"
" #t"
" #f"
" #f"
" in_53"
" config_51"
" temp95_3"
"(list extend-str96_0)))))"
"(if(char-whitespace? c_93)"
"(let-values()(void))"
"(if(let-values(((or-part_348)"
"(char-lang-nonsep? c_93)))"
"(if or-part_348"
" or-part_348"
"(char=? '#\\/ c_93)))"
"(let-values()"
"(begin"
"(consume-char in_53 c_93)"
"(accum-string-add! accum-str_10 c_93)"
"(loop_116)))"
"(let-values()"
"(begin"
"(consume-char in_53 c_93)"
"(let-values(((in97_0) in_53)"
"((config98_0) config_51)"
"((temp99_3)"
"(string-append"
"                                                                                               \"expected only alphanumeric, `-`, `+`, `_`, or `/`\""
"                                                                                               \" characters for `~a`, found `~a`\"))"
"((extend-str100_0)"
" extend-str_2)"
"((c101_0) c_93))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in97_0"
" config98_0"
" temp99_3"
"(list"
" extend-str100_0"
" c101_0))))))))))))))"
" loop_116))"
"(values))))"
"(let-values(((lang-str_0)"
"(let-values(((accum-str102_0) accum-str_10)((config103_0) config_51))"
"(accum-string-get!6.1 #f #f accum-str102_0 config103_0))))"
"(let-values((()"
"(begin"
"                                                (if (equal? lang-str_0 \"\")"
"(let-values()"
"(let-values(((in104_0) in_53)"
"((config105_0) config_51)"
"((temp106_3)"
"                                                                  \"expected a non-empty sequence of alphanumeric, `-`, `+`, `_`, or `/` after `~a`\")"
"((extend-str107_0) extend-str_2))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in104_0"
" config105_0"
" temp106_3"
"(list extend-str107_0))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(char=? '#\\/(string-ref lang-str_0 0))"
"(let-values()"
"(let-values(((in108_0) in_53)"
"((config109_0) config_51)"
"((temp110_5)"
"                                                                    \"expected a name that does not start `/` after `~a`\")"
"((extend-str111_0) extend-str_2))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in108_0"
" config109_0"
" temp110_5"
"(list extend-str111_0))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(char=?"
" '#\\/"
"(string-ref lang-str_0(sub1(string-length lang-str_0))))"
"(let-values()"
"(let-values(((in112_0) in_53)"
"((config113_0) config_51)"
"((temp114_2)"
"                                                                      \"expected a name that does not end `/` after `~a`\")"
"((extend-str115_0) extend-str_2))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in112_0"
" config113_0"
" temp114_2"
"(list extend-str115_0))))"
"(void))"
"(values))))"
"(let-values(((submod-path_0)"
"(list* 'submod(string->symbol lang-str_0) '(reader))))"
"(let-values(((reader-path_0)"
"                                                      (string->symbol (string-append lang-str_0 \"/lang/reader\"))))"
"(let-values(((submod-path81_0) submod-path_0)"
"((reader-path82_0) reader-path_0)"
"((read-recur83_0) read-recur_3)"
"((in84_1) in_53)"
"((config85_1) config_51)"
"((get-info?86_0) get-info?_2)"
"((who87_0) who_27))"
"(read-extension44.1"
" get-info?86_0"
" #t"
" #f"
" #f"
" submod-path81_0"
" #t"
" who87_0"
" #t"
" reader-path82_0"
" read-recur83_0"
" in84_1"
" config85_1)))))))))))))))))))))))"
"(define-values"
"(char-lang-nonsep?)"
"(lambda(c_94)"
"(begin"
"(if(<(char->integer c_94) 128)"
"(let-values(((or-part_265)(char-alphabetic? c_94)))"
"(if or-part_265"
" or-part_265"
"(let-values(((or-part_287)(char-numeric? c_94)))"
"(if or-part_287"
" or-part_287"
"(let-values(((or-part_288)(char=? '#\\- c_94)))"
"(if or-part_288"
" or-part_288"
"(let-values(((or-part_349)(char=? '#\\+ c_94)))"
"(if or-part_349 or-part_349(char=? '#\\_ c_94)))))))))"
" #f))))"
"(define-values"
"(read-extension-prefix)"
"(lambda(already_0 wanted_0 in_55 config_52)"
"(begin"
"(let-values(((accum-str_11)(accum-string-init! config_52)))"
"(begin"
"(let-values(((lst_197) already_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_197)))"
"((letrec-values(((for-loop_265)"
"(lambda(lst_306)"
"(begin"
" 'for-loop"
"(if(pair? lst_306)"
"(let-values(((c_95)(unsafe-car lst_306))((rest_104)(unsafe-cdr lst_306)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(accum-string-add! accum-str_11 c_95))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_265 rest_104)(values))))"
"(values))))))"
" for-loop_265)"
" lst_197)))"
"(void)"
"((letrec-values(((loop_117)"
"(lambda(wanted_1)"
"(begin"
" 'loop"
"(if(null? wanted_1)"
"(void)"
"(let-values()"
"(let-values(((c_26)"
"(let-values(((in_56) in_55)"
"((source_40)(read-config-source config_52)))"
"(read-char-or-special in_56 special1.1 source_40))))"
"(begin"
"(if(char? c_26)(let-values()(accum-string-add! accum-str_11 c_26))(void))"
"(if(eqv? c_26(car wanted_1))"
"(void)"
"(let-values()"
"(let-values(((temp120_2)"
"(let-values(((accum-str122_0) accum-str_11)"
"((config123_0) config_52))"
"(accum-string-get!6.1 #f #f accum-str122_0 config123_0)))"
"((c121_0) c_26))"
"(bad-syntax-error18.1 c121_0 #t in_55 config_52 temp120_2))))"
"(loop_117(cdr wanted_1))))))))))"
" loop_117)"
" wanted_0)"
"(let-values(((accum-str116_0) accum-str_11)((config117_0) config_52))"
"(accum-string-get!6.1 #f #f accum-str116_0 config117_0)))))))"
"(define-values"
"(read-extension44.1)"
"(lambda(get-info?34_0"
" get-info?38_0"
" mod-path-wrapped33_0"
" mod-path-wrapped37_0"
" try-first-mod-path32_0"
" try-first-mod-path36_0"
" who35_0"
" who39_0"
" mod-path-datum40_0"
" read-recur41_0"
" in42_1"
" config43_1)"
"(begin"
" 'read-extension44"
"(let-values(((try-first-mod-path_0)(if try-first-mod-path36_0 try-first-mod-path32_0 #f)))"
"(let-values(((mod-path-datum_0) mod-path-datum40_0))"
"(let-values(((read-recur_4) read-recur41_0))"
"(let-values(((in_57) in42_1))"
"(let-values(((config_53) config43_1))"
"(let-values(((mod-path-wrapped_1)"
"(if mod-path-wrapped37_0"
" mod-path-wrapped33_0"
"((read-config-coerce config_53) #t mod-path-datum_0 #f))))"
"(let-values(((get-info?_3)(if get-info?38_0 get-info?34_0 #f)))"
"(let-values(((who_28)(if who39_0 who35_0 '|#reader|)))"
"(let-values()"
"(let-values((()(begin(force-parameters! config_53)(values))))"
"(let-values(((guard_0)(1/current-reader-guard)))"
"(let-values(((mod-path_27)"
"(let-values(((or-part_350)"
"(if try-first-mod-path_0"
"(let-values(((mod-path_28)(guard_0 try-first-mod-path_0)))"
"(if((read-config-module-declared? config_53)"
" try-first-mod-path_0)"
" mod-path_28"
" #f))"
" #f)))"
"(if or-part_350 or-part_350(guard_0 mod-path-datum_0)))))"
"(let-values(((for-syntax?_8)(read-config-for-syntax? config_53)))"
"(let-values(((dynamic-require_2)(read-config-dynamic-require config_53)))"
"(let-values(((no-value_0)(gensym)))"
"(let-values(((extension_0)"
"(if get-info?_3"
"(let-values()"
"(dynamic-require_2 mod-path_27 'get-info(lambda() no-value_0)))"
"(let-values()"
"(dynamic-require_2"
" mod-path_27"
"(if for-syntax?_8 'read-syntax 'read))))))"
"(if(eq? extension_0 no-value_0)"
"(let-values() #f)"
"(let-values()"
"(let-values(((result-v_1)"
"(if(if for-syntax?_8(not get-info?_3) #f)"
"(let-values()"
"(if(procedure-arity-includes? extension_0 6)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()"
"(extension_0"
"(read-config-source config_53)"
" in_57"
" mod-path-wrapped_1"
"(read-config-line config_53)"
"(read-config-col config_53)"
"(read-config-pos config_53)))))"
"(if(procedure-arity-includes? extension_0 2)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()"
"(extension_0"
"(read-config-source config_53)"
" in_57))))"
"(let-values()"
"(raise-argument-error"
" who_28"
"                                                                   \"(or/c (procedure-arity-includes?/c 2) (procedure-arity-includes?/c 6))\""
" extension_0)))))"
"(let-values()"
"(if(procedure-arity-includes? extension_0 5)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()"
"(extension_0"
" in_57"
" mod-path-wrapped_1"
"(read-config-line config_53)"
"(read-config-col config_53)"
"(read-config-pos config_53)))))"
"(if get-info?_3"
"(let-values()"
"(raise-argument-error"
" who_28"
"                                                                   \"(procedure-arity-includes?/c 5)\""
" extension_0))"
"(if(procedure-arity-includes? extension_0 1)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()(extension_0 in_57))))"
"(let-values()"
"(raise-argument-error"
" who_28"
"                                                                     \"(or/c (procedure-arity-includes?/c 1) (procedure-arity-includes?/c 5))\""
" extension_0)))))))))"
"(if get-info?_3"
"(let-values()"
"(begin"
"(if(if(procedure? result-v_1)"
"(procedure-arity-includes? result-v_1 2)"
" #f)"
"(void)"
"(let-values()"
"(raise-result-error"
" 'read-language"
"                                                       \"(procedure-arity-includes?/c 2)\""
" result-v_1)))"
" result-v_1))"
"(if(1/special-comment? result-v_1)"
"(let-values()(read-recur_4 in_57 config_53))"
"(let-values()"
"(coerce result-v_1 in_57 config_53))))))))))))))))))))))))))"
"(define-values"
"(read-language/get-info)"
"(lambda(read-one_3 in_2 config_7 fail-k_5)"
"(begin"
"(let-values(((c_33)(read-char/skip-whitespace-and-comments #f read-one_3 in_2 config_7)))"
"(let-values(((line_8 col_7 pos_112)(port-next-location* in_2 c_33)))"
"(let-values(((l-config_0)"
"(override-parameter 1/read-accept-reader(reading-at config_7 line_8 col_7 pos_112) #t)))"
"(if(not(eqv? c_33 '#\\#))"
"              (let-values () (if fail-k_5 (fail-k_5) (lang-error in_2 l-config_0 \"\" c_33)))"
"(let-values()"
"(let-values(((c2_6)"
"(let-values(((in_49) in_2)((source_41)(read-config-source l-config_0)))"
"(read-char-or-special in_49 special1.1 source_41))))"
"(if(eqv? c2_6 '#\\l)"
"(let-values()"
"(let-values(((temp5_10) #t))"
"(read-extension-lang7.1 temp5_10 #t read-one_3 c_33 in_2 l-config_0)))"
"(if(eqv? c2_6 '#\\!)"
"(let-values()"
"(let-values(((temp10_6) #t))"
"(read-extension-#!16.1 temp10_6 #t read-one_3 c_33 in_2 l-config_0)))"
"(let-values()"
"(if fail-k_5(fail-k_5)(lang-error in_2 l-config_0(string c_33) c2_6))))))))))))))"
"(define-values"
"(lang-error)"
"(lambda(in_25 config_37 prefix_7 c_86)"
"(begin"
"(let-values(((add-prefix_0)"
"(lambda(s_10)"
"(begin"
" 'add-prefix"
"                        (if (string=? prefix_7 \"\") (format \"`~a` followed by ~a\" prefix_7 s_10) s_10)))))"
"(let-values(((c13_3) c_86)"
"((temp14_0) 'read-language)"
"((temp15_0)"
"(string-append"
"                       \"expected (after whitespace and comments) `#lang ` or `#!` followed\""
"                       \" immediately by a language name, found ~a\"))"
"((temp16_0)"
"(if(eof-object? c_86)"
"                        (let-values () (add-prefix_0 \"end-of-file\"))"
"(if(not(char? c_86))"
"                          (let-values () (add-prefix_0 \"non-character\"))"
"                          (let-values () (format \"`~a~a`\" prefix_7 c_86))))))"
"(reader-error10.1 #f #f c13_3 #t temp14_0 #t in_25 config_37 temp15_0(list temp16_0)))))))"
"(define-values"
"(read30.1)"
"(lambda(coerce12_1"
" coerce26_0"
" coerce-key13_1"
" coerce-key27_0"
" dynamic-require10_1"
" dynamic-require24_0"
" for-syntax?8_0"
" for-syntax?22_0"
" init-c2_0"
" init-c16_0"
" keep-comment?14_1"
" keep-comment?28_0"
" local-graph?6_0"
" local-graph?20_0"
" module-declared?11_1"
" module-declared?25_0"
" next-readtable3_0"
" next-readtable17_0"
" read-compiled9_1"
" read-compiled23_0"
" readtable4_0"
" readtable18_0"
" recursive?5_0"
" recursive?19_0"
" source7_0"
" source21_0"
" wrap1_0"
" wrap15_0"
" in29_3)"
"(begin"
" 'read30"
"(let-values(((in_21) in29_3))"
"(let-values(((wrap_7)(if wrap15_0 wrap1_0 #f)))"
"(let-values(((init-c_6)(if init-c16_0 init-c2_0 #f)))"
"(let-values(((next-readtable_3)(if next-readtable17_0 next-readtable3_0(1/current-readtable))))"
"(let-values(((readtable_3)(if readtable18_0 readtable4_0 next-readtable_3)))"
"(let-values(((recursive?_0)(if recursive?19_0 recursive?5_0 #f)))"
"(let-values(((local-graph?_1)(if local-graph?20_0 local-graph?6_0 #f)))"
"(let-values(((source_8)(if source21_0 source7_0 #f)))"
"(let-values(((for-syntax?_9)(if for-syntax?22_0 for-syntax?8_0 #f)))"
"(let-values(((read-compiled_2)(if read-compiled23_0 read-compiled9_1 #f)))"
"(let-values(((dynamic-require_3)(if dynamic-require24_0 dynamic-require10_1 #f)))"
"(let-values(((module-declared?_2)(if module-declared?25_0 module-declared?11_1 #f)))"
"(let-values(((coerce_2)(if coerce26_0 coerce12_1 #f)))"
"(let-values(((coerce-key_2)(if coerce-key27_0 coerce-key13_1 #f)))"
"(let-values(((keep-comment?_3)"
"(if keep-comment?28_0 keep-comment?14_1 recursive?_0)))"
"(let-values()"
"(let-values(((config_54)"
"(let-values(((c1_29)(if recursive?_0(current-read-config) #f)))"
"(if c1_29"
"((lambda(config_55)"
"(let-values(((for-syntax?53_0) for-syntax?_9)"
"((wrap54_1) wrap_7)"
"((readtable55_0) readtable_3)"
"((next-readtable56_0) next-readtable_3)"
"((local-graph?57_0) local-graph?_1)"
"((keep-comment?58_0) keep-comment?_3))"
"(read-config-update42.1"
" for-syntax?53_0"
" keep-comment?58_0"
" next-readtable56_0"
" #t"
" readtable55_0"
" local-graph?57_0"
" wrap54_1"
" config_55)))"
" c1_29)"
"(let-values()"
"(let-values(((readtable59_0) readtable_3)"
"((next-readtable60_0) next-readtable_3)"
"((source61_0) source_8)"
"((for-syntax?62_0) for-syntax?_9)"
"((wrap63_0) wrap_7)"
"((read-compiled64_0) read-compiled_2)"
"((dynamic-require65_0) dynamic-require_3)"
"((module-declared?66_0) module-declared?_2)"
"((coerce67_0) coerce_2)"
"((coerce-key68_0) coerce-key_2)"
"((keep-comment?69_0) keep-comment?_3))"
"(make-read-config26.1"
" coerce67_0"
" #t"
" coerce-key68_0"
" #t"
" dynamic-require65_0"
" #t"
" for-syntax?62_0"
" #t"
" keep-comment?69_0"
" #t"
" module-declared?66_0"
" #t"
" next-readtable60_0"
" #t"
" read-compiled64_0"
" #t"
" readtable59_0"
" #t"
" source61_0"
" #t"
" wrap63_0"
" #t)))))))"
"(let-values(((v_133)(read-one init-c_6 in_21 config_54)))"
"(if(if(let-values(((or-part_347)(not recursive?_0)))"
"(if or-part_347 or-part_347 local-graph?_1))"
"(read-config-state-graph(read-config-st config_54))"
" #f)"
"(let-values()"
"(catch-and-reraise-as-reader/proc"
" #f"
" config_54"
"(lambda()(make-reader-graph v_133))))"
"(if(if recursive?_0"
"(if(not local-graph?_1)"
"(if(not for-syntax?_9)"
"(if(not(eof-object? v_133))(not(1/special-comment? v_133)) #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(begin(get-graph-hash config_54)(make-placeholder v_133)))"
"(let-values() v_133))))))))))))))))))))))))"
"(define-values"
"(read-language49.1)"
"(lambda(coerce38_0"
" coerce45_0"
" coerce-key39_0"
" coerce-key46_0"
" dynamic-require36_0"
" dynamic-require43_0"
" for-syntax?33_0"
" for-syntax?40_0"
" module-declared?37_0"
" module-declared?44_0"
" read-compiled35_0"
" read-compiled42_0"
" wrap34_0"
" wrap41_0"
" in47_0"
" fail-k48_0)"
"(begin"
" 'read-language49"
"(let-values(((in_58) in47_0))"
"(let-values(((fail-k_6) fail-k48_0))"
"(let-values(((for-syntax?_10)(if for-syntax?40_0 for-syntax?33_0 #f)))"
"(let-values(((wrap_8)(if wrap41_0 wrap34_0 #f)))"
"(let-values(((read-compiled_3)(if read-compiled42_0 read-compiled35_0 #f)))"
"(let-values(((dynamic-require_4)(if dynamic-require43_0 dynamic-require36_0 #f)))"
"(let-values(((module-declared?_3)(if module-declared?44_0 module-declared?37_0 #f)))"
"(let-values(((coerce_3)(if coerce45_0 coerce38_0 #f)))"
"(let-values(((coerce-key_3)(if coerce-key46_0 coerce-key39_0 #f)))"
"(let-values()"
"(let-values(((config_56)"
"(let-values(((temp70_2) #f)"
"((temp71_3) #f)"
"((for-syntax?72_0) for-syntax?_10)"
"((wrap73_0) wrap_8)"
"((read-compiled74_0) read-compiled_3)"
"((dynamic-require75_0) dynamic-require_4)"
"((module-declared?76_0) module-declared?_3)"
"((coerce77_0) coerce_3)"
"((coerce-key78_0) coerce-key_3))"
"(make-read-config26.1"
" coerce77_0"
" #t"
" coerce-key78_0"
" #t"
" dynamic-require75_0"
" #t"
" for-syntax?72_0"
" #t"
" #f"
" #f"
" module-declared?76_0"
" #t"
" temp71_3"
" #t"
" read-compiled74_0"
" #t"
" temp70_2"
" #t"
" #f"
" #f"
" wrap73_0"
" #t))))"
"(let-values(((l-config_1)(override-parameter 1/read-accept-reader config_56 #f)))"
"(read-language/get-info read-undotted in_58 config_56 fail-k_6))))))))))))))))"
"(define-values"
"(read-one)"
"(lambda(init-c_15 in_59 config_57)"
"(begin"
"(if(not(check-parameter 1/read-cdot config_57))"
"(let-values()(read-undotted init-c_15 in_59 config_57))"
"(if(check-parameter 1/read-cdot config_57)"
"(let-values()"
"(let-values(((line_10 col_9 pos_98)(port-next-location in_59)))"
"(let-values(((v_237)(read-undotted init-c_15 in_59 config_57)))"
"(if(1/special-comment? v_237)"
"(let-values() v_237)"
"(let-values()"
"((letrec-values(((loop_118)"
"(lambda(v_238)"
"(begin"
" 'loop"
"(let-values(((c_96)"
"(let-values(((in_60) in_59)"
"((skip-count_14) 0)"
"((source_42)(read-config-source config_57)))"
"(peek-char-or-special"
" in_60"
" skip-count_14"
" special1.1"
" source_42))))"
"(let-values(((ec_9)(effective-char c_96 config_57)))"
"(if(not(char? ec_9))"
"(let-values() v_238)"
"(if(char-whitespace? ec_9)"
"(let-values()(begin(consume-char in_59 c_96)(loop_118 v_238)))"
"(if(char=? ec_9 '#\\.)"
"(let-values()"
"(let-values(((dot-line_2 dot-col_2 dot-pos_5)"
"(port-next-location in_59)))"
"(let-values((()(begin(consume-char in_59 c_96)(values))))"
"(let-values(((cdot_0)"
"(wrap"
" '#%dot"
" in_59"
"(reading-at"
" config_57"
" dot-line_2"
" dot-col_2"
" dot-pos_5)"
" '#\\.)))"
"(let-values(((post-v_0)"
"(read-undotted #f in_59 config_57)))"
"(loop_118"
"(wrap"
"(list cdot_0 v_238 post-v_0)"
" in_59"
"(reading-at config_57 line_10 col_9 pos_98)"
" '#\\.)))))))"
"(let-values() v_238))))))))))"
" loop_118)"
" v_237))))))"
"(void))))))"
"(define-values"
"(read-undotted)"
"(lambda(init-c_16 in_61 config_58)"
"(begin"
"(let-values(((c_97)(read-char/skip-whitespace-and-comments init-c_16 read-one in_61 config_58)))"
"(let-values(((line_11 col_10 pos_117)(port-next-location* in_61 c_97)))"
"(if(eof-object? c_97)"
"(let-values() eof)"
"(if(not(char? c_97))"
"(let-values()"
"(let-values(((v_239)(special-value c_97)))"
"(if(1/special-comment? v_239)"
"(let-values()(if(read-config-keep-comment? config_58) v_239(read-undotted #f in_61 config_58)))"
"(let-values()(coerce v_239 in_61(reading-at config_58 line_11 col_10 pos_117))))))"
"(let-values(((c2_7)(readtable-handler config_58 c_97)))"
"(if c2_7"
"((lambda(handler_3)"
"(let-values(((v_240)(readtable-apply handler_3 c_97 in_61 config_58 line_11 col_10 pos_117)))"
"(retry-special-comment v_240 in_61 config_58)))"
" c2_7)"
"(let-values()"
"(let-values(((ec_10)(effective-char c_97 config_58)))"
"(let-values((()"
"(begin"
"(if(not(char-closer? ec_10 config_58))"
"(let-values()(track-indentation! config_58 line_11 col_10))"
"(void))"
"(values))))"
"(let-values(((r-config_0)(reading-at(discard-comment config_58) line_11 col_10 pos_117)))"
"(let-values(((tmp_55) ec_10))"
"(let-values(((index_4)"
"(if(char? tmp_55)"
"(let-values(((codepoint_2)(char->integer tmp_55)))"
"(if(if(unsafe-fx>= codepoint_2 34)(unsafe-fx< codepoint_2 126) #f)"
"(if(unsafe-fx< codepoint_2 91)"
"(if(unsafe-fx< codepoint_2 40)"
"(let-values(((tbl_2) '#(11 1 0 0 0 2)))"
"(unsafe-vector*-ref tbl_2(unsafe-fx- codepoint_2 34)))"
"(if(unsafe-fx< codepoint_2 42)"
"(let-values(((tbl_3) '#(5 6)))"
"(unsafe-vector*-ref tbl_3(unsafe-fx- codepoint_2 40)))"
"(if(unsafe-fx< codepoint_2 44)"
" 0"
"(if(unsafe-fx< codepoint_2 45) 4 0))))"
"(let-values(((tbl_4)"
" '#(7"
" 0"
" 8"
" 0"
" 0"
" 3"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 9"
" 12"
" 10)))"
"(unsafe-vector*-ref tbl_4(unsafe-fx- codepoint_2 91))))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_4 6)"
"(if(unsafe-fx< index_4 2)"
"(if(unsafe-fx< index_4 1)"
"(let-values()"
"(let-values(((v_141)"
"(let-values(((temp82_4)"
"(if(let-values(((or-part_351)(eq? c_97 ec_10)))"
"(if or-part_351"
" or-part_351"
"(if(<(char->integer ec_10) 128)"
"(char-numeric? ec_10)"
" #f)))"
" 'symbol-or-number"
" 'symbol/indirect)))"
"(read-symbol-or-number8.1"
" #f"
" #f"
" temp82_4"
" #t"
" c_97"
" in_61"
" r-config_0))))"
"(retry-special-comment v_141 in_61 config_58)))"
"(let-values()(read-dispatch c_97 in_61 r-config_0 config_58)))"
"(if(unsafe-fx< index_4 3)"
"                                    (let-values () (read-quote read-one 'quote \"quoting '\" c_97 in_61 r-config_0))"
"(if(unsafe-fx< index_4 4)"
"(let-values()"
"(if(check-parameter 1/read-accept-quasiquote config_58)"
"(let-values()"
"                                            (read-quote read-one 'quasiquote \"quasiquoting `\" c_97 in_61 r-config_0))"
"(let-values()"
"(let-values(((in83_0) in_61)"
"((r-config84_0) r-config_0)"
"                                                         ((temp85_1) \"illegal use of `~a`\")"
"((c86_0) c_97))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in83_0"
" r-config84_0"
" temp85_1"
"(list c86_0))))))"
"(if(unsafe-fx< index_4 5)"
"(let-values()"
"(if(check-parameter 1/read-accept-quasiquote config_58)"
"(let-values()"
"(let-values(((c2_8)"
"(let-values(((in_62) in_61)"
"((skip-count_15) 0)"
"((source_43)(read-config-source config_58)))"
"(peek-char-or-special"
" in_62"
" skip-count_15"
" special1.1"
" source_43))))"
"(if(eqv? c2_8 '#\\@)"
"(begin"
"(consume-char in_61 c2_8)"
"(read-quote"
" read-one"
" 'unquote-splicing"
"                                                     \"unquoting ,@\""
" c_97"
" in_61"
" r-config_0))"
"                                                  (read-quote read-one 'unquote \"unquoting ,\" c_97 in_61 r-config_0))))"
"(let-values()"
"(let-values(((in87_0) in_61)"
"((r-config88_0) r-config_0)"
"                                                           ((temp89_5) \"illegal use of `~a`\")"
"((c90_0) c_97))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in87_0"
" r-config88_0"
" temp89_5"
"(list c90_0))))))"
"(let-values()"
"(wrap"
"(let-values(((temp93_4) '#\\()"
"((temp94_3) '#\\))"
"((in95_0) in_61)"
"((r-config96_0) r-config_0)"
"((temp97_4) #t))"
"(read-unwrapped-sequence17.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp97_4"
" #t"
" #f"
" #f"
" read-one"
" ec_10"
" temp93_4"
" temp94_3"
" in95_0"
" r-config96_0))"
" in_61"
" r-config_0"
" ec_10))))))"
"(if(unsafe-fx< index_4 9)"
"(if(unsafe-fx< index_4 7)"
"(let-values()"
"(let-values(((in98_0) in_61)"
"((r-config99_0) r-config_0)"
"                                                   ((temp100_2) \"~a\")"
"((temp101_3)"
"(indentation-unexpected-closer-message ec_10 c_97 r-config_0)))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in98_0"
" r-config99_0"
" temp100_2"
"(list temp101_3))))"
"(if(unsafe-fx< index_4 8)"
"(let-values()"
"(if(let-values(((or-part_352)"
"(check-parameter 1/read-square-bracket-as-paren config_58)))"
"(if or-part_352"
" or-part_352"
"(check-parameter 1/read-square-bracket-with-tag config_58)))"
"(let-values()"
"(wrap"
"(let-values(((temp104_3) '#\\[)"
"((temp105_3) '#\\])"
"((in106_0) in_61)"
"((r-config107_0) r-config_0)"
"((temp108_4) #t))"
"(read-unwrapped-sequence17.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp108_4"
" #t"
" #f"
" #f"
" read-one"
" ec_10"
" temp104_3"
" temp105_3"
" in106_0"
" r-config107_0))"
" in_61"
" r-config_0"
" ec_10))"
"(let-values()"
"(let-values(((in109_0) in_61)"
"((r-config110_0) r-config_0)"
"                                                         ((temp111_2) \"illegal use of `~a`\")"
"((c112_0) c_97))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in109_0"
" r-config110_0"
" temp111_2"
"(list c112_0))))))"
"(let-values()"
"(if(let-values(((or-part_353)"
"(check-parameter 1/read-square-bracket-as-paren config_58)))"
"(if or-part_353"
" or-part_353"
"(check-parameter 1/read-square-bracket-with-tag config_58)))"
"(let-values()"
"(let-values(((in113_0) in_61)"
"((r-config114_0) r-config_0)"
"                                                         ((temp115_1) \"~a\")"
"((temp116_2)"
"(indentation-unexpected-closer-message"
" ec_10"
" c_97"
" r-config_0)))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in113_0"
" r-config114_0"
" temp115_1"
"(list temp116_2))))"
"(let-values()"
"(let-values(((in117_0) in_61)"
"((r-config118_0) r-config_0)"
"                                                         ((temp119_0) \"illegal use of `~a`\")"
"((c120_0) c_97))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in117_0"
" r-config118_0"
" temp119_0"
"(list c120_0))))))))"
"(if(unsafe-fx< index_4 10)"
"(let-values()"
"(if(let-values(((or-part_354)"
"(check-parameter 1/read-curly-brace-as-paren config_58)))"
"(if or-part_354"
" or-part_354"
"(check-parameter 1/read-curly-brace-with-tag config_58)))"
"(let-values()"
"(wrap"
"(let-values(((temp123_3) '#\\{)"
"((temp124_4) '#\\})"
"((in125_0) in_61)"
"((r-config126_0) r-config_0)"
"((temp127_4) #t))"
"(read-unwrapped-sequence17.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp127_4"
" #t"
" #f"
" #f"
" read-one"
" ec_10"
" temp123_3"
" temp124_4"
" in125_0"
" r-config126_0))"
" in_61"
" r-config_0"
" ec_10))"
"(let-values()"
"(let-values(((in128_0) in_61)"
"((r-config129_0) r-config_0)"
"                                                       ((temp130_3) \"illegal use of `~a`\")"
"((c131_0) c_97))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in128_0"
" r-config129_0"
" temp130_3"
"(list c131_0))))))"
"(if(unsafe-fx< index_4 11)"
"(let-values()"
"(if(let-values(((or-part_355)"
"(check-parameter 1/read-curly-brace-as-paren config_58)))"
"(if or-part_355"
" or-part_355"
"(check-parameter 1/read-curly-brace-with-tag config_58)))"
"(let-values()"
"(let-values(((in132_0) in_61)"
"((r-config133_0) r-config_0)"
"                                                         ((temp134_2) \"~a\")"
"((temp135_1)"
"(indentation-unexpected-closer-message"
" ec_10"
" c_97"
" r-config_0)))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in132_0"
" r-config133_0"
" temp134_2"
"(list temp135_1))))"
"(let-values()"
"(let-values(((in136_0) in_61)"
"((r-config137_0) r-config_0)"
"                                                         ((temp138_2) \"illegal use of `~a`\")"
"((c139_0) c_97))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in136_0"
" r-config137_0"
" temp138_2"
"(list c139_0))))))"
"(if(unsafe-fx< index_4 12)"
"(let-values()"
"(let-values(((in140_0) in_61)((r-config141_0) r-config_0))"
"(read-string5.1 #f #f in140_0 r-config141_0)))"
"(let-values()"
"(let-values(((temp145_1) 'symbol))"
"(read-symbol-or-number8.1"
" #f"
" #f"
" temp145_1"
" #t"
" c_97"
" in_61"
" r-config_0)))))))))))))))))))))))"
"(define-values"
"(read-dispatch)"
"(lambda(dispatch-c_5 in_63 config_59 orig-config_0)"
"(begin"
"(let-values(((c_98)"
"(let-values(((in_64) in_63)((source_44)(read-config-source config_59)))"
"(read-char-or-special in_64 special1.1 source_44))))"
"(if(eof-object? c_98)"
"(let-values()"
"            (let-values (((c148_0) c_98) ((temp149_0) \"bad syntax `~a`\") ((dispatch-c150_0) dispatch-c_5))"
"(reader-error10.1 #f #f c148_0 #t #f #f in_63 config_59 temp149_0(list dispatch-c150_0))))"
"(if(not(char? c_98))"
"(let-values()"
"              (let-values (((c153_0) c_98) ((temp154_1) \"bad syntax `~a`\") ((dispatch-c155_0) dispatch-c_5))"
"(reader-error10.1 #f #f c153_0 #t #f #f in_63 config_59 temp154_1(list dispatch-c155_0))))"
"(let-values(((c3_8)(readtable-dispatch-handler orig-config_0 c_98)))"
"(if c3_8"
"((lambda(handler_4)"
"(let-values(((line_12)(read-config-line config_59)))"
"(let-values(((col_11)(read-config-col config_59)))"
"(let-values(((pos_118)(read-config-pos config_59)))"
"(let-values(((v_144)(readtable-apply handler_4 c_98 in_63 config_59 line_12 col_11 pos_118)))"
"(retry-special-comment v_144 in_63 orig-config_0))))))"
" c3_8)"
"(let-values()"
"(let-values()"
"(let-values(((tmp_56) c_98))"
"(let-values(((index_5)"
"(if(char? tmp_56)"
"(let-values(((codepoint_3)(char->integer tmp_56)))"
"(if(if(unsafe-fx>= codepoint_3 33)(unsafe-fx< codepoint_3 127) #f)"
"(let-values(((tbl_5)"
" '#(34"
" 11"
" 0"
" 0"
" 13"
" 6"
" 7"
" 2"
" 0"
" 0"
" 0"
" 9"
" 0"
" 0"
" 0"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 14"
" 0"
" 12"
" 0"
" 0"
" 0"
" 0"
" 0"
" 22"
" 29"
" 25"
" 18"
" 16"
" 0"
" 30"
" 20"
" 0"
" 0"
" 0"
" 0"
" 0"
" 24"
" 0"
" 0"
" 0"
" 0"
" 15"
" 0"
" 0"
" 0"
" 28"
" 0"
" 0"
" 3"
" 10"
" 0"
" 0"
" 0"
" 8"
" 0"
" 26"
" 29"
" 21"
" 17"
" 16"
" 0"
" 30"
" 19"
" 0"
" 0"
" 33"
" 0"
" 0"
" 23"
" 32"
" 0"
" 31"
" 5"
" 15"
" 0"
" 0"
" 0"
" 27"
" 0"
" 0"
" 4"
" 0"
" 0"
" 35)))"
"(unsafe-vector*-ref tbl_5(unsafe-fx- codepoint_3 33)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_5 17)"
"(if(unsafe-fx< index_5 8)"
"(if(unsafe-fx< index_5 3)"
"(if(unsafe-fx< index_5 1)"
"(let-values()"
"(let-values(((in156_0) in_63)"
"((config157_0) config_59)"
"                                               ((temp158_1) \"bad syntax `~a~a`\")"
"((dispatch-c159_0) dispatch-c_5)"
"((c160_0) c_98))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in156_0"
" config157_0"
" temp158_1"
"(list dispatch-c159_0 c160_0))))"
"(if(unsafe-fx< index_5 2)"
"(let-values()(read-vector-or-graph read-one dispatch-c_5 c_98 in_63 config_59))"
"(let-values()"
"(let-values(((read-one161_0) read-one)"
"((temp162_2) '#\\()"
"((temp163_1) '#\\()"
"((temp164_0) '#\\))"
"((in165_0) in_63)"
"((config166_0) config_59))"
"(read-vector11.1"
" #f"
" #f"
" #f"
" #f"
" read-one161_0"
" temp162_2"
" temp163_1"
" temp164_0"
" in165_0"
" config166_0)))))"
"(if(unsafe-fx< index_5 5)"
"(if(unsafe-fx< index_5 4)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_59)"
"(let-values()"
"(let-values(((read-one167_0) read-one)"
"((temp168_0) '#\\[)"
"((temp169_0) '#\\[)"
"((temp170_2) '#\\])"
"((in171_0) in_63)"
"((config172_0) config_59))"
"(read-vector11.1"
" #f"
" #f"
" #f"
" #f"
" read-one167_0"
" temp168_0"
" temp169_0"
" temp170_2"
" in171_0"
" config172_0)))"
"(let-values()"
"(let-values(((in173_0) in_63)"
"((config174_0) config_59)"
"                                                     ((temp175_0) (format \"~a~a\" dispatch-c_5 c_98)))"
"(bad-syntax-error18.1 #f #f in173_0 config174_0 temp175_0)))))"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_59)"
"(let-values()"
"(let-values(((read-one176_0) read-one)"
"((temp177_0) '#\\{)"
"((temp178_0) '#\\{)"
"((temp179_0) '#\\})"
"((in180_0) in_63)"
"((config181_0) config_59))"
"(read-vector11.1"
" #f"
" #f"
" #f"
" #f"
" read-one176_0"
" temp177_0"
" temp178_0"
" temp179_0"
" in180_0"
" config181_0)))"
"(let-values()"
"(let-values(((in182_0) in_63)"
"((config183_0) config_59)"
"                                                     ((temp184_0) (format \"~a~a\" dispatch-c_5 c_98)))"
"(bad-syntax-error18.1 #f #f in182_0 config183_0 temp184_0))))))"
"(if(unsafe-fx< index_5 6)"
"(let-values()(read-struct read-one dispatch-c_5 in_63 config_59))"
"(if(unsafe-fx< index_5 7)"
"(let-values()(read-box read-one dispatch-c_5 in_63 config_59))"
"                                    (let-values () (read-quote read-one 'syntax \"quoting #'\" c_98 in_63 config_59))))))"
"(if(unsafe-fx< index_5 12)"
"(if(unsafe-fx< index_5 9)"
"(let-values()"
"                                  (read-quote read-one 'quasisyntax \"quasiquoting #`\" c_98 in_63 config_59))"
"(if(unsafe-fx< index_5 10)"
"(let-values()"
"(let-values(((c2_9)"
"(let-values(((in_65) in_63)"
"((skip-count_16) 0)"
"((source_45)(read-config-source config_59)))"
"(peek-char-or-special in_65 skip-count_16 special1.1 source_45))))"
"(if(eqv? c2_9 '#\\@)"
"(begin"
"(consume-char in_63 c2_9)"
"                                          (read-quote read-one 'unsyntax-splicing \"unquoting #,@\" c_98 in_63 config_59))"
"                                        (read-quote read-one 'unsyntax \"unquoting #,\" c_98 in_63 config_59))))"
"(if(unsafe-fx< index_5 11)"
"(let-values()(read-character in_63 config_59))"
"(let-values()"
"(let-values(((temp187_1) '|byte string|))"
"(read-string5.1 temp187_1 #t in_63 config_59))))))"
"(if(unsafe-fx< index_5 14)"
"(if(unsafe-fx< index_5 13)"
"(let-values()"
"(let-values(((c2_10)"
"(let-values(((in_66) in_63)"
"((skip-count_17) 0)"
"((source_46)(read-config-source config_59)))"
"(peek-char-or-special in_66 skip-count_17 special1.1 source_46))))"
"(if(eqv? '#\\< c2_10)"
"(let-values()"
"(begin(consume-char in_63 '#\\<)(read-here-string in_63 config_59)))"
"(let-values()"
"(let-values(((c2190_0) c2_10)"
"                                                       ((temp191_1) \"bad syntax `~a<`\")"
"((dispatch-c192_0) dispatch-c_5))"
"(reader-error10.1"
" #f"
" #f"
" c2190_0"
" #t"
" #f"
" #f"
" in_63"
" config_59"
" temp191_1"
"(list dispatch-c192_0)))))))"
"(let-values()"
"(let-values(((dispatch-c196_0) dispatch-c_5)((temp197_0) 'symbol))"
"(read-symbol-or-number8.1 dispatch-c196_0 #t temp197_0 #t c_98 in_63 config_59))))"
"(if(unsafe-fx< index_5 15)"
"(let-values()"
"(let-values(((temp198_0) #f)"
"((in199_0) in_63)"
"((config200_0) config_59)"
"((temp201_0) 'keyword))"
"(read-symbol-or-number8.1 #f #f temp201_0 #t temp198_0 in199_0 config200_0)))"
"(if(unsafe-fx< index_5 16)"
"(let-values()"
"(let-values(((c2_11)"
"(let-values(((in_67) in_63)"
"((skip-count_18) 0)"
"((source_47)(read-config-source config_59)))"
"(peek-char-or-special in_67 skip-count_18 special1.1 source_47))))"
"(if(char-delimiter? c2_11 config_59)"
"(let-values()(wrap #t in_63 config_59 c_98))"
"(let-values()"
"(read-delimited-constant"
" c_98"
"(char=? c_98 '#\\t)"
" '(#\\r #\\u #\\e)"
" #t"
" in_63"
" config_59)))))"
"(let-values()"
"(let-values(((c2_12)"
"(let-values(((in_68) in_63)"
"((skip-count_19) 0)"
"((source_48)(read-config-source config_59)))"
"(peek-char-or-special in_68 skip-count_19 special1.1 source_48))))"
"(if(char-delimiter? c2_12 config_59)"
"(let-values()(wrap #f in_63 config_59 c_98))"
"(if(let-values(((or-part_356)(char=? c2_12 '#\\x)))"
"(if or-part_356 or-part_356(char=? c2_12 '#\\l)))"
"(let-values()"
"(read-fixnum-or-flonum-vector"
" read-one"
" dispatch-c_5"
" c_98"
" c2_12"
" in_63"
" config_59))"
"(let-values()"
"(read-delimited-constant"
" c_98"
"(char=? c_98 '#\\f)"
" '(#\\a #\\l #\\s #\\e)"
" #f"
" in_63"
" config_59)))))))))))"
"(if(unsafe-fx< index_5 26)"
"(if(unsafe-fx< index_5 21)"
"(if(unsafe-fx< index_5 18)"
"(let-values()"
"(let-values(((temp202_0) #f)"
"((in203_0) in_63)"
"((config204_0) config_59)"
"                                               ((temp205_0) \"#e\"))"
"(read-symbol-or-number8.1 #f #f temp205_0 #t temp202_0 in203_0 config204_0)))"
"(if(unsafe-fx< index_5 19)"
"(let-values()"
"(let-values(((temp206_0) #f)"
"((in207_0) in_63)"
"((config208_0) config_59)"
"                                                 ((temp209_0) \"#E\"))"
"(read-symbol-or-number8.1 #f #f temp209_0 #t temp206_0 in207_0 config208_0)))"
"(if(unsafe-fx< index_5 20)"
"(let-values()"
"(let-values(((temp210_0) #f)"
"((in211_0) in_63)"
"((config212_0) config_59)"
"                                                   ((temp213_0) \"#i\"))"
"(read-symbol-or-number8.1 #f #f temp213_0 #t temp210_0 in211_0 config212_0)))"
"(let-values()"
"(let-values(((temp214_0) #f)"
"((in215_0) in_63)"
"((config216_0) config_59)"
"                                                   ((temp217_0) \"#I\"))"
"(read-symbol-or-number8.1 #f #f temp217_0 #t temp214_0 in215_0 config216_0))))))"
"(if(unsafe-fx< index_5 23)"
"(if(unsafe-fx< index_5 22)"
"(let-values()"
"(let-values(((temp218_0) #f)"
"((in219_0) in_63)"
"((config220_0) config_59)"
"                                                 ((temp221_1) \"#d\"))"
"(read-symbol-or-number8.1 #f #f temp221_1 #t temp218_0 in219_0 config220_0)))"
"(let-values()"
"(let-values(((temp222_0) #f)"
"((in223_0) in_63)"
"((config224_0) config_59)"
"                                                 ((temp225_1) \"#B\"))"
"(read-symbol-or-number8.1 #f #f temp225_1 #t temp222_0 in223_0 config224_0))))"
"(if(unsafe-fx< index_5 24)"
"(let-values()"
"(let-values(((temp226_1) #f)"
"((in227_0) in_63)"
"((config228_0) config_59)"
"                                                 ((temp229_1) \"#o\"))"
"(read-symbol-or-number8.1 #f #f temp229_1 #t temp226_1 in227_0 config228_0)))"
"(if(unsafe-fx< index_5 25)"
"(let-values()"
"(let-values(((temp230_0) #f)"
"((in231_0) in_63)"
"((config232_0) config_59)"
"                                                   ((temp233_1) \"#O\"))"
"(read-symbol-or-number8.1 #f #f temp233_1 #t temp230_0 in231_0 config232_0)))"
"(let-values()"
"(let-values(((temp234_0) #f)"
"((in235_0) in_63)"
"((config236_0) config_59)"
"                                                   ((temp237_1) \"#D\"))"
"(read-symbol-or-number8.1"
" #f"
" #f"
" temp237_1"
" #t"
" temp234_0"
" in235_0"
" config236_0)))))))"
"(if(unsafe-fx< index_5 30)"
"(if(unsafe-fx< index_5 27)"
"(let-values()"
"(let-values(((temp238_0) #f)"
"((in239_0) in_63)"
"((config240_0) config_59)"
"                                               ((temp241_1) \"#b\"))"
"(read-symbol-or-number8.1 #f #f temp241_1 #t temp238_0 in239_0 config240_0)))"
"(if(unsafe-fx< index_5 28)"
"(let-values()"
"(let-values(((temp242_0) #f)"
"((in243_0) in_63)"
"((config244_0) config_59)"
"                                                 ((temp245_0) \"#x\"))"
"(read-symbol-or-number8.1 #f #f temp245_0 #t temp242_0 in243_0 config244_0)))"
"(if(unsafe-fx< index_5 29)"
"(let-values()"
"(let-values(((temp246_0) #f)"
"((in247_0) in_63)"
"((config248_0) config_59)"
"                                                   ((temp249_0) \"#X\"))"
"(read-symbol-or-number8.1 #f #f temp249_0 #t temp246_0 in247_0 config248_0)))"
"(let-values()"
"(let-values(((c2_13)"
"(let-values(((in_69) in_63)"
"((source_49)(read-config-source config_59)))"
"(read-char-or-special in_69 special1.1 source_49))))"
"(let-values(((tmp_57) c2_13))"
"(if(if(equal? tmp_57 '#\\s) #t(equal? tmp_57 '#\\S))"
"(let-values()"
"(read-one #f in_63(override-parameter read-case-sensitive config_59 #t)))"
"(if(if(equal? tmp_57 '#\\i) #t(equal? tmp_57 '#\\I))"
"(let-values()"
"(read-one"
" #f"
" in_63"
"(override-parameter read-case-sensitive config_59 #f)))"
"(let-values()"
"(let-values(((c2252_0) c2_13)"
"                                                             ((temp253_0) \"expected `s', `S`, `i', or `I` after `~a~a`\")"
"((dispatch-c254_0) dispatch-c_5)"
"((c255_0) c_98))"
"(reader-error10.1"
" #f"
" #f"
" c2252_0"
" #t"
" #f"
" #f"
" in_63"
" config_59"
" temp253_0"
"(list dispatch-c254_0 c255_0))))))))))))"
"(if(unsafe-fx< index_5 32)"
"(if(unsafe-fx< index_5 31)"
"(let-values()(read-hash read-one dispatch-c_5 c_98 in_63 config_59))"
"(let-values()"
"(let-values(((accum-str_12)(accum-string-init! config_59)))"
"(let-values((()(begin(accum-string-add! accum-str_12 dispatch-c_5)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_12 c_98)(values))))"
"(let-values(((c2_14)"
"(let-values(((in_70) in_63)"
"((source_50)(read-config-source config_59)))"
"(read-char-or-special in_70 special1.1 source_50))))"
"(begin"
"(if(char? c2_14)"
"(let-values()(accum-string-add! accum-str_12 c2_14))"
"(void))"
"(let-values(((tmp_58) c2_14))"
"(if(equal? tmp_58 '#\\x)"
"(let-values()(read-regexp c_98 accum-str_12 in_63 config_59))"
"(if(equal? tmp_58 '#\\e)"
"(let-values()"
"(read-extension-reader"
" read-one"
" read-undotted"
" dispatch-c_5"
" in_63"
" config_59))"
"(let-values()"
"(let-values(((c2258_0) c2_14)"
"((temp259_0)"
"(let-values(((accum-str260_0) accum-str_12)"
"((config261_0) config_59))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str260_0"
" config261_0))))"
"(bad-syntax-error18.1"
" c2258_0"
" #t"
" in_63"
" config_59"
" temp259_0)))))))))))))"
"(if(unsafe-fx< index_5 33)"
"(let-values()"
"(let-values(((accum-str_13)(accum-string-init! config_59)))"
"(let-values((()(begin(accum-string-add! accum-str_13 dispatch-c_5)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_13 c_98)(values))))"
"(let-values(((c2_15)"
"(let-values(((in_71) in_63)"
"((source_51)(read-config-source config_59)))"
"(read-char-or-special in_71 special1.1 source_51))))"
"(begin"
"(if(char? c2_15)"
"(let-values()(accum-string-add! accum-str_13 c2_15))"
"(void))"
"(let-values(((tmp_59) c2_15))"
"(if(equal? tmp_59 '#\\x)"
"(let-values()(read-regexp c_98 accum-str_13 in_63 config_59))"
"(let-values()"
"(let-values(((c2264_0) c2_15)"
"((temp265_0)"
"(let-values(((accum-str266_0) accum-str_13)"
"((config267_0) config_59))"
"(accum-string-get!6.1"
" #f"
" #f"
" accum-str266_0"
" config267_0))))"
"(bad-syntax-error18.1"
" c2264_0"
" #t"
" in_63"
" config_59"
" temp265_0)))))))))))"
"(if(unsafe-fx< index_5 34)"
"(let-values()"
"(let-values(((read-undotted268_0) read-undotted)"
"((dispatch-c269_0) dispatch-c_5)"
"((in270_0) in_63)"
"((config271_0) config_59))"
"(read-extension-lang7.1"
" #f"
" #f"
" read-undotted268_0"
" dispatch-c269_0"
" in270_0"
" config271_0)))"
"(if(unsafe-fx< index_5 35)"
"(let-values()"
"(let-values(((read-undotted272_0) read-undotted)"
"((dispatch-c273_0) dispatch-c_5)"
"((in274_0) in_63)"
"((config275_0) config_59))"
"(read-extension-#!16.1"
" #f"
" #f"
" read-undotted272_0"
" dispatch-c273_0"
" in274_0"
" config275_0)))"
"(let-values()"
"(if(check-parameter 1/read-accept-compiled config_59)"
"(let-values()"
"(wrap((read-config-read-compiled config_59) in_63) in_63 config_59 c_98))"
"(let-values()"
"(let-values(((in276_0) in_63)"
"((config277_0) config_59)"
"                                                         ((temp278_0) \"`~a~~` compiled expressions not enabled\")"
"((dispatch-c279_0) dispatch-c_5))"
"(reader-error10.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" in276_0"
" config277_0"
" temp278_0"
"(list dispatch-c279_0)))))))))))))))))))))))))"
"(define-values"
"(retry-special-comment)"
"(lambda(v_241 in_72 config_60)"
"(begin"
"(if(1/special-comment? v_241)"
"(let-values()(if(read-config-keep-comment? config_60) v_241(read-undotted #f in_72 config_60)))"
"(let-values() v_241)))))"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?4_0)"
"(lambda(mod3_0 load?1_0 load?2_0)"
"(begin"
" 'module-declared?4"
"(let-values(((mod_4) mod3_0))"
"(let-values(((load?_3)(if load?2_0 load?1_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_4)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_4)))"
"(values))))"
"(let-values(((ns_110)(1/current-namespace)))"
"(let-values(((name_68)"
"(let-values(((load?36_0) load?_3))"
"(reference->resolved-module-path32.1 load?36_0 mod_4))))"
"(if(namespace->module ns_110 name_68) #t #f)))))))))))"
"(case-lambda"
"((mod_5)(begin 'module-declared?(module-declared?4_0 mod_5 #f #f)))"
"((mod_6 load?1_1)(module-declared?4_0 mod_6 load?1_1 #t)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_7)"
"(begin"
" 'module-predefined?"
"(let-values((()"
"(begin"
"(if(module-reference? mod_7)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_7)))"
"(values))))"
"(let-values(((ns_54)(1/current-namespace)))"
"(let-values(((name_0)(let-values(((temp38_2) #f))(reference->resolved-module-path32.1 temp38_2 mod_7))))"
"(let-values(((m_24)(namespace->module ns_54 name_0)))(if m_24(module-is-predefined? m_24) #f))))))))"
"(define-values"
"(module->)"
"(let-values(((module->11_0)"
"(lambda(extract8_0 who9_0 mod10_0 load?6_0 load?7_0)"
"(begin"
" 'module->11"
"(let-values(((extract_1) extract8_0))"
"(let-values(((who_29) who9_0))"
"(let-values(((mod_8) mod10_0))"
"(let-values(((load?_4)(if load?7_0 load?6_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_8)"
"(void)"
"(let-values()"
"(raise-argument-error who_29 module-reference-str mod_8)))"
"(values))))"
"(let-values(((m_25)"
"(namespace->module/complain"
" who_29"
"(1/current-namespace)"
"(let-values(((load?40_0) load?_4))"
"(reference->resolved-module-path32.1 load?40_0 mod_8)))))"
"(extract_1 m_25))))))))))))"
"(case-lambda"
"((extract_2 who_30 mod_9)(begin(module->11_0 extract_2 who_30 mod_9 #f #f)))"
"((extract_3 who_31 mod_10 load?6_1)(module->11_0 extract_3 who_31 mod_10 load?6_1 #t)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info16_0)"
"(lambda(mod15_0 load?13_0 load?14_0)"
"(begin"
" 'module->language-info16"
"(let-values(((mod_11) mod15_0))"
"(let-values(((load?_5)(if load?14_0 load?13_0 #f)))"
"(let-values()(module-> module-language-info 'module->language-info mod_11 load?_5))))))))"
"(case-lambda"
"((mod_12)(begin 'module->language-info(module->language-info16_0 mod_12 #f #f)))"
"((mod_13 load?13_1)(module->language-info16_0 mod_13 load?13_1 #t)))))"
"(define-values"
"(1/module->imports)"
"(lambda(mod_14)(begin 'module->imports(module-> module-requires 'module->imports mod_14))))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_15)"
"(begin"
" 'module->exports"
"(let-values(((provides_12 self_26)"
"(module->"
"(lambda(m_26)(values(module-provides m_26)(module-self m_26)))"
" 'module->exports"
" mod_15)))"
"(provides->api-provides provides_12 self_26)))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_16)"
"(begin"
" 'module->indirect-exports"
"(module->"
"(lambda(m_27)(variables->api-nonprovides(module-provides m_27)((module-get-all-variables m_27))))"
" 'module->indirect-exports"
" mod_16))))"
"(define-values"
"(1/module-provide-protected?)"
"(lambda(mod_17 sym_90)"
"(begin"
" 'module-provide-protected?"
"(module->"
"(lambda(m_28)"
"(let-values(((b/p_3)(hash-ref(module-provides m_28) sym_90 #f)))"
"(let-values(((or-part_168)(not b/p_3)))(if or-part_168 or-part_168(provided-as-protected? b/p_3)))))"
" 'module-provide-protected?"
" mod_17))))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace21_0)"
"(lambda(mod20_0 ns18_1 ns19_0)"
"(begin"
" 'module->namespace21"
"(let-values(((mod_18) mod20_0))"
"(let-values(((ns_111)(if ns19_0 ns18_1(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_18)"
"(void)"
"(let-values()"
"(raise-argument-error 'module->namespace module-reference-str mod_18)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_111)"
"(void)"
"(let-values()"
"                                                (raise-argument-error 'module->namespace \"namespace?\" ns_111)))"
"(values))))"
"(let-values(((name_41)"
"(let-values(((temp45_1) #t))"
"(reference->resolved-module-path32.1 temp45_1 mod_18))))"
"(let-values(((phase_94)(namespace-phase ns_111)))"
"(let-values(((m-ns_17)"
"(let-values(((ns46_0) ns_111)"
"((name47_1) name_41)"
"((phase48_0) phase_94))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns46_0"
" name47_1"
" phase48_0))))"
"(begin"
"(if m-ns_17"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_111 name_41)"
"(raise-arguments-error"
" 'module->namespace"
"                                             \"module not instantiated in the current namespace\""
"                                             \"name\""
" name_41))))"
"(if(inspector-superior?(current-code-inspector)(namespace-inspector m-ns_17))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                           \"current code inspector cannot access namespace of module\""
"                                           \"module name\""
" name_41)))"
"(if(namespace-get-root-expand-ctx m-ns_17)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_17"
"(let-values()(make-root-expand-context11.1 #f #f #f #f #f #f #f #f)))))"
"(let-values(((ns41_2) ns_111)"
"((temp42_4)(namespace-mpi m-ns_17))"
"((phase43_2) phase_94))"
"(namespace-module-make-available!112.1 #f #f ns41_2 temp42_4 phase43_2))"
" m-ns_17)))))))))))))"
"(case-lambda"
"((mod_19)(begin 'module->namespace(module->namespace21_0 mod_19 #f #f)))"
"((mod_20 ns18_2)(module->namespace21_0 mod_20 ns18_2 #t)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module27_0)"
"(lambda(insp25_0 mod26_0 ns23_0 ns24_1)"
"(begin"
" 'namespace-unprotect-module27"
"(let-values(((insp_18) insp25_0))"
"(let-values(((mod_21) mod26_0))"
"(let-values(((ns_112)(if ns24_1 ns23_0(1/current-namespace))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_18)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                 \"inspector?\""
" insp_18)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_21)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                   \"module-path?\""
" mod_21)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_112)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                     \"namespace?\""
" ns_112)))"
"(values))))"
"(let-values(((name_69)"
"(let-values(((temp50_4) #f))"
"(reference->resolved-module-path32.1 temp50_4 mod_21))))"
"(let-values(((phase_95)(namespace-phase ns_112)))"
"(let-values(((m-ns_18)"
"(let-values(((ns51_1) ns_112)"
"((name52_0) name_69)"
"((phase53_0) phase_95))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ns51_1"
" name52_0"
" phase53_0))))"
"(begin"
"(if m-ns_18"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                               \"module not instantiated\""
"                                               \"module name\""
" name_69)))"
"(if(inspector-superior? insp_18(namespace-inspector m-ns_18))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_18"
"(make-inspector(current-code-inspector))))"
"(void)))))))))))))))))"
"(case-lambda"
"((insp_12 mod_22)(begin 'namespace-unprotect-module(namespace-unprotect-module27_0 insp_12 mod_22 #f #f)))"
"((insp_19 mod_23 ns23_1)(namespace-unprotect-module27_0 insp_19 mod_23 ns23_1 #t)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_32 ns_113 name_62)"
"(begin"
"(let-values(((or-part_25)(namespace->module ns_113 name_62)))"
"(if or-part_25"
" or-part_25"
"          (raise-arguments-error who_32 \"unknown module in the current namespace\" \"name\" name_62))))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_24)"
"(begin"
"(let-values(((or-part_357)(1/module-path? mod_24)))"
"(if or-part_357"
" or-part_357"
"(let-values(((or-part_255)(1/module-path-index? mod_24)))"
"(if or-part_255 or-part_255(1/resolved-module-path? mod_24))))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(reference->resolved-module-path32.1)"
"(lambda(load?29_0 mod31_0)"
"(begin"
" 'reference->resolved-module-path32"
"(let-values(((mod_25) mod31_0))"
"(let-values(((load?_6) load?29_0))"
"(let-values()"
"(if(1/resolved-module-path? mod_25)"
"(let-values() mod_25)"
"(let-values()"
"(let-values(((mpi_46)(if(1/module-path-index? mod_25) mod_25(1/module-path-index-join mod_25 #f))))"
"(1/module-path-index-resolve mpi_46 load?_6))))))))))"
"(define-values"
"(read-syntax$1)"
"(lambda(src_0 in_73)"
"(begin"
" 'read-syntax"
"(if(default-read-handler? in_73)"
"(let-values()"
"(begin"
"(maybe-flush-stdout in_73)"
"(let-values(((temp24_11) #t)((src25_0) src_0))"
"(read*14.1 temp24_11 #f #f #f #f #f #f #f #f src25_0 #t in_73))))"
"(let-values()(values((port-read-handler in_73) in_73 src_0)))))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_1 in_49 start_42 readtable_4 graph?_1)"
"(begin"
" 'read-syntax/recursive"
"(let-values(((temp27_8) #t)"
"((temp28_4) #t)"
"((src29_0) src_1)"
"((start30_0) start_42)"
"((readtable31_1) readtable_4)"
"((temp32_4)(not graph?_1)))"
"(read*14.1 temp27_8 start30_0 #t temp32_4 #t readtable31_1 #t temp28_4 #t src29_0 #t in_49)))))"
"(define-values"
"(read$1)"
"(lambda(in_10)"
"(begin"
" 'read"
"(if(default-read-handler? in_10)"
"(let-values()"
"(begin"
"(maybe-flush-stdout in_10)"
"(let-values(((temp34_3) #f))(read*14.1 temp34_3 #f #f #f #f #f #f #f #f #f #f in_10))))"
"(let-values()(values((port-read-handler in_10) in_10)))))))"
"(define-values"
"(read/recursive$1)"
"(lambda(in_74 start_58 readtable_5 graph?_2)"
"(begin"
" 'read/recursive"
"(let-values(((temp36_6) #f)"
"((temp37_3) #t)"
"((start38_0) start_58)"
"((readtable39_0) readtable_5)"
"((temp40_3)(not graph?_2)))"
"(read*14.1 temp36_6 start38_0 #t temp40_3 #t readtable39_0 #t temp37_3 #t #f #f in_74)))))"
"(define-values"
"(read*14.1)"
"(lambda(for-syntax?1_0"
" init-c4_0"
" init-c10_0"
" local-graph?6_1"
" local-graph?12_0"
" readtable5_0"
" readtable11_0"
" recursive?2_0"
" recursive?8_0"
" source3_0"
" source9_0"
" in13_1)"
"(begin"
" 'read*14"
"(let-values(((in_14) in13_1))"
"(let-values(((for-syntax?_11) for-syntax?1_0))"
"(let-values(((recursive?_1)(if recursive?8_0 recursive?2_0 #f)))"
"(let-values(((source_34)(if source9_0 source3_0 #f)))"
"(let-values(((init-c_17)(if init-c10_0 init-c4_0 #f)))"
"(let-values(((readtable_6)(if readtable11_0 readtable5_0(1/current-readtable))))"
"(let-values(((local-graph?_2)(if local-graph?12_0 local-graph?6_1 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((for-syntax?42_0) for-syntax?_11)"
"((recursive?43_0) recursive?_1)"
"((source44_0) source_34)"
"((temp45_2)(if for-syntax?_11 read-to-syntax #f))"
"((init-c46_0) init-c_17)"
"((readtable47_0) readtable_6)"
"((local-graph?48_0) local-graph?_2)"
"((read-compiled-linklet49_0) 1/read-compiled-linklet)"
"((dynamic-require-reader50_0) dynamic-require-reader)"
"((read-module-declared?51_0) read-module-declared?)"
"((read-coerce52_0) read-coerce)"
"((read-coerce-key53_0) read-coerce-key))"
"(read30.1"
" read-coerce52_0"
" #t"
" read-coerce-key53_0"
" #t"
" dynamic-require-reader50_0"
" #t"
" for-syntax?42_0"
" #t"
" init-c46_0"
" #t"
" #f"
" #f"
" local-graph?48_0"
" #t"
" read-module-declared?51_0"
" #t"
" #f"
" #f"
" read-compiled-linklet49_0"
" #t"
" readtable47_0"
" #t"
" recursive?43_0"
" #t"
" source44_0"
" #t"
" temp45_2"
" #t"
" in_14))))))))))))))"
"(define-values"
"(read-language$1)"
"(lambda(in_75 fail-thunk_0)"
"(begin"
" 'read-language"
"(let-values(((temp56_1) #t)"
"((read-to-syntax57_0) read-to-syntax)"
"((read-compiled-linklet58_0) 1/read-compiled-linklet)"
"((dynamic-require-reader59_0) dynamic-require-reader)"
"((read-module-declared?60_0) read-module-declared?)"
"((read-coerce61_0) read-coerce)"
"((read-coerce-key62_0) read-coerce-key))"
"(read-language49.1"
" read-coerce61_0"
" #t"
" read-coerce-key62_0"
" #t"
" dynamic-require-reader59_0"
" #t"
" temp56_1"
" #t"
" read-module-declared?60_0"
" #t"
" read-compiled-linklet58_0"
" #t"
" read-to-syntax57_0"
" #t"
" in_75"
" fail-thunk_0)))))"
"(define-values"
"(read-to-syntax)"
"(lambda(s-exp_4 srcloc_10 rep_1)"
"(begin"
"(let-values(((the-struct_89) empty-syntax))"
"(if(syntax?$1 the-struct_89)"
"(let-values(((content63_0)(datum-intern-literal s-exp_4))"
"((srcloc64_0) srcloc_10)"
"((props65_0)"
"(let-values(((tmp_60) rep_1))"
"(if(equal? tmp_60 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_60 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content63_0"
"(syntax-scopes the-struct_89)"
"(syntax-shifted-multi-scopes the-struct_89)"
"(syntax-scope-propagations+tamper the-struct_89)"
"(syntax-mpi-shifts the-struct_89)"
" srcloc64_0"
" props65_0"
"(syntax-inspector the-struct_89)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_89))))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(define-values(read-module-declared?)(lambda(mod-path_29)(begin(1/module-declared? mod-path_29 #t))))"
"(define-values"
"(read-coerce)"
"(lambda(for-syntax?_12 v_242 srcloc_11)"
"(begin"
"(if(not for-syntax?_12)"
"(let-values()(if(syntax?$1 v_242)(let-values()(syntax->datum$1 v_242))(let-values() v_242)))"
"(let-values()(datum->syntax$1 #f v_242(if srcloc_11(to-srcloc-stx srcloc_11) #f)))))))"
"(define-values"
"(read-coerce-key)"
"(lambda(for-syntax?_13 k_41)"
"(begin(if for-syntax?_13(let-values()(datum-intern-literal k_41))(let-values() k_41)))))"
"(define-values(default-read-handler) #f)"
"(define-values"
"(default-read-handler?)"
"(lambda(in_76)"
"(begin"
"(if(not default-read-handler)"
"(let-values()(begin(set! default-read-handler(port-read-handler in_76)) #t))"
"(let-values()(eq? default-read-handler(port-read-handler in_76)))))))"
"(define-values(orig-input-port)(current-input-port))"
"(define-values(orig-output-port)(current-output-port))"
"(define-values(orig-error-port)(current-error-port))"
"(define-values"
"(maybe-flush-stdout)"
"(lambda(in_77)"
"(begin"
"(if(eq? in_77 orig-input-port)"
"(let-values()(begin(flush-output orig-output-port)(flush-output orig-error-port)))"
"(void)))))"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader21_0)"
"(lambda(mod-path19_0 sym20_0 fail-thunk17_0 fail-thunk18_0)"
"(begin"
" 'dynamic-require-reader21"
"(let-values(((mod-path_30) mod-path19_0))"
"(let-values(((sym_91) sym20_0))"
"(let-values(((fail-thunk_1)"
"(if fail-thunk18_0 fail-thunk17_0 default-dynamic-require-fail-thunk)))"
"(let-values()"
"(let-values(((root-ns_0)(namespace-root-namespace(1/current-namespace))))"
"(if root-ns_0"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_0)"
"(let-values()(1/dynamic-require mod-path_30 sym_91 fail-thunk_1)))"
"(1/dynamic-require mod-path_30 sym_91 fail-thunk_1)))))))))))"
"(case-lambda"
"((mod-path_31 sym_14)(begin(dynamic-require-reader21_0 mod-path_31 sym_14 #f #f)))"
"((mod-path_32 sym_92 fail-thunk17_1)(dynamic-require-reader21_0 mod-path_32 sym_92 fail-thunk17_1 #t)))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax5_0)"
"(lambda(src1_0 in2_0 src3_0 in4_2)"
"(begin"
" 'read-syntax5"
"(let-values(((src_0)(if src3_0 src1_0(object-name(current-input-port)))))"
"(let-values(((in_73)(if in4_2 in2_0(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_73)"
"(void)"
"                              (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_73)))"
"(read-syntax$1 src_0 in_73)))))))))"
"(case-lambda"
"(()(begin 'read-syntax(read-syntax5_0 #f #f #f #f)))"
"((src_2 in2_1)(read-syntax5_0 src_2 in2_1 #t #t))"
"((src1_1)(read-syntax5_0 src1_1 #f #t #f)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive17_0)"
"(lambda(src7_0"
" in8_1"
" start9_0"
" readtable10_0"
" graph?11_0"
" src12_0"
" in13_2"
" start14_0"
" readtable15_0"
" graph?16_0)"
"(begin"
" 'read-syntax/recursive17"
"(let-values(((src_3)(if src12_0 src7_0(object-name(current-input-port)))))"
"(let-values(((in_74)(if in13_2 in8_1(current-input-port))))"
"(let-values(((start_58)(if start14_0 start9_0 #f)))"
"(let-values(((readtable_5)(if readtable15_0 readtable10_0(1/current-readtable))))"
"(let-values(((graph?_2)(if graph?16_0 graph?11_0 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_74)"
"(void)"
"                                    (let-values () (raise-argument-error 'read-syntax/recursive \"input-port?\" in_74)))"
"(if(let-values(((or-part_259)(char? start_58)))"
"(if or-part_259 or-part_259(not start_58)))"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_58)))"
"(if(let-values(((or-part_160)(1/readtable? readtable_5)))"
"(if or-part_160 or-part_160(not readtable_5)))"
"(void)"
"(let-values()"
"                                      (raise-argument-error 'read-syntax/recursive \"(or/c readtable? #f)\" readtable_5)))"
"(read-syntax/recursive$1 src_3 in_74 start_58 readtable_5 graph?_2))))))))))))"
"(case-lambda"
"(()(begin 'read-syntax/recursive(read-syntax/recursive17_0 #f #f #f #f #f #f #f #f #f #f)))"
"((src_4 in_21 start_59 readtable_7 graph?11_1)"
"(read-syntax/recursive17_0 src_4 in_21 start_59 readtable_7 graph?11_1 #t #t #t #t #t))"
"((src_5 in_78 start_60 readtable10_1)"
"(read-syntax/recursive17_0 src_5 in_78 start_60 readtable10_1 #f #t #t #t #t #f))"
"((src_6 in_13 start9_1)(read-syntax/recursive17_0 src_6 in_13 start9_1 #f #f #t #t #t #f #f))"
"((src_7 in8_2)(read-syntax/recursive17_0 src_7 in8_2 #f #f #f #t #t #f #f #f))"
"((src7_1)(read-syntax/recursive17_0 src7_1 #f #f #f #f #t #f #f #f #f)))))"
"(define-values"
"(1/read)"
"(let-values(((read21_0)"
"(lambda(in19_0 in20_2)"
"(begin"
" 'read21"
"(let-values(((in_79)(if in20_2 in19_0(current-input-port))))"
"(let-values()"
"(begin"
"(if(input-port? in_79)"
"(void)"
"                            (let-values () (raise-argument-error 'read \"input-port?\" in_79)))"
"(read$1 in_79))))))))"
"(case-lambda(()(begin 'read(read21_0 #f #f)))((in19_1)(read21_0 in19_1 #t)))))"
"(define-values"
"(1/read/recursive)"
"(let-values(((read/recursive31_0)"
"(lambda(in23_1 start24_0 readtable25_0 graph?26_0 in27_2 start28_1 readtable29_0 graph?30_0)"
"(begin"
" 'read/recursive31"
"(let-values(((in_15)(if in27_2 in23_1(current-input-port))))"
"(let-values(((start_61)(if start28_1 start24_0 #f)))"
"(let-values(((readtable_8)(if readtable29_0 readtable25_0(1/current-readtable))))"
"(let-values(((graph?_3)(if graph?30_0 graph?26_0 #t)))"
"(let-values()"
"(begin"
"(if(input-port? in_15)"
"(void)"
"                                  (let-values () (raise-argument-error 'read/recursive \"input-port?\" in_15)))"
"(if(let-values(((or-part_168)(char? start_61)))"
"(if or-part_168 or-part_168(not start_61)))"
"(void)"
"                                  (let-values () (raise-argument-error 'read/recursive \"(or/c char? #f)\" start_61)))"
"(if(let-values(((or-part_169)(1/readtable? readtable_8)))"
"(if or-part_169 or-part_169(not readtable_8)))"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'read/recursive \"(or/c readtable? #f)\" readtable_8)))"
"(read/recursive$1 in_15 start_61 readtable_8 graph?_3)))))))))))"
"(case-lambda"
"(()(begin 'read/recursive(read/recursive31_0 #f #f #f #f #f #f #f #f)))"
"((in_16 start_62 readtable_9 graph?26_1)(read/recursive31_0 in_16 start_62 readtable_9 graph?26_1 #t #t #t #t))"
"((in_34 start_63 readtable25_1)(read/recursive31_0 in_34 start_63 readtable25_1 #f #t #t #t #f))"
"((in_80 start24_1)(read/recursive31_0 in_80 start24_1 #f #f #t #t #f #f))"
"((in23_2)(read/recursive31_0 in23_2 #f #f #f #t #f #f #f)))))"
"(define-values"
"(1/read-language)"
"(let-values(((read-language37_0)"
"(lambda(in33_1 fail-thunk34_0 in35_0 fail-thunk36_0)"
"(begin"
" 'read-language37"
"(let-values(((in_7)(if in35_0 in33_1(current-input-port))))"
"(let-values(((fail-thunk_2)(if fail-thunk36_0 fail-thunk34_0 read-language-fail-thunk)))"
"(let-values()"
"(begin"
"(if(input-port? in_7)"
"(void)"
"                              (let-values () (raise-argument-error 'read-language \"input-port?\" in_7)))"
"(if(if(procedure? fail-thunk_2)(procedure-arity-includes? fail-thunk_2 0) #f)"
"(void)"
"(let-values()"
"                                (raise-argument-error 'read-language \"(procedure-arity-includes?/c 0)\" fail-thunk_2)))"
"(read-language$1"
" in_7"
"(if(eq? fail-thunk_2 read-language-fail-thunk) #f fail-thunk_2))))))))))"
"(case-lambda"
"(()(begin 'read-language(read-language37_0 #f #f #f #f)))"
"((in_81 fail-thunk34_1)(read-language37_0 in_81 fail-thunk34_1 #t #t))"
"((in33_2)(read-language37_0 in33_2 #f #t #f)))))"
" (define-values (read-language-fail-thunk) (lambda () (begin (error \"fail\"))))"
"(define-values"
"(eval$1)"
"(case-lambda"
"((s_0)(begin 'eval((1/current-eval)(intro s_0))))"
"((s_157 ns_58)"
"(begin"
"      (if (1/namespace? ns_58) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_58)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_58)"
"(let-values()((1/current-eval)(intro s_157 ns_58))))))))"
"(define-values"
"(1/eval-syntax)"
"(case-lambda"
"((s_1)"
"(begin"
" 'eval-syntax"
"(begin"
"        (if (syntax?$1 s_1) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_1)))"
"((1/current-eval) s_1))))"
"((s_169 ns_114)"
"(begin"
"      (if (syntax?$1 s_169) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_169)))"
"      (if (1/namespace? ns_114) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_114)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_114)"
"(let-values()((1/current-eval) s_169)))))))"
"(define-values(compile$1)(lambda(s_2)(begin 'compile((1/current-compile)(intro s_2) #f))))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_3)"
"(begin"
" 'compile-syntax"
"(begin"
"        (if (syntax?$1 s_3) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_3)))"
"((1/current-compile) s_3 #f)))))"
"(define-values(1/expand)(lambda(s_170)(begin 'expand(expand$1(intro s_170)(1/current-namespace) #t))))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_145)"
"(begin"
" 'expand-syntax"
"(begin"
"        (if (syntax?$1 s_145) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_145)))"
"(expand$1 s_145(1/current-namespace) #t)))))"
"(define-values(1/expand-once)(lambda(s_70)(begin 'expand-once(expand-once$1(intro s_70)))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_9)"
"(begin"
" 'expand-syntax-once"
"(begin"
"        (if (syntax?$1 s_9) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_9)))"
"(expand-once$1 s_9)))))"
"(define-values"
"(1/expand-to-top-form)"
"(lambda(s_466)(begin 'expand-to-top-form(expand-to-top-form$1(intro s_466)))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_422)"
"(begin"
" 'expand-syntax-to-top-form"
"(begin"
"        (if (syntax?$1 s_422) (void) (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_422)))"
"(expand-to-top-form$1 s_422)))))"
"(define-values"
"(intro)"
"(let-values(((intro4_0)"
"(lambda(given-s3_0 ns1_6 ns2_1)"
"(begin"
" 'intro4"
"(let-values(((given-s_1) given-s3_0))"
"(let-values(((ns_115)(if ns2_1 ns1_6(1/current-namespace))))"
"(let-values()"
"(let-values(((s_10)(if(syntax?$1 given-s_1) given-s_1(1/datum->syntax #f given-s_1))))"
"(1/namespace-syntax-introduce s_10 ns_115)))))))))"
"(case-lambda((given-s_2)(begin(intro4_0 given-s_2 #f #f)))((given-s_3 ns1_7)(intro4_0 given-s_3 ns1_7 #t)))))"
"(define-values"
"(declare-primitive-module!)"
"(lambda(name_70 inst_7 in-ns_0 protected_0 cross-phase-persistent?_3)"
"(begin"
"(let-values(((mpi_47)(1/module-path-index-join(list 'quote name_70) #f)))"
"(let-values(((in-ns1_0) in-ns_0)"
"((temp2_6)"
"(let-values(((temp4_6)(1/current-module-declare-source))"
"((cross-phase-persistent?5_0) cross-phase-persistent?_3)"
"((temp6_4)(zero?(hash-count protected_0)))"
"((mpi7_0) mpi_47)"
"((temp8_5)"
"(hasheqv"
" 0"
"(let-values(((lst_260)(1/instance-variable-names inst_7)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_260)))"
"((letrec-values(((for-loop_202)"
"(lambda(table_163 lst_94)"
"(begin"
" 'for-loop"
"(if(pair? lst_94)"
"(let-values(((sym_93)(unsafe-car lst_94))"
"((rest_45)(unsafe-cdr lst_94)))"
"(let-values(((table_204)"
"(let-values(((table_205) table_163))"
"(let-values(((table_164)"
"(let-values()"
"(let-values(((key_86"
" val_76)"
"(let-values()"
"(let-values(((binding_27)"
"(let-values(((mpi10_0)"
" mpi_47)"
"((temp11_5)"
" 0)"
"((sym12_0)"
" sym_93))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi10_0"
" temp11_5"
" sym12_0))))"
"(values"
" sym_93"
"(if(hash-ref"
" protected_0"
" sym_93"
" #f)"
"(provided1.1"
" binding_27"
" #t"
" #f)"
" binding_27))))))"
"(hash-set"
" table_205"
" key_86"
" val_76)))))"
"(values table_164)))))"
"(if(not #f)"
"(for-loop_202 table_204 rest_45)"
" table_204)))"
" table_163)))))"
" for-loop_202)"
" '#hash()"
" lst_260)))))"
"((temp9_5)"
"(lambda(data-box_5"
" ns_116"
" phase-shift_19"
" phase-level_21"
" self_27"
" bulk-binding-registry_18"
" insp_20)"
"(if(= 0 phase-level_21)"
"(let-values()"
"(begin"
"(let-values(((lst_302)(1/instance-variable-names inst_7)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_302)))"
"((letrec-values(((for-loop_220)"
"(lambda(lst_264)"
"(begin"
" 'for-loop"
"(if(pair? lst_264)"
"(let-values(((sym_94)(unsafe-car lst_264))"
"((rest_174)(unsafe-cdr lst_264)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((val_77)"
"(1/instance-variable-value"
" inst_7"
" sym_94)))"
"(namespace-set-variable!"
" ns_116"
" 0"
" sym_94"
" val_77)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_220 rest_174)"
"(values))))"
"(values))))))"
" for-loop_220)"
" lst_302)))"
"(void)))"
"(void)))))"
"(make-module39.1"
" cross-phase-persistent?5_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp9_5"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp6_4"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp8_5"
" #f"
" #f"
" mpi7_0"
" temp4_6"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp3_9)(substitute-module-declare-name name_70)))"
"(declare-module!58.1 #f #f in-ns1_0 temp2_6 temp3_9))))))"
"(define-values"
"(1/prop:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_27 info_6)"
"(begin"
"(if(if(procedure? v_27)(procedure-arity-includes? v_27 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:missing-module \"(procedure-arity-includes/c 1)\" v_27)))"
" v_27))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" 1/make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_77 make-_77 ?_77 -ref_77 -set!_77)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list"
"(cons 1/prop:missing-module(lambda(e_81)(1/exn:fail:filesystem:missing-module-path e_81))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))))"
"(values struct:_77 make-_77 ?_77(make-struct-field-accessor -ref_77 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" 1/make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_62 make-_62 ?_62 -ref_62 -set!_62)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list(cons 1/prop:missing-module(lambda(e_82)(1/exn:fail:syntax:missing-module-path e_82))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))))"
"(values struct:_62 make-_62 ?_62(make-struct-field-accessor -ref_62 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_180)"
"(begin"
"(if(let-values(((or-part_30)(not v_180)))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(1/module-path? v_180)))"
"(if or-part_31 or-part_31(if(syntax?$1 v_180)(1/module-path?(syntax->datum$1 v_180)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_180)))"
" v_180))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_71 filename_0 pre_0 rel_0 post_0 errstr_0)"
"(begin"
"(let-values(((path_11)(1/current-module-path-for-load)))"
"(if path_11"
"(let-values()"
"(begin"
"(if(syntax?$1 path_11)"
"(let-values()"
"(raise"
"(1/make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                      \"~a: cannot open module file\\n\""
"                      \"  module path: ~a\\n\""
"                      \"  path: ~a~a~a~a\\n\""
"                      \"  system error: ~a\")"
"(if(syntax-srcloc path_11)(srcloc->string(syntax-srcloc path_11)) name_71)"
"(syntax->datum$1 path_11)"
" filename_0"
" pre_0"
" rel_0"
" post_0"
" errstr_0)"
"(current-continuation-marks)"
"(list path_11)"
"(syntax->datum$1 path_11))))"
"(void))"
"(raise"
"(1/make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                  \"~a: cannot open module file\\n\""
"                  \"  module path: ~a\\n\""
"                  \"  path: ~a~a~a~a\\n\""
"                  \"  system error: ~a\")"
" name_71"
" path_11"
" filename_0"
" pre_0"
" rel_0"
" post_0"
" errstr_0)"
"(current-continuation-marks)"
" path_11))))"
"(void))))))"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand6_0)"
"(lambda(s3_2 context4_0 stop-ids5_0 intdefs1_0 intdefs2_0)"
"(begin"
" 'local-expand6"
"(let-values(((s_2) s3_2))"
"(let-values(((context_10) context4_0))"
"(let-values(((stop-ids_2) stop-ids5_0))"
"(let-values(((intdefs_3)(if intdefs2_0 intdefs1_0 #f)))"
"(let-values()"
"(let-values(((temp59_4) 'local-expand)"
"((s60_0) s_2)"
"((context61_0) context_10)"
"((stop-ids62_0) stop-ids_2)"
"((intdefs63_0) intdefs_3))"
"(do-local-expand56.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp59_4"
" s60_0"
" context61_0"
" stop-ids62_0"
" intdefs63_0"
" #t)))))))))))"
"(case-lambda"
"((s_171 context_1 stop-ids_3)(begin 'local-expand(local-expand6_0 s_171 context_1 stop-ids_3 #f #f)))"
"((s_147 context_11 stop-ids_4 intdefs1_1)(local-expand6_0 s_147 context_11 stop-ids_4 intdefs1_1 #t)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts15_0)"
"(lambda(s12_2 context13_0 stop-ids14_0 intdefs8_0 lift-key9_0 intdefs10_0 lift-key11_0)"
"(begin"
" 'local-expand/capture-lifts15"
"(let-values(((s_426) s12_2))"
"(let-values(((context_12) context13_0))"
"(let-values(((stop-ids_5) stop-ids14_0))"
"(let-values(((intdefs_4)(if intdefs10_0 intdefs8_0 #f)))"
"(let-values(((lift-key_4)(if lift-key11_0 lift-key9_0(generate-lift-key))))"
"(let-values()"
"(let-values(((temp64_2) 'local-expand)"
"((s65_0) s_426)"
"((context66_0) context_12)"
"((stop-ids67_0) stop-ids_5)"
"((intdefs68_0) intdefs_4)"
"((temp69_4) #t)"
"((lift-key70_0) lift-key_4))"
"(do-local-expand56.1"
" #f"
" #f"
" temp69_4"
" #t"
" lift-key70_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp64_2"
" s65_0"
" context66_0"
" stop-ids67_0"
" intdefs68_0"
" #t))))))))))))"
"(case-lambda"
"((s_6 context_13 stop-ids_6)"
"(begin 'local-expand/capture-lifts(local-expand/capture-lifts15_0 s_6 context_13 stop-ids_6 #f #f #f #f)))"
"((s_183 context_14 stop-ids_7 intdefs_5 lift-key9_1)"
"(local-expand/capture-lifts15_0 s_183 context_14 stop-ids_7 intdefs_5 lift-key9_1 #t #t))"
"((s_184 context_15 stop-ids_8 intdefs8_1)"
"(local-expand/capture-lifts15_0 s_184 context_15 stop-ids_8 intdefs8_1 #f #t #f)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand22_0)"
"(lambda(s19_1 context20_0 stop-ids21_0 intdefs17_0 intdefs18_0)"
"(begin"
" 'local-transformer-expand22"
"(let-values(((s_162) s19_1))"
"(let-values(((context_16) context20_0))"
"(let-values(((stop-ids_9) stop-ids21_0))"
"(let-values(((intdefs_6)(if intdefs18_0 intdefs17_0 #f)))"
"(let-values()"
"(let-values(((temp71_4) 'local-expand)"
"((s72_0) s_162)"
"((context73_0) context_16)"
"((stop-ids74_0) stop-ids_9)"
"((intdefs75_0) intdefs_6)"
"((temp76_2) #t))"
"(do-local-expand56.1"
" temp76_2"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp71_4"
" s72_0"
" context73_0"
" stop-ids74_0"
" intdefs75_0"
" #t)))))))))))"
"(case-lambda"
"((s_181 context_17 stop-ids_10)"
"(begin 'local-transformer-expand(local-transformer-expand22_0 s_181 context_17 stop-ids_10 #f #f)))"
"((s_11 context_18 stop-ids_11 intdefs17_1)"
"(local-transformer-expand22_0 s_11 context_18 stop-ids_11 intdefs17_1 #t)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts31_0)"
"(lambda(s28_2 context29_0 stop-ids30_0 intdefs24_0 lift-key25_0 intdefs26_1 lift-key27_0)"
"(begin"
" 'local-transformer-expand/capture-lifts31"
"(let-values(((s_186) s28_2))"
"(let-values(((context_19) context29_0))"
"(let-values(((stop-ids_12) stop-ids30_0))"
"(let-values(((intdefs_7)(if intdefs26_1 intdefs24_0 #f)))"
"(let-values(((lift-key_0)(if lift-key27_0 lift-key25_0(generate-lift-key))))"
"(let-values()"
"(let-values(((temp77_2) 'local-expand)"
"((s78_0) s_186)"
"((context79_0) context_19)"
"((stop-ids80_0) stop-ids_12)"
"((intdefs81_0) intdefs_7)"
"((temp82_5) #t)"
"((temp83_3) #t)"
"((lift-key84_0) lift-key_0))"
"(do-local-expand56.1"
" temp82_5"
" #t"
" temp83_3"
" #t"
" lift-key84_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp77_2"
" s78_0"
" context79_0"
" stop-ids80_0"
" intdefs81_0"
" #t))))))))))))"
"(case-lambda"
"((s_305 context_20 stop-ids_13)"
"(begin"
" 'local-transformer-expand/capture-lifts"
"(local-transformer-expand/capture-lifts31_0 s_305 context_20 stop-ids_13 #f #f #f #f)))"
"((s_467 context_21 stop-ids_14 intdefs_8 lift-key25_1)"
"(local-transformer-expand/capture-lifts31_0 s_467 context_21 stop-ids_14 intdefs_8 lift-key25_1 #t #t))"
"((s_468 context_22 stop-ids_15 intdefs24_1)"
"(local-transformer-expand/capture-lifts31_0 s_468 context_22 stop-ids_15 intdefs24_1 #f #t #f)))))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(let-values(((syntax-local-expand-expression36_0)"
"(lambda(s35_0 opaque-only?33_0 opaque-only?34_0)"
"(begin"
" 'syntax-local-expand-expression36"
"(let-values(((s_458) s35_0))"
"(let-values(((opaque-only?_0)(if opaque-only?34_0 opaque-only?33_0 #f)))"
"(let-values()"
"(let-values(((exp-s_12)"
"(let-values(((temp85_2) 'syntax-local-expand-expression)"
"((s86_0) s_458)"
"((temp87_3) 'expression)"
"((null88_0) null)"
"((temp89_6) #f)"
"((opaque-only?90_0) opaque-only?_0)"
"((temp91_1) #t)"
"((temp92_2) #t))"
"(do-local-expand56.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp91_1"
" #t"
" opaque-only?90_0"
" #t"
" temp92_2"
" #t"
" temp85_2"
" s86_0"
" temp87_3"
" null88_0"
" temp89_6"
" #t))))"
"(let-values(((ctx_69)(let-values()(get-current-expand-context17.1 #f #f #f #f))))"
"(let-values(((ae_1)"
"(flip-introduction-scopes"
"(datum->syntax$1"
" #f"
"(already-expanded1.1"
"(if(parsed? exp-s_12)"
" exp-s_12"
"(flip-introduction-scopes exp-s_12 ctx_69))"
"(expand-context-binding-layer ctx_69)))"
" ctx_69)))"
"(begin"
"(let-values(((obs_31)(expand-context-observer ctx_69)))"
"(if obs_31"
"(let-values()(let-values()(call-expand-observe obs_31 'opaque-expr ae_1)))"
"(void)))"
"(let-values(((obs_49)(expand-context-observer ctx_69)))"
"(if obs_49"
"(let-values()(let-values()(call-expand-observe obs_49 'exit-local exp-s_12)))"
"(void)))"
"(values(if(not opaque-only?_0) exp-s_12 #f) ae_1))))))))))))"
"(case-lambda"
"((s_26)(begin 'syntax-local-expand-expression(syntax-local-expand-expression36_0 s_26 #f #f)))"
"((s_309 opaque-only?33_1)(syntax-local-expand-expression36_0 s_309 opaque-only?33_1 #t)))))"
"(define-values"
"(do-local-expand56.1)"
"(lambda(as-transformer?39_0"
" as-transformer?45_0"
" capture-lifts?38_0"
" capture-lifts?44_0"
" lift-key41_0"
" lift-key47_0"
" skip-log-exit?43_0"
" skip-log-exit?49_0"
" to-parsed-ok?40_0"
" to-parsed-ok?46_0"
" track-to-be-defined?42_0"
" track-to-be-defined?48_0"
" who52_1"
" s-or-s-exp53_0"
" context54_0"
" stop-ids55_0"
" intdefs50_0"
" intdefs51_0)"
"(begin"
" 'do-local-expand56"
"(let-values(((who_33) who52_1))"
"(let-values(((s-or-s-exp_0) s-or-s-exp53_0))"
"(let-values(((context_23) context54_0))"
"(let-values(((stop-ids_16) stop-ids55_0))"
"(let-values(((intdefs_9)(if intdefs51_0 intdefs50_0 #f)))"
"(let-values(((capture-lifts?_0)(if capture-lifts?44_0 capture-lifts?38_0 #f)))"
"(let-values(((as-transformer?_5)(if as-transformer?45_0 as-transformer?39_0 #f)))"
"(let-values(((to-parsed-ok?_1)(if to-parsed-ok?46_0 to-parsed-ok?40_0 #f)))"
"(let-values(((lift-key_5)"
"(if lift-key47_0"
" lift-key41_0"
"(if(let-values(((or-part_45) capture-lifts?_0))"
"(if or-part_45 or-part_45 as-transformer?_5))"
"(generate-lift-key)"
" #f))))"
"(let-values(((track-to-be-defined?_1)"
"(if track-to-be-defined?48_0 track-to-be-defined?42_0 #f)))"
"(let-values(((skip-log-exit?_0)(if skip-log-exit?49_0 skip-log-exit?43_0 #f)))"
"(let-values()"
"(let-values()"
"(let-values(((s_311)(datum->syntax$1 #f s-or-s-exp_0)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_358)(list? context_23)))"
"(if or-part_358"
" or-part_358"
"(memq"
" context_23"
"(if as-transformer?_5"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_33"
"(if as-transformer?_5"
"                                                         \"(or/c 'expression 'top-level list?)\""
"                                                         \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_23)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_359)(not stop-ids_16)))"
"(if or-part_359"
" or-part_359"
"(if(list? stop-ids_16)"
"(andmap2 identifier? stop-ids_16)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_33"
"                                                         \"(or/c (listof identifier?) #f)\""
" stop-ids_16)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_360)(not intdefs_9)))"
"(if or-part_360"
" or-part_360"
"(let-values(((or-part_361)"
"(1/internal-definition-context? intdefs_9)))"
"(if or-part_361"
" or-part_361"
"(if(list? intdefs_9)"
"(andmap2 1/internal-definition-context? intdefs_9)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_33"
"                                                           \"(or/c #f internal-definitionc-context? (listof internal-definitionc-context?))\""
" intdefs_9)))"
"(values))))"
"(let-values(((ctx_70)"
"(let-values(((who93_0) who_33))"
"(get-current-expand-context17.1 #f #f who93_0 #t))))"
"(let-values(((phase_25)"
"(if as-transformer?_5"
"(add1(expand-context-phase ctx_70))"
"(expand-context-phase ctx_70))))"
"(let-values(((local-ctx_0)"
"(let-values(((context95_0) context_23)"
"((phase96_0) phase_25)"
"((intdefs97_0) intdefs_9)"
"((stop-ids98_0) stop-ids_16)"
"((to-parsed-ok?99_0) to-parsed-ok?_1)"
"((track-to-be-defined?100_0)"
" track-to-be-defined?_1))"
"(make-local-expand-context37.1"
" context95_0"
" intdefs97_0"
" phase96_0"
" #t"
" stop-ids98_0"
" #t"
" to-parsed-ok?99_0"
" #t"
" track-to-be-defined?100_0"
" #t"
" ctx_70))))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
"(expand-context-namespace ctx_70)"
" phase_25)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_50)"
"(expand-context-observer local-ctx_0)))"
"(if obs_50"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_50"
" 'enter-local"
" s_311)))"
"(void)))"
"(values))))"
"(let-values(((input-s_1)"
"(let-values(((temp101_4)"
"(flip-introduction-scopes s_311 ctx_70))"
"((intdefs102_0) intdefs_9))"
"(add-intdef-scopes21.1"
" #f"
" #f"
" #f"
" #f"
" temp101_4"
" intdefs102_0))))"
"(let-values((()"
"(begin"
"(if as-transformer?_5"
"(let-values()"
"(let-values(((obs_51)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_51"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_51 'phase-up)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_52)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_52"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_52"
" 'local-pre"
" input-s_1)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if stop-ids_16"
"(let-values()"
"(let-values(((obs_53)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_53"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_53"
" 'start-expand)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((output-s_0)"
"(if(if as-transformer?_5 capture-lifts?_0 #f)"
"(let-values()"
"(let-values(((context105_0) context_23)"
"((temp106_4) #f)"
"((temp107_0) #t)"
"((lift-key108_0) lift-key_5)"
"((temp109_2) #t)"
"((temp110_6) #t))"
"(expand-transformer47.1"
" temp109_2"
" #t"
" temp107_0"
" #t"
" context105_0"
" #t"
" temp106_4"
" #t"
" temp110_6"
" #t"
" lift-key108_0"
" #t"
" input-s_1"
" local-ctx_0)))"
"(if as-transformer?_5"
"(let-values()"
"(let-values(((context113_0) context_23)"
"((temp114_3) #f)"
"((temp115_2)"
"(eq? 'top-level context_23))"
"((lift-key116_0) lift-key_5)"
"((temp117_4) #t))"
"(expand-transformer47.1"
" #f"
" #f"
" temp115_2"
" #t"
" context113_0"
" #t"
" temp114_3"
" #t"
" temp117_4"
" #t"
" lift-key116_0"
" #t"
" input-s_1"
" local-ctx_0)))"
"(if capture-lifts?_0"
"(let-values()"
"(let-values(((temp120_3) #t)"
"((lift-key121_0)"
" lift-key_5)"
"((temp122_3) #t))"
"(expand/capture-lifts30.1"
" temp122_3"
" #t"
" temp120_3"
" #t"
" #f"
" #f"
" lift-key121_0"
" #t"
" input-s_1"
" local-ctx_0)))"
"(let-values()"
"(let-values(((input-s123_0) input-s_1)"
"((local-ctx124_0)"
" local-ctx_0))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" input-s123_0"
" local-ctx124_0))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_54)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_54"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_54"
" 'local-post"
" output-s_0)))"
"(void)))"
"(values))))"
"(let-values(((result-s_8)"
"(if(parsed? output-s_0)"
" output-s_0"
"(flip-introduction-scopes"
" output-s_0"
" ctx_70))))"
"(begin"
"(if skip-log-exit?_0"
"(void)"
"(let-values()"
"(let-values(((obs_55)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_55"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_55"
" 'exit-local"
" result-s_8)))"
"(void)))))"
" result-s_8)))))))))))))))))))))))))))))))))"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_0)"
"(begin"
" 'syntax-tainted?"
"(begin"
"        (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_0)))"
"(syntax-tainted?$1 s_0)))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm6_0)"
"(lambda(s5_2 maybe-insp1_0 use-mode?2_0 maybe-insp3_0 use-mode?4_0)"
"(begin"
" 'syntax-arm6"
"(let-values(((s_3) s5_2))"
"(let-values(((maybe-insp_0)(if maybe-insp3_0 maybe-insp1_0 #f)))"
"(let-values(((use-mode?_0)(if use-mode?4_0 use-mode?2_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_3)"
"(void)"
"                                              (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_3)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_0)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-arm"
"                                                   \"(or/c inspector? #f)\""
" maybe-insp_0)))"
"(values))))"
"(let-values(((insp_21)(inspector-for-taint maybe-insp_0)))"
"(if use-mode?_0"
"(let-values()"
"(taint-dispatch"
" s_3"
"(lambda(s_466)(syntax-arm$1 s_466 insp_21))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_3 insp_21))))))))))))))"
"(case-lambda"
"((s_422)(begin 'syntax-arm(syntax-arm6_0 s_422 #f #f #f #f)))"
"((s_469 maybe-insp_1 use-mode?2_1)(syntax-arm6_0 s_469 maybe-insp_1 use-mode?2_1 #t #t))"
"((s_470 maybe-insp1_1)(syntax-arm6_0 s_470 maybe-insp1_1 #f #t #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_411 maybe-insp_2)"
"(begin"
" 'syntax-disarm"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_411)"
"(void)"
"                        (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_411)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_290)(not maybe-insp_2)))"
"(if or-part_290 or-part_290(inspector? maybe-insp_2)))"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_2)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_2)))(syntax-disarm$1 s_411 insp_22)))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm12_0)"
"(lambda(s10_0 from-s11_0 use-mode?8_0 use-mode?9_0)"
"(begin"
" 'syntax-rearm12"
"(let-values(((s_40) s10_0))"
"(let-values(((from-s_2) from-s11_0))"
"(let-values(((use-mode?_1)(if use-mode?9_0 use-mode?8_0 #f)))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_40)"
"(void)"
"                                (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_40)))"
"(if(syntax?$1 from-s_2)"
"(void)"
"                                (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" from-s_2)))"
"(if use-mode?_1"
"(let-values()"
"(taint-dispatch"
" s_40"
"(lambda(s_427)(syntax-rearm$1 s_427 from-s_2))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_40 from-s_2))))))))))))"
"(case-lambda"
"((s_182 from-s_3)(begin 'syntax-rearm(syntax-rearm12_0 s_182 from-s_3 #f #f)))"
"((s_174 from-s_4 use-mode?8_1)(syntax-rearm12_0 s_174 from-s_4 use-mode?8_1 #t)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_161)"
"(begin"
" 'syntax-taint"
"(begin"
"        (if (syntax?$1 s_161) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_161)))"
"(syntax-taint$1 s_161)))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_3)"
"(begin"
"(let-values(((or-part_83) maybe-insp_3))"
"(if or-part_83"
" or-part_83"
"(let-values(((or-part_84)(current-module-code-inspector)))"
"(if or-part_84 or-part_84(current-code-inspector))))))))"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_0)"
"(begin"
" 'variable-reference->empty-namespace"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"          (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_0)))"
"(let-values(((temp1_3)(1/variable-reference->namespace vr_0)))(new-namespace9.1 #f #f #f #f temp1_3 #t))))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_1)"
"(begin"
" 'variable-reference->namespace"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"(let-values()"
"                          (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_1)))"
"(values))))"
"(let-values(((inst_8)(1/variable-reference->instance vr_1)))"
"(if(symbol? inst_8)"
"(let-values()"
"(1/module->namespace(list 'quote inst_8)(1/instance-data(1/variable-reference->instance vr_1 #t))))"
"(if(not inst_8)"
"(let-values()(1/instance-data(1/variable-reference->instance vr_1 #t)))"
"(let-values()(1/instance-data inst_8)))))))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_2)"
"(begin"
" 'variable-reference->module-path-index"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_2)"
"(void)"
"(let-values()"
"                          (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_2)))"
"(values))))"
"(let-values(((mpi_47)(namespace-mpi(1/variable-reference->namespace vr_2))))"
"(if(top-level-module-path-index? mpi_47) #f mpi_47))))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_3)"
"(begin"
" 'variable-reference->resolved-module-path"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"(let-values()"
"                          (raise-argument-error 'variable-reference->resolved-module-path \"variable-reference?\" vr_3)))"
"(values))))"
"(let-values(((mpi_48)(1/variable-reference->module-path-index vr_3)))"
"(if mpi_48(1/module-path-index-resolve mpi_48) #f))))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_4)"
"(begin"
" 'variable-reference->module-source"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"                          (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_4)))"
"(values))))"
"(let-values(((ns_117)(1/variable-reference->namespace vr_4)))(namespace-source-name ns_117))))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_5)"
"(begin"
" 'variable-reference->phase"
"(begin"
"(if(1/variable-reference? vr_5)"
"(void)"
"          (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_5)))"
"(namespace-phase(1/variable-reference->namespace vr_5))))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_6)"
"(begin"
" 'variable-reference->module-base-phase"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"          (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_6)))"
"(namespace-0-phase(1/variable-reference->namespace vr_6))))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_7)"
"(begin"
" 'variable-reference->module-declaration-inspector"
"(begin"
"(if(1/variable-reference? vr_7)"
"(void)"
"(let-values()"
"            (raise-argument-error 'variable-reference->module-declaration-inspector \"variable-reference?\" vr_7)))"
"(if(1/variable-reference->instance vr_7)"
"(let-values()"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"             \"variable reference does not refer to an anonymous module variable\""
"             \"variable reference\""
" vr_7))"
"(void))"
"(let-values(((or-part_215)(namespace-declaration-inspector(1/variable-reference->namespace vr_7))))"
"(if or-part_215"
" or-part_215"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"             \"given variable reference is not from a module\")))))))"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'struct:exn:fail:syntax"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'struct:exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'struct:exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'struct:exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector"
" 'read-syntax"
" 'read-syntax/recursive))"
"(void"
"(begin"
"(add-core-primitive! 'syntax? syntax?$1)"
"(add-core-primitive! 'syntax-e 1/syntax-e)"
"(add-core-primitive! 'syntax->datum 1/syntax->datum)"
"(add-core-primitive! 'datum->syntax 1/datum->syntax)"
"(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)"
"(add-core-primitive! 'free-identifier=? 1/free-identifier=?)"
"(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?)"
"(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?)"
"(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)"
"(add-core-primitive! 'identifier-binding 1/identifier-binding)"
"(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding)"
"(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding)"
"(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)"
"(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol)"
"(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context)"
"(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)"
"(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)"
"(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)"
"(add-core-primitive! 'syntax-source-module 1/syntax-source-module)"
"(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module)"
"(add-core-primitive! 'syntax-source 1/syntax-source)"
"(add-core-primitive! 'syntax-line 1/syntax-line)"
"(add-core-primitive! 'syntax-column 1/syntax-column)"
"(add-core-primitive! 'syntax-position 1/syntax-position)"
"(add-core-primitive! 'syntax-span 1/syntax-span)"
"(add-core-primitive! 'syntax->list 1/syntax->list)"
"(add-core-primitive! 'syntax-property syntax-property$1)"
"(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?)"
"(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys)"
"(add-core-primitive! 'syntax-original? 1/syntax-original?)"
"(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)"
"(add-core-primitive! 'syntax-arm 1/syntax-arm)"
"(add-core-primitive! 'syntax-disarm 1/syntax-disarm)"
"(add-core-primitive! 'syntax-rearm 1/syntax-rearm)"
"(add-core-primitive! 'syntax-taint 1/syntax-taint)"
"(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)"
"(add-core-primitive! 'struct:exn:fail:syntax 1/struct:exn:fail:syntax)"
"(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax$1)"
"(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax$1)"
"(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)"
"(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)"
"(add-core-primitive! 'struct:exn:fail:syntax:unbound 1/struct:exn:fail:syntax:unbound)"
"(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1)"
"(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1)"
"(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)"
"(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load)"
"(add-core-primitive! 'prop:missing-module 1/prop:missing-module)"
"(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)"
"(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor)"
"(add-core-primitive! 'struct:exn:fail:filesystem:missing-module 1/struct:exn:fail:filesystem:missing-module)"
"(add-core-primitive! 'exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module)"
"(add-core-primitive! 'make-exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module)"
"(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?)"
"(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path)"
"(add-core-primitive! 'struct:exn:fail:syntax:missing-module 1/struct:exn:fail:syntax:missing-module)"
"(add-core-primitive! 'exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module)"
"(add-core-primitive! 'make-exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module)"
"(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?)"
"(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path)"
"(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)"
"(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?)"
"(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?)"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?)"
"(add-core-primitive! 'syntax-local-context 1/syntax-local-context)"
"(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)"
"(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding)"
"(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)"
"(add-core-primitive! 'syntax-local-name 1/syntax-local-name)"
"(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)"
"(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer)"
"(add-core-primitive! 'syntax-local-value 1/syntax-local-value)"
"(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate)"
"(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression)"
"(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression)"
"(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context)"
"(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)"
"(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require)"
"(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide)"
"(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration)"
"(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers)"
"(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers)"
"(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports)"
"(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)"
"(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower)"
"(add-core-primitive! 'local-expand 1/local-expand)"
"(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts)"
"(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)"
"(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts)"
"(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression)"
"(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?)"
"(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context)"
"(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes)"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers)"
"(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce)"
"(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal)"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context)"
"(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)"
"(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)"
"(add-core-primitive! 'set!-transformer? 1/set!-transformer?)"
"(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure)"
"(add-core-primitive! 'rename-transformer? 1/rename-transformer?)"
"(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)"
"(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)"
"(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target)"
"(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context)"
"(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?)"
"(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)"
"(add-core-primitive! 'module-path? 1/module-path?)"
"(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)"
"(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path)"
"(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name)"
"(add-core-primitive! 'module-path-index? 1/module-path-index?)"
"(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve)"
"(add-core-primitive! 'module-path-index-join 1/module-path-index-join)"
"(add-core-primitive! 'module-path-index-split 1/module-path-index-split)"
"(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule)"
"(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver)"
"(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name)"
"(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source)"
"(add-core-primitive! 'current-namespace 1/current-namespace)"
"(add-core-primitive! 'namespace-module-registry 1/namespace-module-registry)"
"(add-core-primitive! 'namespace? 1/namespace?)"
"(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace)"
"(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace)"
"(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path)"
"(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index)"
"(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source)"
"(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase)"
"(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase)"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector)"
"(add-core-primitive! 'read-syntax 1/read-syntax)"
"(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)))"
"(define-values"
"(declare-kernel-module!8.1)"
"(lambda(eval1_0 main-ids2_0 read-ids3_0 ns7_1)"
"(begin"
" 'declare-kernel-module!8"
"(let-values(((ns_85) ns7_1))"
"(let-values()"
"(let-values(((main-ids_0) main-ids2_0))"
"(let-values(((read-ids_0) read-ids3_0))"
"(let-values()"
"(begin"
"(let-values(((temp53_5) '#%kernel)"
"((temp54_6) '#%runtime)"
"((temp55_3)(set-union primitive-ids(set-union main-ids_0 read-ids_0)))"
"((temp56_2)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?"
" 'variable-reference-from-unsafe?"
" 1/variable-reference-from-unsafe?))"
"((ns57_0) ns_85))"
"(copy-runtime-module!26.1 #f #f temp56_2 #t ns57_0 #f #f #f #f temp55_3 #t temp54_6 #t temp53_5))"
"(let-values(((temp58_5) '#%kernel)((temp59_5) '(#%core #%runtime #%main #%read))((ns60_0) ns_85))"
"(declare-reexporting-module!50.1 ns60_0 #f #f temp58_5 temp59_5)))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lambda(alts14_0"
" alts21_0"
" extras15_0"
" extras22_0"
" namespace12_0"
" primitive?16_0"
" primitive?23_0"
" protected?17_0"
" protected?24_0"
" skip13_0"
" skip20_0"
" to11_0"
" to18_0"
" name25_0)"
"(begin"
" 'copy-runtime-module!26"
"(let-values(((name_72) name25_0))"
"(let-values(((to-name_0)(if to18_0 to11_0 name_72)))"
"(let-values(((ns_118) namespace12_0))"
"(let-values(((skip-syms_0)(if skip20_0 skip13_0(seteq))))"
"(let-values(((alts_0)(if alts21_0 alts14_0 '#hasheq())))"
"(let-values(((extras_0)(if extras22_0 extras15_0 '#hasheq())))"
"(let-values(((primitive?_9)(if primitive?23_0 primitive?16_0 #t)))"
"(let-values(((protected?_2)(if protected?24_0 protected?17_0 #f)))"
"(let-values()"
"(let-values(((prims_0)(1/primitive-table name_72)))"
"(let-values((()"
"(begin"
"(let-values(((ht_156) prims_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_156)))"
"((letrec-values(((for-loop_242)"
"(lambda(i_178)"
"(begin"
" 'for-loop"
"(if i_178"
"(let-values(((sym_95)"
"(hash-iterate-key ht_156 i_178)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_95))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_242"
"(hash-iterate-next ht_156 i_178))"
"(values))))"
"(values))))))"
" for-loop_242)"
"(hash-iterate-first ht_156))))"
"(values))))"
"(let-values()"
"(let-values(((ht_157)"
"(let-values(((ht_158) prims_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_158)))"
"((letrec-values(((for-loop_264)"
"(lambda(table_206 i_179)"
"(begin"
" 'for-loop"
"(if i_179"
"(let-values(((sym_96 val_78)"
"(hash-iterate-key+value"
" ht_158"
" i_179)))"
"(let-values(((table_13)"
"(let-values(((table_14)"
" table_206))"
"(if(set-member?"
" skip-syms_0"
" sym_96)"
" table_14"
"(let-values(((table_207)"
" table_14))"
"(let-values(((table_208)"
"(let-values()"
"(let-values(((key_87"
" val_79)"
"(let-values()"
"(values"
" sym_96"
"(let-values(((or-part_75)"
"(hash-ref"
" alts_0"
" sym_96"
" #f)))"
"(if or-part_75"
" or-part_75"
" val_78))))))"
"(hash-set"
" table_207"
" key_87"
" val_79)))))"
"(values table_208)))))))"
"(if(not #f)"
"(for-loop_264"
" table_13"
"(hash-iterate-next ht_158 i_179))"
" table_13)))"
" table_206)))))"
" for-loop_264)"
" '#hasheq()"
"(hash-iterate-first ht_158))))))"
"(let-values(((ht+extras_0)"
"(let-values(((ht_159) extras_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_159)))"
"((letrec-values(((for-loop_266)"
"(lambda(ht_160 i_180)"
"(begin"
" 'for-loop"
"(if i_180"
"(let-values(((k_42 v_40)"
"(hash-iterate-key+value"
" ht_159"
" i_180)))"
"(let-values(((ht_161)"
"(let-values(((ht_151)"
" ht_160))"
"(let-values(((ht_162)"
"(let-values()"
"(hash-set"
" ht_151"
" k_42"
" v_40))))"
"(values ht_162)))))"
"(if(not #f)"
"(for-loop_266"
" ht_161"
"(hash-iterate-next ht_159 i_180))"
" ht_161)))"
" ht_160)))))"
" for-loop_266)"
" ht_157"
"(hash-iterate-first ht_159))))))"
"(let-values(((ns63_0) ns_118)"
"((primitive?64_0) primitive?_9)"
"((protected?65_0) protected?_2))"
"(declare-hash-based-module!41.1"
" ns63_0"
" primitive?64_0"
" #t"
" #f"
" #f"
" protected?65_0"
" #t"
" #f"
" #f"
" to-name_0"
" ht+extras_0)))))))))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lambda(namespace29_0"
" primitive?30_0"
" primitive?35_0"
" protected32_0"
" protected37_0"
" protected?31_0"
" protected?36_0"
" register-builtin?33_0"
" register-builtin?38_0"
" name39_0"
" ht40_0)"
"(begin"
" 'declare-hash-based-module!41"
"(let-values(((name_73) name39_0))"
"(let-values(((ht_163) ht40_0))"
"(let-values(((ns_119) namespace29_0))"
"(let-values(((primitive?_6)(if primitive?35_0 primitive?30_0 #f)))"
"(let-values(((protected?_3)(if protected?36_0 protected?31_0 #f)))"
"(let-values(((protected-syms_0)(if protected37_0 protected32_0 null)))"
"(let-values(((register-builtin?_0)(if register-builtin?38_0 register-builtin?33_0 #f)))"
"(let-values()"
"(let-values(((mpi_49)(1/module-path-index-join(list 'quote name_73) #f)))"
"(let-values(((ns66_1) ns_119)"
"((temp67_3)"
"(let-values(((temp69_5) #t)"
"((primitive?70_0) primitive?_6)"
"((temp71_5) #t)"
"((temp72_2)(not protected?_3))"
"((mpi73_1) mpi_49)"
"((temp74_2)"
"(hasheqv"
" 0"
"(let-values(((ht_164) ht_163))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_164)))"
"((letrec-values(((for-loop_189)"
"(lambda(table_209 i_181)"
"(begin"
" 'for-loop"
"(if i_181"
"(let-values(((sym_97)"
"(hash-iterate-key"
" ht_164"
" i_181)))"
"(let-values(((table_36)"
"(let-values(((table_37)"
" table_209))"
"(let-values(((table_210)"
"(let-values()"
"(let-values(((key_88"
" val_80)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_0"
"(let-values()"
"(register-built-in-symbol!"
" sym_97))"
"(void))"
"(values))))"
"(let-values(((binding_28)"
"(let-values(((mpi76_0)"
" mpi_49)"
"((temp77_3)"
" 0)"
"((sym78_0)"
" sym_97))"
"(make-module-binding22.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" mpi76_0"
" temp77_3"
" sym78_0))))"
"(values"
" sym_97"
"(if(let-values(((or-part_362)"
" protected?_3))"
"(if or-part_362"
" or-part_362"
"(member"
" sym_97"
" protected-syms_0)))"
"(provided1.1"
" binding_28"
" #t"
" #f)"
" binding_28)))))))"
"(hash-set"
" table_37"
" key_88"
" val_80)))))"
"(values"
" table_210)))))"
"(if(not #f)"
"(for-loop_189"
" table_36"
"(hash-iterate-next"
" ht_164"
" i_181))"
" table_36)))"
" table_209)))))"
" for-loop_189)"
" '#hash()"
"(hash-iterate-first ht_164))))))"
"((temp75_2)"
"(lambda(data-box_6"
" ns_120"
" phase-shift_20"
" phase-level_5"
" self_7"
" bulk-binding-registry_2"
" insp_23)"
"(if(= 0 phase-level_5)"
"(let-values()"
"(begin"
"(let-values(((ht_125) ht_163))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_125)))"
"((letrec-values(((for-loop_267)"
"(lambda(i_182)"
"(begin"
" 'for-loop"
"(if i_182"
"(let-values(((sym_98 val_81)"
"(hash-iterate-key+value"
" ht_125"
" i_182)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_120"
" 0"
" sym_98"
" val_81))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_267"
"(hash-iterate-next"
" ht_125"
" i_182))"
"(values))))"
"(values))))))"
" for-loop_267)"
"(hash-iterate-first ht_125))))"
"(void)))"
"(void)))))"
"(make-module39.1"
" temp69_5"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp75_2"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp72_2"
" #t"
" #f"
" #f"
" temp71_5"
" #t"
" #f"
" #f"
" primitive?70_0"
" #t"
" temp74_2"
" #f"
" #f"
" mpi73_1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((temp68_1)(1/module-path-index-resolve mpi_49)))"
"(declare-module!58.1 #f #f ns66_1 temp67_3 temp68_1))))))))))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lambda(namespace45_0 reexport?44_0 reexport?46_0 name48_0 require-names49_0)"
"(begin"
" 'declare-reexporting-module!50"
"(let-values(((name_74) name48_0))"
"(let-values(((require-names_0) require-names49_0))"
"(let-values(((reexport?_0)(if reexport?46_0 reexport?44_0 #t)))"
"(let-values(((ns_121) namespace45_0))"
"(let-values()"
"(let-values(((mpi_50)(1/module-path-index-join(list 'quote name_74) #f)))"
"(let-values(((require-mpis_0)"
"(reverse$1"
"(let-values(((lst_150) require-names_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_150)))"
"((letrec-values(((for-loop_244)"
"(lambda(fold-var_273 lst_307)"
"(begin"
" 'for-loop"
"(if(pair? lst_307)"
"(let-values(((require-name_0)(unsafe-car lst_307))"
"((rest_175)(unsafe-cdr lst_307)))"
"(let-values(((fold-var_138)"
"(let-values(((fold-var_274) fold-var_273))"
"(let-values(((fold-var_275)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_0)"
" #f))"
" fold-var_274))))"
"(values fold-var_275)))))"
"(if(not #f)"
"(for-loop_244 fold-var_138 rest_175)"
" fold-var_138)))"
" fold-var_273)))))"
" for-loop_244)"
" null"
" lst_150))))))"
"(let-values(((ns79_1) ns_121)"
"((temp80_6)"
"(let-values(((temp82_6) #t)"
"((temp83_4) #t)"
"((mpi84_0) mpi_50)"
"((temp85_3)(list(cons 0 require-mpis_0)))"
"((temp86_1)"
"(if reexport?_0"
"(hasheqv"
" 0"
"(let-values(((lst_308) require-mpis_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_308)))"
"((letrec-values(((for-loop_120)"
"(lambda(table_211 lst_309)"
"(begin"
" 'for-loop"
"(if(pair? lst_309)"
"(let-values(((require-mpi_0)"
"(unsafe-car lst_309))"
"((rest_176)"
"(unsafe-cdr lst_309)))"
"(let-values(((table_212)"
"(let-values(((m_29)"
"(namespace->module"
" ns_121"
"(1/module-path-index-resolve"
" require-mpi_0))))"
"(begin"
" #t"
"((letrec-values(((for-loop_268)"
"(lambda(table_213)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_214)"
"(let-values(((ht_165)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_29)"
"(module-self"
" m_29)"
" require-mpi_0)"
" 0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_165)))"
"((letrec-values(((for-loop_121)"
"(lambda(table_107"
" i_183)"
"(begin"
" 'for-loop"
"(if i_183"
"(let-values(((sym_99"
" binding_29)"
"(hash-iterate-key+value"
" ht_165"
" i_183)))"
"(let-values(((table_32)"
"(let-values(((table_215)"
" table_107))"
"(let-values(((table_108)"
"(let-values()"
"(let-values(((key_89"
" val_82)"
"(let-values()"
"(values"
" sym_99"
" binding_29))))"
"(hash-set"
" table_215"
" key_89"
" val_82)))))"
"(values"
" table_108)))))"
"(if(not"
" #f)"
"(for-loop_121"
" table_32"
"(hash-iterate-next"
" ht_165"
" i_183))"
" table_32)))"
" table_107)))))"
" for-loop_121)"
" table_213"
"(hash-iterate-first"
" ht_165))))))"
" table_214))))))"
" for-loop_268)"
" table_211)))))"
"(if(not #f)"
"(for-loop_120 table_212 rest_176)"
" table_212)))"
" table_211)))))"
" for-loop_120)"
" '#hash()"
" lst_308))))"
" '#hasheqv()))"
"((void87_0) void))"
"(make-module39.1"
" temp82_6"
" #t"
" #f"
" #f"
" #f"
" #f"
" void87_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp83_4"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp86_1"
" temp85_3"
" #t"
" mpi84_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))"
"((temp81_3)(1/module-path-index-resolve mpi_50)))"
"(declare-module!58.1 #f #f ns79_1 temp80_6 temp81_3))))))))))))"
"(define-values"
"(read-primitives)"
"(hasheq"
" 'read"
" 1/read"
" 'read/recursive"
" 1/read/recursive"
" 'read-language"
" 1/read-language"
" 'string->number"
" 1/string->number"
" 'current-reader-guard"
" 1/current-reader-guard"
" 'read-square-bracket-as-paren"
" 1/read-square-bracket-as-paren"
" 'read-curly-brace-as-paren"
" 1/read-curly-brace-as-paren"
" 'read-square-bracket-with-tag"
" 1/read-square-bracket-with-tag"
" 'read-curly-brace-with-tag"
" 1/read-curly-brace-with-tag"
" 'read-cdot"
" 1/read-cdot"
" 'read-accept-graph"
" 1/read-accept-graph"
" 'read-accept-compiled"
" 1/read-accept-compiled"
" 'read-accept-box"
" 1/read-accept-box"
" 'read-decimal-as-inexact"
" 1/read-decimal-as-inexact"
" 'read-accept-dot"
" 1/read-accept-dot"
" 'read-accept-infix-dot"
" 1/read-accept-infix-dot"
" 'read-accept-quasiquote"
" 1/read-accept-quasiquote"
" 'read-accept-reader"
" 1/read-accept-reader"
" 'read-accept-lang"
" 1/read-accept-lang"
" 'current-readtable"
" 1/current-readtable"
" 'readtable?"
" 1/readtable?"
" 'make-readtable"
" 1/make-readtable"
" 'readtable-mapping"
" 1/readtable-mapping"
" 'special-comment?"
" 1/special-comment?"
" 'make-special-comment"
" 1/make-special-comment"
" 'special-comment-value"
" 1/special-comment-value))"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" eval$1"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$1"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'dynamic-require-for-syntax"
" 1/dynamic-require-for-syntax"
" 'load"
" 1/load"
" 'load-extension"
" 1/load-extension"
" 'load/use-compiled"
" 1/load/use-compiled"
" 'current-eval"
" 1/current-eval"
" 'current-compile"
" 1/current-compile"
" 'current-load"
" 1/current-load"
" 'current-load/use-compiled"
" 1/current-load/use-compiled"
" 'collection-path"
" 1/collection-path"
" 'collection-file-path"
" 1/collection-file-path"
" 'find-library-collection-paths"
" 1/find-library-collection-paths"
" 'find-library-collection-links"
" 1/find-library-collection-links"
" 'current-library-collection-paths"
" 1/current-library-collection-paths"
" 'current-library-collection-links"
" 1/current-library-collection-links"
" 'use-compiled-file-paths"
" 1/use-compiled-file-paths"
" 'current-compiled-file-roots"
" 1/current-compiled-file-roots"
" 'use-compiled-file-check"
" 1/use-compiled-file-check"
" 'use-collection-link-paths"
" 1/use-collection-link-paths"
" 'use-user-specific-search-paths"
" 1/use-user-specific-search-paths"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'compiled-expression-recompile"
" 1/compiled-expression-recompile"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module-provide-protected?"
" 1/module-provide-protected?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" 1/collection-path"
" 'collection-file-path"
" 1/collection-file-path"
" 'find-library-collection-paths"
" 1/find-library-collection-paths"
" 'find-library-collection-links"
" 1/find-library-collection-links"
" 'load/use-compiled"
" 1/load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_87)(TH-place-channel-ref x_87 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_88)(TH-place-channel-ref x_88 0))(lambda(x_89)(TH-place-channel-ref x_89 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'primitive-in-category?"
" 1/primitive-in-category?"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'read-compiled-linklet"
" 1/read-compiled-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?"
" 'variable-reference-from-unsafe?"
" 1/variable-reference-from-unsafe?))"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_1)"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t"
" 1/read-accept-compiled"
" #t"
" read-case-sensitive"
" #t"
" 1/read-square-bracket-as-paren"
" #t"
" 1/read-curly-brace-as-paren"
" #t"
" 1/read-square-bracket-with-tag"
" #f"
" 1/read-curly-brace-with-tag"
" #f"
" 1/read-accept-box"
" #t"
" read-accept-bar-quote"
" #t"
" 1/read-accept-graph"
" #t"
" 1/read-decimal-as-inexact"
" #t"
" 1/read-cdot"
" #f"
" 1/read-accept-dot"
" #t"
" 1/read-accept-infix-dot"
" #t"
" 1/read-accept-quasiquote"
" #t"
" 1/current-readtable"
" #f)"
"(let-values()(thunk_1))))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_0 filename_1)"
"(begin"
"(if(let-values(((or-part_298)(eof-object? exp_0)))"
"(if or-part_298 or-part_298(eof-object?(1/syntax-e exp_0))))"
"(let-values()"
"(if filename_1"
"(error"
" 'load-handler"
"             (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_1)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_0))"
"(let-values() exp_0)"
"(if(if(syntax?$1 exp_0)"
"(if(pair?(1/syntax-e exp_0))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_0))))"
"(let-values(((r_48)(cdr(1/syntax-e exp_0))))"
"(let-values(((r_49)(if(syntax?$1 r_48)(1/syntax-e r_48) r_48)))"
"(if(pair? r_49)(identifier?(car r_49)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_0(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_0))) exp_0 exp_0))"
"(let-values()"
"(if filename_1"
"(error"
" 'default-load-handler"
"                 (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_1)"
" #f))))))))"
"(define-values"
"(default-load-handler)"
"(lambda(path_12 expected-mod_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(path-string? path_12)"
"(void)"
"                        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_11)(not expected-mod_0)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_2)(symbol? expected-mod_0)))"
"(if or-part_2"
" or-part_2"
"(if(pair? expected-mod_0)"
"(if(list? expected-mod_0)"
"(if(let-values(((or-part_26)(not(car expected-mod_0))))"
"(if or-part_26 or-part_26(symbol?(car expected-mod_0))))"
"(andmap2 symbol?(cdr expected-mod_0))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"                             \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_0)))"
"(values))))"
"(let-values(((maybe-count-lines!_0)"
"(lambda(i_124)"
"(begin"
" 'maybe-count-lines!"
"                            (if (regexp-match? '#rx\"[.]zo$\" path_12)"
"(void)"
"(let-values()(port-count-lines! i_124)))))))"
"(if expected-mod_0"
"(let-values()"
"((call-with-input-module-file"
" path_12"
"(lambda(i_184)"
"(begin"
"(maybe-count-lines!_0 i_184)"
"(with-module-reading-parameterization+delay-source"
" path_12"
"(lambda()"
"(let-values(((c1_30)(linklet-directory-start i_184)))"
"(if c1_30"
"((lambda(pos_119)"
"(let-values(((b-pos_0)"
"(search-directory i_184 pos_119(encode-symbols expected-mod_0))))"
"(if b-pos_0"
"(let-values()"
"(begin"
"(file-position i_184 b-pos_0)"
"(let-values(((or-part_12)(cached-bundle i_184)))"
"(if or-part_12"
" or-part_12"
"(let-values(((v_0)(1/read i_184)))"
"(if(1/compiled-module-expression? v_0)"
"(lambda()((1/current-eval) v_0))"
"(error"
" 'default-load-handler"
"(string-append"
"                                                  \"expected a compiled module\\n\""
"                                                  \"  in: ~e\\n\""
"                                                  \"  found: ~e\")"
"(object-name i_184)"
" v_0)))))))"
"(if(pair? expected-mod_0)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                         (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_184)))))))"
" c1_30)"
"(if(if(pair? expected-mod_0)(not(car expected-mod_0)) #f)"
"(let-values() void)"
"(let-values(((c2_16)(cached-bundle i_184)))"
"(if c2_16"
"((lambda(thunk_6) thunk_6) c2_16)"
"(let-values()"
"(let-values(((s_171)(1/read-syntax(object-name i_184) i_184)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_171)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                             \"expected a `module' declaration;\\n\""
"                                                             \" found end-of-file\\n\""
"                                                             \"  in: ~e\")"
"(object-name i_184)))"
"(void))"
"(values))))"
"(let-values(((m-s_0)(check-module-form s_171 path_12)))"
"(let-values(((s2_7)(1/read-syntax(object-name i_184) i_184)))"
"(begin"
"(if(eof-object? s2_7)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                     \"expected a `module' declaration;\\n\""
"                                                     \" found an extra form\\n\""
"                                                     \"  in: ~e\\n\""
"                                                     \"  found: ~.s\")"
"(object-name i_184)"
" s2_7)))"
"(lambda()((1/current-eval) m-s_0))))))))))))))))))))"
"(let-values()"
"(let-values(((add-top-interaction_0)"
"(lambda(s_411)"
"(begin"
" 'add-top-interaction"
"(1/namespace-syntax-introduce"
"(1/datum->syntax #f(cons '#%top-interaction s_411)))))))"
"(let-values(((path1_0) path_12)"
"((temp2_7)"
"(lambda(i_74)"
"(begin"
" 'temp2"
"(begin"
"(maybe-count-lines!_0 i_74)"
"((letrec-values(((loop_119)"
"(lambda(vals_7)"
"(begin"
" 'loop"
"(let-values(((s_303)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/read-accept-compiled"
" #t"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t)"
"(let-values()"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_12))"
"(let-values()"
"(1/read-syntax"
"(object-name i_74)"
" i_74)))"
"(1/read-syntax"
"(object-name i_74)"
" i_74))))))"
"(if(eof-object? s_303)"
"(apply values vals_7)"
"(loop_119"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()"
"((1/current-eval)(add-top-interaction_0 s_303)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_10"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_10))))))))))"
" loop_119)"
"(list(void))))))))"
"(call-with-input-file*61.1 #f #f path1_0 temp2_7)))))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_145 tag_1)"
"(begin"
"(let-values(((version-length_0)(string-length(version))))"
"(if(equal?(peek-byte i_145)(char->integer '#\\#))"
"(if(equal?(peek-byte i_145 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_145 2) version-length_0)"
"(if(equal?(peek-bytes version-length_0 3 i_145)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_145(+ 3 version-length_0))(char->integer tag_1))(+ version-length_0 4) #f)"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_185)"
"(begin(let-values(((pos_93)(linklet-bundle-or-directory-start i_185 '#\\D)))(if pos_93(+ pos_93 4) #f)))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_80)"
"(begin"
"(let-values(((pos_14)(linklet-bundle-or-directory-start i_80 '#\\B)))"
"(let-values(((hash-code_5)(if pos_14(peek-bytes 20 pos_14 i_80) #f)))"
"(if(bytes? hash-code_5)"
"(if(= 20(bytes-length hash-code_5))"
"(if(let-values(((vec_66 len_40)"
"(let-values(((vec_67) hash-code_5))"
"(begin(check-bytes vec_67)(values vec_67(unsafe-bytes-length vec_67))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_220)"
"(lambda(result_116 pos_120)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_120 len_40)"
"(let-values(((c_52)(unsafe-bytes-ref vec_66 pos_120)))"
"(let-values(((result_117)"
"(let-values()"
"(let-values(((result_118)"
"(let-values()"
"(let-values()(not(eq? c_52 0))))))"
"(values result_118)))))"
"(if(if(not((lambda x_90 result_117) c_52))(not #f) #f)"
"(for-loop_220 result_117(unsafe-fx+ 1 pos_120))"
" result_117)))"
" result_116)))))"
" for-loop_220)"
" #f"
" 0)))"
" hash-code_5"
" #f)"
" #f)"
" #f))))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_186)"
"(begin"
"(let-values(((c3_9)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_186)))))"
"(if c3_9"
"((lambda(declare-module_0)(lambda()(declare-module_0(1/current-namespace)))) c3_9)"
"(let-values() #f))))))"
"(define-values"
"(read-number)"
"(lambda(i_41)"
"(begin"
"(let-values(((read-byte/not-eof_0)"
"(lambda(i_187)"
"(begin"
" 'read-byte/not-eof"
"(let-values(((v_243)(read-byte i_187)))(if(eof-object? v_243) 0 v_243))))))"
"(bitwise-ior"
"(read-byte/not-eof_0 i_41)"
"(arithmetic-shift(read-byte/not-eof_0 i_41) 8)"
"(arithmetic-shift(read-byte/not-eof_0 i_41) 16)"
"(arithmetic-shift(read-byte/not-eof_0 i_41) 24))))))"
"(define-values"
"(search-directory)"
"(lambda(i_188 pos_121 bstr_5)"
"(begin"
"(if(zero? pos_121)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_188 pos_121)(values))))"
"(let-values(((name-len_0)(read-number i_188)))"
"(let-values(((v_244)(read-bytes name-len_0 i_188)))"
"(begin"
"(if(if(bytes? v_244)(=(bytes-length v_244) name-len_0) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                        \"failure getting submodule path\\n\""
"                        \"  in: ~e\\n\""
"                        \"  at position: ~a\\n\""
"                        \"  expected bytes: ~a\\n\""
"                        \"  read bytes: ~e\")"
"(object-name i_188)"
" pos_121"
" name-len_0"
" v_244)))"
"(if(bytes=? bstr_5 v_244)"
"(let-values()(read-number i_188))"
"(if(bytes<? bstr_5 v_244)"
"(let-values()"
"(begin"
"(read-number i_188)"
"(read-number i_188)"
"(search-directory i_188(read-number i_188) bstr_5)))"
"(let-values()"
"(begin"
"(read-number i_188)"
"(read-number i_188)"
"(read-number i_188)"
"(search-directory i_188(read-number i_188) bstr_5))))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_1)"
"(begin"
"(if(symbol? expected-mod_1)"
"        (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(reverse$1"
"(let-values(((lst_310)(cdr expected-mod_1)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_310)))"
"((letrec-values(((for-loop_102)"
"(lambda(fold-var_67 lst_87)"
"(begin"
" 'for-loop"
"(if(pair? lst_87)"
"(let-values(((s_471)(unsafe-car lst_87))((rest_42)(unsafe-cdr lst_87)))"
"(let-values(((fold-var_20)"
"(let-values(((fold-var_68) fold-var_67))"
"(let-values(((fold-var_69)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((bstr_6)"
"(string->bytes/utf-8"
"(symbol->string s_471))))"
"(let-values(((len_41)"
"(bytes-length bstr_6)))"
"(if(< len_41 255)"
"(let-values()"
"(bytes-append"
"(bytes len_41)"
" bstr_6))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes"
" len_41"
" 4"
" #f"
" #f)"
" bstr_6))))))"
" fold-var_68))))"
"(values fold-var_69)))))"
"(if(not #f)(for-loop_102 fold-var_20 rest_42) fold-var_20)))"
" fold-var_67)))))"
" for-loop_102)"
" null"
" lst_310))))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_13 thunk_7)"
"(begin"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_13))"
"(let-values()(with-module-reading-parameterization thunk_7)))"
"(with-module-reading-parameterization thunk_7)))))"
"(define-values"
"(call-with-input-module-file)"
"(lambda(path_14 proc_9)"
"(begin"
"(let-values(((i_189) #f))"
"(dynamic-wind"
"(lambda()(set! i_189(let-values(((temp4_8) #t))(open-input-file6.1 temp4_8 #t #f #f path_14))))"
"(lambda()(proc_9 i_189))"
"(lambda()(close-input-port i_189)))))))"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_0)"
"(lambda(s_157)"
"(begin"
" 'resolve"
"(if(complete-path? s_157)"
" s_157"
"(let-values(((d_36)(current-load-relative-directory)))"
"(if d_36(path->complete-path s_157 d_36) s_157)))))))"
"(let-values(((date-of-1_0)"
"(lambda(a_28)"
"(begin"
" 'date-of-1"
"(let-values(((v_67)(file-or-directory-modify-seconds a_28 #f(lambda() #f))))"
"(if v_67(cons a_28 v_67) #f))))))"
"(let-values(((date-of_0)"
"(lambda(a_35 modes_1 roots_1)"
"(begin"
" 'date-of"
"(ormap2"
"(lambda(root-dir_0)"
"(ormap2"
"(lambda(compiled-dir_0)"
"(let-values(((a_36)(a_35 root-dir_0 compiled-dir_0)))(date-of-1_0 a_36)))"
" modes_1))"
" roots_1)))))"
"(let-values(((date>=?_0)"
"(lambda(modes_2 roots_2 a_72 bm_0)"
"(begin"
" 'date>=?"
"(if a_72"
"(let-values(((am_0)(date-of_0 a_72 modes_2 roots_2)))"
"(let-values(((or-part_28)(if(not bm_0) am_0 #f)))"
"(if or-part_28"
" or-part_28"
"(if am_0(if bm_0(if(>=(cdr am_0)(cdr bm_0)) am_0 #f) #f) #f))))"
" #f)))))"
"(let-values(((with-dir*_0)"
"(lambda(base_24 t_55)"
"(begin"
" 'with-dir*"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_24) base_24(current-directory)))"
"(let-values()(t_55)))))))"
"(lambda(path_15 expect-module_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(path-string? path_15)"
"(void)"
"                                  (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_15)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_164)(not expect-module_0)))"
"(if or-part_164"
" or-part_164"
"(let-values(((or-part_76)(symbol? expect-module_0)))"
"(if or-part_76"
" or-part_76"
"(if(list? expect-module_0)"
"(if(>(length expect-module_0) 1)"
"(if(let-values(((or-part_77)(symbol?(car expect-module_0))))"
"(if or-part_77 or-part_77(not(car expect-module_0))))"
"(andmap2 symbol?(cdr expect-module_0))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                       \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_15)))"
"(values))))"
"(let-values(((name_75)(if expect-module_0(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_0)"
"(if name_75"
"(registry-table-ref(1/namespace-module-registry(1/current-namespace)))"
" #f)))"
"(let-values(((use-path/src_0)(if ns-hts_0(hash-ref(cdr ns-hts_0) name_75 #f) #f)))"
"(if use-path/src_0"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_0))"
"(let-values()"
"(with-dir*_0"
"(caddr use-path/src_0)"
"(lambda()((1/current-load)(car use-path/src_0) expect-module_0)))))"
"(let-values(((orig-path_0)(resolve_0 path_15)))"
"(let-values(((base_22 orig-file_0 dir?_7)(split-path path_15)))"
"(let-values(((file_1 alt-file_0)"
"(if expect-module_0"
"(let-values(((b_47)(path->bytes orig-file_0)))"
"(let-values(((len_7)(bytes-length b_47)))"
"(if(if(>= len_7 4)"
"                                                          (bytes=? #\".rkt\" (subbytes b_47 (- len_7 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_0"
"(bytes->path"
"                                                          (bytes-append (subbytes b_47 0 (- len_7 4)) #\".ss\"))))"
"(let-values()(values orig-file_0 #f)))))"
"(values orig-file_0 #f))))"
"(let-values(((path_16)"
"(if(eq? file_1 orig-file_0) orig-path_0(build-path base_22 file_1))))"
"(let-values(((alt-path_0)"
"(if alt-file_0"
"(if(eq? alt-file_0 orig-file_0)"
" orig-path_0"
"(build-path base_22 alt-file_0))"
" #f)))"
"(let-values(((base_25)(if(eq? base_22 'relative) 'same base_22)))"
"(let-values(((modes_3)(1/use-compiled-file-paths)))"
"(let-values(((roots_3)(1/current-compiled-file-roots)))"
"(let-values(((reroot_0)"
"(lambda(p_70 d_37)"
"(begin"
" 'reroot"
"(if(eq? d_37 'same)"
"(let-values() p_70)"
"(if(relative-path? d_37)"
"(let-values()(build-path p_70 d_37))"
"(let-values()(reroot-path p_70 d_37))))))))"
"(let-values(((main-path-d_0)(date-of-1_0 path_16)))"
"(let-values(((alt-path-d_0)"
"(if alt-path_0"
"(if(not main-path-d_0)(date-of-1_0 alt-path_0) #f)"
" #f)))"
"(let-values(((path-d_0)"
"(let-values(((or-part_55) main-path-d_0))"
"(if or-part_55 or-part_55 alt-path-d_0))))"
"(let-values(((get-so_0)"
"(lambda(file_2 rep-sfx?_0)"
"(begin"
" 'get-so"
"(lambda(root-dir_1 compiled-dir_1)"
"(build-path"
"(reroot_0 base_25 root-dir_1)"
" compiled-dir_1"
"                                                                         \"native\""
"(system-library-subpath)"
"(if rep-sfx?_0"
"(path-add-extension file_2 dll-suffix)"
" file_2)))))))"
"(let-values(((zo_0)"
"(lambda(root-dir_2 compiled-dir_2)"
"(begin"
" 'zo"
"(build-path"
"(reroot_0 base_25 root-dir_2)"
" compiled-dir_2"
"                                                                         (path-add-extension file_1 #\".zo\"))))))"
"(let-values(((alt-zo_0)"
"(lambda(root-dir_3 compiled-dir_3)"
"(begin"
" 'alt-zo"
"(build-path"
"(reroot_0 base_25 root-dir_3)"
" compiled-dir_3"
"                                                                           (path-add-extension alt-file_0 #\".zo\"))))))"
"(let-values(((so_0)(get-so_0 file_1 #t)))"
"(let-values(((alt-so_0)(get-so_0 alt-file_0 #t)))"
"(let-values(((try-main?_0)"
"(let-values(((or-part_347) main-path-d_0))"
"(if or-part_347"
" or-part_347"
"(not alt-path-d_0)))))"
"(let-values(((try-alt?_0)"
"(if alt-file_0"
"(let-values(((or-part_363)"
" alt-path-d_0))"
"(if or-part_363"
" or-part_363"
"(not main-path-d_0)))"
" #f)))"
"(let-values(((with-dir_0)"
"(lambda(t_56)"
"(begin"
" 'with-dir"
"(with-dir*_0 base_25 t_56)))))"
"(let-values(((c1_31)"
"(if try-main?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" so_0"
" path-d_0)"
" #f)))"
"(if c1_31"
"((lambda(so-d_0)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((current-load-extension)"
"(car so-d_0)"
" expect-module_0))))))"
" c1_31)"
"(let-values(((c2_17)"
"(if try-alt?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" alt-so_0"
" alt-path-d_0)"
" #f)))"
"(if c2_17"
"((lambda(so-d_1)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_0)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((current-load-extension)"
"(car so-d_1)"
" expect-module_0))))))"
" c2_17)"
"(let-values(((c3_10)"
"(if try-main?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" zo_0"
" path-d_0)"
" #f)))"
"(if c3_10"
"((lambda(zo-d_0)"
"(begin"
"(register-zo-path"
" name_75"
" ns-hts_0"
"(car zo-d_0)"
" #f"
" base_25)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((1/current-load)"
"(car zo-d_0)"
" expect-module_0)))))))"
" c3_10)"
"(let-values(((c4_3)"
"(if try-alt?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" alt-zo_0"
" path-d_0)"
" #f)))"
"(if c4_3"
"((lambda(zo-d_1)"
"(begin"
"(register-zo-path"
" name_75"
" ns-hts_0"
"(car zo-d_1)"
" alt-path_0"
" base_25)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_0)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((1/current-load)"
"(car zo-d_1)"
" expect-module_0)))))))"
" c4_3)"
"(if(let-values(((or-part_364)"
"(not"
"(pair?"
" expect-module_0))))"
"(if or-part_364"
" or-part_364"
"(car expect-module_0)))"
"(let-values()"
"(let-values(((p_71)"
"(if try-main?_0"
" path_16"
" alt-path_0)))"
"(if(if(pair?"
" expect-module_0)"
"(not"
"(file-exists? p_71))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_0"
"(if(not try-main?_0)"
" p_71"
" #f)"
" #f))"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((1/current-load)"
" p_71"
" expect-module_0)))))))))"
"(void))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_76 ns-hts_1 path_17 src-path_0 base_26)"
"(begin(if ns-hts_1(let-values()(hash-set!(cdr ns-hts_1) name_76(list path_17 src-path_0 base_26)))(void)))))"
"(define-values(default-reader-guard)(lambda(path_18)(begin path_18)))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values"
"(registry-table-ref)"
"(lambda(reg_0)"
"(begin(let-values(((e_40)(hash-ref -module-hash-table-table reg_0 #f)))(if e_40(ephemeron-value e_40) #f)))))"
"(define-values"
"(registry-table-set!)"
"(lambda(reg_1 v_199)(begin(hash-set! -module-hash-table-table reg_1(make-ephemeron reg_1 v_199)))))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_72)"
"(begin"
"(let-values(((i_27)(modulo(abs(equal-hash-code p_72)) CACHE-N)))"
"(let-values(((w_1)(vector-ref -path-cache i_27)))"
"(let-values(((l_81)(if w_1(weak-box-value w_1) #f)))"
"(if l_81(let-values(((a_71)(1/assoc p_72 l_81)))(if a_71(cdr a_71) #f)) #f)))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_73 v_89)"
"(begin"
"(let-values(((i_95)(modulo(abs(equal-hash-code p_73)) CACHE-N)))"
"(let-values(((w_2)(vector-ref -path-cache i_95)))"
"(let-values(((l_70)(if w_2(weak-box-value w_2) #f)))"
"(vector-set!"
" -path-cache"
" i_95"
"(make-weak-box"
"(cons(cons p_73 v_89)(let-values(((or-part_72) l_70))(if or-part_72 or-part_72 null)))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_467 coll-mode?_0)"
"(begin"
"(let-values(((l_19)"
"((letrec-values(((loop_120)"
"(lambda(s_472)"
"(begin"
" 'loop"
"(let-values(((len_42)(string-length s_472)))"
"((letrec-values(((iloop_2)"
"(lambda(i_190)"
"(begin"
" 'iloop"
"(if(= i_190 len_42)"
"(let-values()(list s_472))"
"(if(char=? '#\\/(string-ref s_472 i_190))"
"(let-values()"
"(cons"
"(substring s_472 0 i_190)"
"(loop_120(substring s_472(add1 i_190)))))"
"(let-values()(iloop_2(add1 i_190)))))))))"
" iloop_2)"
" 0))))))"
" loop_120)"
" s_467)))"
"(if coll-mode?_0"
" l_19"
"((letrec-values(((loop_96)"
"(lambda(l_79)"
"(begin"
" 'loop"
"(if(null?(cdr l_79))"
"(values null(car l_79))"
"(let-values(((c_99 f_39)(loop_96(cdr l_79))))"
"(values(cons(car l_79) c_99) f_39)))))))"
" loop_96)"
" l_19))))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_16)"
"(begin"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_16)"
"(1/syntax-line stx_16)"
"(1/syntax-column stx_16)"
"(1/syntax-position stx_16)"
"(1/syntax-span stx_16))))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_0) #f))"
"(let-values(((prep-planet-resolver!_0)"
"(lambda()"
"(begin"
" 'prep-planet-resolver!"
"(if planet-resolver_0"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_0"
"                               (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver)))))))))"
"(letrec-values(((standard-module-name-resolver_0)"
"(case-lambda"
"((s_166 from-namespace_1)"
"(begin"
" 'standard-module-name-resolver"
"(begin"
"(if(1/resolved-module-path? s_166)"
"(void)"
"(let-values()"
"                                   (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_166)))"
"(if(let-values(((or-part_282)(not from-namespace_1)))"
"(if or-part_282 or-part_282(1/namespace? from-namespace_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                    \"(or/c #f namespace?)\""
" from-namespace_1)))"
"(if planet-resolver_0(let-values()(planet-resolver_0 s_166))(void))"
"(let-values(((hts_1)"
"(let-values(((or-part_256)"
"(registry-table-ref"
"(1/namespace-module-registry(1/current-namespace)))))"
"(if or-part_256"
" or-part_256"
"(let-values(((hts_2)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(registry-table-set!"
"(1/namespace-module-registry(1/current-namespace))"
" hts_2)"
" hts_2))))))"
"(begin"
"(hash-set!(car hts_1) s_166 'declared)"
"(if from-namespace_1"
"(let-values()"
"(let-values(((root-name_2)"
"(if(pair?(1/resolved-module-path-name s_166))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_166)))"
" s_166))"
"((from-hts_0)"
"(registry-table-ref"
"(1/namespace-module-registry from-namespace_1))))"
"(if from-hts_0"
"(let-values()"
"(let-values(((use-path/src_1)(hash-ref(cdr from-hts_0) root-name_2 #f)))"
"(if use-path/src_1"
"(let-values()(hash-set!(cdr hts_1) root-name_2 use-path/src_1))"
"(void))))"
"(void))))"
"(void)))))))"
"((s_473 relto_0 stx_17)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_0 s_473 relto_0 stx_17 #t)))"
"((s_26 relto_1 stx_18 load?_7)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_26)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_18)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_18)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_26))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_147)(not relto_1)))"
"(if or-part_147 or-part_147(1/resolved-module-path? relto_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_57)(not stx_18)))"
"(if or-part_57 or-part_57(syntax?$1 stx_18)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_18)))"
"(values))))"
"(let-values(((flatten-sub-path_0)"
"(lambda(base_27 orig-l_10)"
"(begin"
" 'flatten-sub-path"
"((letrec-values(((loop_121)"
"(lambda(a_73 l_33)"
"(begin"
" 'loop"
"(if(null? l_33)"
"(let-values()"
"(if(null? a_73)"
" base_27"
"(cons base_27(reverse$1 a_73))))"
"                                                                           (if (equal? (car l_33) \"..\")"
"(let-values()"
"(if(null? a_73)"
"(error"
" 'standard-module-name-resolver"
"                                                                                  \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                                   (if (equal? base_27 \".\")"
" base_27"
"(if(path? base_27)"
" base_27"
"(list"
"(if(symbol? base_27)"
" 'quote"
" 'file)"
" base_27)))"
" orig-l_10))"
"(loop_121(cdr a_73)(cdr l_33))))"
"(let-values()"
"(loop_121"
"(cons(car l_33) a_73)"
"(cdr l_33)))))))))"
" loop_121)"
" null"
" orig-l_10)))))"
"(if(if(pair? s_26)(eq?(car s_26) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_26)))"
"(if(if(pair? s_26)"
"(if(eq?(car s_26) 'submod)"
"(if(pair?(cadr s_26))(eq?(caadr s_26) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path(flatten-sub-path_0(cadadr s_26)(cddr s_26))))"
"(if(if(pair? s_26)"
"(if(eq?(car s_26) 'submod)"
"                                               (if (let-values (((or-part_98) (equal? (cadr s_26) \".\")))"
"                                                     (if or-part_98 or-part_98 (equal? (cadr s_26) \"..\")))"
"(if relto_1"
"(let-values(((p_74)(1/resolved-module-path-name relto_1)))"
"(let-values(((or-part_38)(symbol? p_74)))"
"(if or-part_38"
" or-part_38"
"(if(pair? p_74)(symbol?(car p_74)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_0)(1/resolved-module-path-name relto_1)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_0"
"(if(pair? rp_0)(car rp_0) rp_0)"
"(let-values(((r_50)"
"                                                             (if (equal? (cadr s_26) \"..\") (cdr s_26) (cddr s_26))))"
"(if(pair? rp_0)(append(cdr rp_0) r_50) r_50))))))"
"(if(if(pair? s_26)(eq?(car s_26) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_0)"
"(planet-resolver_0 s_26 relto_1 stx_18 load?_7 #f orig-paramz)))"
"(if(if(pair? s_26)"
"(if(eq?(car s_26) 'submod)"
"(if(pair?(cadr s_26))(eq?(caadr s_26) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_0)"
"(planet-resolver_0"
"(cadr s_26)"
" relto_1"
" stx_18"
" load?_7"
"(cddr s_26)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_0)"
"(lambda()"
"(begin"
" 'get-dir"
"(let-values(((or-part_58)"
"(if relto_1"
"(if(eq? relto_1 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_75)"
"(1/resolved-module-path-name"
" relto_1)))"
"(let-values(((p_76)"
"(if(pair? p_75)"
"(car p_75)"
" p_75)))"
"(if(path? p_76)"
"(let-values(((base_28"
" n_35"
" d?_0)"
"(split-path"
" p_76)))"
"(begin"
"(set! -prev-relto relto_1)"
"(set! -prev-relto-dir"
" base_28)"
" base_28))"
" #f))))"
" #f)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_45)"
"(current-load-relative-directory)))"
"(if or-part_45"
" or-part_45"
"(current-directory))))))))"
"((get-reg_0)"
"(lambda()"
"(begin"
" 'get-reg"
"(1/namespace-module-registry(1/current-namespace)))))"
"((show-collection-err_0)"
"(lambda(msg_1)"
"(begin"
" 'show-collection-err"
"(let-values(((msg_2)"
"(string-append"
"(let-values(((or-part_139)"
"(if stx_18"
"(if(error-print-source-location)"
"(format-source-location"
" stx_18)"
" #f)"
" #f)))"
"(if or-part_139"
" or-part_139"
"                                                                                    \"standard-module-name-resolver\"))"
"                                                                                \": \""
"(regexp-replace"
"                                                                                 '#rx\"\\n\""
" msg_1"
"(format"
"                                                                                  \"\\n  for module path: ~s\\n\""
" s_26)))))"
"(raise"
"(if stx_18"
"(1/make-exn:fail:syntax:missing-module"
" msg_2"
"(current-continuation-marks)"
"(list stx_18)"
" s_26)"
"(1/make-exn:fail:filesystem:missing-module"
" msg_2"
"(current-continuation-marks)"
" s_26)))))))"
"((ss->rkt_0)"
"(lambda(s_474)"
"(begin"
" 'ss->rkt"
"(let-values(((len_43)(string-length s_474)))"
"(if(if(>= len_43 3)"
"(if(equal?"
" '#\\."
"(string-ref s_474(- len_43 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_474(- len_43 2)))"
"(equal?"
" '#\\s"
"(string-ref s_474(- len_43 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_474 0(- len_43 3))"
"                                                                      \".rkt\")"
" s_474)))))"
"((path-ss->rkt_0)"
"(lambda(p_77)"
"(begin"
" 'path-ss->rkt"
"(let-values(((base_29 name_77 dir?_8)"
"(split-path p_77)))"
"                                                                   (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_77))"
"                                                                     (path-replace-extension p_77 #\".rkt\")"
" p_77)))))"
"((s_31)"
"(if(if(pair? s_26)(eq? 'submod(car s_26)) #f)"
"(let-values(((v_245)(cadr s_26)))"
"                                                                 (if (let-values (((or-part_359) (equal? v_245 \".\")))"
"                                                                       (if or-part_359 or-part_359 (equal? v_245 \"..\")))"
"(if relto_1"
"(let-values(((p_78)"
"(1/resolved-module-path-name"
" relto_1)))"
"(if(pair? p_78)(car p_78) p_78))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_26))"
" v_245))"
" s_26))"
"((subm-path_0)"
"(if(if(pair? s_26)(eq? 'submod(car s_26)) #f)"
"(let-values(((p_79)"
"(if(if(let-values(((or-part_46)"
"(equal?"
"(cadr s_26)"
"                                                                                                    \".\")))"
"(if or-part_46"
" or-part_46"
"                                                                                         (equal? (cadr s_26) \"..\")))"
" relto_1"
" #f)"
"(let-values(((p_80)"
"(1/resolved-module-path-name"
" relto_1))"
"((r_15)"
"(if(equal?"
"(cadr s_26)"
"                                                                                                  \"..\")"
"(cdr s_26)"
"(cddr s_26))))"
"(if(pair? p_80)"
"(flatten-sub-path_0"
"(car p_80)"
"(append(cdr p_80) r_15))"
"(flatten-sub-path_0 p_80 r_15)))"
"(flatten-sub-path_0"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_26) \"..\")"
"(cdr s_26)"
"(cddr s_26))))))"
"(if(pair? p_79)(cdr p_79) #f))"
" #f)))"
"(let-values(((s-parsed_0)"
"(if(symbol? s_31)"
"(let-values()"
"(let-values(((or-part_49)"
"(path-cache-get"
"(cons s_31(get-reg_0)))))"
"(if or-part_49"
" or-part_49"
"(let-values(((cols_0 file_3)"
"(split-relative-string"
"(symbol->string s_31)"
" #f)))"
"(let-values(((f-file_0)"
"(if(null? cols_0)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_3"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_0"
"(if(null? cols_0) file_3(car cols_0))"
"(if(null? cols_0) null(cdr cols_0))"
" f-file_0"
" #t))))))"
"(if(string? s_31)"
"(let-values()"
"(let-values(((dir_4)(get-dir_0)))"
"(let-values(((or-part_365)"
"(path-cache-get"
"(cons s_31 dir_4))))"
"(if or-part_365"
" or-part_365"
"(let-values(((cols_1 file_4)"
"(split-relative-string"
" s_31"
" #f)))"
"(if(null? cols_1)"
"(build-path dir_4(ss->rkt_0 file_4))"
"(apply"
" build-path"
" dir_4"
"(append"
"(map2"
"(lambda(s_159)"
"                                                                                    (if (string=? s_159 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_159 \"..\")"
"(let-values() 'up)"
"(let-values() s_159))))"
" cols_1)"
"(list(ss->rkt_0 file_4))))))))))"
"(if(path? s_31)"
"(let-values()"
"(path-ss->rkt_0"
"(simplify-path"
"(if(complete-path? s_31)"
" s_31"
"(path->complete-path s_31(get-dir_0))))))"
"(if(eq?(car s_31) 'lib)"
"(let-values()"
"(let-values(((or-part_88)"
"(path-cache-get"
"(cons s_31(get-reg_0)))))"
"(if or-part_88"
" or-part_88"
"(let-values(((cols_2 file_5)"
"(split-relative-string"
"(cadr s_31)"
" #f)))"
"(let-values(((old-style?_0)"
"(if(null?(cddr s_31))"
"(if(null? cols_2)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_5)"
" #f)"
" #t)))"
"(let-values(((f-file_1)"
"(if old-style?_0"
"(ss->rkt_0 file_5)"
"(if(null? cols_2)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_5)"
"(ss->rkt_0 file_5)"
"(string-append"
" file_5"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_3)"
"(if old-style?_0"
"(append"
"(if(null?"
"(cddr s_31))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_81)"
"(split-relative-string"
" p_81"
" #t))"
"(cddr s_31))))"
" cols_2)"
"(if(null? cols_2)"
"(list file_5)"
" cols_2))))"
"(find-col-file"
" show-collection-err_0"
"(car cols_3)"
"(cdr cols_3)"
" f-file_1"
" #t))))))))"
"(if(eq?(car s_31) 'file)"
"(let-values()"
"(path-ss->rkt_0"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_31))"
"(get-dir_0)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_366)(path? s-parsed_0)))"
"(if or-part_366 or-part_366(vector? s-parsed_0)))"
"(void)"
"(let-values()"
"(if stx_18"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_0 (car s-parsed_0) \"\"))"
" stx_18)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_31))))"
"(let-values(((filename_2)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 0)"
"(simplify-path(cleanse-path s-parsed_0) #f))))"
"(let-values(((normal-filename_0)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 1)"
"(normal-case-path filename_2))))"
"(let-values(((base_30 name_78 dir?_9)"
"(if(vector? s-parsed_0)"
"(values"
" 'ignored"
"(vector-ref s-parsed_0 2)"
" 'ignored)"
"(split-path filename_2))))"
"(let-values(((no-sfx_0)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 3)"
"                                                                           (path-replace-extension name_78 #\"\"))))"
"(let-values(((root-modname_0)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 4)"
"(1/make-resolved-module-path filename_2))))"
"(let-values(((hts_3)"
"(let-values(((or-part_367)"
"(registry-table-ref"
"(get-reg_0))))"
"(if or-part_367"
" or-part_367"
"(let-values(((hts_4)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(registry-table-set!"
"(get-reg_0)"
" hts_4)"
" hts_4))))))"
"(let-values(((modname_0)"
"(if subm-path_0"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_0)"
" subm-path_0))"
" root-modname_0)))"
"(begin"
"(if load?_7"
"(let-values()"
"(let-values(((got_0)"
"(hash-ref"
"(car hts_3)"
" modname_0"
" #f)))"
"(if got_0"
"(void)"
"(let-values()"
"(let-values(((loading_0)"
"(let-values(((tag_2)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_2)))"
"((nsr_0)(get-reg_0)))"
"(begin"
"(for-each2"
"(lambda(s_405)"
"(if(if(equal?"
"(cdr s_405)"
" normal-filename_0)"
"(eq?(car s_405) nsr_0)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_2"
"(apply"
" string-append"
"((letrec-values(((loop_122)"
"(lambda(l_82)"
"(begin"
" 'loop"
"(if(null?"
" l_82)"
" '()"
"(list*"
"                                                                                                                     \"\\n   \""
"(path->string"
"(cdar"
" l_82))"
"(loop_122"
"(cdr"
" l_82))))))))"
" loop_122)"
"(reverse$1 loading_0)))))"
"(void)))"
" loading_0)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_40)(f_40))"
"(lambda(f_24)"
"(call-with-continuation-prompt"
" f_24"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons nsr_0 normal-filename_0)"
" loading_0)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_0"
" 1/current-module-path-for-load"
"((if stx_18"
"(lambda(p_82)"
"(1/datum->syntax"
" #f"
" p_82"
" stx_18))"
" values)"
"(if(symbol? s_31)"
"(let-values() s_31)"
"(if(if(pair? s_31)"
"(eq?(car s_31) 'lib)"
" #f)"
"(let-values() s_31)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_0)"
"(let-values(((src_8)"
"(1/resolved-module-path-name"
" root-modname_0)))"
"(if(symbol? src_8)"
"(list"
" 'quote"
" src_8)"
" src_8))"
" root-modname_0))))))"
"(let-values()"
"((1/current-load/use-compiled)"
" filename_2"
"(let-values(((sym_100)"
"(string->symbol"
"(path->string"
" no-sfx_0))))"
"(if subm-path_0"
"(if(hash-ref"
"(car hts_3)"
" root-modname_0"
" #f)"
"(cons #f subm-path_0)"
"(cons"
" sym_100"
" subm-path_0))"
" sym_100))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_0))"
"(if load?_7"
"(let-values(((or-part_266)"
"(string? s_31)))"
"(if or-part_266"
" or-part_266"
"(let-values(((or-part_368)"
"(symbol? s_31)))"
"(if or-part_368"
" or-part_368"
"(if(pair? s_31)"
"(eq?(car s_31) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_31)"
"(cons s_31(get-dir_0))"
"(cons s_31(get-reg_0)))"
"(vector"
" filename_2"
" normal-filename_0"
" name_78"
" no-sfx_0"
" root-modname_0)))"
"(void))"
" modname_0)))))))))))))))))))))))))"
" standard-module-name-resolver_0)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_61)"
"(begin"
"(1/eval"
" s_61"
"(1/current-namespace)"
"(let-values(((c_100)(1/current-compile)))"
"(lambda(e_83 ns_122)"
"(if(eq? ns_122(1/current-namespace))"
"(c_100 e_83 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_122)"
"(let-values()(c_100 e_83 #t))))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_62 immediate-eval?_0)(begin(1/compile s_62(1/current-namespace)(not immediate-eval?_0)))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_9 in_0)"
"(begin"
"(begin"
"(if(input-port? in_0)"
"(void)"
"          (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_0)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_9 in_0)))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(1/current-load/use-compiled default-load/use-compiled)"
"(1/current-reader-guard default-reader-guard)"
"(1/current-eval default-eval-handler)"
"(1/current-compile default-compile-handler)"
"(1/current-load default-load-handler)"
"(current-read-interaction default-read-interaction)))))"
"(define-values"
"(seal)"
"(lambda()(begin(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key))))))"
"(define-values(boot-primitives)(hash 'boot boot 'seal seal 'orig-paramz orig-paramz))"
"(define-values"
"(prepare-next-phase-namespace)"
"(lambda(ctx_71)"
"(begin"
"(let-values(((phase_40)(add1(expand-context-phase ctx_71))))"
"(let-values(((ns_58)(namespace->namespace-at-phase(expand-context-namespace ctx_71) phase_40)))"
"(namespace-visit-available-modules! ns_58 phase_40))))))"
"(define-values"
"(expand-body7.1)"
"(lambda(source1_0 stratified?2_0 stratified?4_0 bodys5_0 ctx6_0)"
"(begin"
" 'expand-body7"
"(let-values(((bodys_7) bodys5_0))"
"(let-values(((ctx_14) ctx6_0))"
"(let-values(((s_40) source1_0))"
"(let-values(((stratified?_0)(if stratified?4_0 stratified?2_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_56)(expand-context-observer ctx_14)))"
"(if obs_56"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_56 'enter-block(datum->syntax$1 #f bodys_7))))"
"(void)))"
"(values))))"
"(let-values(((inside-sc_0)(new-scope 'intdef)))"
"(let-values(((init-bodys_0)"
"(reverse$1"
"(let-values(((lst_264) bodys_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_264)))"
"((letrec-values(((for-loop_269)"
"(lambda(fold-var_65 lst_168)"
"(begin"
" 'for-loop"
"(if(pair? lst_168)"
"(let-values(((body_11)(unsafe-car lst_168))"
"((rest_140)(unsafe-cdr lst_168)))"
"(let-values(((fold-var_11)"
"(let-values(((fold-var_12) fold-var_65))"
"(let-values(((fold-var_211)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_11"
" inside-sc_0))"
" fold-var_12))))"
"(values fold-var_211)))))"
"(if(not #f)"
"(for-loop_269 fold-var_11 rest_140)"
" fold-var_11)))"
" fold-var_65)))))"
" for-loop_269)"
" null"
" lst_264))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_57)(expand-context-observer ctx_14)))"
"(if obs_57"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_57"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_0)"
"(datum->syntax$1 #f bodys_7))))"
"(void)))"
"(values))))"
"(let-values(((phase_138)(expand-context-phase ctx_14)))"
"(let-values(((frame-id_2)(make-reference-record)))"
"(let-values(((def-ctx-scopes_6)(box null)))"
"(let-values(((body-ctx_0)"
"(let-values(((v_246) ctx_14))"
"(let-values(((the-struct_90) v_246))"
"(if(expand-context/outer? the-struct_90)"
"(let-values(((context51_0)(list(make-liberal-define-context)))"
"((name52_1) #f)"
"((only-immediate?53_0) #t)"
"((def-ctx-scopes54_0) def-ctx-scopes_6)"
"((post-expansion-scope55_0) inside-sc_0)"
"((post-expansion-scope-action56_0) add-scope)"
"((scopes57_1)"
"(cons inside-sc_0(expand-context-scopes ctx_14)))"
"((use-site-scopes58_0)(box null))"
"((frame-id59_0) frame-id_2)"
"((reference-records60_0)"
"(cons"
" frame-id_2"
"(expand-context-reference-records ctx_14)))"
"((inner61_0)(root-expand-context/outer-inner v_246)))"
"(expand-context/outer1.1"
" inner61_0"
" post-expansion-scope55_0"
" use-site-scopes58_0"
" frame-id59_0"
" context51_0"
"(expand-context/outer-env the-struct_90)"
" post-expansion-scope-action56_0"
" scopes57_1"
" def-ctx-scopes54_0"
"(expand-context/outer-binding-layer the-struct_90)"
" reference-records60_0"
" only-immediate?53_0"
"(expand-context/outer-need-eventually-defined the-struct_90)"
"(expand-context/outer-current-introduction-scopes the-struct_90)"
" name52_1))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context/outer?\""
" the-struct_90))))))"
"(let-values(((maybe-increment-binding-layer_0)"
"(lambda(ids_28 body-ctx_1)"
"(begin"
" 'maybe-increment-binding-layer"
"(if(eq?"
"(expand-context-binding-layer body-ctx_1)"
"(expand-context-binding-layer ctx_14))"
"(increment-binding-layer ids_28 body-ctx_1 inside-sc_0)"
"(expand-context-binding-layer body-ctx_1))))))"
"(let-values(((name_79)(expand-context-name ctx_14)))"
"((letrec-values(((loop_123)"
"(lambda(body-ctx_2"
" bodys_8"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" stx-clauses_0"
" dups_0)"
"(begin"
" 'loop"
"(if(null? bodys_8)"
"(let-values()"
"(let-values(((temp65_6)(reverse$1 val-idss_0))"
"((temp66_4)(reverse$1 val-keyss_0))"
"((temp67_4)(reverse$1 val-rhss_0))"
"((temp68_2)(reverse$1 track-stxs_0))"
"((temp69_6)(reverse$1 stx-clauses_0))"
"((temp70_3)(reverse$1 done-bodys_0))"
"((s71_0) s_40)"
"((stratified?72_0) stratified?_0)"
"((name73_0) name_79)"
"((temp74_3)(reverse$1 trans-idss_1)))"
"(finish-expanding-body27.1"
" temp74_3"
" name73_0"
" s71_0"
" stratified?72_0"
" body-ctx_2"
" frame-id_2"
" def-ctx-scopes_6"
" temp65_6"
" temp66_4"
" temp67_4"
" temp68_2"
" temp69_6"
" temp70_3)))"
"(let-values()"
"(let-values(((rest-bodys_0)(cdr bodys_8)))"
"(let-values((()"
"(begin"
"(let-values(((obs_58)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_58"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_58"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_0)"
"(let-values(((temp75_3)(car bodys_8))"
"((temp76_3)"
"(if(if name_79"
"(null?"
"(cdr bodys_8))"
" #f)"
"(let-values(((v_85)"
" body-ctx_2))"
"(let-values(((the-struct_91)"
" v_85))"
"(if(expand-context/outer?"
" the-struct_91)"
"(let-values(((name77_0)"
" name_79)"
"((inner78_0)"
"(root-expand-context/outer-inner"
" v_85)))"
"(expand-context/outer1.1"
" inner78_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_91)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_91)"
"(root-expand-context/outer-frame-id"
" the-struct_91)"
"(expand-context/outer-context"
" the-struct_91)"
"(expand-context/outer-env"
" the-struct_91)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_91)"
"(expand-context/outer-scopes"
" the-struct_91)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_91)"
"(expand-context/outer-binding-layer"
" the-struct_91)"
"(expand-context/outer-reference-records"
" the-struct_91)"
"(expand-context/outer-only-immediate?"
" the-struct_91)"
"(expand-context/outer-need-eventually-defined"
" the-struct_91)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_91)"
" name77_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                       \"expand-context/outer?\""
" the-struct_91))))"
" body-ctx_2)))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" temp75_3"
" temp76_3))))"
"(let-values(((disarmed-exp-body_0)"
"(syntax-disarm$1 exp-body_0)))"
"(let-values(((tmp_61)"
"(core-form-sym"
" disarmed-exp-body_0"
" phase_138)))"
"(if(equal? tmp_61 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_59)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_59"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_59"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_0 begin79_0 e80_0)"
"(let-values(((s_396)"
" disarmed-exp-body_0))"
"(let-values(((orig-s_39)"
" s_396))"
"(let-values(((begin79_1"
" e80_1)"
"(let-values(((s_475)"
"(if(syntax?$1"
" s_396)"
"(syntax-e$1"
" s_396)"
" s_396)))"
"(if(pair?"
" s_475)"
"(let-values(((begin81_0)"
"(let-values(((s_44)"
"(car"
" s_475)))"
" s_44))"
"((e82_0)"
"(let-values(((s_167)"
"(cdr"
" s_475)))"
"(let-values(((s_168)"
"(if(syntax?$1"
" s_167)"
"(syntax-e$1"
" s_167)"
" s_167)))"
"(let-values(((flat-s_24)"
"(to-syntax-list.1"
" s_168)))"
"(if(not"
" flat-s_24)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_39))"
"(let-values()"
" flat-s_24)))))))"
"(values"
" begin81_0"
" e82_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_39)))))"
"(values"
" #t"
" begin79_1"
" e80_1))))))"
"(let-values(((track_0)"
"(lambda(e_84)"
"(begin"
" 'track"
"(syntax-track-origin$1"
" e_84"
" exp-body_0)))))"
"(let-values(((splice-bodys_0)"
"(append"
"(map2 track_0 e80_0)"
" rest-bodys_0)))"
"(begin"
"(let-values(((obs_60)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_60"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_60"
" 'splice"
" splice-bodys_0)))"
"(void)))"
"(loop_123"
" body-ctx_2"
" splice-bodys_0"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" stx-clauses_0"
" dups_0)))))))"
"(if(equal? tmp_61 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_61)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_61"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_61"
" 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_33"
" define-values83_0"
" id84_0"
" rhs85_0)"
"(let-values(((s_85)"
" disarmed-exp-body_0))"
"(let-values(((orig-s_40)"
" s_85))"
"(let-values(((define-values83_1"
" id84_1"
" rhs85_1)"
"(let-values(((s_46)"
"(if(syntax?$1"
" s_85)"
"(syntax-e$1"
" s_85)"
" s_85)))"
"(if(pair?"
" s_46)"
"(let-values(((define-values86_0)"
"(let-values(((s_393)"
"(car"
" s_46)))"
" s_393))"
"((id87_0"
" rhs88_0)"
"(let-values(((s_47)"
"(cdr"
" s_46)))"
"(let-values(((s_69)"
"(if(syntax?$1"
" s_47)"
"(syntax-e$1"
" s_47)"
" s_47)))"
"(if(pair?"
" s_69)"
"(let-values(((id89_0)"
"(let-values(((s_50)"
"(car"
" s_69)))"
"(let-values(((s_311)"
"(if(syntax?$1"
" s_50)"
"(syntax-e$1"
" s_50)"
" s_50)))"
"(let-values(((flat-s_25)"
"(to-syntax-list.1"
" s_311)))"
"(if(not"
" flat-s_25)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_40))"
"(let-values()"
"(let-values(((id_16)"
"(let-values(((lst_311)"
" flat-s_25))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_311)))"
"((letrec-values(((for-loop_270)"
"(lambda(id_100"
" lst_312)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_312)"
"(let-values(((s_315)"
"(unsafe-car"
" lst_312))"
"((rest_177)"
"(unsafe-cdr"
" lst_312)))"
"(let-values(((id_101)"
"(let-values(((id_80)"
" id_100))"
"(let-values(((id_81)"
"(let-values()"
"(let-values(((id92_0)"
"(let-values()"
"(if(let-values(((or-part_47)"
"(if(syntax?$1"
" s_315)"
"(symbol?"
"(syntax-e$1"
" s_315))"
" #f)))"
"(if or-part_47"
" or-part_47"
"(symbol?"
" s_315)))"
" s_315"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_40"
" s_315)))))"
"(cons"
" id92_0"
" id_80)))))"
"(values"
" id_81)))))"
"(if(not"
" #f)"
"(for-loop_270"
" id_101"
" rest_177)"
" id_101)))"
" id_100)))))"
" for-loop_270)"
" null"
" lst_311)))))"
"(reverse$1"
" id_16))))))))"
"((rhs90_0)"
"(let-values(((s_476)"
"(cdr"
" s_69)))"
"(let-values(((s_477)"
"(if(syntax?$1"
" s_476)"
"(syntax-e$1"
" s_476)"
" s_476)))"
"(if(pair?"
" s_477)"
"(let-values(((rhs91_0)"
"(let-values(((s_54)"
"(car"
" s_477)))"
" s_54))"
"(()"
"(let-values(((s_413)"
"(cdr"
" s_477)))"
"(let-values(((s_317)"
"(if(syntax?$1"
" s_413)"
"(syntax-e$1"
" s_413)"
" s_413)))"
"(if(null?"
" s_317)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_40))))))"
"(values"
" rhs91_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_40))))))"
"(values"
" id89_0"
" rhs90_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_40))))))"
"(values"
" define-values86_0"
" id87_0"
" rhs88_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_40)))))"
"(values"
" #t"
" define-values83_1"
" id84_1"
" rhs85_1))))))"
"(let-values(((ids_4)"
"(remove-use-site-scopes"
" id84_0"
" body-ctx_2)))"
"(let-values((()"
"(begin"
"(let-values(((obs_62)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_62"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_62"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_4"
" rhs85_0)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_0)"
"(let-values(((ids93_0)"
" ids_4)"
"((phase94_0)"
" phase_138)"
"((exp-body95_0)"
" exp-body_0)"
"((dups96_0)"
" dups_0))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids93_0"
" phase94_0"
" exp-body95_0"
" dups96_0"
" #t))))"
"(let-values(((counter_5)"
"(root-expand-context-counter"
" ctx_14)))"
"(let-values(((keys_5)"
"(reverse$1"
"(let-values(((lst_191)"
" ids_4))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_191)))"
"((letrec-values(((for-loop_12)"
"(lambda(fold-var_276"
" lst_313)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_313)"
"(let-values(((id_102)"
"(unsafe-car"
" lst_313))"
"((rest_178)"
"(unsafe-cdr"
" lst_313)))"
"(let-values(((fold-var_242)"
"(let-values(((fold-var_243)"
" fold-var_276))"
"(let-values(((fold-var_229)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((frame-id100_0)"
" frame-id_2)"
"((exp-body101_0)"
" exp-body_0))"
"(add-local-binding!35.1"
" frame-id100_0"
" #t"
" exp-body101_0"
" #t"
" id_102"
" phase_138"
" counter_5)))"
" fold-var_243))))"
"(values"
" fold-var_229)))))"
"(if(not"
" #f)"
"(for-loop_12"
" fold-var_242"
" rest_178)"
" fold-var_242)))"
" fold-var_276)))))"
" for-loop_12)"
" null"
" lst_191))))))"
"(let-values(((extended-env_0)"
"(let-values(((lst_314)"
" keys_5)"
"((lst_221)"
" ids_4))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_314)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_221)))"
"((letrec-values(((for-loop_229)"
"(lambda(env_17"
" lst_192"
" lst_223)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_192)"
"(pair?"
" lst_223)"
" #f)"
"(let-values(((key_90)"
"(unsafe-car"
" lst_192))"
"((rest_179)"
"(unsafe-cdr"
" lst_192))"
"((id_103)"
"(unsafe-car"
" lst_223))"
"((rest_102)"
"(unsafe-cdr"
" lst_223)))"
"(let-values(((env_18)"
"(let-values(((env_19)"
" env_17))"
"(let-values(((env_20)"
"(let-values()"
"(env-extend"
" env_19"
" key_90"
"(local-variable1.1"
" id_103)))))"
"(values"
" env_20)))))"
"(if(not"
" #f)"
"(for-loop_229"
" env_18"
" rest_179"
" rest_102)"
" env_18)))"
" env_17)))))"
" for-loop_229)"
"(expand-context-env"
" body-ctx_2)"
" lst_314"
" lst_221)))))"
"(loop_123"
"(let-values(((v_247)"
" body-ctx_2))"
"(let-values(((the-struct_52)"
" v_247))"
"(if(expand-context/outer?"
" the-struct_52)"
"(let-values(((env102_0)"
" extended-env_0)"
"((binding-layer103_0)"
"(maybe-increment-binding-layer_0"
" ids_4"
" body-ctx_2))"
"((inner104_0)"
"(root-expand-context/outer-inner"
" v_247)))"
"(expand-context/outer1.1"
" inner104_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_52)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_52)"
"(root-expand-context/outer-frame-id"
" the-struct_52)"
"(expand-context/outer-context"
" the-struct_52)"
" env102_0"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_52)"
"(expand-context/outer-scopes"
" the-struct_52)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_52)"
" binding-layer103_0"
"(expand-context/outer-reference-records"
" the-struct_52)"
"(expand-context/outer-only-immediate?"
" the-struct_52)"
"(expand-context/outer-need-eventually-defined"
" the-struct_52)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_52)"
"(expand-context/outer-name"
" the-struct_52)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                      \"expand-context/outer?\""
" the-struct_52))))"
" rest-bodys_0"
" null"
"(cons"
" ids_4"
"(append"
"(reverse$1"
"(let-values(((lst_195)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_195)))"
"((letrec-values(((for-loop_41)"
"(lambda(fold-var_187"
" lst_196)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_196)"
"(let-values(((done-body_0)"
"(unsafe-car"
" lst_196))"
"((rest_180)"
"(unsafe-cdr"
" lst_196)))"
"(let-values(((fold-var_277)"
"(let-values(((fold-var_278)"
" fold-var_187))"
"(let-values(((fold-var_279)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_278))))"
"(values"
" fold-var_279)))))"
"(if(not"
" #f)"
"(for-loop_41"
" fold-var_277"
" rest_180)"
" fold-var_277)))"
" fold-var_187)))))"
" for-loop_41)"
" null"
" lst_195))))"
" val-idss_0))"
"(cons"
" keys_5"
"(append"
"(reverse$1"
"(let-values(((lst_315)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_315)))"
"((letrec-values(((for-loop_271)"
"(lambda(fold-var_190"
" lst_316)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_316)"
"(let-values(((done-body_1)"
"(unsafe-car"
" lst_316))"
"((rest_181)"
"(unsafe-cdr"
" lst_316)))"
"(let-values(((fold-var_280)"
"(let-values(((fold-var_281)"
" fold-var_190))"
"(let-values(((fold-var_282)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_281))))"
"(values"
" fold-var_282)))))"
"(if(not"
" #f)"
"(for-loop_271"
" fold-var_280"
" rest_181)"
" fold-var_280)))"
" fold-var_190)))))"
" for-loop_271)"
" null"
" lst_315))))"
" val-keyss_0))"
"(cons"
" rhs85_0"
"(append"
"(reverse$1"
"(let-values(((lst_148)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_148)))"
"((letrec-values(((for-loop_115)"
"(lambda(fold-var_283"
" lst_317)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_317)"
"(let-values(((done-body_2)"
"(unsafe-car"
" lst_317))"
"((rest_182)"
"(unsafe-cdr"
" lst_317)))"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_284)"
" fold-var_283))"
"(let-values(((fold-var_22)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_2"
" s_40"
" phase_138))"
" fold-var_284))))"
"(values"
" fold-var_22)))))"
"(if(not"
" #f)"
"(for-loop_115"
" fold-var_41"
" rest_182)"
" fold-var_41)))"
" fold-var_283)))))"
" for-loop_115)"
" null"
" lst_148))))"
" val-rhss_0))"
"(cons"
" exp-body_0"
"(append"
"(reverse$1"
"(let-values(((lst_102)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_102)))"
"((letrec-values(((for-loop_117)"
"(lambda(fold-var_25"
" lst_149)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_149)"
"(let-values(((done-body_3)"
"(unsafe-car"
" lst_149))"
"((rest_75)"
"(unsafe-cdr"
" lst_149)))"
"(let-values(((fold-var_131)"
"(let-values(((fold-var_132)"
" fold-var_25))"
"(let-values(((fold-var_133)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_132))))"
"(values"
" fold-var_133)))))"
"(if(not"
" #f)"
"(for-loop_117"
" fold-var_131"
" rest_75)"
" fold-var_131)))"
" fold-var_25)))))"
" for-loop_117)"
" null"
" lst_102))))"
" track-stxs_0))"
" trans-idss_1"
" stx-clauses_0"
" new-dups_0))))))))))"
"(if(equal? tmp_61 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_63)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_63"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_63"
" 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_4"
" define-syntaxes105_0"
" id106_0"
" rhs107_0)"
"(let-values(((s_93)"
" disarmed-exp-body_0))"
"(let-values(((orig-s_41)"
" s_93))"
"(let-values(((define-syntaxes105_1"
" id106_1"
" rhs107_1)"
"(let-values(((s_95)"
"(if(syntax?$1"
" s_93)"
"(syntax-e$1"
" s_93)"
" s_93)))"
"(if(pair?"
" s_95)"
"(let-values(((define-syntaxes108_0)"
"(let-values(((s_478)"
"(car"
" s_95)))"
" s_478))"
"((id109_0"
" rhs110_0)"
"(let-values(((s_438)"
"(cdr"
" s_95)))"
"(let-values(((s_479)"
"(if(syntax?$1"
" s_438)"
"(syntax-e$1"
" s_438)"
" s_438)))"
"(if(pair?"
" s_479)"
"(let-values(((id111_0)"
"(let-values(((s_480)"
"(car"
" s_479)))"
"(let-values(((s_209)"
"(if(syntax?$1"
" s_480)"
"(syntax-e$1"
" s_480)"
" s_480)))"
"(let-values(((flat-s_26)"
"(to-syntax-list.1"
" s_209)))"
"(if(not"
" flat-s_26)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_41))"
"(let-values()"
"(let-values(((id_104)"
"(let-values(((lst_40)"
" flat-s_26))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_40)))"
"((letrec-values(((for-loop_54)"
"(lambda(id_105"
" lst_41)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_41)"
"(let-values(((s_67)"
"(unsafe-car"
" lst_41))"
"((rest_17)"
"(unsafe-cdr"
" lst_41)))"
"(let-values(((id_106)"
"(let-values(((id_107)"
" id_105))"
"(let-values(((id_108)"
"(let-values()"
"(let-values(((id114_0)"
"(let-values()"
"(if(let-values(((or-part_351)"
"(if(syntax?$1"
" s_67)"
"(symbol?"
"(syntax-e$1"
" s_67))"
" #f)))"
"(if or-part_351"
" or-part_351"
"(symbol?"
" s_67)))"
" s_67"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_41"
" s_67)))))"
"(cons"
" id114_0"
" id_107)))))"
"(values"
" id_108)))))"
"(if(not"
" #f)"
"(for-loop_54"
" id_106"
" rest_17)"
" id_106)))"
" id_105)))))"
" for-loop_54)"
" null"
" lst_40)))))"
"(reverse$1"
" id_104))))))))"
"((rhs112_0)"
"(let-values(((s_102)"
"(cdr"
" s_479)))"
"(let-values(((s_154)"
"(if(syntax?$1"
" s_102)"
"(syntax-e$1"
" s_102)"
" s_102)))"
"(if(pair?"
" s_154)"
"(let-values(((rhs113_0)"
"(let-values(((s_481)"
"(car"
" s_154)))"
" s_481))"
"(()"
"(let-values(((s_482)"
"(cdr"
" s_154)))"
"(let-values(((s_483)"
"(if(syntax?$1"
" s_482)"
"(syntax-e$1"
" s_482)"
" s_482)))"
"(if(null?"
" s_483)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_41))))))"
"(values"
" rhs113_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_41))))))"
"(values"
" id111_0"
" rhs112_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_41))))))"
"(values"
" define-syntaxes108_0"
" id109_0"
" rhs110_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_41)))))"
"(values"
" #t"
" define-syntaxes105_1"
" id106_1"
" rhs107_1))))))"
"(let-values(((ids_29)"
"(remove-use-site-scopes"
" id106_0"
" body-ctx_2)))"
"(let-values((()"
"(begin"
"(let-values(((obs_64)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_64"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_64"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_29"
" rhs107_0)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_1)"
"(let-values(((ids115_0)"
" ids_29)"
"((phase116_0)"
" phase_138)"
"((exp-body117_0)"
" exp-body_0)"
"((dups118_0)"
" dups_0))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids115_0"
" phase116_0"
" exp-body117_0"
" dups118_0"
" #t))))"
"(let-values(((counter_6)"
"(root-expand-context-counter"
" ctx_14)))"
"(let-values(((keys_6)"
"(reverse$1"
"(let-values(((lst_318)"
" ids_29))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_318)))"
"((letrec-values(((for-loop_272)"
"(lambda(fold-var_285"
" lst_319)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_319)"
"(let-values(((id_109)"
"(unsafe-car"
" lst_319))"
"((rest_183)"
"(unsafe-cdr"
" lst_319)))"
"(let-values(((fold-var_286)"
"(let-values(((fold-var_287)"
" fold-var_285))"
"(let-values(((fold-var_288)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((frame-id122_0)"
" frame-id_2)"
"((exp-body123_0)"
" exp-body_0))"
"(add-local-binding!35.1"
" frame-id122_0"
" #t"
" exp-body123_0"
" #t"
" id_109"
" phase_138"
" counter_6)))"
" fold-var_287))))"
"(values"
" fold-var_288)))))"
"(if(not"
" #f)"
"(for-loop_272"
" fold-var_286"
" rest_183)"
" fold-var_286)))"
" fold-var_285)))))"
" for-loop_272)"
" null"
" lst_318))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_65)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_65"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_65"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(prepare-next-phase-namespace"
" ctx_14)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_66)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_66"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_66"
" 'enter-bind)))"
"(void)))"
"(values))))"
"(let-values(((vals_8)"
"(eval-for-syntaxes-binding"
" rhs107_0"
" ids_29"
" body-ctx_2)))"
"(let-values(((extended-env_1)"
"(let-values(((lst_320)"
" keys_6)"
"((lst_321)"
" vals_8)"
"((lst_322)"
" ids_29))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_320)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_321)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_322)))"
"((letrec-values(((for-loop_273)"
"(lambda(env_21"
" lst_323"
" lst_324"
" lst_325)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_323)"
"(if(pair?"
" lst_324)"
"(pair?"
" lst_325)"
" #f)"
" #f)"
"(let-values(((key_91)"
"(unsafe-car"
" lst_323))"
"((rest_184)"
"(unsafe-cdr"
" lst_323))"
"((val_83)"
"(unsafe-car"
" lst_324))"
"((rest_185)"
"(unsafe-cdr"
" lst_324))"
"((id_110)"
"(unsafe-car"
" lst_325))"
"((rest_186)"
"(unsafe-cdr"
" lst_325)))"
"(let-values(((env_22)"
"(let-values(((env_23)"
" env_21))"
"(let-values(((env_24)"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_83"
" id_110"
" phase_138"
" body-ctx_2)"
"(env-extend"
" env_23"
" key_91"
" val_83)))))"
"(values"
" env_24)))))"
"(if(not"
" #f)"
"(for-loop_273"
" env_22"
" rest_184"
" rest_185"
" rest_186)"
" env_22)))"
" env_21)))))"
" for-loop_273)"
"(expand-context-env"
" body-ctx_2)"
" lst_320"
" lst_321"
" lst_322)))))"
"(begin"
"(let-values(((obs_67)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_67"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_67"
" 'exit-bind)))"
"(void)))"
"(loop_123"
"(let-values(((v_248)"
" body-ctx_2))"
"(let-values(((the-struct_92)"
" v_248))"
"(if(expand-context/outer?"
" the-struct_92)"
"(let-values(((env124_0)"
" extended-env_1)"
"((binding-layer125_0)"
"(maybe-increment-binding-layer_0"
" ids_29"
" body-ctx_2))"
"((inner126_0)"
"(root-expand-context/outer-inner"
" v_248)))"
"(expand-context/outer1.1"
" inner126_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_92)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_92)"
"(root-expand-context/outer-frame-id"
" the-struct_92)"
"(expand-context/outer-context"
" the-struct_92)"
" env124_0"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_92)"
"(expand-context/outer-scopes"
" the-struct_92)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_92)"
" binding-layer125_0"
"(expand-context/outer-reference-records"
" the-struct_92)"
"(expand-context/outer-only-immediate?"
" the-struct_92)"
"(expand-context/outer-need-eventually-defined"
" the-struct_92)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_92)"
"(expand-context/outer-name"
" the-struct_92)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                  \"expand-context/outer?\""
" the-struct_92))))"
" rest-bodys_0"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
"(cons"
" ids_29"
" trans-idss_1)"
"(cons"
"(datum->syntax$1"
" #f"
"(list"
" ids_29"
" rhs107_0)"
" rhs107_0)"
" stx-clauses_0)"
" new-dups_1)))))))))))))))"
"(let-values()"
"(if stratified?_0"
"(let-values()"
"(begin"
"(if(null? done-bodys_0)"
"(void)"
"(let-values()"
"(error"
"                                                                                           \"internal error: accumulated expressions not empty\")))"
"(loop_123"
" body-ctx_2"
" null"
"(if(if(null? val-idss_0)"
"(null? trans-idss_1)"
" #f)"
"(reverse$1"
"(cons"
" exp-body_0"
" rest-bodys_0))"
"(list"
"(datum->syntax$1"
" #f"
"(cons"
"(core-id"
" '#%stratified-body"
" phase_138)"
"(cons"
" exp-body_0"
" rest-bodys_0)))))"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" stx-clauses_0"
" dups_0)))"
"(let-values()"
"(loop_123"
" body-ctx_2"
" rest-bodys_0"
"(cons exp-body_0 done-bodys_0)"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" stx-clauses_0"
" dups_0))))))))))))))))))"
" loop_123)"
" body-ctx_0"
" init-bodys_0"
" null"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table))))))))))))))))))))"
"(define-values"
"(finish-expanding-body27.1)"
"(lambda(disappeared-transformer-bindings13_0"
" name12_0"
" source10_0"
" stratified?11_0"
" body-ctx18_0"
" frame-id19_0"
" def-ctx-scopes20_0"
" val-idss21_0"
" val-keyss22_0"
" val-rhss23_0"
" track-stxs24_0"
" stx-clauses25_0"
" done-bodys26_0)"
"(begin"
" 'finish-expanding-body27"
"(let-values(((body-ctx_3) body-ctx18_0))"
"(let-values(((frame-id_13) frame-id19_0))"
"(let-values(((def-ctx-scopes_7) def-ctx-scopes20_0))"
"(let-values(((val-idss_1) val-idss21_0))"
"(let-values(((val-keyss_1) val-keyss22_0))"
"(let-values(((val-rhss_1) val-rhss23_0))"
"(let-values(((track-stxs_1) track-stxs24_0))"
"(let-values(((stx-clauses_1) stx-clauses25_0))"
"(let-values(((done-bodys_1) done-bodys26_0))"
"(let-values(((s_484) source10_0))"
"(let-values(((stratified?_1) stratified?11_0))"
"(let-values(((name_80) name12_0))"
"(let-values(((disappeared-transformer-bindings_0) disappeared-transformer-bindings13_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_1)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                       \"no expression after a sequence of internal definitions\""
" s_484))"
"(void))"
"(values))))"
"(let-values(((finish-ctx_0)"
"(let-values(((v_249)"
"(accumulate-def-ctx-scopes"
" body-ctx_3"
" def-ctx-scopes_7)))"
"(let-values(((the-struct_93) v_249))"
"(if(expand-context/outer? the-struct_93)"
"(let-values(((context127_0) 'expression)"
"((use-site-scopes128_0)(box null))"
"((scopes129_0)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes"
" body-ctx_3))"
"(expand-context-scopes body-ctx_3)))"
"((only-immediate?130_0) #f)"
"((def-ctx-scopes131_0) #f)"
"((post-expansion-scope132_0) #f)"
"((inner133_0)"
"(root-expand-context/outer-inner v_249)))"
"(expand-context/outer1.1"
" inner133_0"
" post-expansion-scope132_0"
" use-site-scopes128_0"
"(root-expand-context/outer-frame-id the-struct_93)"
" context127_0"
"(expand-context/outer-env the-struct_93)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_93)"
" scopes129_0"
" def-ctx-scopes131_0"
"(expand-context/outer-binding-layer the-struct_93)"
"(expand-context/outer-reference-records the-struct_93)"
" only-immediate?130_0"
"(expand-context/outer-need-eventually-defined the-struct_93)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_93)"
"(expand-context/outer-name the-struct_93)))"
"(raise-argument-error"
" 'struct-copy"
"                                                         \"expand-context/outer?\""
" the-struct_93))))))"
"(let-values(((finish-bodys_0)"
"(lambda()"
"(begin"
" 'finish-bodys"
"(let-values(((block->list?_0)(null? val-idss_1)))"
"(let-values((()"
"(begin"
"(if block->list?_0"
"(void)"
"(let-values()"
"(let-values(((obs_68)"
"(expand-context-observer"
" body-ctx_3)))"
"(if obs_68"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_68"
" 'next-group)))"
"(void)))))"
"(values))))"
"(let-values(((last-i_1)(sub1(length done-bodys_1))))"
"(let-values((()"
"(begin"
"(let-values(((obs_69)"
"(expand-context-observer"
" body-ctx_3)))"
"(if obs_69"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_69"
" 'enter-list"
"(datum->syntax$1"
" #f"
" done-bodys_1))))"
"(void)))"
"(values))))"
"(let-values(((exp-bodys_0)"
"(reverse$1"
"(let-values(((lst_326) done-bodys_1)"
"((start_64) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_326)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-naturals start_64)))"
"((letrec-values(((for-loop_132)"
"(lambda(fold-var_289"
" lst_327"
" pos_122)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_327)"
" #t"
" #f)"
"(let-values(((done-body_4)"
"(unsafe-car"
" lst_327))"
"((rest_187)"
"(unsafe-cdr"
" lst_327))"
"((i_167)"
" pos_122))"
"(let-values(((fold-var_290)"
"(let-values(((fold-var_203)"
" fold-var_289))"
"(let-values(((fold-var_255)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_70)"
"(expand-context-observer"
" body-ctx_3)))"
"(if obs_70"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_70"
" 'next)))"
"(void)))"
"(let-values(((done-body134_0)"
" done-body_4)"
"((temp135_2)"
"(if(if name_80"
"(="
" i_167"
" last-i_1)"
" #f)"
"(let-values(((v_250)"
" finish-ctx_0))"
"(let-values(((the-struct_94)"
" v_250))"
"(if(expand-context/outer?"
" the-struct_94)"
"(let-values(((name136_0)"
" name_80)"
"((inner137_1)"
"(root-expand-context/outer-inner"
" v_250)))"
"(expand-context/outer1.1"
" inner137_1"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_94)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_94)"
"(root-expand-context/outer-frame-id"
" the-struct_94)"
"(expand-context/outer-context"
" the-struct_94)"
"(expand-context/outer-env"
" the-struct_94)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_94)"
"(expand-context/outer-scopes"
" the-struct_94)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_94)"
"(expand-context/outer-binding-layer"
" the-struct_94)"
"(expand-context/outer-reference-records"
" the-struct_94)"
"(expand-context/outer-only-immediate?"
" the-struct_94)"
"(expand-context/outer-need-eventually-defined"
" the-struct_94)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_94)"
" name136_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                         \"expand-context/outer?\""
" the-struct_94))))"
" finish-ctx_0)))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" done-body134_0"
" temp135_2))))"
" fold-var_203))))"
"(values"
" fold-var_255)))))"
"(if(not"
" #f)"
"(for-loop_132"
" fold-var_290"
" rest_187"
"(+"
" pos_122"
" 1))"
" fold-var_290)))"
" fold-var_289)))))"
" for-loop_132)"
" null"
" lst_326"
" start_64))))))"
"(begin"
"(let-values(((obs_71)"
"(expand-context-observer body-ctx_3)))"
"(if obs_71"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_71"
" 'exit-list"
"(datum->syntax$1 #f exp-bodys_0))))"
"(void)))"
"(reference-record-clear! frame-id_13)"
" exp-bodys_0))))))))))"
"(if(if(null? val-idss_1)(null? disappeared-transformer-bindings_0) #f)"
"(let-values()"
"(begin"
"(let-values(((obs_72)(expand-context-observer finish-ctx_0)))"
"(if obs_72"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_72"
" 'block->list"
"(datum->syntax$1 s_484 done-bodys_1))))"
"(void)))"
"(finish-bodys_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_73)"
"(expand-context-observer finish-ctx_0)))"
"(if obs_73"
"(let-values()"
"(log-letrec-values$1"
" obs_73"
" finish-ctx_0"
" s_484"
" val-idss_1"
" val-rhss_1"
" track-stxs_1"
" stx-clauses_1"
" done-bodys_1))"
"(void)))"
"(values))))"
"(let-values(((exp-s_13)"
"(let-values(((temp142_1)(not stratified?_1))"
"((frame-id143_0) frame-id_13)"
"((finish-ctx144_0) finish-ctx_0)"
"((s145_0) s_484)"
"((temp146_1)(pair? stx-clauses_1))"
"((finish-bodys147_0) finish-bodys_0)"
"((temp148_1) #f))"
"(expand-and-split-bindings-by-reference48.1"
" finish-ctx144_0"
" frame-id143_0"
" finish-bodys147_0"
" temp146_1"
" s145_0"
" temp142_1"
" temp148_1"
" val-idss_1"
" val-keyss_1"
" val-rhss_1"
" track-stxs_1))))"
"(begin"
"(let-values(((obs_74)(expand-context-observer body-ctx_3)))"
"(if obs_74"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_74 'exit-prim exp-s_13)"
"(call-expand-observe obs_74 'return exp-s_13))))"
"(void)))"
"(if(expand-context-to-parsed? body-ctx_3)"
"(list exp-s_13)"
"(list"
"(attach-disappeared-transformer-bindings"
" exp-s_13"
" disappeared-transformer-bindings_0))))))))))))))))))))))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference48.1)"
"(lambda(ctx32_0"
" frame-id31_0"
" get-body35_0"
" had-stxes?34_0"
" source33_0"
" split?30_0"
" track?36_0"
" idss44_0"
" keyss45_0"
" rhss46_0"
" track-stxs47_0)"
"(begin"
" 'expand-and-split-bindings-by-reference48"
"(let-values(((idss_1) idss44_0))"
"(let-values(((keyss_0) keyss45_0))"
"(let-values(((rhss_1) rhss46_0))"
"(let-values(((track-stxs_2) track-stxs47_0))"
"(let-values(((split?_0) split?30_0))"
"(let-values(((frame-id_14) frame-id31_0))"
"(let-values(((ctx_72) ctx32_0))"
"(let-values(((s_370) source33_0))"
"(let-values(((had-stxes?_0) had-stxes?34_0))"
"(let-values(((get-body_0) get-body35_0))"
"(let-values(((track?_1) track?36_0))"
"(let-values()"
"(let-values(((phase_139)(expand-context-phase ctx_72)))"
"((letrec-values(((loop_124)"
"(lambda(idss_2"
" keyss_1"
" rhss_2"
" track-stxs_3"
" accum-idss_0"
" accum-keyss_0"
" accum-rhss_0"
" accum-track-stxs_0"
" track?_2"
" get-list?_0"
" can-log?_0)"
"(begin"
" 'loop"
"(if(null? idss_2)"
"(let-values()"
"(if(if(null? accum-idss_0) get-list?_0 #f)"
"(let-values()(get-body_0))"
"(let-values()"
"(let-values(((exp-body_1)(get-body_0)))"
"(let-values(((result-s_9)"
"(if(expand-context-to-parsed? ctx_72)"
"(if(null? accum-idss_0)"
"(parsed-let-values17.1"
"(keep-properties-only s_370)"
" null"
" null"
" exp-body_1)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_370)"
"(reverse$1 accum-idss_0)"
"(reverse$1"
"(map2"
" list"
" accum-keyss_0"
" accum-rhss_0))"
" exp-body_1))"
"(let-values(((track?149_0) track?_2)"
"((s150_0) s_370)"
"((temp151_2)"
"(list*"
"(if(null? accum-idss_0)"
"(core-id"
" 'let-values"
" phase_139)"
"(core-id"
" 'letrec-values"
" phase_139))"
"(build-clauses"
" accum-idss_0"
" accum-rhss_0"
" accum-track-stxs_0)"
" exp-body_1)))"
"(rebuild5.1"
" track?149_0"
" #t"
" s150_0"
" temp151_2)))))"
"(begin"
"(let-values(((obs_75)"
"(expand-context-observer ctx_72)))"
"(if obs_75"
"(let-values()"
"(if(if can-log?_0"
"(log-tag? had-stxes?_0 ctx_72)"
" #f)"
"(let-values()"
"(call-expand-observe"
" obs_75"
" 'tag"
" result-s_9))"
"(void)))"
"(void)))"
"(if get-list?_0(list result-s_9) result-s_9)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_76)"
"(expand-context-observer"
" ctx_72)))"
"(if obs_76"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_76 'next)))"
"(void)))"
"(values))))"
"(let-values(((ids_30)(car idss_2)))"
"(let-values(((expanded-rhs_0)"
"(let-values(((temp152_1)(car rhss_2))"
"((temp153_0)"
"(as-named-context"
" ctx_72"
" ids_30)))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" temp152_1"
" temp153_0))))"
"(let-values(((track-stx_0)(car track-stxs_3)))"
"(let-values(((local-or-forward-references?_0)"
"(reference-record-forward-references?"
" frame-id_14)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_14"
"(car keyss_1))"
"(values))))"
"(let-values(((forward-references?_0)"
"(reference-record-forward-references?"
" frame-id_14)))"
"(if(if(not local-or-forward-references?_0)"
" split?_0"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? accum-idss_0)"
"(void)"
"(let-values()"
"(error"
"                                                                                                 \"internal error: accumulated ids not empty\")))"
"(values))))"
"(let-values(((exp-rest_0)"
"(loop_124"
"(cdr idss_2)"
"(cdr keyss_1)"
"(cdr rhss_2)"
"(cdr track-stxs_3)"
" null"
" null"
" null"
" null"
" #f"
" #t"
" #f)))"
"(let-values(((result-s_10)"
"(if(expand-context-to-parsed?"
" ctx_72)"
"(parsed-let-values17.1"
"(keep-properties-only"
" s_370)"
"(list ids_30)"
"(list"
"(list"
"(car keyss_1)"
" expanded-rhs_0))"
" exp-rest_0)"
"(let-values(((track?154_0)"
" track?_2)"
"((s155_0)"
" s_370)"
"((temp156_0)"
"(list*"
"(core-id"
" 'let-values"
" phase_139)"
"(list"
"(build-clause"
" ids_30"
" expanded-rhs_0"
" track-stx_0))"
" exp-rest_0)))"
"(rebuild5.1"
" track?154_0"
" #t"
" s155_0"
" temp156_0)))))"
"(begin"
"(let-values(((obs_77)"
"(expand-context-observer"
" ctx_72)))"
"(if obs_77"
"(let-values()"
"(if(if can-log?_0"
"(log-tag?"
" had-stxes?_0"
" ctx_72)"
" #f)"
"(let-values()"
"(call-expand-observe"
" obs_77"
" 'tag"
" result-s_10))"
"(void)))"
"(void)))"
"(if get-list?_0"
"(list result-s_10)"
" result-s_10))))))"
"(if(if(not forward-references?_0)"
"(let-values(((or-part_369) split?_0))"
"(if or-part_369"
" or-part_369"
"(null?(cdr idss_2))))"
" #f)"
"(let-values()"
"(let-values(((exp-rest_1)"
"(loop_124"
"(cdr idss_2)"
"(cdr keyss_1)"
"(cdr rhss_2)"
"(cdr track-stxs_3)"
" null"
" null"
" null"
" null"
" #f"
" #t"
" #f)))"
"(let-values(((result-s_11)"
"(if(expand-context-to-parsed?"
" ctx_72)"
"(parsed-letrec-values18.1"
"(keep-properties-only"
" s_370)"
"(reverse$1"
"(cons"
" ids_30"
" accum-idss_0))"
"(reverse$1"
"(cons"
"(list"
"(car keyss_1)"
" expanded-rhs_0)"
"(map2"
" list"
" accum-keyss_0"
" accum-rhss_0)))"
" exp-rest_1)"
"(let-values(((track?157_0)"
" track?_2)"
"((s158_0)"
" s_370)"
"((temp159_2)"
"(list*"
"(core-id"
" 'letrec-values"
" phase_139)"
"(build-clauses"
"(cons"
" ids_30"
" accum-idss_0)"
"(cons"
" expanded-rhs_0"
" accum-rhss_0)"
"(cons"
" track-stx_0"
" accum-track-stxs_0))"
" exp-rest_1)))"
"(rebuild5.1"
" track?157_0"
" #t"
" s158_0"
" temp159_2)))))"
"(begin"
"(let-values(((obs_78)"
"(expand-context-observer"
" ctx_72)))"
"(if obs_78"
"(let-values()"
"(if(if can-log?_0"
"(log-tag?"
" had-stxes?_0"
" ctx_72)"
" #f)"
"(let-values()"
"(call-expand-observe"
" obs_78"
" 'tag"
" result-s_11))"
"(void)))"
"(void)))"
"(if get-list?_0"
"(list result-s_11)"
" result-s_11)))))"
"(let-values()"
"(loop_124"
"(cdr idss_2)"
"(cdr keyss_1)"
"(cdr rhss_2)"
"(cdr track-stxs_3)"
"(cons ids_30 accum-idss_0)"
"(cons(car keyss_1) accum-keyss_0)"
"(cons expanded-rhs_0 accum-rhss_0)"
"(cons track-stx_0 accum-track-stxs_0)"
" track?_2"
" get-list?_0"
" can-log?_0)))))))))))))))))"
" loop_124)"
" idss_1"
" keyss_0"
" rhss_1"
" track-stxs_2"
" null"
" null"
" null"
" null"
" track?_1"
" #f"
" #t)))))))))))))))))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_1 accum-rhss_1 accum-track-stxs_1)"
"(begin(map2 build-clause(reverse$1 accum-idss_1)(reverse$1 accum-rhss_1)(reverse$1 accum-track-stxs_1)))))"
"(define-values"
"(build-clause)"
"(lambda(ids_31 rhs_19 track-stx_1)"
"(begin"
"(let-values(((clause_2)(datum->syntax$1 #f(list ids_31 rhs_19))))"
"(if track-stx_1(syntax-track-origin$1 clause_2 track-stx_1) clause_2)))))"
"(define-values"
"(no-binds)"
"(lambda(expr_10 s_485 phase_140)"
"(begin"
"(let-values(((s-runtime-stx_0)(syntax-shift-phase-level$1 runtime-stx phase_140)))"
"(datum->syntax$1"
"(core-id '#%app phase_140)"
"(list(core-id 'begin phase_140) expr_10(list(datum->syntax$1 s-runtime-stx_0 'values)))"
" s_485)))))"
"(define-values"
"(log-tag?)"
"(lambda(had-stxes?_1 ctx_73)(begin(if had-stxes?_1(not(expand-context-only-immediate? ctx_73)) #f))))"
"(define-values"
"(log-letrec-values$1)"
"(lambda(obs_79 ctx_74 s_486 val-idss_2 val-rhss_2 track-stxs_4 stx-clauses_2 done-bodys_2)"
"(begin"
" 'log-letrec-values"
"(let-values(((phase_141)(expand-context-phase ctx_74)))"
"(let-values(((clauses_0)"
"(reverse$1"
"(let-values(((lst_328) val-idss_2)((lst_329) val-rhss_2)((lst_330) track-stxs_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_328)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_329)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_330)))"
"((letrec-values(((for-loop_274)"
"(lambda(fold-var_291 lst_238 lst_331 lst_332)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_238)(if(pair? lst_331)(pair? lst_332) #f) #f)"
"(let-values(((val-ids_0)(unsafe-car lst_238))"
"((rest_188)(unsafe-cdr lst_238))"
"((val-rhs_0)(unsafe-car lst_331))"
"((rest_189)(unsafe-cdr lst_331))"
"((track-stx_2)(unsafe-car lst_332))"
"((rest_190)(unsafe-cdr lst_332)))"
"(let-values(((fold-var_292)"
"(let-values(((fold-var_293) fold-var_291))"
"(let-values(((fold-var_294)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list val-ids_0 val-rhs_0)"
" track-stx_2))"
" fold-var_293))))"
"(values fold-var_294)))))"
"(if(not #f)"
"(for-loop_274 fold-var_292 rest_188 rest_189 rest_190)"
" fold-var_292)))"
" fold-var_291)))))"
" for-loop_274)"
" null"
" lst_328"
" lst_329"
" lst_330))))))"
"(let-values(((had-stxes?_2)(not(null? stx-clauses_2))))"
"(let-values(((lv-id_0)(core-id(if had-stxes?_2 'letrec-syntaxes+values 'letrec-values) phase_141)))"
"(let-values(((lv-s_0)"
"(datum->syntax$1"
" #f"
"(if had-stxes?_2"
"(list* lv-id_0 stx-clauses_2 clauses_0 done-bodys_2)"
"(list* lv-id_0 clauses_0 done-bodys_2))"
" s_486)))"
"(begin"
"(call-expand-observe obs_79 'block->letrec(list lv-s_0))"
"(call-expand-observe obs_79 'visit lv-s_0)"
"(call-expand-observe obs_79 'resolve lv-id_0)"
"(call-expand-observe obs_79 'enter-prim lv-s_0)"
"(if had-stxes?_2"
"(let-values()"
"(begin"
"(call-expand-observe obs_79 'prim-letrec-syntaxes+values #f)"
"(call-expand-observe"
" obs_79"
" 'letrec-syntaxes-renames"
" stx-clauses_2"
" clauses_0"
"(datum->syntax$1 #f done-bodys_2 s_486))"
"(call-expand-observe obs_79 'prepare-env)"
"(call-expand-observe obs_79 'next-group)"
"(if(null? val-idss_2)"
"(void)"
"(let-values()"
"(begin"
"(call-expand-observe obs_79 'prim-letrec-values)"
"(call-expand-observe"
" obs_79"
" 'let-renames"
" clauses_0"
"(datum->syntax$1 #f done-bodys_2 s_486)))))))"
"(let-values()"
"(begin"
"(call-expand-observe obs_79 'prim-letrec-values #f)"
"(call-expand-observe"
" obs_79"
" 'let-renames"
" clauses_0"
"(datum->syntax$1 #f done-bodys_2 s_486))))))))))))))"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_70 disarmed-s_5 formals_1 bodys_9 ctx_75 log-renames-tag_0)"
"(begin"
"(let-values(((sc_31)(new-scope 'local)))"
"(let-values(((phase_78)(expand-context-phase ctx_75)))"
"(let-values(((ids_32)(parse-and-flatten-formals formals_1 sc_31 disarmed-s_5)))"
"(let-values((()"
"(begin"
"                            (let-values (((temp37_4) \"argument name\"))"
"(check-no-duplicate-ids8.1 temp37_4 #t ids_32 phase_78 s_70 #f #f))"
"(values))))"
"(let-values(((counter_7)(root-expand-context-counter ctx_75)))"
"(let-values(((keys_7)"
"(reverse$1"
"(let-values(((lst_269) ids_32))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_269)))"
"((letrec-values(((for-loop_275)"
"(lambda(fold-var_63 lst_38)"
"(begin"
" 'for-loop"
"(if(pair? lst_38)"
"(let-values(((id_111)(unsafe-car lst_38))"
"((rest_191)(unsafe-cdr lst_38)))"
"(let-values(((fold-var_295)"
"(let-values(((fold-var_64) fold-var_63))"
"(let-values(((fold-var_150)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((s41_0)"
" s_70))"
"(add-local-binding!35.1"
" #f"
" #f"
" s41_0"
" #t"
" id_111"
" phase_78"
" counter_7)))"
" fold-var_64))))"
"(values fold-var_150)))))"
"(if(not #f)"
"(for-loop_275 fold-var_295 rest_191)"
" fold-var_295)))"
" fold-var_63)))))"
" for-loop_275)"
" null"
" lst_269))))))"
"(let-values(((body-env_0)"
"(let-values(((lst_302) keys_7)((lst_23) ids_32))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_302)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_23)))"
"((letrec-values(((for-loop_20)"
"(lambda(env_25 lst_24 lst_168)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_24)(pair? lst_168) #f)"
"(let-values(((key_92)(unsafe-car lst_24))"
"((rest_140)(unsafe-cdr lst_24))"
"((id_112)(unsafe-car lst_168))"
"((rest_141)(unsafe-cdr lst_168)))"
"(let-values(((env_26)"
"(let-values(((env_27) env_25))"
"(let-values(((env_28)"
"(let-values()"
"(env-extend"
" env_27"
" key_92"
"(local-variable1.1"
" id_112)))))"
"(values env_28)))))"
"(if(not #f)"
"(for-loop_20 env_26 rest_140 rest_141)"
" env_26)))"
" env_25)))))"
" for-loop_20)"
"(expand-context-env ctx_75)"
" lst_302"
" lst_23)))))"
"(let-values(((sc-formals_0)(add-scope formals_1 sc_31)))"
"(let-values(((sc-bodys_0)"
"(reverse$1"
"(let-values(((lst_17) bodys_9))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_17)))"
"((letrec-values(((for-loop_10)"
"(lambda(fold-var_164 lst_18)"
"(begin"
" 'for-loop"
"(if(pair? lst_18)"
"(let-values(((body_12)(unsafe-car lst_18))"
"((rest_5)(unsafe-cdr lst_18)))"
"(let-values(((fold-var_296)"
"(let-values(((fold-var_167)"
" fold-var_164))"
"(let-values(((fold-var_297)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_12"
" sc_31))"
" fold-var_167))))"
"(values fold-var_297)))))"
"(if(not #f)"
"(for-loop_10 fold-var_296 rest_5)"
" fold-var_296)))"
" fold-var_164)))))"
" for-loop_10)"
" null"
" lst_17))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_80)(expand-context-observer ctx_75)))"
"(if obs_80"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_80"
" log-renames-tag_0"
" sc-formals_0"
"(datum->syntax$1 #f sc-bodys_0))))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_4)"
"(let-values(((v_251) ctx_75))"
"(let-values(((the-struct_95) v_251))"
"(if(expand-context/outer? the-struct_95)"
"(let-values(((env42_0) body-env_0)"
"((scopes43_0)(cons sc_31(expand-context-scopes ctx_75)))"
"((binding-layer44_0)"
"(increment-binding-layer ids_32 ctx_75 sc_31))"
"((frame-id45_0) #f)"
"((inner46_1)(root-expand-context/outer-inner v_251)))"
"(expand-context/outer1.1"
" inner46_1"
"(root-expand-context/outer-post-expansion-scope the-struct_95)"
"(root-expand-context/outer-use-site-scopes the-struct_95)"
" frame-id45_0"
"(expand-context/outer-context the-struct_95)"
" env42_0"
"(expand-context/outer-post-expansion-scope-action the-struct_95)"
" scopes43_0"
"(expand-context/outer-def-ctx-scopes the-struct_95)"
" binding-layer44_0"
"(expand-context/outer-reference-records the-struct_95)"
"(expand-context/outer-only-immediate? the-struct_95)"
"(expand-context/outer-need-eventually-defined the-struct_95)"
"(expand-context/outer-current-introduction-scopes the-struct_95)"
"(expand-context/outer-name the-struct_95)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"expand-context/outer?\""
" the-struct_95))))))"
"(let-values(((exp-body_2)"
"(let-values(((temp49_2)"
"(let-values(((temp52_6) #t))"
"(keep-as-needed74.1 #f #f temp52_6 #t #f #f ctx_75 s_70))))"
"(expand-body7.1 temp49_2 #f #f sc-bodys_0 body-ctx_4))))"
"(values"
"(if(expand-context-to-parsed? ctx_75)"
"(unflatten-like-formals keys_7 formals_1)"
" sc-formals_0)"
" exp-body_2))))))))))))))))"
"(define-values"
"(make-expand-lambda)"
"(lambda(get-lambda_0)"
"(begin"
"(lambda(s_181 ctx_76)"
"(let-values((()"
"(begin"
"(let-values(((obs_81)(expand-context-observer ctx_76)))"
"(if obs_81(let-values()(let-values()(call-expand-observe obs_81 'prim-lambda)))(void)))"
"(values))))"
"(let-values(((disarmed-s_6)(syntax-disarm$1 s_181)))"
"(let-values(((ok?_34 lambda53_0 formals54_0 body55_0)"
"(let-values(((s_76) disarmed-s_6))"
"(let-values(((orig-s_42) s_76))"
"(let-values(((lambda53_1 formals54_1 body55_1)"
"(let-values(((s_305)(if(syntax?$1 s_76)(syntax-e$1 s_76) s_76)))"
"(if(pair? s_305)"
"(let-values(((lambda56_0)(let-values(((s_187)(car s_305))) s_187))"
"((formals57_0 body58_0)"
"(let-values(((s_487)(cdr s_305)))"
"(let-values(((s_403)"
"(if(syntax?$1 s_487)"
"(syntax-e$1 s_487)"
" s_487)))"
"(if(pair? s_403)"
"(let-values(((formals59_0)"
"(let-values(((s_488)(car s_403)))"
" s_488))"
"((body60_0)"
"(let-values(((s_489)(cdr s_403)))"
"(let-values(((s_163)"
"(if(syntax?$1 s_489)"
"(syntax-e$1 s_489)"
" s_489)))"
"(let-values(((flat-s_27)"
"(to-syntax-list.1"
" s_163)))"
"(if(not flat-s_27)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                             \"bad syntax\""
" orig-s_42))"
"(if(null? flat-s_27)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_42))"
"(let-values()"
" flat-s_27))))))))"
"(values formals59_0 body60_0))"
"(raise-syntax-error$1"
" #f"
"                                                                     \"bad syntax\""
" orig-s_42))))))"
"(values lambda56_0 formals57_0 body58_0))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_42)))))"
"(values #t lambda53_1 formals54_1 body55_1))))))"
"(let-values(((rebuild-s_4)"
"(let-values(((temp63_4) #t))(keep-as-needed74.1 #f #f #f #f temp63_4 #t ctx_76 s_181))))"
"(let-values(((formals_2 body_13)"
"(lambda-clause-expander s_181 disarmed-s_6 formals54_0 body55_0 ctx_76 'lambda-renames)))"
"(if(expand-context-to-parsed? ctx_76)"
"(parsed-lambda5.1 rebuild-s_4 formals_2 body_13)"
"(let-values(((rebuild-s64_0) rebuild-s_4)"
"((temp65_7)(list*(get-lambda_0 ctx_76 lambda53_0) formals_2 body_13)))"
"(rebuild5.1 #f #f rebuild-s64_0 temp65_7))))))))))))"
"(void(add-core-form!* 'lambda(make-expand-lambda(lambda(ctx_77 lam-id_0) lam-id_0))))"
"(void"
"(add-core-form!*"
" 'λ"
"(make-expand-lambda"
"(lambda(ctx_78 lam-id_1)"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx(expand-context-phase ctx_78))"
" 'lambda"
" lam-id_1"
" lam-id_1)))))"
"(void"
"(add-core-form!*"
" 'case-lambda"
"(lambda(s_490 ctx_79)"
"(let-values((()"
"(begin"
"(let-values(((obs_32)(expand-context-observer ctx_79)))"
"(if obs_32"
"(let-values()(let-values()(call-expand-observe obs_32 'prim-case-lambda)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_7)(syntax-disarm$1 s_490)))"
"(let-values(((ok?_35 case-lambda66_0 formals67_0 body68_0)"
"(let-values(((s_32) disarmed-s_7))"
"(let-values(((orig-s_43) s_32))"
"(let-values(((case-lambda66_1 formals67_1 body68_1)"
"(let-values(((s_69)(if(syntax?$1 s_32)(syntax-e$1 s_32) s_32)))"
"(if(pair? s_69)"
"(let-values(((case-lambda69_0)(let-values(((s_311)(car s_69))) s_311))"
"((formals70_0 body71_0)"
"(let-values(((s_474)(cdr s_69)))"
"(let-values(((s_491)"
"(if(syntax?$1 s_474)"
"(syntax-e$1 s_474)"
" s_474)))"
"(let-values(((flat-s_28)(to-syntax-list.1 s_491)))"
"(if(not flat-s_28)"
"(let-values()"
"                                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_43))"
"(let-values()"
"(let-values(((formals_3 body_14)"
"(let-values(((lst_312) flat-s_28))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_312)))"
"((letrec-values(((for-loop_276)"
"(lambda(formals_4"
" body_15"
" lst_98)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_98)"
"(let-values(((s_433)"
"(unsafe-car"
" lst_98))"
"((rest_192)"
"(unsafe-cdr"
" lst_98)))"
"(let-values(((formals_5"
" body_16)"
"(let-values(((formals_6)"
" formals_4)"
"((body_17)"
" body_15))"
"(let-values(((formals_7"
" body_18)"
"(let-values()"
"(let-values(((formals78_0"
" body79_0)"
"(let-values()"
"(let-values(((s_55)"
"(if(syntax?$1"
" s_433)"
"(syntax-e$1"
" s_433)"
" s_433)))"
"(if(pair?"
" s_55)"
"(let-values(((formals72_0)"
"(let-values(((s_319)"
"(car"
" s_55)))"
" s_319))"
"((body73_0)"
"(let-values(((s_492)"
"(cdr"
" s_55)))"
"(let-values(((s_388)"
"(if(syntax?$1"
" s_492)"
"(syntax-e$1"
" s_492)"
" s_492)))"
"(let-values(((flat-s_29)"
"(to-syntax-list.1"
" s_388)))"
"(if(not"
" flat-s_29)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_43))"
"(if(null?"
" flat-s_29)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_43))"
"(let-values()"
" flat-s_29))))))))"
"(values"
" formals72_0"
" body73_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_43))))))"
"(values"
"(cons"
" formals78_0"
" formals_6)"
"(cons"
" body79_0"
" body_17))))))"
"(values"
" formals_7"
" body_18)))))"
"(if(not"
" #f)"
"(for-loop_276"
" formals_5"
" body_16"
" rest_192)"
"(values"
" formals_5"
" body_16))))"
"(values"
" formals_4"
" body_15))))))"
" for-loop_276)"
" null"
" null"
" lst_312)))))"
"(values"
"(reverse$1 formals_3)"
"(reverse$1 body_14))))))))))"
"(values case-lambda69_0 formals70_0 body71_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_43)))))"
"(values #t case-lambda66_1 formals67_1 body68_1))))))"
"(let-values(((ok?_36 case-lambda74_0 clause75_0)"
"(let-values(((s_56) disarmed-s_7))"
"(let-values(((orig-s_44) s_56))"
"(let-values(((case-lambda74_1 clause75_1)"
"(let-values(((s_304)(if(syntax?$1 s_56)(syntax-e$1 s_56) s_56)))"
"(if(pair? s_304)"
"(let-values(((case-lambda76_0)"
"(let-values(((s_391)(car s_304))) s_391))"
"((clause77_0)"
"(let-values(((s_493)(cdr s_304)))"
"(let-values(((s_57)"
"(if(syntax?$1 s_493)"
"(syntax-e$1 s_493)"
" s_493)))"
"(let-values(((flat-s_30)(to-syntax-list.1 s_57)))"
"(if(not flat-s_30)"
"(let-values()"
"                                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_44))"
"(let-values() flat-s_30)))))))"
"(values case-lambda76_0 clause77_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_44)))))"
"(values #t case-lambda74_1 clause75_1))))))"
"(let-values(((rebuild-s_5)"
"(let-values(((temp82_7) #t))(keep-as-needed74.1 #f #f #f #f temp82_7 #t ctx_79 s_490))))"
"(let-values(((clauses_1)"
"(reverse$1"
"(let-values(((lst_192) formals67_0)((lst_223) body68_0)((lst_224) clause75_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_192)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_223)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_224)))"
"((letrec-values(((for-loop_277)"
"(lambda(fold-var_298 lst_333 lst_334 lst_335)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_333)"
"(if(pair? lst_334)(pair? lst_335) #f)"
" #f)"
"(let-values(((formals_8)(unsafe-car lst_333))"
"((rest_193)(unsafe-cdr lst_333))"
"((body_19)(unsafe-car lst_334))"
"((rest_194)(unsafe-cdr lst_334))"
"((clause_3)(unsafe-car lst_335))"
"((rest_195)(unsafe-cdr lst_335)))"
"(let-values(((fold-var_299)"
"(let-values(((fold-var_300) fold-var_298))"
"(let-values(((fold-var_187)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_82)"
"(expand-context-observer"
" ctx_79)))"
"(if obs_82"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_82"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((rebuild-clause_0)"
"(let-values(((ctx83_0)"
" ctx_79)"
"((clause84_0)"
" clause_3))"
"(keep-as-needed74.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ctx83_0"
" clause84_0))))"
"(let-values(((exp-formals_0"
" exp-body_3)"
"(lambda-clause-expander"
" s_490"
" disarmed-s_7"
" formals_8"
" body_19"
" ctx_79"
" 'case-lambda-renames)))"
"(if(expand-context-to-parsed?"
" ctx_79)"
"(list"
" exp-formals_0"
" exp-body_3)"
"(let-values(((rebuild-clause85_0)"
" rebuild-clause_0)"
"((temp86_2)"
"(list*"
" exp-formals_0"
" exp-body_3)))"
"(rebuild5.1"
" #f"
" #f"
" rebuild-clause85_0"
" temp86_2)))))))"
" fold-var_300))))"
"(values fold-var_187)))))"
"(if(not #f)"
"(for-loop_277 fold-var_299 rest_193 rest_194 rest_195)"
" fold-var_299)))"
" fold-var_298)))))"
" for-loop_277)"
" null"
" lst_192"
" lst_223"
" lst_224))))))"
"(if(expand-context-to-parsed? ctx_79)"
"(parsed-case-lambda6.1 rebuild-s_5 clauses_1)"
"(let-values(((rebuild-s87_0) rebuild-s_5)((temp88_3)(list* case-lambda66_0 clauses_1)))"
"(rebuild5.1 #f #f rebuild-s87_0 temp88_3))))))))))))"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_0 sc_32 s_321)"
"(begin"
"((letrec-values(((loop_125)"
"(lambda(formals_9)"
"(begin"
" 'loop"
"(if(identifier? formals_9)"
"(let-values()(list(add-scope formals_9 sc_32)))"
"(if(syntax?$1 formals_9)"
"(let-values()"
"(let-values(((p_83)(syntax-e$1 formals_9)))"
"(if(pair? p_83)"
"(let-values()(loop_125 p_83))"
"(if(null? p_83)"
"(let-values() null)"
"                                        (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_321 p_83))))))"
"(if(pair? formals_9)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_9))"
"(void)"
"(let-values()"
"                                          (raise-syntax-error$1 #f \"not an identifier\" s_321 (car formals_9))))"
"(cons(add-scope(car formals_9) sc_32)(loop_125(cdr formals_9)))))"
"(if(null? formals_9)"
"(let-values() null)"
"(let-values()"
"                                      (raise-syntax-error$1 \"bad argument sequence\" s_321 all-formals_0))))))))))"
" loop_125)"
" all-formals_0))))"
"(define-values"
"(unflatten-like-formals)"
"(lambda(keys_8 formals_10)"
"(begin"
"((letrec-values(((loop_126)"
"(lambda(keys_9 formals_11)"
"(begin"
" 'loop"
"(if(null? formals_11)"
"(let-values() null)"
"(if(pair? formals_11)"
"(let-values()(cons(car keys_9)(loop_126(cdr keys_9)(cdr formals_11))))"
"(if(syntax?$1 formals_11)"
"(let-values()(loop_126 keys_9(syntax-e$1 formals_11)))"
"(let-values()(car keys_9)))))))))"
" loop_126)"
" keys_8"
" formals_10))))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_0"
" rec?3_0"
" rec?8_0"
" renames-log-tag5_0"
" renames-log-tag10_0"
" split-by-reference?4_0"
" split-by-reference?9_0"
" syntaxes?2_0"
" syntaxes?7_0)"
"(begin"
" 'make-let-values-form11"
"(let-values(((log-tag_0) log-tag1_0))"
"(let-values(((syntaxes?_0)(if syntaxes?7_0 syntaxes?2_0 #f)))"
"(let-values(((rec?_1)(if rec?8_0 rec?3_0 #f)))"
"(let-values(((split-by-reference?_0)(if split-by-reference?9_0 split-by-reference?4_0 #f)))"
"(let-values(((renames-log-tag_0)(if renames-log-tag10_0 renames-log-tag5_0 'let-renames)))"
"(let-values()"
"(lambda(s_89 ctx_80)"
"(let-values((()"
"(begin"
"(let-values(((obs_83)(expand-context-observer ctx_80)))"
"(if obs_83"
"(let-values()(let-values()(call-expand-observe obs_83 log-tag_0)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_8)(syntax-disarm$1 s_89)))"
"(let-values(((ok?_37"
" letrec-syntaxes+values89_0"
" id:trans90_0"
" trans-rhs91_0"
" id:val92_0"
" val-rhs93_0"
" body94_0)"
"(let-values(((s_107) disarmed-s_8))"
"(if(if syntaxes?_0 #t #f)"
"(let-values(((orig-s_45) s_107))"
"(let-values(((letrec-syntaxes+values89_1"
" id:trans90_1"
" trans-rhs91_1"
" id:val92_1"
" val-rhs93_1"
" body94_1)"
"(let-values(((s_213)"
"(if(syntax?$1 s_107)"
"(syntax-e$1 s_107)"
" s_107)))"
"(if(pair? s_213)"
"(let-values(((letrec-syntaxes+values95_0)"
"(let-values(((s_494)(car s_213))) s_494))"
"((id:trans96_0"
" trans-rhs97_0"
" id:val98_0"
" val-rhs99_0"
" body100_0)"
"(let-values(((s_111)(cdr s_213)))"
"(let-values(((s_495)"
"(if(syntax?$1 s_111)"
"(syntax-e$1 s_111)"
" s_111)))"
"(if(pair? s_495)"
"(let-values(((id:trans101_0"
" trans-rhs102_0)"
"(let-values(((s_496)"
"(car"
" s_495)))"
"(let-values(((s_113)"
"(if(syntax?$1"
" s_496)"
"(syntax-e$1"
" s_496)"
" s_496)))"
"(let-values(((flat-s_31)"
"(to-syntax-list.1"
" s_113)))"
"(if(not"
" flat-s_31)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_45))"
"(let-values()"
"(let-values(((id:trans_0"
" trans-rhs_0)"
"(let-values(((lst_336)"
" flat-s_31))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_336)))"
"((letrec-values(((for-loop_278)"
"(lambda(id:trans_1"
" trans-rhs_1"
" lst_337)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_337)"
"(let-values(((s_497)"
"(unsafe-car"
" lst_337))"
"((rest_196)"
"(unsafe-cdr"
" lst_337)))"
"(let-values(((id:trans_2"
" trans-rhs_2)"
"(let-values(((id:trans_3)"
" id:trans_1)"
"((trans-rhs_3)"
" trans-rhs_1))"
"(let-values(((id:trans_4"
" trans-rhs_4)"
"(let-values()"
"(let-values(((id:trans132_0"
" trans-rhs133_0)"
"(let-values()"
"(let-values(((s_221)"
"(if(syntax?$1"
" s_497)"
"(syntax-e$1"
" s_497)"
" s_497)))"
"(if(pair?"
" s_221)"
"(let-values(((id:trans106_0)"
"(let-values(((s_498)"
"(car"
" s_221)))"
"(let-values(((s_440)"
"(if(syntax?$1"
" s_498)"
"(syntax-e$1"
" s_498)"
" s_498)))"
"(let-values(((flat-s_32)"
"(to-syntax-list.1"
" s_440)))"
"(if(not"
" flat-s_32)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_45))"
"(let-values()"
"(let-values(((id:trans_5)"
"(let-values(((lst_338)"
" flat-s_32))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_338)))"
"((letrec-values(((for-loop_279)"
"(lambda(id:trans_6"
" lst_339)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_339)"
"(let-values(((s_499)"
"(unsafe-car"
" lst_339))"
"((rest_197)"
"(unsafe-cdr"
" lst_339)))"
"(let-values(((id:trans_7)"
"(let-values(((id:trans_8)"
" id:trans_6))"
"(let-values(((id:trans_9)"
"(let-values()"
"(let-values(((id:trans134_0)"
"(let-values()"
"(if(let-values(((or-part_370)"
"(if(syntax?$1"
" s_499)"
"(symbol?"
"(syntax-e$1"
" s_499))"
" #f)))"
"(if or-part_370"
" or-part_370"
"(symbol?"
" s_499)))"
" s_499"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_45"
" s_499)))))"
"(cons"
" id:trans134_0"
" id:trans_8)))))"
"(values"
" id:trans_9)))))"
"(if(not"
" #f)"
"(for-loop_279"
" id:trans_7"
" rest_197)"
" id:trans_7)))"
" id:trans_6)))))"
" for-loop_279)"
" null"
" lst_338)))))"
"(reverse$1"
" id:trans_5))))))))"
"((trans-rhs107_0)"
"(let-values(((s_500)"
"(cdr"
" s_221)))"
"(let-values(((s_501)"
"(if(syntax?$1"
" s_500)"
"(syntax-e$1"
" s_500)"
" s_500)))"
"(if(pair?"
" s_501)"
"(let-values(((trans-rhs108_0)"
"(let-values(((s_502)"
"(car"
" s_501)))"
" s_502))"
"(()"
"(let-values(((s_503)"
"(cdr"
" s_501)))"
"(let-values(((s_504)"
"(if(syntax?$1"
" s_503)"
"(syntax-e$1"
" s_503)"
" s_503)))"
"(if(null?"
" s_504)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_45))))))"
"(values"
" trans-rhs108_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_45))))))"
"(values"
" id:trans106_0"
" trans-rhs107_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_45))))))"
"(values"
"(cons"
" id:trans132_0"
" id:trans_3)"
"(cons"
" trans-rhs133_0"
" trans-rhs_3))))))"
"(values"
" id:trans_4"
" trans-rhs_4)))))"
"(if(not"
" #f)"
"(for-loop_278"
" id:trans_2"
" trans-rhs_2"
" rest_196)"
"(values"
" id:trans_2"
" trans-rhs_2))))"
"(values"
" id:trans_1"
" trans-rhs_1))))))"
" for-loop_278)"
" null"
" null"
" lst_336)))))"
"(values"
"(reverse$1"
" id:trans_0)"
"(reverse$1"
" trans-rhs_0)))))))))"
"((id:val103_0"
" val-rhs104_0"
" body105_0)"
"(let-values(((s_123)"
"(cdr"
" s_495)))"
"(let-values(((s_505)"
"(if(syntax?$1"
" s_123)"
"(syntax-e$1"
" s_123)"
" s_123)))"
"(if(pair? s_505)"
"(let-values(((id:val109_0"
" val-rhs110_0)"
"(let-values(((s_506)"
"(car"
" s_505)))"
"(let-values(((s_507)"
"(if(syntax?$1"
" s_506)"
"(syntax-e$1"
" s_506)"
" s_506)))"
"(let-values(((flat-s_33)"
"(to-syntax-list.1"
" s_507)))"
"(if(not"
" flat-s_33)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_45))"
"(let-values()"
"(let-values(((id:val_0"
" val-rhs_1)"
"(let-values(((lst_201)"
" flat-s_33))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_201)))"
"((letrec-values(((for-loop_280)"
"(lambda(id:val_1"
" val-rhs_2"
" lst_204)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_204)"
"(let-values(((s_508)"
"(unsafe-car"
" lst_204))"
"((rest_198)"
"(unsafe-cdr"
" lst_204)))"
"(let-values(((id:val_2"
" val-rhs_3)"
"(let-values(((id:val_3)"
" id:val_1)"
"((val-rhs_4)"
" val-rhs_2))"
"(let-values(((id:val_4"
" val-rhs_5)"
"(let-values()"
"(let-values(((id:val135_0"
" val-rhs136_0)"
"(let-values()"
"(let-values(((s_231)"
"(if(syntax?$1"
" s_508)"
"(syntax-e$1"
" s_508)"
" s_508)))"
"(if(pair?"
" s_231)"
"(let-values(((id:val112_0)"
"(let-values(((s_233)"
"(car"
" s_231)))"
"(let-values(((s_234)"
"(if(syntax?$1"
" s_233)"
"(syntax-e$1"
" s_233)"
" s_233)))"
"(let-values(((flat-s_34)"
"(to-syntax-list.1"
" s_234)))"
"(if(not"
" flat-s_34)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_45))"
"(let-values()"
"(let-values(((id:val_5)"
"(let-values(((lst_340)"
" flat-s_34))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_340)))"
"((letrec-values(((for-loop_281)"
"(lambda(id:val_6"
" lst_341)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_341)"
"(let-values(((s_340)"
"(unsafe-car"
" lst_341))"
"((rest_199)"
"(unsafe-cdr"
" lst_341)))"
"(let-values(((id:val_7)"
"(let-values(((id:val_8)"
" id:val_6))"
"(let-values(((id:val_9)"
"(let-values()"
"(let-values(((id:val137_0)"
"(let-values()"
"(if(let-values(((or-part_331)"
"(if(syntax?$1"
" s_340)"
"(symbol?"
"(syntax-e$1"
" s_340))"
" #f)))"
"(if or-part_331"
" or-part_331"
"(symbol?"
" s_340)))"
" s_340"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_45"
" s_340)))))"
"(cons"
" id:val137_0"
" id:val_8)))))"
"(values"
" id:val_9)))))"
"(if(not"
" #f)"
"(for-loop_281"
" id:val_7"
" rest_199)"
" id:val_7)))"
" id:val_6)))))"
" for-loop_281)"
" null"
" lst_340)))))"
"(reverse$1"
" id:val_5))))))))"
"((val-rhs113_0)"
"(let-values(((s_347)"
"(cdr"
" s_231)))"
"(let-values(((s_509)"
"(if(syntax?$1"
" s_347)"
"(syntax-e$1"
" s_347)"
" s_347)))"
"(if(pair?"
" s_509)"
"(let-values(((val-rhs114_0)"
"(let-values(((s_510)"
"(car"
" s_509)))"
" s_510))"
"(()"
"(let-values(((s_511)"
"(cdr"
" s_509)))"
"(let-values(((s_236)"
"(if(syntax?$1"
" s_511)"
"(syntax-e$1"
" s_511)"
" s_511)))"
"(if(null?"
" s_236)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_45))))))"
"(values"
" val-rhs114_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_45))))))"
"(values"
" id:val112_0"
" val-rhs113_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_45))))))"
"(values"
"(cons"
" id:val135_0"
" id:val_3)"
"(cons"
" val-rhs136_0"
" val-rhs_4))))))"
"(values"
" id:val_4"
" val-rhs_5)))))"
"(if(not"
" #f)"
"(for-loop_280"
" id:val_2"
" val-rhs_3"
" rest_198)"
"(values"
" id:val_2"
" val-rhs_3))))"
"(values"
" id:val_1"
" val-rhs_2))))))"
" for-loop_280)"
" null"
" null"
" lst_201)))))"
"(values"
"(reverse$1"
" id:val_0)"
"(reverse$1"
" val-rhs_1)))))))))"
"((body111_0)"
"(let-values(((s_512)"
"(cdr"
" s_505)))"
"(let-values(((s_348)"
"(if(syntax?$1"
" s_512)"
"(syntax-e$1"
" s_512)"
" s_512)))"
"(let-values(((flat-s_35)"
"(to-syntax-list.1"
" s_348)))"
"(if(not"
" flat-s_35)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_45))"
"(if(null?"
" flat-s_35)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_45))"
"(let-values()"
" flat-s_35))))))))"
"(values"
" id:val109_0"
" val-rhs110_0"
" body111_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_45))))))"
"(values"
" id:trans101_0"
" trans-rhs102_0"
" id:val103_0"
" val-rhs104_0"
" body105_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_45))))))"
"(values"
" letrec-syntaxes+values95_0"
" id:trans96_0"
" trans-rhs97_0"
" id:val98_0"
" val-rhs99_0"
" body100_0))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_45)))))"
"(values"
" #t"
" letrec-syntaxes+values89_1"
" id:trans90_1"
" trans-rhs91_1"
" id:val92_1"
" val-rhs93_1"
" body94_1)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_38 let-values115_0 id:val116_0 val-rhs117_0 body118_0)"
"(let-values(((s_445) disarmed-s_8))"
"(if(if(not syntaxes?_0) #t #f)"
"(let-values(((orig-s_46) s_445))"
"(let-values(((let-values115_1 id:val116_1 val-rhs117_1 body118_1)"
"(let-values(((s_239)"
"(if(syntax?$1 s_445)"
"(syntax-e$1 s_445)"
" s_445)))"
"(if(pair? s_239)"
"(let-values(((let-values119_0)"
"(let-values(((s_242)(car s_239)))"
" s_242))"
"((id:val120_0 val-rhs121_0 body122_0)"
"(let-values(((s_243)(cdr s_239)))"
"(let-values(((s_513)"
"(if(syntax?$1 s_243)"
"(syntax-e$1 s_243)"
" s_243)))"
"(if(pair? s_513)"
"(let-values(((id:val123_0"
" val-rhs124_0)"
"(let-values(((s_352)"
"(car"
" s_513)))"
"(let-values(((s_514)"
"(if(syntax?$1"
" s_352)"
"(syntax-e$1"
" s_352)"
" s_352)))"
"(let-values(((flat-s_36)"
"(to-syntax-list.1"
" s_514)))"
"(if(not"
" flat-s_36)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_46))"
"(let-values()"
"(let-values(((id:val_10"
" val-rhs_6)"
"(let-values(((lst_342)"
" flat-s_36))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_342)))"
"((letrec-values(((for-loop_282)"
"(lambda(id:val_11"
" val-rhs_7"
" lst_212)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_212)"
"(let-values(((s_450)"
"(unsafe-car"
" lst_212))"
"((rest_200)"
"(unsafe-cdr"
" lst_212)))"
"(let-values(((id:val_12"
" val-rhs_8)"
"(let-values(((id:val_13)"
" id:val_11)"
"((val-rhs_9)"
" val-rhs_7))"
"(let-values(((id:val_14"
" val-rhs_10)"
"(let-values()"
"(let-values(((id:val138_0"
" val-rhs139_0)"
"(let-values()"
"(let-values(((s_361)"
"(if(syntax?$1"
" s_450)"
"(syntax-e$1"
" s_450)"
" s_450)))"
"(if(pair?"
" s_361)"
"(let-values(((id:val126_0)"
"(let-values(((s_515)"
"(car"
" s_361)))"
"(let-values(((s_516)"
"(if(syntax?$1"
" s_515)"
"(syntax-e$1"
" s_515)"
" s_515)))"
"(let-values(((flat-s_37)"
"(to-syntax-list.1"
" s_516)))"
"(if(not"
" flat-s_37)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_46))"
"(let-values()"
"(let-values(((id:val_15)"
"(let-values(((lst_343)"
" flat-s_37))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_343)))"
"((letrec-values(((for-loop_283)"
"(lambda(id:val_16"
" lst_344)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_344)"
"(let-values(((s_517)"
"(unsafe-car"
" lst_344))"
"((rest_201)"
"(unsafe-cdr"
" lst_344)))"
"(let-values(((id:val_17)"
"(let-values(((id:val_18)"
" id:val_16))"
"(let-values(((id:val_19)"
"(let-values()"
"(let-values(((id:val140_0)"
"(let-values()"
"(if(let-values(((or-part_371)"
"(if(syntax?$1"
" s_517)"
"(symbol?"
"(syntax-e$1"
" s_517))"
" #f)))"
"(if or-part_371"
" or-part_371"
"(symbol?"
" s_517)))"
" s_517"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_46"
" s_517)))))"
"(cons"
" id:val140_0"
" id:val_18)))))"
"(values"
" id:val_19)))))"
"(if(not"
" #f)"
"(for-loop_283"
" id:val_17"
" rest_201)"
" id:val_17)))"
" id:val_16)))))"
" for-loop_283)"
" null"
" lst_343)))))"
"(reverse$1"
" id:val_15))))))))"
"((val-rhs127_0)"
"(let-values(((s_518)"
"(cdr"
" s_361)))"
"(let-values(((s_519)"
"(if(syntax?$1"
" s_518)"
"(syntax-e$1"
" s_518)"
" s_518)))"
"(if(pair?"
" s_519)"
"(let-values(((val-rhs128_0)"
"(let-values(((s_248)"
"(car"
" s_519)))"
" s_248))"
"(()"
"(let-values(((s_249)"
"(cdr"
" s_519)))"
"(let-values(((s_520)"
"(if(syntax?$1"
" s_249)"
"(syntax-e$1"
" s_249)"
" s_249)))"
"(if(null?"
" s_520)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_46))))))"
"(values"
" val-rhs128_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_46))))))"
"(values"
" id:val126_0"
" val-rhs127_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_46))))))"
"(values"
"(cons"
" id:val138_0"
" id:val_13)"
"(cons"
" val-rhs139_0"
" val-rhs_9))))))"
"(values"
" id:val_14"
" val-rhs_10)))))"
"(if(not"
" #f)"
"(for-loop_282"
" id:val_12"
" val-rhs_8"
" rest_200)"
"(values"
" id:val_12"
" val-rhs_8))))"
"(values"
" id:val_11"
" val-rhs_7))))))"
" for-loop_282)"
" null"
" null"
" lst_342)))))"
"(values"
"(reverse$1"
" id:val_10)"
"(reverse$1"
" val-rhs_6)))))))))"
"((body125_0)"
"(let-values(((s_521)"
"(cdr"
" s_513)))"
"(let-values(((s_522)"
"(if(syntax?$1"
" s_521)"
"(syntax-e$1"
" s_521)"
" s_521)))"
"(let-values(((flat-s_38)"
"(to-syntax-list.1"
" s_522)))"
"(if(not"
" flat-s_38)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_46))"
"(if(null?"
" flat-s_38)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_46))"
"(let-values()"
" flat-s_38))))))))"
"(values"
" id:val123_0"
" val-rhs124_0"
" body125_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_46))))))"
"(values"
" let-values119_0"
" id:val120_0"
" val-rhs121_0"
" body122_0))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_46)))))"
"(values #t let-values115_1 id:val116_1 val-rhs117_1 body118_1)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_7)(new-scope 'local)))"
"(let-values(((phase_142)(expand-context-phase ctx_80)))"
"(let-values(((frame-id_15)(if syntaxes?_0(make-reference-record) #f)))"
"(let-values(((trans-idss_2)"
"(reverse$1"
"(let-values(((lst_345)(if syntaxes?_0 id:trans90_0 null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_345)))"
"((letrec-values(((for-loop_284)"
"(lambda(fold-var_301 lst_346)"
"(begin"
" 'for-loop"
"(if(pair? lst_346)"
"(let-values(((ids_33)"
"(unsafe-car lst_346))"
"((rest_202)"
"(unsafe-cdr lst_346)))"
"(let-values(((fold-var_302)"
"(let-values(((fold-var_303)"
" fold-var_301))"
"(let-values(((fold-var_269)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_347)"
" ids_33))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_347)))"
"((letrec-values(((for-loop_285)"
"(lambda(fold-var_304"
" lst_348)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_348)"
"(let-values(((id_113)"
"(unsafe-car"
" lst_348))"
"((rest_203)"
"(unsafe-cdr"
" lst_348)))"
"(let-values(((fold-var_305)"
"(let-values(((fold-var_306)"
" fold-var_304))"
"(let-values(((fold-var_307)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_113"
" sc_7))"
" fold-var_306))))"
"(values"
" fold-var_307)))))"
"(if(not"
" #f)"
"(for-loop_285"
" fold-var_305"
" rest_203)"
" fold-var_305)))"
" fold-var_304)))))"
" for-loop_285)"
" null"
" lst_347)))))"
" fold-var_303))))"
"(values"
" fold-var_269)))))"
"(if(not #f)"
"(for-loop_284 fold-var_302 rest_202)"
" fold-var_302)))"
" fold-var_301)))))"
" for-loop_284)"
" null"
" lst_345))))))"
"(let-values(((val-idss_3)"
"(reverse$1"
"(let-values(((lst_349)(if syntaxes?_0 id:val92_0 id:val116_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_349)))"
"((letrec-values(((for-loop_286)"
"(lambda(fold-var_308 lst_350)"
"(begin"
" 'for-loop"
"(if(pair? lst_350)"
"(let-values(((ids_20)"
"(unsafe-car lst_350))"
"((rest_204)"
"(unsafe-cdr lst_350)))"
"(let-values(((fold-var_309)"
"(let-values(((fold-var_310)"
" fold-var_308))"
"(let-values(((fold-var_311)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_351)"
" ids_20))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_351)))"
"((letrec-values(((for-loop_287)"
"(lambda(fold-var_312"
" lst_352)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_352)"
"(let-values(((id_114)"
"(unsafe-car"
" lst_352))"
"((rest_205)"
"(unsafe-cdr"
" lst_352)))"
"(let-values(((fold-var_313)"
"(let-values(((fold-var_314)"
" fold-var_312))"
"(let-values(((fold-var_315)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_114"
" sc_7))"
" fold-var_314))))"
"(values"
" fold-var_315)))))"
"(if(not"
" #f)"
"(for-loop_287"
" fold-var_313"
" rest_205)"
" fold-var_313)))"
" fold-var_312)))))"
" for-loop_287)"
" null"
" lst_351)))))"
" fold-var_310))))"
"(values"
" fold-var_311)))))"
"(if(not #f)"
"(for-loop_286"
" fold-var_309"
" rest_204)"
" fold-var_309)))"
" fold-var_308)))))"
" for-loop_286)"
" null"
" lst_349))))))"
"(let-values(((val-rhss_3)"
"(if rec?_1"
"(reverse$1"
"(let-values(((lst_353)"
"(if syntaxes?_0 val-rhs93_0 val-rhs117_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_353)))"
"((letrec-values(((for-loop_288)"
"(lambda(fold-var_316 lst_354)"
"(begin"
" 'for-loop"
"(if(pair? lst_354)"
"(let-values(((rhs_20)"
"(unsafe-car lst_354))"
"((rest_206)"
"(unsafe-cdr lst_354)))"
"(let-values(((fold-var_317)"
"(let-values(((fold-var_318)"
" fold-var_316))"
"(let-values(((fold-var_319)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_20"
" sc_7))"
" fold-var_318))))"
"(values"
" fold-var_319)))))"
"(if(not #f)"
"(for-loop_288"
" fold-var_317"
" rest_206)"
" fold-var_317)))"
" fold-var_316)))))"
" for-loop_288)"
" null"
" lst_353))))"
"(if syntaxes?_0 val-rhs93_0 val-rhs117_0))))"
"(let-values((()"
"(begin"
"(let-values(((temp129_2)(list trans-idss_2 val-idss_3))"
"((phase130_0) phase_142)"
"((s131_0) s_89))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" temp129_2"
" phase130_0"
" s131_0"
" #f"
" #f))"
"(values))))"
"(let-values(((counter_8)(root-expand-context-counter ctx_80)))"
"(let-values(((trans-keyss_0)"
"(reverse$1"
"(let-values(((lst_355) trans-idss_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_355)))"
"((letrec-values(((for-loop_289)"
"(lambda(fold-var_320 lst_356)"
"(begin"
" 'for-loop"
"(if(pair? lst_356)"
"(let-values(((ids_34)"
"(unsafe-car"
" lst_356))"
"((rest_207)"
"(unsafe-cdr"
" lst_356)))"
"(let-values(((fold-var_321)"
"(let-values(((fold-var_322)"
" fold-var_320))"
"(let-values(((fold-var_323)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_357)"
" ids_34))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_357)))"
"((letrec-values(((for-loop_290)"
"(lambda(fold-var_324"
" lst_358)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_358)"
"(let-values(((id_115)"
"(unsafe-car"
" lst_358))"
"((rest_208)"
"(unsafe-cdr"
" lst_358)))"
"(let-values(((fold-var_325)"
"(let-values(((fold-var_98)"
" fold-var_324))"
"(let-values(((fold-var_99)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((frame-id144_0)"
" frame-id_15)"
"((s145_1)"
" s_89))"
"(add-local-binding!35.1"
" frame-id144_0"
" #t"
" s145_1"
" #t"
" id_115"
" phase_142"
" counter_8)))"
" fold-var_98))))"
"(values"
" fold-var_99)))))"
"(if(not"
" #f)"
"(for-loop_290"
" fold-var_325"
" rest_208)"
" fold-var_325)))"
" fold-var_324)))))"
" for-loop_290)"
" null"
" lst_357)))))"
" fold-var_322))))"
"(values"
" fold-var_323)))))"
"(if(not #f)"
"(for-loop_289"
" fold-var_321"
" rest_207)"
" fold-var_321)))"
" fold-var_320)))))"
" for-loop_289)"
" null"
" lst_355))))))"
"(let-values(((val-keyss_2)"
"(reverse$1"
"(let-values(((lst_359) val-idss_3))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_359)))"
"((letrec-values(((for-loop_291)"
"(lambda(fold-var_326 lst_360)"
"(begin"
" 'for-loop"
"(if(pair? lst_360)"
"(let-values(((ids_35)"
"(unsafe-car"
" lst_360))"
"((rest_209)"
"(unsafe-cdr"
" lst_360)))"
"(let-values(((fold-var_327)"
"(let-values(((fold-var_328)"
" fold-var_326))"
"(let-values(((fold-var_329)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_361)"
" ids_35))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_361)))"
"((letrec-values(((for-loop_292)"
"(lambda(fold-var_330"
" lst_362)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_362)"
"(let-values(((id_116)"
"(unsafe-car"
" lst_362))"
"((rest_210)"
"(unsafe-cdr"
" lst_362)))"
"(let-values(((fold-var_331)"
"(let-values(((fold-var_332)"
" fold-var_330))"
"(let-values(((fold-var_333)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((frame-id149_0)"
" frame-id_15)"
"((s150_1)"
" s_89))"
"(add-local-binding!35.1"
" frame-id149_0"
" #t"
" s150_1"
" #t"
" id_116"
" phase_142"
" counter_8)))"
" fold-var_332))))"
"(values"
" fold-var_333)))))"
"(if(not"
" #f)"
"(for-loop_292"
" fold-var_331"
" rest_210)"
" fold-var_331)))"
" fold-var_330)))))"
" for-loop_292)"
" null"
" lst_361)))))"
" fold-var_328))))"
"(values"
" fold-var_329)))))"
"(if(not #f)"
"(for-loop_291"
" fold-var_327"
" rest_209)"
" fold-var_327)))"
" fold-var_326)))))"
" for-loop_291)"
" null"
" lst_359))))))"
"(let-values(((bodys_10)"
"(reverse$1"
"(let-values(((lst_363)"
"(if syntaxes?_0 body94_0 body118_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_363)))"
"((letrec-values(((for-loop_293)"
"(lambda(fold-var_334 lst_364)"
"(begin"
" 'for-loop"
"(if(pair? lst_364)"
"(let-values(((body_20)"
"(unsafe-car"
" lst_364))"
"((rest_211)"
"(unsafe-cdr"
" lst_364)))"
"(let-values(((fold-var_335)"
"(let-values(((fold-var_336)"
" fold-var_334))"
"(let-values(((fold-var_337)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_20"
" sc_7))"
" fold-var_336))))"
"(values"
" fold-var_337)))))"
"(if(not #f)"
"(for-loop_293"
" fold-var_335"
" rest_211)"
" fold-var_335)))"
" fold-var_334)))))"
" for-loop_293)"
" null"
" lst_363))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_84)"
"(expand-context-observer ctx_80)))"
"(if obs_84"
"(let-values()"
"(log-let-renames"
" obs_84"
" renames-log-tag_0"
" val-idss_3"
" val-rhss_3"
" bodys_10"
" trans-idss_2"
"(if syntaxes?_0 trans-rhs91_0 #f)"
" sc_7))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_0"
"(let-values()"
"(begin"
"(let-values(((obs_85)"
"(expand-context-observer"
" ctx_80)))"
"(if obs_85"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_85"
" 'prepare-env)))"
"(void)))"
"(prepare-next-phase-namespace ctx_80)))"
"(void))"
"(values))))"
"(let-values(((trans-valss_0)"
"(reverse$1"
"(let-values(((lst_365)"
"(if syntaxes?_0 trans-rhs91_0 '()))"
"((lst_366) trans-idss_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_365)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_366)))"
"((letrec-values(((for-loop_294)"
"(lambda(fold-var_338"
" lst_231"
" lst_367)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_231)"
"(pair? lst_367)"
" #f)"
"(let-values(((rhs_19)"
"(unsafe-car"
" lst_231))"
"((rest_212)"
"(unsafe-cdr"
" lst_231))"
"((ids_36)"
"(unsafe-car"
" lst_367))"
"((rest_213)"
"(unsafe-cdr"
" lst_367)))"
"(let-values(((fold-var_339)"
"(let-values(((fold-var_340)"
" fold-var_338))"
"(let-values(((fold-var_341)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_86)"
"(expand-context-observer"
" ctx_80)))"
"(if obs_86"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_86"
" 'next)"
"(call-expand-observe"
" obs_86"
" 'enter-bind))))"
"(void)))"
"(values))))"
"(let-values(((trans-val_1)"
"(eval-for-syntaxes-binding"
"(add-scope"
" rhs_19"
" sc_7)"
" ids_36"
" ctx_80)))"
"(begin"
"(let-values(((obs_79)"
"(expand-context-observer"
" ctx_80)))"
"(if obs_79"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_79"
" 'exit-bind)))"
"(void)))"
" trans-val_1))))"
" fold-var_340))))"
"(values"
" fold-var_341)))))"
"(if(not #f)"
"(for-loop_294"
" fold-var_339"
" rest_212"
" rest_213)"
" fold-var_339)))"
" fold-var_338)))))"
" for-loop_294)"
" null"
" lst_365"
" lst_366))))))"
"(let-values(((rec-val-env_0)"
"(let-values(((lst_368) val-keyss_2)"
"((lst_120) val-idss_3))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_368)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_120)))"
"((letrec-values(((for-loop_295)"
"(lambda(env_29"
" lst_234"
" lst_235)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_234)"
"(pair? lst_235)"
" #f)"
"(let-values(((keys_10)"
"(unsafe-car"
" lst_234))"
"((rest_156)"
"(unsafe-cdr"
" lst_234))"
"((ids_37)"
"(unsafe-car"
" lst_235))"
"((rest_214)"
"(unsafe-cdr"
" lst_235)))"
"(let-values(((env_6)"
"(let-values(((env_30)"
" env_29))"
"(let-values(((lst_328)"
" keys_10)"
"((lst_329)"
" ids_37))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_328)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_329)))"
"((letrec-values(((for-loop_296)"
"(lambda(env_31"
" lst_369"
" lst_238)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_369)"
"(pair?"
" lst_238)"
" #f)"
"(let-values(((key_93)"
"(unsafe-car"
" lst_369))"
"((rest_215)"
"(unsafe-cdr"
" lst_369))"
"((id_117)"
"(unsafe-car"
" lst_238))"
"((rest_188)"
"(unsafe-cdr"
" lst_238)))"
"(let-values(((env_32)"
"(let-values(((env_33)"
" env_31))"
"(let-values(((env_34)"
"(let-values()"
"(env-extend"
" env_33"
" key_93"
"(local-variable1.1"
" id_117)))))"
"(values"
" env_34)))))"
"(if(not"
" #f)"
"(for-loop_296"
" env_32"
" rest_215"
" rest_188)"
" env_32)))"
" env_31)))))"
" for-loop_296)"
" env_30"
" lst_328"
" lst_329))))))"
"(if(not #f)"
"(for-loop_295"
" env_6"
" rest_156"
" rest_214)"
" env_6)))"
" env_29)))))"
" for-loop_295)"
"(expand-context-env ctx_80)"
" lst_368"
" lst_120)))))"
"(let-values(((rec-env_0)"
"(let-values(((lst_370) trans-keyss_0)"
"((lst_371) trans-valss_0)"
"((lst_372) trans-idss_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_370)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_371)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_372)))"
"((letrec-values(((for-loop_297)"
"(lambda(env_35"
" lst_241"
" lst_373"
" lst_374)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_241)"
"(if(pair?"
" lst_373)"
"(pair?"
" lst_374)"
" #f)"
" #f)"
"(let-values(((keys_11)"
"(unsafe-car"
" lst_241))"
"((rest_216)"
"(unsafe-cdr"
" lst_241))"
"((vals_9)"
"(unsafe-car"
" lst_373))"
"((rest_217)"
"(unsafe-cdr"
" lst_373))"
"((ids_38)"
"(unsafe-car"
" lst_374))"
"((rest_218)"
"(unsafe-cdr"
" lst_374)))"
"(let-values(((env_36)"
"(let-values(((env_37)"
" env_35))"
"(let-values(((env_38)"
"(let-values()"
"(let-values(((lst_121)"
" keys_11)"
"((lst_375)"
" vals_9)"
"((lst_376)"
" ids_38))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_121)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_375)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_376)))"
"((letrec-values(((for-loop_298)"
"(lambda(env_39"
" lst_377"
" lst_378"
" lst_379)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_377)"
"(if(pair?"
" lst_378)"
"(pair?"
" lst_379)"
" #f)"
" #f)"
"(let-values(((key_94)"
"(unsafe-car"
" lst_377))"
"((rest_219)"
"(unsafe-cdr"
" lst_377))"
"((val_84)"
"(unsafe-car"
" lst_378))"
"((rest_220)"
"(unsafe-cdr"
" lst_378))"
"((id_118)"
"(unsafe-car"
" lst_379))"
"((rest_221)"
"(unsafe-cdr"
" lst_379)))"
"(let-values(((env_40)"
"(let-values(((env_41)"
" env_39))"
"(let-values(((env_42)"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_84"
" id_118"
" phase_142"
" ctx_80)"
"(env-extend"
" env_41"
" key_94"
" val_84)))))"
"(values"
" env_42)))))"
"(if(not"
" #f)"
"(for-loop_298"
" env_40"
" rest_219"
" rest_220"
" rest_221)"
" env_40)))"
" env_39)))))"
" for-loop_298)"
" env_37"
" lst_121"
" lst_375"
" lst_376))))))"
"(values"
" env_38)))))"
"(if(not #f)"
"(for-loop_297"
" env_36"
" rest_216"
" rest_217"
" rest_218)"
" env_36)))"
" env_35)))))"
" for-loop_297)"
" rec-val-env_0"
" lst_370"
" lst_371"
" lst_372)))))"
"(let-values(((expr-ctx_0)(as-expression-context ctx_80)))"
"(let-values(((orig-rrs_0)"
"(expand-context-reference-records"
" expr-ctx_0)))"
"(let-values(((rec-ctx_0)"
"(let-values(((v_252) expr-ctx_0))"
"(let-values(((the-struct_96) v_252))"
"(if(expand-context/outer?"
" the-struct_96)"
"(let-values(((env151_1) rec-env_0)"
"((scopes152_0)"
"(cons"
" sc_7"
"(expand-context-scopes"
" ctx_80)))"
"((reference-records153_0)"
"(if split-by-reference?_0"
"(cons"
" frame-id_15"
" orig-rrs_0)"
" orig-rrs_0))"
"((binding-layer154_0)"
"(increment-binding-layer"
"(cons"
" trans-idss_2"
" val-idss_3)"
" ctx_80"
" sc_7))"
"((inner155_1)"
"(root-expand-context/outer-inner"
" v_252)))"
"(expand-context/outer1.1"
" inner155_1"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_96)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_96)"
"(root-expand-context/outer-frame-id"
" the-struct_96)"
"(expand-context/outer-context"
" the-struct_96)"
" env151_1"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_96)"
" scopes152_0"
"(expand-context/outer-def-ctx-scopes"
" the-struct_96)"
" binding-layer154_0"
" reference-records153_0"
"(expand-context/outer-only-immediate?"
" the-struct_96)"
"(expand-context/outer-need-eventually-defined"
" the-struct_96)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_96)"
"(expand-context/outer-name"
" the-struct_96)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                     \"expand-context/outer?\""
" the-struct_96))))))"
"(let-values(((letrec-values-id_0)"
"(if(not"
"(expand-context-to-parsed? ctx_80))"
"(if syntaxes?_0"
"(core-id 'letrec-values phase_142)"
" let-values115_0)"
" #f)))"
"(let-values(((rebuild-s_6)"
"(let-values(((temp158_2) #t))"
"(keep-as-needed74.1"
" #f"
" #f"
" temp158_2"
" #t"
" #f"
" #f"
" ctx_80"
" s_89))))"
"(let-values(((val-name-idss_0)"
"(if(expand-context-to-parsed?"
" ctx_80)"
"(reverse$1"
"(let-values(((lst_380)"
" val-idss_3))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_380)))"
"((letrec-values(((for-loop_299)"
"(lambda(fold-var_106"
" lst_381)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_381)"
"(let-values(((val-ids_1)"
"(unsafe-car"
" lst_381))"
"((rest_222)"
"(unsafe-cdr"
" lst_381)))"
"(let-values(((fold-var_342)"
"(let-values(((fold-var_343)"
" fold-var_106))"
"(let-values(((fold-var_344)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_382)"
" val-ids_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_382)))"
"((letrec-values(((for-loop_300)"
"(lambda(fold-var_345"
" lst_383)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_383)"
"(let-values(((val-id_0)"
"(unsafe-car"
" lst_383))"
"((rest_223)"
"(unsafe-cdr"
" lst_383)))"
"(let-values(((fold-var_109)"
"(let-values(((fold-var_346)"
" fold-var_345))"
"(let-values(((fold-var_347)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(syntax-e$1"
" val-id_0)"
" val-id_0"
" val-id_0))"
" fold-var_346))))"
"(values"
" fold-var_347)))))"
"(if(not"
" #f)"
"(for-loop_300"
" fold-var_109"
" rest_223)"
" fold-var_109)))"
" fold-var_345)))))"
" for-loop_300)"
" null"
" lst_382)))))"
" fold-var_343))))"
"(values"
" fold-var_344)))))"
"(if(not"
" #f)"
"(for-loop_299"
" fold-var_342"
" rest_222)"
" fold-var_342)))"
" fold-var_106)))))"
" for-loop_299)"
" null"
" lst_380))))"
" val-idss_3)))"
"(let-values((()"
"(begin"
"(if syntaxes?_0"
"(let-values()"
"(let-values(((obs_87)"
"(expand-context-observer"
" ctx_80)))"
"(if obs_87"
"(let-values()"
"(log-letrec-values"
" obs_87"
" val-idss_3"
" val-rhss_3"
" bodys_10))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((get-body_1)"
"(lambda()"
"(begin"
" 'get-body"
"(let-values((()"
"(begin"
"(let-values(((obs_88)"
"(expand-context-observer"
" ctx_80)))"
"(if obs_88"
"(let-values()"
"(if(not"
"(if syntaxes?_0"
"(null?"
" val-idss_3)"
" #f))"
"(let-values()"
"(call-expand-observe"
" obs_88"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_5)"
"(let-values(((v_253)"
" rec-ctx_0))"
"(let-values(((the-struct_97)"
" v_253))"
"(if(expand-context/outer?"
" the-struct_97)"
"(let-values(((reference-records162_0)"
" orig-rrs_0)"
"((inner163_0)"
"(root-expand-context/outer-inner"
" v_253)))"
"(expand-context/outer1.1"
" inner163_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_97)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_97)"
"(root-expand-context/outer-frame-id"
" the-struct_97)"
"(expand-context/outer-context"
" the-struct_97)"
"(expand-context/outer-env"
" the-struct_97)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_97)"
"(expand-context/outer-scopes"
" the-struct_97)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_97)"
"(expand-context/outer-binding-layer"
" the-struct_97)"
" reference-records162_0"
"(expand-context/outer-only-immediate?"
" the-struct_97)"
"(expand-context/outer-need-eventually-defined"
" the-struct_97)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_97)"
"(expand-context/outer-name"
" the-struct_97)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                   \"expand-context/outer?\""
" the-struct_97))))))"
"(let-values(((temp160_2)"
"(let-values(((ctx165_0)"
" ctx_80))"
"(as-tail-context23.1"
" ctx165_0"
" body-ctx_5)))"
"((rebuild-s161_0)"
" rebuild-s_6))"
"(expand-body7.1"
" rebuild-s161_0"
" #f"
" #f"
" bodys_10"
" temp160_2))))))))"
"(let-values(((result-s_12)"
"(if(not"
" split-by-reference?_0)"
"(let-values()"
"(let-values(((clauses_2)"
"(reverse$1"
"(let-values(((lst_384)"
" val-name-idss_0)"
"((lst_385)"
" val-keyss_2)"
"((lst_386)"
" val-rhss_3))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_384)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_385)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_386)))"
"((letrec-values(((for-loop_158)"
"(lambda(fold-var_116"
" lst_387"
" lst_388"
" lst_389)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_387)"
"(if(pair?"
" lst_388)"
"(pair?"
" lst_389)"
" #f)"
" #f)"
"(let-values(((ids_39)"
"(unsafe-car"
" lst_387))"
"((rest_224)"
"(unsafe-cdr"
" lst_387))"
"((keys_12)"
"(unsafe-car"
" lst_388))"
"((rest_225)"
"(unsafe-cdr"
" lst_388))"
"((rhs_21)"
"(unsafe-car"
" lst_389))"
"((rest_226)"
"(unsafe-cdr"
" lst_389)))"
"(let-values(((fold-var_348)"
"(let-values(((fold-var_119)"
" fold-var_116))"
"(let-values(((fold-var_120)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_89)"
"(expand-context-observer"
" ctx_80)))"
"(if obs_89"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_89"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-rhs_4)"
"(let-values(((rhs166_0)"
" rhs_21)"
"((temp167_1)"
"(if rec?_1"
"(as-named-context"
" rec-ctx_0"
" ids_39)"
"(as-named-context"
" expr-ctx_0"
" ids_39))))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" rhs166_0"
" temp167_1))))"
"(if(expand-context-to-parsed?"
" ctx_80)"
"(list"
" keys_12"
" exp-rhs_4)"
"(list"
" ids_39"
" exp-rhs_4)))))"
" fold-var_119))))"
"(values"
" fold-var_120)))))"
"(if(not"
" #f)"
"(for-loop_158"
" fold-var_348"
" rest_224"
" rest_225"
" rest_226)"
" fold-var_348)))"
" fold-var_116)))))"
" for-loop_158)"
" null"
" lst_384"
" lst_385"
" lst_386))))))"
"(let-values(((exp-body_4)"
"(get-body_1)))"
"(begin"
"(if frame-id_15"
"(let-values()"
"(reference-record-clear!"
" frame-id_15))"
"(void))"
"(if(expand-context-to-parsed?"
" ctx_80)"
"(if rec?_1"
"(parsed-letrec-values18.1"
" rebuild-s_6"
" val-name-idss_0"
" clauses_2"
" exp-body_4)"
"(parsed-let-values17.1"
" rebuild-s_6"
" val-name-idss_0"
" clauses_2"
" exp-body_4))"
"(let-values(((rebuild-s168_0)"
" rebuild-s_6)"
"((temp169_1)"
"(list*"
" letrec-values-id_0"
" clauses_2"
" exp-body_4)))"
"(rebuild5.1"
" #f"
" #f"
" rebuild-s168_0"
" temp169_1)))))))"
"(let-values()"
"(let-values(((temp173_0)"
"(reverse$1"
"(let-values(((lst_390)"
" val-idss_3))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_390)))"
"((letrec-values(((for-loop_301)"
"(lambda(fold-var_349"
" lst_391)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_391)"
"(let-values(((rhs_22)"
"(unsafe-car"
" lst_391))"
"((rest_227)"
"(unsafe-cdr"
" lst_391)))"
"(let-values(((fold-var_350)"
"(let-values(((fold-var_351)"
" fold-var_349))"
"(let-values(((fold-var_352)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_351))))"
"(values"
" fold-var_352)))))"
"(if(not"
" #f)"
"(for-loop_301"
" fold-var_350"
" rest_227)"
" fold-var_350)))"
" fold-var_349)))))"
" for-loop_301)"
" null"
" lst_390)))))"
"((temp174_0)"
" #t)"
"((frame-id175_0)"
" frame-id_15)"
"((rec-ctx176_0)"
" rec-ctx_0)"
"((rebuild-s177_0)"
" rebuild-s_6)"
"((syntaxes?178_0)"
" syntaxes?_0)"
"((get-body179_0)"
" get-body_1)"
"((temp180_1)"
" #t))"
"(expand-and-split-bindings-by-reference48.1"
" rec-ctx176_0"
" frame-id175_0"
" get-body179_0"
" syntaxes?178_0"
" rebuild-s177_0"
" temp174_0"
" temp180_1"
" val-idss_3"
" val-keyss_2"
" val-rhss_3"
" temp173_0))))))"
"(if(expand-context-to-parsed? ctx_80)"
" result-s_12"
"(attach-disappeared-transformer-bindings"
" result-s_12"
" trans-idss_2)))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(log-let-renames)"
"(lambda(obs_90 renames-log-tag_1 val-idss_4 val-rhss_4 bodys_11 trans-idss_3 trans-rhss_0 sc_33)"
"(begin"
"(let-values(((vals+body_0)"
"(cons"
"(reverse$1"
"(let-values(((lst_392) val-idss_4)((lst_59) val-rhss_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_392)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_59)))"
"((letrec-values(((for-loop_302)"
"(lambda(fold-var_353 lst_393 lst_394)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_393)(pair? lst_394) #f)"
"(let-values(((val-ids_2)(unsafe-car lst_393))"
"((rest_228)(unsafe-cdr lst_393))"
"((val-rhs_11)(unsafe-car lst_394))"
"((rest_229)(unsafe-cdr lst_394)))"
"(let-values(((fold-var_354)"
"(let-values(((fold-var_355) fold-var_353))"
"(let-values(((fold-var_356)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list val-ids_2 val-rhs_11)))"
" fold-var_355))))"
"(values fold-var_356)))))"
"(if(not #f)"
"(for-loop_302 fold-var_354 rest_228 rest_229)"
" fold-var_354)))"
" fold-var_353)))))"
" for-loop_302)"
" null"
" lst_392"
" lst_59))))"
"(datum->syntax$1 #f bodys_11))))"
"(call-expand-observe"
" obs_90"
" renames-log-tag_1"
"(if(not trans-rhss_0)"
" vals+body_0"
"(cons"
"(reverse$1"
"(let-values(((lst_62) trans-idss_3)((lst_395) trans-rhss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_62)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_395)))"
"((letrec-values(((for-loop_303)"
"(lambda(fold-var_357 lst_396 lst_397)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_396)(pair? lst_397) #f)"
"(let-values(((trans-ids_0)(unsafe-car lst_396))"
"((rest_230)(unsafe-cdr lst_396))"
"((trans-rhs_5)(unsafe-car lst_397))"
"((rest_231)(unsafe-cdr lst_397)))"
"(let-values(((fold-var_122)"
"(let-values(((fold-var_358) fold-var_357))"
"(let-values(((fold-var_359)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
" trans-ids_0"
"(add-scope trans-rhs_5 sc_33))))"
" fold-var_358))))"
"(values fold-var_359)))))"
"(if(not #f)(for-loop_303 fold-var_122 rest_230 rest_231) fold-var_122)))"
" fold-var_357)))))"
" for-loop_303)"
" null"
" lst_62"
" lst_395))))"
" vals+body_0)))))))"
"(define-values"
"(log-letrec-values)"
"(lambda(obs_91 val-idss_5 val-rhss_5 bodys_12)"
"(begin"
"(begin"
"(call-expand-observe obs_91 'next-group)"
"(if(null? val-idss_5)"
"(void)"
"(let-values()"
"(begin"
"(call-expand-observe obs_91 'prim-letrec-values)"
"(log-let-renames obs_91 'let-renames val-idss_5 val-rhss_5 bodys_12 #f #f #f))))))))"
"(void"
"(add-core-form!*"
" 'let-values"
"(let-values(((temp181_0) 'prim-let-values))(make-let-values-form11.1 temp181_0 #f #f #f #f #f #f #f #f))))"
"(void"
"(add-core-form!*"
" 'letrec-values"
"(let-values(((temp182_1) #t)((temp183_0) 'prim-letrec-values))"
"(make-let-values-form11.1 temp183_0 temp182_1 #t #f #f #f #f #f #f))))"
"(void"
"(add-core-form!*"
" 'letrec-syntaxes+values"
"(let-values(((temp184_1) #t)"
"((temp185_0) #t)"
"((temp186_0) #t)"
"((temp187_2) 'prim-letrec-syntaxes+values)"
"((temp188_1) 'letrec-syntaxes-renames))"
"(make-let-values-form11.1 temp187_2 temp185_0 #t temp188_1 #t temp186_0 #t temp184_1 #t))))"
"(void"
"(add-core-form!*"
" '#%stratified-body"
"(lambda(s_523 ctx_81)"
"(let-values((()"
"(begin"
"(let-values(((obs_92)(expand-context-observer ctx_81)))"
"(if obs_92"
"(let-values()(let-values()(call-expand-observe obs_92 'prim-#%stratified)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_9)(syntax-disarm$1 s_523)))"
"(let-values(((ok?_39 #%stratified-body189_0 body190_0)"
"(let-values(((s_524) disarmed-s_9))"
"(let-values(((orig-s_47) s_524))"
"(let-values(((#%stratified-body189_1 body190_1)"
"(let-values(((s_525)(if(syntax?$1 s_524)(syntax-e$1 s_524) s_524)))"
"(if(pair? s_525)"
"(let-values(((#%stratified-body191_0)"
"(let-values(((s_526)(car s_525))) s_526))"
"((body192_0)"
"(let-values(((s_527)(cdr s_525)))"
"(let-values(((s_528)"
"(if(syntax?$1 s_527)"
"(syntax-e$1 s_527)"
" s_527)))"
"(let-values(((flat-s_39)(to-syntax-list.1 s_528)))"
"(if(not flat-s_39)"
"(let-values()"
"                                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_47))"
"(if(null? flat-s_39)"
"(let-values()"
"                                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_47))"
"(let-values() flat-s_39))))))))"
"(values #%stratified-body191_0 body192_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_47)))))"
"(values #t #%stratified-body189_1 body190_1))))))"
"(let-values(((rebuild-s_7)"
"(let-values(((temp195_0) #t))(keep-as-needed74.1 #f #f temp195_0 #t #f #f ctx_81 s_523))))"
"(let-values(((exp-body_5)"
"(let-values(((temp196_0) body190_0)"
"((ctx197_0) ctx_81)"
"((temp198_1) #t)"
"((rebuild-s199_0) rebuild-s_7))"
"(expand-body7.1 rebuild-s199_0 temp198_1 #t temp196_0 ctx197_0))))"
"(if(expand-context-to-parsed? ctx_81)"
"(parsed-begin12.1 rebuild-s_7 exp-body_5)"
"(let-values(((rebuild-s200_0) rebuild-s_7)"
"((temp201_1)"
"(if(null?(cdr exp-body_5))"
"(car exp-body_5)"
"(list*(core-id 'begin(expand-context-phase ctx_81)) exp-body_5))))"
"(rebuild5.1 #f #f rebuild-s200_0 temp201_1)))))))))))"
"(void"
"(add-core-form!*"
" '#%datum"
"(lambda(s_529 ctx_82)"
"(let-values((()"
"(begin"
"(let-values(((obs_93)(expand-context-observer ctx_82)))"
"(if obs_93(let-values()(let-values()(call-expand-observe obs_93 'prim-#%datum)))(void)))"
"(values))))"
"(let-values(((disarmed-s_10)(syntax-disarm$1 s_529)))"
"(let-values(((ok?_40 #%datum202_0 datum203_0)"
"(let-values(((s_193) disarmed-s_10))"
"(let-values(((orig-s_48) s_193))"
"(let-values(((#%datum202_1 datum203_1)"
"(let-values(((s_530)(if(syntax?$1 s_193)(syntax-e$1 s_193) s_193)))"
"(if(pair? s_530)"
"(let-values(((#%datum204_0)(let-values(((s_531)(car s_530))) s_531))"
"((datum205_0)(let-values(((s_532)(cdr s_530))) s_532)))"
"(values #%datum204_0 datum205_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_48)))))"
"(values #t #%datum202_1 datum203_1))))))"
"(let-values(((datum_2) datum203_0))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_2)(keyword?(syntax-e$1 datum_2)) #f)"
"(let-values()"
"                                 (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_2))"
"(void))"
"(values))))"
"(let-values(((phase_143)(expand-context-phase ctx_82)))"
"(if(if(expand-context-to-parsed? ctx_82)(free-id-set-empty?(expand-context-stops ctx_82)) #f)"
"(parsed-quote14.1(keep-properties-only~ s_529)(syntax->datum$1 datum_2))"
"(let-values(((s206_0) s_529)((temp207_0)(list(core-id 'quote phase_143) datum_2)))"
"(rebuild5.1 #f #f s206_0 temp207_0))))))))))))"
"(void"
"(add-core-form!*"
" '#%app"
"(lambda(s_533 ctx_83)"
"(let-values((()"
"(begin"
"(let-values(((obs_94)(expand-context-observer ctx_83)))"
"(if obs_94(let-values()(let-values()(call-expand-observe obs_94 'prim-#%app)))(void)))"
"(values))))"
"(let-values(((disarmed-s_11)(syntax-disarm$1 s_533)))"
"(let-values(((ok?_41 #%app208_0 e209_0)"
"(let-values(((s_534) disarmed-s_11))"
"(let-values(((orig-s_49) s_534))"
"(let-values(((#%app208_1 e209_1)"
"(let-values(((s_535)(if(syntax?$1 s_534)(syntax-e$1 s_534) s_534)))"
"(if(pair? s_535)"
"(let-values(((#%app210_0)(let-values(((s_536)(car s_535))) s_536))"
"((e211_0)"
"(let-values(((s_537)(cdr s_535)))"
"(let-values(((s_538)"
"(if(syntax?$1 s_537)"
"(syntax-e$1 s_537)"
" s_537)))"
"(let-values(((flat-s_40)(to-syntax-list.1 s_538)))"
"(if(not flat-s_40)"
"(let-values()"
"                                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_49))"
"(let-values() flat-s_40)))))))"
"(values #%app210_0 e211_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_49)))))"
"(values #t #%app208_1 e209_1))))))"
"(let-values(((es_3) e209_0))"
"(if(null? es_3)"
"(let-values()"
"(let-values(((phase_144)(expand-context-phase ctx_83)))"
"(if(expand-context-to-parsed? ctx_83)"
"(parsed-quote14.1(keep-properties-only~ s_533) null)"
"(let-values(((s212_0) s_533)((temp213_1)(list(core-id 'quote phase_144) null)))"
"(rebuild5.1 #f #f s212_0 temp213_1)))))"
"(let-values()"
"(let-values(((keep-for-parsed?_1)(eq?(system-type 'vm) 'chez-scheme)))"
"(let-values(((rebuild-s_8)"
"(let-values(((keep-for-parsed?216_0) keep-for-parsed?_1))"
"(keep-as-needed74.1 #f #f #f #f keep-for-parsed?216_0 #t ctx_83 s_533))))"
"(let-values(((prefixless_0)(cdr(syntax-e$1 disarmed-s_11))))"
"(let-values(((rebuild-prefixless_0)"
"(if(syntax?$1 prefixless_0)"
"(let-values(((keep-for-parsed?219_0) keep-for-parsed?_1))"
"(keep-as-needed74.1 #f #f #f #f keep-for-parsed?219_0 #t ctx_83 prefixless_0))"
" #f)))"
"(let-values(((expr-ctx_1)(as-expression-context ctx_83)))"
"(let-values((()"
"(begin"
"(let-values(((obs_95)(expand-context-observer expr-ctx_1)))"
"(if obs_95"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_95"
" 'enter-list"
"(datum->syntax$1 #f es_3 s_533))"
"(call-expand-observe obs_95 'next))))"
"(void)))"
"(values))))"
"(let-values(((rest-es_0)(cdr es_3)))"
"(let-values(((exp-rator_0)"
"(let-values(((temp220_1)(car es_3))((expr-ctx221_0) expr-ctx_1))"
"(expand7.1 #f #f #f #f temp220_1 expr-ctx221_0))))"
"(let-values(((exp-es_0)"
"(reverse$1"
"(let-values(((lst_398) rest-es_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_398)))"
"((letrec-values(((for-loop_304)"
"(lambda(fold-var_56 lst_399)"
"(begin"
" 'for-loop"
"(if(pair? lst_399)"
"(let-values(((e_85)(unsafe-car lst_399))"
"((rest_232)"
"(unsafe-cdr lst_399)))"
"(let-values(((fold-var_360)"
"(let-values(((fold-var_361)"
" fold-var_56))"
"(let-values(((fold-var_362)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_96)"
"(expand-context-observer"
" expr-ctx_1)))"
"(if obs_96"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_96"
" 'next)))"
"(void)))"
"(let-values(((e222_0)"
" e_85)"
"((expr-ctx223_0)"
" expr-ctx_1))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" e222_0"
" expr-ctx223_0))))"
" fold-var_361))))"
"(values"
" fold-var_362)))))"
"(if(not #f)"
"(for-loop_304 fold-var_360 rest_232)"
" fold-var_360)))"
" fold-var_56)))))"
" for-loop_304)"
" null"
" lst_398))))))"
"(if(expand-context-to-parsed? ctx_83)"
"(let-values()"
"(parsed-app7.1"
"(let-values(((or-part_372) rebuild-prefixless_0))"
"(if or-part_372 or-part_372 rebuild-s_8))"
" exp-rator_0"
" exp-es_0))"
"(let-values()"
"(let-values(((es_4)"
"(let-values(((exp-es_1)(cons exp-rator_0 exp-es_0)))"
"(if rebuild-prefixless_0"
"(let-values(((rebuild-prefixless226_0) rebuild-prefixless_0)"
"((exp-es227_0) exp-es_1))"
"(rebuild5.1 #f #f rebuild-prefixless226_0 exp-es227_0))"
" exp-es_1))))"
"(begin"
"(let-values(((obs_97)(expand-context-observer expr-ctx_1)))"
"(if obs_97"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_97"
" 'exit-list"
"(datum->syntax$1 #f es_4 rebuild-s_8))))"
"(void)))"
"(let-values(((rebuild-s224_0) rebuild-s_8)"
"((temp225_2)(cons #%app208_0 es_4)))"
"(rebuild5.1 #f #f rebuild-s224_0 temp225_2))))))))))))))))))))))))"
"(void"
"(add-core-form!*"
" 'quote"
"(lambda(s_539 ctx_84)"
"(let-values((()"
"(begin"
"(let-values(((obs_98)(expand-context-observer ctx_84)))"
"(if obs_98(let-values()(let-values()(call-expand-observe obs_98 'prim-quote)))(void)))"
"(values))))"
"(let-values(((ok?_42 quote228_0 datum229_0)"
"(let-values(((s_540)(syntax-disarm$1 s_539)))"
"(let-values(((orig-s_50) s_540))"
"(let-values(((quote228_1 datum229_1)"
"(let-values(((s_541)(if(syntax?$1 s_540)(syntax-e$1 s_540) s_540)))"
"(if(pair? s_541)"
"(let-values(((quote230_0)(let-values(((s_542)(car s_541))) s_542))"
"((datum231_0)"
"(let-values(((s_543)(cdr s_541)))"
"(let-values(((s_544)"
"(if(syntax?$1 s_543)"
"(syntax-e$1 s_543)"
" s_543)))"
"(if(pair? s_544)"
"(let-values(((datum232_0)"
"(let-values(((s_545)(car s_544))) s_545))"
"(()"
"(let-values(((s_546)(cdr s_544)))"
"(let-values(((s_547)"
"(if(syntax?$1 s_546)"
"(syntax-e$1 s_546)"
" s_546)))"
"(if(null? s_547)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                    \"bad syntax\""
" orig-s_50))))))"
"(values datum232_0))"
"                                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_50))))))"
"(values quote230_0 datum231_0))"
"                                           (raise-syntax-error$1 #f \"bad syntax\" orig-s_50)))))"
"(values #t quote228_1 datum229_1))))))"
"(if(expand-context-to-parsed? ctx_84)"
"(parsed-quote14.1(keep-properties-only~ s_539)(syntax->datum$1 datum229_0))"
" s_539))))))"
"(void"
"(add-core-form!*"
" 'quote-syntax"
"(lambda(s_548 ctx_85)"
"(let-values((()"
"(begin"
"(let-values(((obs_99)(expand-context-observer ctx_85)))"
"(if obs_99"
"(let-values()(let-values()(call-expand-observe obs_99 'prim-quote-syntax)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_12)(syntax-disarm$1 s_548)))"
"(let-values(((ok?_43 quote-syntax233_0 datum234_0)"
"(let-values(((s_549) disarmed-s_12))"
"(if(let-values(((s_550)(if(syntax?$1 s_549)(syntax-e$1 s_549) s_549)))"
"(if(pair? s_550)"
"(if(let-values(((s_551)(car s_550))) #t)"
"(let-values(((s_552)(cdr s_550)))"
"(let-values(((s_553)(if(syntax?$1 s_552)(syntax-e$1 s_552) s_552)))"
"(if(pair? s_553)"
"(if(let-values(((s_554)(car s_553))) #t)"
"(let-values(((s_555)(cdr s_553)))"
"(let-values(((s_556)(if(syntax?$1 s_555)(syntax-e$1 s_555) s_555)))"
"(if(pair? s_556)"
"(if(let-values(((s_557)(car s_556)))"
"(let-values(((s_558)"
"(if(syntax?$1 s_557)(syntax-e$1 s_557) s_557)))"
"(eq? '#:local s_558)))"
"(let-values(((s_559)(cdr s_556)))"
"(let-values(((s_560)"
"(if(syntax?$1 s_559)(syntax-e$1 s_559) s_559)))"
"(null? s_560)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((quote-syntax233_1 datum234_1)"
"(let-values(((s_561)(if(syntax?$1 s_549)(syntax-e$1 s_549) s_549)))"
"(let-values(((quote-syntax235_0)"
"(let-values(((s_562)(car s_561))) s_562))"
"((datum236_0)"
"(let-values(((s_563)(cdr s_561)))"
"(let-values(((s_564)"
"(if(syntax?$1 s_563)"
"(syntax-e$1 s_563)"
" s_563)))"
"(let-values(((datum237_0)"
"(let-values(((s_565)(car s_564))) s_565))"
"(()"
"(let-values(((s_566)(cdr s_564)))"
"(let-values(((s_567)"
"(if(syntax?$1 s_566)"
"(syntax-e$1 s_566)"
" s_566)))"
"(let-values((()"
"(let-values(((s_568)"
"(car"
" s_567)))"
"(let-values(((s_569)"
"(if(syntax?$1"
" s_568)"
"(syntax-e$1"
" s_568)"
" s_568)))"
"(values))))"
"(()"
"(let-values(((s_570)"
"(cdr"
" s_567)))"
"(let-values(((s_571)"
"(if(syntax?$1"
" s_570)"
"(syntax-e$1"
" s_570)"
" s_570)))"
"(values)))))"
"(values))))))"
"(values datum237_0))))))"
"(values quote-syntax235_0 datum236_0)))))"
"(values #t quote-syntax233_1 datum234_1)))"
"(values #f #f #f)))))"
"(let-values(((ok?_44 quote-syntax238_0 datum239_0)"
"(let-values(((s_572) disarmed-s_12))"
"(if(if(not ok?_43) #t #f)"
"(let-values(((orig-s_51) s_572))"
"(let-values(((quote-syntax238_1 datum239_1)"
"(let-values(((s_573)(if(syntax?$1 s_572)(syntax-e$1 s_572) s_572)))"
"(if(pair? s_573)"
"(let-values(((quote-syntax240_0)"
"(let-values(((s_574)(car s_573))) s_574))"
"((datum241_0)"
"(let-values(((s_575)(cdr s_573)))"
"(let-values(((s_576)"
"(if(syntax?$1 s_575)"
"(syntax-e$1 s_575)"
" s_575)))"
"(if(pair? s_576)"
"(let-values(((datum242_0)"
"(let-values(((s_577)(car s_576)))"
" s_577))"
"(()"
"(let-values(((s_578)(cdr s_576)))"
"(let-values(((s_579)"
"(if(syntax?$1 s_578)"
"(syntax-e$1 s_578)"
" s_578)))"
"(if(null? s_579)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_51))))))"
"(values datum242_0))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_51))))))"
"(values quote-syntax240_0 datum241_0))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_51)))))"
"(values #t quote-syntax238_1 datum239_1)))"
"(values #f #f #f)))))"
"(if ok?_43"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_85))"
"(values))))"
"(let-values(((ok?_45 _243_0 _244_0 kw245_0)"
"(let-values(((s_273) disarmed-s_12))"
"(let-values(((orig-s_52) s_273))"
"(let-values(((_243_1 _244_1 kw245_1)"
"(let-values(((s_275)"
"(if(syntax?$1 s_273)(syntax-e$1 s_273) s_273)))"
"(if(pair? s_275)"
"(let-values(((_246_0)"
"(let-values(((s_277)(car s_275))) s_277))"
"((_247_0 kw248_0)"
"(let-values(((s_278)(cdr s_275)))"
"(let-values(((s_279)"
"(if(syntax?$1 s_278)"
"(syntax-e$1 s_278)"
" s_278)))"
"(if(pair? s_279)"
"(let-values(((_249_0)"
"(let-values(((s_580)"
"(car s_279)))"
" s_580))"
"((kw250_0)"
"(let-values(((s_581)"
"(cdr s_279)))"
"(let-values(((s_582)"
"(if(syntax?$1"
" s_581)"
"(syntax-e$1"
" s_581)"
" s_581)))"
"(if(pair? s_582)"
"(let-values(((kw251_0)"
"(let-values(((s_583)"
"(car"
" s_582)))"
" s_583))"
"(()"
"(let-values(((s_584)"
"(cdr"
" s_582)))"
"(let-values(((s_585)"
"(if(syntax?$1"
" s_584)"
"(syntax-e$1"
" s_584)"
" s_584)))"
"(if(null?"
" s_585)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_52))))))"
"(values kw251_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_52))))))"
"(values _249_0 kw250_0))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_52))))))"
"(values _246_0 _247_0 kw248_0))"
"                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_52)))))"
"(values #t _243_1 _244_1 kw245_1))))))"
"(if(expand-context-to-parsed? ctx_85)"
"(parsed-quote-syntax15.1(keep-properties-only~ s_548) datum234_0)"
"(let-values(((s252_0) s_548)((temp253_1)(list quote-syntax233_0 datum234_0 kw245_0)))"
"(rebuild5.1 #f #f s252_0 temp253_1))))))"
"(let-values()"
"(let-values(((datum-s_0)(remove-scopes datum239_0(expand-context-scopes ctx_85))))"
"(if(if(expand-context-to-parsed? ctx_85)(free-id-set-empty?(expand-context-stops ctx_85)) #f)"
"(parsed-quote-syntax15.1(keep-properties-only~ s_548) datum-s_0)"
"(let-values(((s254_0) s_548)((temp255_0)(list quote-syntax238_0 datum-s_0)))"
"(rebuild5.1 #f #f s254_0 temp255_0)))))))))))))"
"(void"
"(add-core-form!*"
" 'if"
"(lambda(s_280 ctx_86)"
"(let-values((()"
"(begin"
"(let-values(((obs_100)(expand-context-observer ctx_86)))"
"(if obs_100(let-values()(let-values()(call-expand-observe obs_100 'prim-if)))(void)))"
"(values))))"
"(let-values(((disarmed-s_13)(syntax-disarm$1 s_280)))"
"(let-values(((ok?_46 if256_0 tst257_0 thn258_0 els259_0)"
"(let-values(((s_586) disarmed-s_13))"
"(let-values(((orig-s_53) s_586))"
"(let-values(((if256_1 tst257_1 thn258_1 els259_1)"
"(let-values(((s_587)(if(syntax?$1 s_586)(syntax-e$1 s_586) s_586)))"
"(if(pair? s_587)"
"(let-values(((if260_0)(let-values(((s_588)(car s_587))) s_588))"
"((tst261_0 thn262_0 els263_0)"
"(let-values(((s_589)(cdr s_587)))"
"(let-values(((s_590)"
"(if(syntax?$1 s_589)"
"(syntax-e$1 s_589)"
" s_589)))"
"(if(pair? s_590)"
"(let-values(((tst264_0)"
"(let-values(((s_591)(car s_590)))"
" s_591))"
"((thn265_0 els266_0)"
"(let-values(((s_592)(cdr s_590)))"
"(let-values(((s_290)"
"(if(syntax?$1 s_592)"
"(syntax-e$1 s_592)"
" s_592)))"
"(if(pair? s_290)"
"(let-values(((thn267_0)"
"(let-values(((s_593)"
"(car"
" s_290)))"
" s_593))"
"((els268_0)"
"(let-values(((s_291)"
"(cdr"
" s_290)))"
"(let-values(((s_594)"
"(if(syntax?$1"
" s_291)"
"(syntax-e$1"
" s_291)"
" s_291)))"
"(if(pair? s_594)"
"(let-values(((els269_0)"
"(let-values(((s_292)"
"(car"
" s_594)))"
" s_292))"
"(()"
"(let-values(((s_293)"
"(cdr"
" s_594)))"
"(let-values(((s_294)"
"(if(syntax?$1"
" s_293)"
"(syntax-e$1"
" s_293)"
" s_293)))"
"(if(null?"
" s_294)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_53))))))"
"(values"
" els269_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_53))))))"
"(values thn267_0 els268_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_53))))))"
"(values tst264_0 thn265_0 els266_0))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_53))))))"
"(values if260_0 tst261_0 thn262_0 els263_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_53)))))"
"(values #t if256_1 tst257_1 thn258_1 els259_1))))))"
"(let-values(((expr-ctx_2)(as-expression-context ctx_86)))"
"(let-values(((tail-ctx_0)(let-values(((ctx271_0) ctx_86))(as-tail-context23.1 ctx271_0 expr-ctx_2))))"
"(let-values(((rebuild-s_9)"
"(let-values(((ctx272_0) ctx_86)((s273_0) s_280))"
"(keep-as-needed74.1 #f #f #f #f #f #f ctx272_0 s273_0))))"
"(let-values(((exp-tst_0)"
"(let-values(((temp274_0) tst257_0)((expr-ctx275_0) expr-ctx_2))"
"(expand7.1 #f #f #f #f temp274_0 expr-ctx275_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_101)(expand-context-observer ctx_86)))"
"(if obs_101"
"(let-values()(let-values()(call-expand-observe obs_101 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-thn_0)"
"(let-values(((temp276_0) thn258_0)((tail-ctx277_0) tail-ctx_0))"
"(expand7.1 #f #f #f #f temp276_0 tail-ctx277_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_102)(expand-context-observer ctx_86)))"
"(if obs_102"
"(let-values()(let-values()(call-expand-observe obs_102 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-els_0)"
"(let-values(((temp278_1) els259_0)((tail-ctx279_0) tail-ctx_0))"
"(expand7.1 #f #f #f #f temp278_1 tail-ctx279_0))))"
"(if(expand-context-to-parsed? ctx_86)"
"(parsed-if8.1 rebuild-s_9 exp-tst_0 exp-thn_0 exp-els_0)"
"(let-values(((rebuild-s280_0) rebuild-s_9)"
"((temp281_0)(list if256_0 exp-tst_0 exp-thn_0 exp-els_0)))"
"(rebuild5.1 #f #f rebuild-s280_0 temp281_0)))))))))))))))))"
"(void"
"(add-core-form!*"
" 'with-continuation-mark"
"(lambda(s_595 ctx_87)"
"(let-values((()"
"(begin"
"(let-values(((obs_103)(expand-context-observer ctx_87)))"
"(if obs_103"
"(let-values()(let-values()(call-expand-observe obs_103 'prim-with-continuation-mark)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_14)(syntax-disarm$1 s_595)))"
"(let-values(((ok?_47 with-continuation-mark282_0 key283_0 val284_0 body285_0)"
"(let-values(((s_596) disarmed-s_14))"
"(let-values(((orig-s_54) s_596))"
"(let-values(((with-continuation-mark282_1 key283_1 val284_1 body285_1)"
"(let-values(((s_597)(if(syntax?$1 s_596)(syntax-e$1 s_596) s_596)))"
"(if(pair? s_597)"
"(let-values(((with-continuation-mark286_0)"
"(let-values(((s_598)(car s_597))) s_598))"
"((key287_0 val288_0 body289_0)"
"(let-values(((s_599)(cdr s_597)))"
"(let-values(((s_600)"
"(if(syntax?$1 s_599)"
"(syntax-e$1 s_599)"
" s_599)))"
"(if(pair? s_600)"
"(let-values(((key290_0)"
"(let-values(((s_601)(car s_600)))"
" s_601))"
"((val291_0 body292_0)"
"(let-values(((s_602)(cdr s_600)))"
"(let-values(((s_603)"
"(if(syntax?$1 s_602)"
"(syntax-e$1 s_602)"
" s_602)))"
"(if(pair? s_603)"
"(let-values(((val293_0)"
"(let-values(((s_604)"
"(car"
" s_603)))"
" s_604))"
"((body294_0)"
"(let-values(((s_605)"
"(cdr"
" s_603)))"
"(let-values(((s_606)"
"(if(syntax?$1"
" s_605)"
"(syntax-e$1"
" s_605)"
" s_605)))"
"(if(pair? s_606)"
"(let-values(((body295_0)"
"(let-values(((s_607)"
"(car"
" s_606)))"
" s_607))"
"(()"
"(let-values(((s_608)"
"(cdr"
" s_606)))"
"(let-values(((s_609)"
"(if(syntax?$1"
" s_608)"
"(syntax-e$1"
" s_608)"
" s_608)))"
"(if(null?"
" s_609)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_54))))))"
"(values"
" body295_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_54))))))"
"(values val293_0 body294_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_54))))))"
"(values key290_0 val291_0 body292_0))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_54))))))"
"(values with-continuation-mark286_0 key287_0 val288_0 body289_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_54)))))"
"(values #t with-continuation-mark282_1 key283_1 val284_1 body285_1))))))"
"(let-values(((expr-ctx_3)(as-expression-context ctx_87)))"
"(let-values(((rebuild-s_10)"
"(let-values(((ctx296_0) ctx_87)((s297_0) s_595))"
"(keep-as-needed74.1 #f #f #f #f #f #f ctx296_0 s297_0))))"
"(let-values(((exp-key_0)"
"(let-values(((temp298_0) key283_0)((expr-ctx299_0) expr-ctx_3))"
"(expand7.1 #f #f #f #f temp298_0 expr-ctx299_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_104)(expand-context-observer ctx_87)))"
"(if obs_104"
"(let-values()(let-values()(call-expand-observe obs_104 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-val_0)"
"(let-values(((temp300_1) val284_0)((expr-ctx301_0) expr-ctx_3))"
"(expand7.1 #f #f #f #f temp300_1 expr-ctx301_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_105)(expand-context-observer ctx_87)))"
"(if obs_105"
"(let-values()(let-values()(call-expand-observe obs_105 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_6)"
"(let-values(((temp302_0) body285_0)"
"((temp303_0)"
"(let-values(((ctx305_0) ctx_87))"
"(as-tail-context23.1 ctx305_0 expr-ctx_3))))"
"(expand7.1 #f #f #f #f temp302_0 temp303_0))))"
"(if(expand-context-to-parsed? ctx_87)"
"(parsed-with-continuation-mark10.1 rebuild-s_10 exp-key_0 exp-val_0 exp-body_6)"
"(let-values(((rebuild-s306_0) rebuild-s_10)"
"((temp307_0)(list with-continuation-mark282_0 exp-key_0 exp-val_0 exp-body_6)))"
"(rebuild5.1 #f #f rebuild-s306_0 temp307_0))))))))))))))))"
"(define-values"
"(make-begin20.1)"
"(lambda(last-is-tail?15_0 list-start-index14_0 log-tag18_0 parsed-begin19_0)"
"(begin"
" 'make-begin20"
"(let-values(((log-tag_1) log-tag18_0))"
"(let-values(((parsed-begin_0) parsed-begin19_0))"
"(let-values(((list-start-index_0) list-start-index14_0))"
"(let-values(((last-is-tail?_0) last-is-tail?15_0))"
"(let-values()"
"(lambda(s_610 ctx_88)"
"(let-values((()"
"(begin"
"(let-values(((obs_106)(expand-context-observer ctx_88)))"
"(if obs_106"
"(let-values()(let-values()(call-expand-observe obs_106 log-tag_1)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_15)(syntax-disarm$1 s_610)))"
"(let-values(((ok?_48 begin308_0 e309_0)"
"(let-values(((s_611) disarmed-s_15))"
"(let-values(((orig-s_55) s_611))"
"(let-values(((begin308_1 e309_1)"
"(let-values(((s_612)"
"(if(syntax?$1 s_611)(syntax-e$1 s_611) s_611)))"
"(if(pair? s_612)"
"(let-values(((begin310_0)"
"(let-values(((s_613)(car s_612))) s_613))"
"((e311_0)"
"(let-values(((s_614)(cdr s_612)))"
"(let-values(((s_615)"
"(if(syntax?$1 s_614)"
"(syntax-e$1 s_614)"
" s_614)))"
"(let-values(((flat-s_41)"
"(to-syntax-list.1 s_615)))"
"(if(not flat-s_41)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_55))"
"(if(null? flat-s_41)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_55))"
"(let-values() flat-s_41))))))))"
"(values begin310_0 e311_0))"
"                                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_55)))))"
"(values #t begin308_1 e309_1))))))"
"(let-values(((expr-ctx_4)"
"(if last-is-tail?_0"
"(as-begin-expression-context ctx_88)"
"(as-expression-context ctx_88))))"
"(let-values(((rebuild-s_11)"
"(let-values(((ctx312_0) ctx_88)((s313_0) s_610))"
"(keep-as-needed74.1 #f #f #f #f #f #f ctx312_0 s313_0))))"
"(let-values(((exp-es_2)"
"((letrec-values(((loop_127)"
"(lambda(es_5 index_6)"
"(begin"
" 'loop"
"(begin"
"(if(zero? index_6)"
"(let-values()"
"(let-values(((obs_107)"
"(expand-context-observer ctx_88)))"
"(if obs_107"
"(let-values()"
"(begin"
"(if(zero? list-start-index_0)"
"(void)"
"(let-values()"
"(call-expand-observe obs_107 'next)))"
"(call-expand-observe"
" obs_107"
" 'enter-list"
"(datum->syntax$1 #f es_5 rebuild-s_11))))"
"(void))))"
"(void))"
"(if(null? es_5)"
"(let-values() null)"
"(let-values()"
"(let-values(((rest-es_1)(cdr es_5)))"
"(begin"
"(let-values(((obs_108)"
"(expand-context-observer"
" ctx_88)))"
"(if obs_108"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_108 'next)))"
"(void)))"
"(cons"
"(let-values(((temp314_0)(car es_5))"
"((temp315_0)"
"(if(if last-is-tail?_0"
"(null? rest-es_1)"
" #f)"
"(let-values(((ctx317_0)"
" ctx_88))"
"(as-tail-context23.1"
" ctx317_0"
" expr-ctx_4))"
" expr-ctx_4)))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" temp314_0"
" temp315_0))"
"(loop_127 rest-es_1(sub1 index_6))))))))))))"
" loop_127)"
" e309_0"
" list-start-index_0)))"
"(begin"
"(let-values(((obs_109)(expand-context-observer ctx_88)))"
"(if obs_109"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_109"
" 'exit-list"
"(datum->syntax$1 #f(list-tail exp-es_2 list-start-index_0) rebuild-s_11))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_88)"
"(parsed-begin_0 rebuild-s_11 exp-es_2)"
"(let-values(((rebuild-s318_0) rebuild-s_11)((temp319_0)(cons begin308_0 exp-es_2)))"
"(rebuild5.1 #f #f rebuild-s318_0 temp319_0)))))))))))))))))))"
"(void"
"(add-core-form!*"
" 'begin"
"(let-values(((nonempty-begin_0)"
"(let-values(((temp320_0) 'prim-begin)"
"((parsed-begin321_0) parsed-begin12.1)"
"((temp322_0) 0)"
"((temp323_0) #t))"
"(make-begin20.1 temp323_0 temp322_0 temp320_0 parsed-begin321_0))))"
"(lambda(s_616 ctx_89)"
"(let-values(((context_24)(expand-context-context ctx_89)))"
"(if(let-values(((or-part_373)(eq? context_24 'top-level)))"
"(if or-part_373 or-part_373(eq? context_24 'module)))"
"(let-values()"
"(let-values(((disarmed-s_16)(syntax-disarm$1 s_616)))"
"(let-values(((ok?_49 begin324_0)"
"(let-values(((s_617) disarmed-s_16))"
"(if(let-values(((s_618)(if(syntax?$1 s_617)(syntax-e$1 s_617) s_617)))"
"(if(pair? s_618)"
"(if(let-values(((s_619)(car s_618))) #t)"
"(let-values(((s_620)(cdr s_618)))"
"(let-values(((s_621)(if(syntax?$1 s_620)(syntax-e$1 s_620) s_620)))"
"(null? s_621)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((begin324_1)"
"(let-values(((s_622)(if(syntax?$1 s_617)(syntax-e$1 s_617) s_617)))"
"(let-values(((begin325_0)"
"(let-values(((s_623)(car s_622))) s_623))"
"(()"
"(let-values(((s_624)(cdr s_622)))"
"(let-values(((s_625)"
"(if(syntax?$1 s_624)"
"(syntax-e$1 s_624)"
" s_624)))"
"(values)))))"
"(values begin325_0)))))"
"(values #t begin324_1)))"
"(values #f #f)))))"
"(if ok?_49 s_616(nonempty-begin_0 s_616 ctx_89)))))"
"(let-values()(nonempty-begin_0 s_616 ctx_89))))))))"
"(void"
"(add-core-form!*"
" 'begin0"
"(let-values(((temp326_0) 'prim-begin0)((parsed-begin0327_0) parsed-begin013.1)((temp328_0) 1)((temp329_0) #f))"
"(make-begin20.1 temp329_0 temp328_0 temp326_0 parsed-begin0327_0))))"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_119 ctx_90)"
"(begin"
"(if(if(expand-context-need-eventually-defined ctx_90)(>=(expand-context-phase ctx_90) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_90)"
"(expand-context-phase ctx_90)"
"(lambda(l_83)(cons id_119 l_83))"
" null)"
" #t))"
"(let-values() #f)))))"
"(void"
"(add-core-form!*"
" '#%top"
"(let-values(((core334_0)"
"(lambda(s332_0 ctx333_0 implicit-omitted?330_0 implicit-omitted?331_0)"
"(begin"
" 'core334"
"(let-values(((s_626) s332_0))"
"(let-values(((ctx_91) ctx333_0))"
"(let-values(((implicit-omitted?_0)(if implicit-omitted?331_0 implicit-omitted?330_0 #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_110)(expand-context-observer ctx_91)))"
"(if obs_110"
"(let-values()"
"(let-values()(call-expand-observe obs_110 'prim-#%top)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_17)(syntax-disarm$1 s_626)))"
"(let-values(((id_120)"
"(if implicit-omitted?_0"
"(let-values() s_626)"
"(let-values()"
"(let-values(((ok?_50 #%top336_0 id337_0)"
"(let-values(((s_627) disarmed-s_17))"
"(let-values(((orig-s_56) s_627))"
"(let-values(((#%top336_1 id337_1)"
"(let-values(((s_628)"
"(if(syntax?$1 s_627)"
"(syntax-e$1 s_627)"
" s_627)))"
"(if(pair? s_628)"
"(let-values(((#%top338_0)"
"(let-values(((s_629)"
"(car"
" s_628)))"
" s_629))"
"((id339_0)"
"(let-values(((s_630)"
"(cdr"
" s_628)))"
"(if(let-values(((or-part_374)"
"(if(syntax?$1"
" s_630)"
"(symbol?"
"(syntax-e$1"
" s_630))"
" #f)))"
"(if or-part_374"
" or-part_374"
"(symbol?"
" s_630)))"
" s_630"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"not an identifier\""
" orig-s_56"
" s_630)))))"
"(values #%top338_0 id339_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_56)))))"
"(values #t #%top336_1 id337_1))))))"
" id337_0)))))"
"(let-values(((b_90)"
"(let-values(((temp341_0)(expand-context-phase ctx_91))"
"((temp342_0) 'ambiguous))"
"(resolve+shift30.1"
" temp342_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id_120"
" temp341_0))))"
"(if(eq? b_90 'ambiguous)"
"(let-values()(raise-ambiguous-error id_120 ctx_91))"
"(if(if b_90"
"(if(module-binding? b_90)"
"(eq?"
"(module-binding-module b_90)"
"(namespace-mpi(expand-context-namespace ctx_91)))"
" #f)"
" #f)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_91)"
"(parsed-id2.1 id_120 b_90 #f)"
"(if(top-level-module-path-index?(module-binding-module b_90))"
"(let-values() s_626)"
"(let-values() id_120))))"
"(if(register-eventual-variable!? id_120 ctx_91)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_91)"
"(parsed-id2.1 id_120 b_90 #f)"
" id_120))"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_91))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_120"
" #f"
" null"
"(syntax-debug-info-string id_120 ctx_91)))"
"(let-values()"
"(let-values(((tl-id_1)"
"(add-scope"
" id_120"
"(root-expand-context-top-level-bind-scope ctx_91))))"
"(let-values(((tl-b_1)"
"(let-values(((tl-id343_0) tl-id_1)"
"((temp344_0)"
"(expand-context-phase ctx_91)))"
"(resolve33.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" tl-id343_0"
" temp344_0))))"
"(if tl-b_1"
"(let-values()"
"(if(expand-context-to-parsed? ctx_91)"
"(parsed-top-id4.1 tl-id_1 tl-b_1 #f)"
"(if implicit-omitted?_0"
"(let-values() id_120)"
"(let-values()"
"(let-values(((ok?_51 #%top345_0 id346_0)"
"(let-values(((s_631) disarmed-s_17))"
"(let-values(((orig-s_57) s_631))"
"(let-values(((#%top345_1 id346_1)"
"(let-values(((s_632)"
"(if(syntax?$1"
" s_631)"
"(syntax-e$1"
" s_631)"
" s_631)))"
"(if(pair? s_632)"
"(let-values(((#%top347_0)"
"(let-values(((s_633)"
"(car"
" s_632)))"
" s_633))"
"((id348_0)"
"(let-values(((s_634)"
"(cdr"
" s_632)))"
"(if(let-values(((or-part_375)"
"(if(syntax?$1"
" s_634)"
"(symbol?"
"(syntax-e$1"
" s_634))"
" #f)))"
"(if or-part_375"
" or-part_375"
"(symbol?"
" s_634)))"
" s_634"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"not an identifier\""
" orig-s_57"
" s_634)))))"
"(values"
" #%top347_0"
" id348_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_57)))))"
"(values #t #%top345_1 id346_1))))))"
"(let-values(((s349_0) s_626)"
"((temp350_0)(cons #%top345_0 id_120)))"
"(rebuild5.1 #f #f s349_0 temp350_0)))))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_91)"
"(parsed-top-id4.1 id_120 b_90 #f)"
" s_626)))))))))))))))))))))))"
"(case-lambda"
"((s_635 ctx_92)(core334_0 s_635 ctx_92 #f #f))"
"((s_636 ctx_93 implicit-omitted?330_1)(core334_0 s_636 ctx_93 implicit-omitted?330_1 #t))))))"
"(void"
"(add-core-form!*"
" 'set!"
"(lambda(s_637 ctx_94)"
"(let-values((()"
"(begin"
"(let-values(((obs_111)(expand-context-observer ctx_94)))"
"(if obs_111(let-values()(let-values()(call-expand-observe obs_111 'prim-set!)))(void)))"
"(values))))"
"(let-values(((disarmed-s_18)(syntax-disarm$1 s_637)))"
"(let-values(((ok?_52 set!351_0 id352_0 rhs353_0)"
"(let-values(((s_638) disarmed-s_18))"
"(let-values(((orig-s_58) s_638))"
"(let-values(((set!351_1 id352_1 rhs353_1)"
"(let-values(((s_639)(if(syntax?$1 s_638)(syntax-e$1 s_638) s_638)))"
"(if(pair? s_639)"
"(let-values(((set!354_0)(let-values(((s_640)(car s_639))) s_640))"
"((id355_0 rhs356_0)"
"(let-values(((s_641)(cdr s_639)))"
"(let-values(((s_642)"
"(if(syntax?$1 s_641)"
"(syntax-e$1 s_641)"
" s_641)))"
"(if(pair? s_642)"
"(let-values(((id357_0)"
"(let-values(((s_643)(car s_642)))"
"(if(let-values(((or-part_376)"
"(if(syntax?$1 s_643)"
"(symbol?"
"(syntax-e$1"
" s_643))"
" #f)))"
"(if or-part_376"
" or-part_376"
"(symbol? s_643)))"
" s_643"
"(raise-syntax-error$1"
" #f"
"                                                                                    \"not an identifier\""
" orig-s_58"
" s_643))))"
"((rhs358_0)"
"(let-values(((s_644)(cdr s_642)))"
"(let-values(((s_645)"
"(if(syntax?$1 s_644)"
"(syntax-e$1 s_644)"
" s_644)))"
"(if(pair? s_645)"
"(let-values(((rhs359_0)"
"(let-values(((s_646)"
"(car"
" s_645)))"
" s_646))"
"(()"
"(let-values(((s_647)"
"(cdr"
" s_645)))"
"(let-values(((s_648)"
"(if(syntax?$1"
" s_647)"
"(syntax-e$1"
" s_647)"
" s_647)))"
"(if(null? s_648)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_58))))))"
"(values rhs359_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_58))))))"
"(values id357_0 rhs358_0))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_58))))))"
"(values set!354_0 id355_0 rhs356_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_58)))))"
"(values #t set!351_1 id352_1 rhs353_1))))))"
"(let-values(((id_121) id352_0))"
"((letrec-values(((rename-loop_0)"
"(lambda(id_122 from-rename?_0)"
"(begin"
" 'rename-loop"
"(let-values(((binding_30)"
"(let-values(((temp361_0)(expand-context-phase ctx_94))"
"((temp362_0) 'ambiguous)"
"((temp363_0) #t))"
"(resolve+shift30.1"
" temp362_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp363_0"
" #t"
" #f"
" #f"
" id_122"
" temp361_0))))"
"(let-values((()"
"(begin"
"(if(eq? binding_30 'ambiguous)"
"(let-values()(raise-ambiguous-error id_122 ctx_94))"
"(void))"
"(values))))"
"(let-values(((t_57 primitive?_10 insp_24)"
"(if binding_30"
"(let-values(((binding364_0) binding_30)"
"((ctx365_0) ctx_94)"
"((s366_0) s_637))"
"(lookup17.1 #f #f #f #f binding364_0 ctx365_0 s366_0))"
"(values #f #f #f))))"
"(begin"
"(let-values(((obs_112)(expand-context-observer ctx_94)))"
"(if obs_112"
"(let-values()"
"(let-values()(call-expand-observe obs_112 'resolve id_122)))"
"(void)))"
"(if(let-values(((or-part_377)(variable? t_57)))"
"(if or-part_377"
" or-part_377"
"(if(not binding_30)"
"(let-values(((or-part_378)"
"(register-eventual-variable!? id_122 ctx_94)))"
"(if or-part_378"
" or-part_378"
"(expand-context-allow-unbound? ctx_94)))"
" #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(module-binding? binding_30)"
"(not"
"(eq?"
"(module-binding-module binding_30)"
"(namespace-mpi"
"(expand-context-namespace ctx_94))))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                    \"cannot mutate module-required identifier\""
" s_637"
" id_122))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_113)"
"(expand-context-observer ctx_94)))"
"(if obs_113"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_113 'next)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(register-variable-referenced-if-local! binding_30)"
"(values))))"
"(let-values(((rebuild-s_12)"
"(let-values(((ctx367_0) ctx_94)((s368_0) s_637))"
"(keep-as-needed74.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ctx367_0"
" s368_0))))"
"(let-values(((exp-rhs_5)"
"(let-values(((temp369_0) rhs353_0)"
"((temp370_0)"
"(as-expression-context ctx_94)))"
"(expand7.1 #f #f #f #f temp369_0 temp370_0))))"
"(if(expand-context-to-parsed? ctx_94)"
"(parsed-set!9.1"
" rebuild-s_12"
"(parsed-id2.1 id_122 binding_30 #f)"
" exp-rhs_5)"
"(let-values(((rebuild-s371_0) rebuild-s_12)"
"((temp372_0)"
"(list"
" set!351_0"
"(let-values(((temp375_0)"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops"
" ctx_94))))"
"(substitute-variable6.1"
" temp375_0"
" id_122"
" t_57))"
" exp-rhs_5)))"
"(rebuild5.1 #f #f rebuild-s371_0 temp372_0)))))))))"
"(if(not binding_30)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_637"
" id_122"
" null"
"(syntax-debug-info-string id_122 ctx_94)))"
"(if(1/set!-transformer? t_57)"
"(let-values()"
"(if(not-in-this-expand-context? t_57 ctx_94)"
"(let-values()"
"(let-values(((temp376_0)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_637"
" disarmed-s_18"
" set!351_0"
" rhs353_0"
" id_122"
" from-rename?_0"
" ctx_94)"
" t_57"
" ctx_94))"
"((ctx377_0) ctx_94))"
"(expand7.1 #f #f #f #f temp376_0 ctx377_0)))"
"(let-values()"
"(let-values(((exp-s_14 re-ctx_1)"
"(apply-transformer"
" t_57"
" insp_24"
" s_637"
" id_122"
" ctx_94"
" binding_30)))"
"(if(expand-context-just-once? ctx_94)"
"(let-values() exp-s_14)"
"(let-values()"
"(let-values(((exp-s378_0) exp-s_14)"
"((re-ctx379_0) re-ctx_1))"
"(expand7.1 #f #f #f #f exp-s378_0 re-ctx379_0))))))))"
"(if(1/rename-transformer? t_57)"
"(let-values()"
"(if(not-in-this-expand-context? t_57 ctx_94)"
"(let-values()"
"(let-values(((temp380_0)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_637"
" disarmed-s_18"
" set!351_0"
" rhs353_0"
" id_122"
" from-rename?_0"
" ctx_94"
" t_57)"
" t_57"
" ctx_94))"
"((ctx381_0) ctx_94))"
"(expand7.1 #f #f #f #f temp380_0 ctx381_0)))"
"(let-values()"
"(rename-loop_0"
"(rename-transformer-target-in-context t_57 ctx_94)"
" #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_637"
" id_122))))))))))))))"
" rename-loop_0)"
" id_121"
" #f))))))))"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename32_0)"
"(lambda(s25_0 disarmed-s26_0 set!-id27_0 id28_0 rhs-s29_0 from-rename?30_0 ctx31_0 t23_0 t24_0)"
"(begin"
" 'substitute-set!-rename32"
"(let-values(((s_649) s25_0))"
"(let-values(((disarmed-s_19) disarmed-s26_0))"
"(let-values(((set!-id_0) set!-id27_0))"
"(let-values(((id_123) id28_0))"
"(let-values(((rhs-s_0) rhs-s29_0))"
"(let-values(((from-rename?_1) from-rename?30_0))"
"(let-values(((ctx_95) ctx31_0))"
"(let-values(((t_58)(if t24_0 t23_0 #f)))"
"(let-values()"
"(if(let-values(((or-part_379) t_58))"
"(if or-part_379 or-part_379 from-rename?_1))"
"(let-values()"
"(let-values(((new-id_1)"
"(if t_58"
"(rename-transformer-target-in-context t_58 ctx_95)"
" id_123)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_19"
"(list set!-id_0 new-id_1 rhs-s_0)"
" disarmed-s_19"
" disarmed-s_19)"
" s_649)))"
"(let-values() s_649)))))))))))))))"
"(case-lambda"
"((s_650 disarmed-s_20 set!-id_1 id_124 rhs-s_1 from-rename?_2 ctx_96)"
"(begin(substitute-set!-rename32_0 s_650 disarmed-s_20 set!-id_1 id_124 rhs-s_1 from-rename?_2 ctx_96 #f #f)))"
"((s_651 disarmed-s_21 set!-id_2 id_125 rhs-s_2 from-rename?_3 ctx_97 t23_1)"
"(substitute-set!-rename32_0 s_651 disarmed-s_21 set!-id_2 id_125 rhs-s_2 from-rename?_3 ctx_97 t23_1 #t)))))"
"(void"
"(add-core-form!*"
" '#%variable-reference"
"(lambda(s_652 ctx_98)"
"(let-values((()"
"(begin"
"(let-values(((obs_114)(expand-context-observer ctx_98)))"
"(if obs_114"
"(let-values()(let-values()(call-expand-observe obs_114 'prim-#%variable-reference)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_22)(syntax-disarm$1 s_652)))"
"(let-values(((ok?_53 #%variable-reference382_0 id383_0)"
"(let-values(((s_653) disarmed-s_22))"
"(if(let-values(((s_654)(if(syntax?$1 s_653)(syntax-e$1 s_653) s_653)))"
"(if(pair? s_654)"
"(if(let-values(((s_655)(car s_654))) #t)"
"(let-values(((s_656)(cdr s_654)))"
"(let-values(((s_657)(if(syntax?$1 s_656)(syntax-e$1 s_656) s_656)))"
"(if(pair? s_657)"
"(if(let-values(((s_658)(car s_657)))"
"(let-values(((or-part_380)"
"(if(syntax?$1 s_658)(symbol?(syntax-e$1 s_658)) #f)))"
"(if or-part_380 or-part_380(symbol? s_658))))"
"(let-values(((s_659)(cdr s_657)))"
"(let-values(((s_660)(if(syntax?$1 s_659)(syntax-e$1 s_659) s_659)))"
"(null? s_660)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((#%variable-reference382_1 id383_1)"
"(let-values(((s_661)(if(syntax?$1 s_653)(syntax-e$1 s_653) s_653)))"
"(let-values(((#%variable-reference384_0)"
"(let-values(((s_662)(car s_661))) s_662))"
"((id385_0)"
"(let-values(((s_663)(cdr s_661)))"
"(let-values(((s_664)"
"(if(syntax?$1 s_663)"
"(syntax-e$1 s_663)"
" s_663)))"
"(let-values(((id386_0)"
"(let-values(((s_665)(car s_664))) s_665))"
"(()"
"(let-values(((s_666)(cdr s_664)))"
"(let-values(((s_667)"
"(if(syntax?$1 s_666)"
"(syntax-e$1 s_666)"
" s_666)))"
"(values)))))"
"(values id386_0))))))"
"(values #%variable-reference384_0 id385_0)))))"
"(values #t #%variable-reference382_1 id383_1)))"
"(values #f #f #f)))))"
"(let-values(((ok?_54 #%variable-reference387_0 #%top388_0 id389_0)"
"(let-values(((s_668) disarmed-s_22))"
"(if(if(not ok?_53)"
"(let-values(((s_669)(if(syntax?$1 s_668)(syntax-e$1 s_668) s_668)))"
"(if(pair? s_669)"
"(if(let-values(((s_670)(car s_669))) #t)"
"(let-values(((s_671)(cdr s_669)))"
"(let-values(((s_672)(if(syntax?$1 s_671)(syntax-e$1 s_671) s_671)))"
"(if(pair? s_672)"
"(if(let-values(((s_673)(car s_672)))"
"(let-values(((s_674)"
"(if(syntax?$1 s_673)(syntax-e$1 s_673) s_673)))"
"(if(pair? s_674)"
"(if(let-values(((s_675)(car s_674))) #t)"
"(let-values(((s_676)(cdr s_674)))"
"(let-values(((or-part_381)"
"(if(syntax?$1 s_676)"
"(symbol?(syntax-e$1 s_676))"
" #f)))"
"(if or-part_381 or-part_381(symbol? s_676))))"
" #f)"
" #f)))"
"(let-values(((s_677)(cdr s_672)))"
"(let-values(((s_678)(if(syntax?$1 s_677)(syntax-e$1 s_677) s_677)))"
"(null? s_678)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values()"
"(let-values(((#%variable-reference387_1 #%top388_1 id389_1)"
"(let-values(((s_679)(if(syntax?$1 s_668)(syntax-e$1 s_668) s_668)))"
"(let-values(((#%variable-reference390_0)"
"(let-values(((s_680)(car s_679))) s_680))"
"((#%top391_0 id392_0)"
"(let-values(((s_681)(cdr s_679)))"
"(let-values(((s_682)"
"(if(syntax?$1 s_681)"
"(syntax-e$1 s_681)"
" s_681)))"
"(let-values(((#%top393_0 id394_0)"
"(let-values(((s_683)(car s_682)))"
"(let-values(((s_684)"
"(if(syntax?$1 s_683)"
"(syntax-e$1 s_683)"
" s_683)))"
"(let-values(((#%top395_0)"
"(let-values(((s_685)"
"(car"
" s_684)))"
" s_685))"
"((id396_0)"
"(let-values(((s_686)"
"(cdr"
" s_684)))"
" s_686)))"
"(values #%top395_0 id396_0)))))"
"(()"
"(let-values(((s_687)(cdr s_682)))"
"(let-values(((s_688)"
"(if(syntax?$1 s_687)"
"(syntax-e$1 s_687)"
" s_687)))"
"(values)))))"
"(values #%top393_0 id394_0))))))"
"(values #%variable-reference390_0 #%top391_0 id392_0)))))"
"(values #t #%variable-reference387_1 #%top388_1 id389_1)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_55 #%variable-reference397_0)"
"(let-values(((s_689) disarmed-s_22))"
"(if(if(not(let-values(((or-part_382) ok?_53))(if or-part_382 or-part_382 ok?_54)))"
" #t"
" #f)"
"(let-values(((orig-s_59) s_689))"
"(let-values(((#%variable-reference397_1)"
"(let-values(((s_690)(if(syntax?$1 s_689)(syntax-e$1 s_689) s_689)))"
"(if(pair? s_690)"
"(let-values(((#%variable-reference398_0)"
"(let-values(((s_691)(car s_690))) s_691))"
"(()"
"(let-values(((s_692)(cdr s_690)))"
"(let-values(((s_693)"
"(if(syntax?$1 s_692)"
"(syntax-e$1 s_692)"
" s_692)))"
"(if(null? s_693)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_59))))))"
"(values #%variable-reference398_0))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_59)))))"
"(values #t #%variable-reference397_1)))"
"(values #f #f)))))"
"(if(let-values(((or-part_383) ok?_53))(if or-part_383 or-part_383 ok?_54))"
"(let-values()"
"(let-values(((var-id_0)(if ok?_53 id383_0 id389_0)))"
"(let-values(((binding_31)"
"(let-values(((temp400_0)(expand-context-phase ctx_98))((temp401_0) 'ambiguous))"
"(resolve+shift30.1 temp401_0 #t #f #f #f #f #f #f #f #f var-id_0 temp400_0))))"
"(let-values((()"
"(begin"
"(if(eq? binding_31 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_0 ctx_98))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_384) binding_31))"
"(if or-part_384 or-part_384(expand-context-allow-unbound? ctx_98)))"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                              \"unbound identifier\""
" s_652"
" var-id_0"
" null"
"(syntax-debug-info-string var-id_0 ctx_98))))"
"(values))))"
"(let-values(((t_59 primitive?_11 insp-of-t_7)"
"(if binding_31"
"(let-values(((s405_0) s_652)"
"((temp406_0)(expand-context-in-local-expand? ctx_98)))"
"(lookup17.1 s405_0 #t temp406_0 #t binding_31 ctx_98 var-id_0))"
"(values #f #f #f))))"
"(begin"
"(if(if t_59(not(variable? t_59)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 #f \"identifier does not refer to a variable\" var-id_0 s_652))"
"(void))"
"(if(expand-context-to-parsed? ctx_98)"
"(parsed-#%variable-reference11.1"
"(keep-properties-only~ s_652)"
"(if ok?_54"
"(let-values()(parsed-top-id4.1 var-id_0 binding_31 #f))"
"(let-values()(parsed-id2.1 var-id_0 binding_31 #f))))"
" s_652))))))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_98)"
"(parsed-#%variable-reference11.1(keep-properties-only~ s_652) #f)"
" s_652)))))))))))"
"(void"
"(add-core-form!*"
" '#%expression"
"(lambda(s_694 ctx_99)"
"(let-values((()"
"(begin"
"(let-values(((obs_115)(expand-context-observer ctx_99)))"
"(if obs_115"
"(let-values()(let-values()(call-expand-observe obs_115 'prim-#%expression)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_23)(syntax-disarm$1 s_694)))"
"(let-values(((ok?_56 #%expression407_0 e408_0)"
"(let-values(((s_695) disarmed-s_23))"
"(let-values(((orig-s_60) s_695))"
"(let-values(((#%expression407_1 e408_1)"
"(let-values(((s_696)(if(syntax?$1 s_695)(syntax-e$1 s_695) s_695)))"
"(if(pair? s_696)"
"(let-values(((#%expression409_0)"
"(let-values(((s_697)(car s_696))) s_697))"
"((e410_0)"
"(let-values(((s_698)(cdr s_696)))"
"(let-values(((s_699)"
"(if(syntax?$1 s_698)"
"(syntax-e$1 s_698)"
" s_698)))"
"(if(pair? s_699)"
"(let-values(((e411_0)"
"(let-values(((s_700)(car s_699)))"
" s_700))"
"(()"
"(let-values(((s_701)(cdr s_699)))"
"(let-values(((s_702)"
"(if(syntax?$1 s_701)"
"(syntax-e$1 s_701)"
" s_701)))"
"(if(null? s_702)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_60))))))"
"(values e411_0))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_60))))))"
"(values #%expression409_0 e410_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_60)))))"
"(values #t #%expression407_1 e408_1))))))"
"(let-values(((rebuild-s_13)"
"(let-values(((temp414_0) #t))(keep-as-needed74.1 temp414_0 #t #f #f #f #f ctx_99 s_694))))"
"(let-values(((exp-e_0)"
"(let-values(((temp415_0) e408_0)"
"((temp416_0)"
"(let-values(((temp417_0)(as-expression-context ctx_99))((ctx418_0) ctx_99))"
"(as-tail-context23.1 ctx418_0 temp417_0))))"
"(expand7.1 #f #f #f #f temp415_0 temp416_0))))"
"(if(expand-context-to-parsed? ctx_99)"
" exp-e_0"
"(let-values(((tmp_62)"
"(if(not(expand-context-in-local-expand? ctx_99))(expand-context-context ctx_99) #f)))"
"(if(equal? tmp_62 'expression)"
"(let-values()"
"(let-values(((result-s_13)(syntax-track-origin$1 exp-e_0 rebuild-s_13)))"
"(begin"
"(let-values(((obs_116)(expand-context-observer ctx_99)))"
"(if obs_116"
"(let-values()(let-values()(call-expand-observe obs_116 'tag result-s_13)))"
"(void)))"
" result-s_13)))"
"(let-values()"
"(let-values(((rebuild-s419_0) rebuild-s_13)((temp420_0)(list #%expression407_0 exp-e_0)))"
"(rebuild5.1 #f #f rebuild-s419_0 temp420_0))))))))))))))"
" (void (add-core-form!* 'unquote (lambda (s_703 ctx_100) (raise-syntax-error$1 #f \"not in quasiquote\" s_703))))"
" (void (add-core-form!* 'unquote-splicing (lambda (s_704 ctx_101) (raise-syntax-error$1 #f \"not in quasiquote\" s_704))))"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_41 id_126 at-phase_12 ns_123)"
"(begin"
"(if(not at-phase_12)"
"(let-values()"
"(let-values(((m_30)"
"(namespace->module ns_123(1/module-path-index-resolve(module-binding-nominal-module b_41)))))"
"(let-values(((b/p_4)"
"(hash-ref"
"(hash-ref(module-provides m_30)(module-binding-nominal-phase b_41) '#hasheq())"
"(module-binding-nominal-sym b_41)"
" #f)))"
"(provided-as-transformer? b/p_4))))"
"(let-values()"
"(let-values(((val_85 primitive?_12 insp_25)"
"(let-values(((b1_8) b_41)"
"((empty-env2_0) empty-env)"
"((null3_0) null)"
"((ns4_0) ns_123)"
"((at-phase5_0) at-phase_12)"
"((id6_0) id_126))"
"(binding-lookup48.1 #f #f #f #f b1_8 empty-env2_0 null3_0 ns4_0 at-phase5_0 id6_0))))"
"(not(variable? val_85))))))))"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_0 orig-s_61 rp_1 self_28 phase_41 ctx_102)"
"(begin"
"(let-values(((ns_124)(expand-context-namespace ctx_102)))"
"((letrec-values(((loop_115)"
"(lambda(specs_1 at-phase_13 protected?_4 layer_6)"
"(begin"
" 'loop"
"(let-values(((track-stxess_0 exp-specss_0)"
"(let-values(((track-stxes_0 exp-specs_0)"
"(let-values(((lst_73) specs_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_73)))"
"((letrec-values(((for-loop_91)"
"(lambda(track-stxes_1"
" exp-specs_1"
" lst_400)"
"(begin"
" 'for-loop"
"(if(pair? lst_400)"
"(let-values(((spec_0)"
"(unsafe-car"
" lst_400))"
"((rest_233)"
"(unsafe-cdr"
" lst_400)))"
"(let-values(((track-stxes_2"
" exp-specs_2)"
"(let-values(((track-stxes_3)"
" track-stxes_1)"
"((exp-specs_3)"
" exp-specs_1))"
"(let-values(((track-stxes_4"
" exp-specs_4)"
"(let-values()"
"(let-values(((track-stxes1_0"
" exp-specs2_0)"
"(let-values()"
"(let-values(((disarmed-spec_0)"
"(syntax-disarm$1"
" spec_0)))"
"(let-values(((fm_2)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_0))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_0)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_0)))"
" #f)"
" #f)))"
"(let-values(((check-nested_1)"
"(lambda(want-layer_3)"
"(begin"
" 'check-nested"
"(if(member"
" want-layer_3"
"(member"
" layer_6"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                                                                    \"nested `~a' not allowed\""
" fm_2)"
" orig-s_61"
" spec_0)))))))"
"(let-values(((tmp_63)"
" fm_2))"
"(let-values(((index_7)"
"(if(symbol?"
" tmp_63)"
"(hash-ref"
" '#hasheq((all-defined"
" ."
" 9)"
"(all-defined-except"
" ."
" 10)"
"(all-from"
" ."
" 7)"
"(all-from-except"
" ."
" 8)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3)"
"(for-meta"
" ."
" 1)"
"(for-syntax"
" ."
" 2)"
"(prefix-all-defined"
" ."
" 11)"
"(prefix-all-defined-except"
" ."
" 12)"
"(protect"
" ."
" 4)"
"(rename ."
" 5)"
"(struct"
" ."
" 6))"
" tmp_63"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_7"
" 6)"
"(if(unsafe-fx<"
" index_7"
" 2)"
"(if(unsafe-fx<"
" index_7"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_0)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_0"
" orig-s_61"
"(syntax-e$1"
" spec_0)"
" at-phase_13"
" ns_124"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                               \"bad syntax\""
" orig-s_61"
" spec_0))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'raw)"
"(values))))"
"(let-values(((ok?_57"
" for-meta3_0"
" phase-level4_0"
" spec5_0)"
"(let-values(((s_307)"
" disarmed-spec_0))"
"(let-values(((orig-s_62)"
" s_307))"
"(let-values(((for-meta3_1"
" phase-level4_1"
" spec5_1)"
"(let-values(((s_459)"
"(if(syntax?$1"
" s_307)"
"(syntax-e$1"
" s_307)"
" s_307)))"
"(if(pair?"
" s_459)"
"(let-values(((for-meta6_0)"
"(let-values(((s_179)"
"(car"
" s_459)))"
" s_179))"
"((phase-level7_0"
" spec8_0)"
"(let-values(((s_78)"
"(cdr"
" s_459)))"
"(let-values(((s_412)"
"(if(syntax?$1"
" s_78)"
"(syntax-e$1"
" s_78)"
" s_78)))"
"(if(pair?"
" s_412)"
"(let-values(((phase-level9_0)"
"(let-values(((s_181)"
"(car"
" s_412)))"
" s_181))"
"((spec10_0)"
"(let-values(((s_399)"
"(cdr"
" s_412)))"
"(let-values(((s_148)"
"(if(syntax?$1"
" s_399)"
"(syntax-e$1"
" s_399)"
" s_399)))"
"(let-values(((flat-s_42)"
"(to-syntax-list.1"
" s_148)))"
"(if(not"
" flat-s_42)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_62))"
"(let-values()"
" flat-s_42)))))))"
"(values"
" phase-level9_0"
" spec10_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_62))))))"
"(values"
" for-meta6_0"
" phase-level7_0"
" spec8_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_62)))))"
"(values"
" #t"
" for-meta3_1"
" phase-level4_1"
" spec5_1))))))"
"(let-values(((p_68)"
"(syntax-e$1"
" phase-level4_0)))"
"(let-values((()"
"(begin"
"(if(phase?"
" p_68)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                     \"bad `for-meta' phase\""
" orig-s_61"
" spec_0)))"
"(values))))"
"(let-values(((track-stxes_5"
" exp-specs_5)"
"(loop_115"
" spec5_0"
"(phase+"
" p_68"
" at-phase_13)"
" protected?_4"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_5"
"(let-values(((spec11_0)"
" spec_0)"
"((temp12_7)"
"(list*"
" for-meta3_0"
" phase-level4_0"
" exp-specs_5)))"
"(rebuild5.1"
" #f"
" #f"
" spec11_0"
" temp12_7))))))))))))"
"(if(unsafe-fx<"
" index_7"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'raw)"
"(values))))"
"(let-values(((ok?_58"
" for-syntax13_0"
" spec14_0)"
"(let-values(((s_20)"
" disarmed-spec_0))"
"(let-values(((orig-s_63)"
" s_20))"
"(let-values(((for-syntax13_1"
" spec14_1)"
"(let-values(((s_23)"
"(if(syntax?$1"
" s_20)"
"(syntax-e$1"
" s_20)"
" s_20)))"
"(if(pair?"
" s_23)"
"(let-values(((for-syntax15_0)"
"(let-values(((s_305)"
"(car"
" s_23)))"
" s_305))"
"((spec16_0)"
"(let-values(((s_25)"
"(cdr"
" s_23)))"
"(let-values(((s_705)"
"(if(syntax?$1"
" s_25)"
"(syntax-e$1"
" s_25)"
" s_25)))"
"(let-values(((flat-s_43)"
"(to-syntax-list.1"
" s_705)))"
"(if(not"
" flat-s_43)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_63))"
"(let-values()"
" flat-s_43)))))))"
"(values"
" for-syntax15_0"
" spec16_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_63)))))"
"(values"
" #t"
" for-syntax13_1"
" spec14_1))))))"
"(let-values(((track-stxes_6"
" exp-specs_6)"
"(loop_115"
" spec14_0"
"(phase+"
" 1"
" at-phase_13)"
" protected?_4"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_6"
"(let-values(((spec17_0)"
" spec_0)"
"((temp18_5)"
"(list*"
" for-syntax13_0"
" exp-specs_6)))"
"(rebuild5.1"
" #f"
" #f"
" spec17_0"
" temp18_5)))))))))"
"(if(unsafe-fx<"
" index_7"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'raw)"
"(values))))"
"(let-values(((ok?_59"
" for-label19_0"
" spec20_0)"
"(let-values(((s_44)"
" disarmed-spec_0))"
"(let-values(((orig-s_24)"
" s_44))"
"(let-values(((for-label19_1"
" spec20_1)"
"(let-values(((s_706)"
"(if(syntax?$1"
" s_44)"
"(syntax-e$1"
" s_44)"
" s_44)))"
"(if(pair?"
" s_706)"
"(let-values(((for-label21_0)"
"(let-values(((s_473)"
"(car"
" s_706)))"
" s_473))"
"((spec22_0)"
"(let-values(((s_45)"
"(cdr"
" s_706)))"
"(let-values(((s_397)"
"(if(syntax?$1"
" s_45)"
"(syntax-e$1"
" s_45)"
" s_45)))"
"(let-values(((flat-s_44)"
"(to-syntax-list.1"
" s_397)))"
"(if(not"
" flat-s_44)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_24))"
"(let-values()"
" flat-s_44)))))))"
"(values"
" for-label21_0"
" spec22_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_24)))))"
"(values"
" #t"
" for-label19_1"
" spec20_1))))))"
"(let-values(((track-stxes_7"
" exp-specs_7)"
"(loop_115"
" spec20_0"
" #f"
" protected?_4"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_7"
"(let-values(((spec23_0)"
" spec_0)"
"((temp24_12)"
"(list*"
" for-label19_0"
" exp-specs_7)))"
"(rebuild5.1"
" #f"
" #f"
" spec23_0"
" temp24_12)))))))))"
"(if(unsafe-fx<"
" index_7"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_4"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                     \"nested `protect' not allowed\""
" orig-s_61"
" spec_0))"
"(void))"
"(values))))"
"(let-values(((ok?_60"
" protect25_0"
" p-spec26_0)"
"(let-values(((s_85)"
" disarmed-spec_0))"
"(let-values(((orig-s_40)"
" s_85))"
"(let-values(((protect25_1"
" p-spec26_1)"
"(let-values(((s_31)"
"(if(syntax?$1"
" s_85)"
"(syntax-e$1"
" s_85)"
" s_85)))"
"(if(pair?"
" s_31)"
"(let-values(((protect27_0)"
"(let-values(((s_707)"
"(car"
" s_31)))"
" s_707))"
"((p-spec28_0)"
"(let-values(((s_708)"
"(cdr"
" s_31)))"
"(let-values(((s_393)"
"(if(syntax?$1"
" s_708)"
"(syntax-e$1"
" s_708)"
" s_708)))"
"(let-values(((flat-s_45)"
"(to-syntax-list.1"
" s_393)))"
"(if(not"
" flat-s_45)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_40))"
"(let-values()"
" flat-s_45)))))))"
"(values"
" protect27_0"
" p-spec28_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_40)))))"
"(values"
" #t"
" protect25_1"
" p-spec26_1))))))"
"(let-values(((track-stxes_8"
" exp-specs_8)"
"(loop_115"
" p-spec26_0"
" at-phase_13"
" #t"
" layer_6)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_8"
"(let-values(((spec29_0)"
" spec_0)"
"((temp30_7)"
"(list*"
" protect25_0"
" exp-specs_8)))"
"(rebuild5.1"
" #f"
" #f"
" spec29_0"
" temp30_7))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_61"
" rename31_0"
" id:from32_0"
" id:to33_0)"
"(let-values(((s_476)"
" disarmed-spec_0))"
"(let-values(((orig-s_64)"
" s_476))"
"(let-values(((rename31_1"
" id:from32_1"
" id:to33_1)"
"(let-values(((s_317)"
"(if(syntax?$1"
" s_476)"
"(syntax-e$1"
" s_476)"
" s_476)))"
"(if(pair?"
" s_317)"
"(let-values(((rename34_0)"
"(let-values(((s_159)"
"(car"
" s_317)))"
" s_159))"
"((id:from35_0"
" id:to36_0)"
"(let-values(((s_319)"
"(cdr"
" s_317)))"
"(let-values(((s_492)"
"(if(syntax?$1"
" s_319)"
"(syntax-e$1"
" s_319)"
" s_319)))"
"(if(pair?"
" s_492)"
"(let-values(((id:from37_0)"
"(let-values(((s_56)"
"(car"
" s_492)))"
"(if(let-values(((or-part_60)"
"(if(syntax?$1"
" s_56)"
"(symbol?"
"(syntax-e$1"
" s_56))"
" #f)))"
"(if or-part_60"
" or-part_60"
"(symbol?"
" s_56)))"
" s_56"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_64"
" s_56))))"
"((id:to38_0)"
"(let-values(((s_389)"
"(cdr"
" s_492)))"
"(let-values(((s_709)"
"(if(syntax?$1"
" s_389)"
"(syntax-e$1"
" s_389)"
" s_389)))"
"(if(pair?"
" s_709)"
"(let-values(((id:to39_0)"
"(let-values(((s_390)"
"(car"
" s_709)))"
"(if(let-values(((or-part_104)"
"(if(syntax?$1"
" s_390)"
"(symbol?"
"(syntax-e$1"
" s_390))"
" #f)))"
"(if or-part_104"
" or-part_104"
"(symbol?"
" s_390)))"
" s_390"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_64"
" s_390))))"
"(()"
"(let-values(((s_391)"
"(cdr"
" s_709)))"
"(let-values(((s_493)"
"(if(syntax?$1"
" s_391)"
"(syntax-e$1"
" s_391)"
" s_391)))"
"(if(null?"
" s_493)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_64))))))"
"(values"
" id:to39_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_64))))))"
"(values"
" id:from37_0"
" id:to38_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_64))))))"
"(values"
" rename34_0"
" id:from35_0"
" id:to36_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_64)))))"
"(values"
" #t"
" rename31_1"
" id:from32_1"
" id:to33_1))))))"
"(begin"
"(parse-identifier!"
" id:from32_0"
" orig-s_61"
"(syntax-e$1"
" id:to33_0)"
" at-phase_13"
" ns_124"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))))))))"
"(if(unsafe-fx<"
" index_7"
" 9)"
"(if(unsafe-fx<"
" index_7"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_62"
" struct40_0"
" id:struct41_0"
" id:field42_0)"
"(let-values(((s_36)"
" disarmed-spec_0))"
"(let-values(((orig-s_65)"
" s_36))"
"(let-values(((struct40_1"
" id:struct41_1"
" id:field42_1)"
"(let-values(((s_710)"
"(if(syntax?$1"
" s_36)"
"(syntax-e$1"
" s_36)"
" s_36)))"
"(if(pair?"
" s_710)"
"(let-values(((struct43_0)"
"(let-values(((s_200)"
"(car"
" s_710)))"
" s_200))"
"((id:struct44_0"
" id:field45_0)"
"(let-values(((s_37)"
"(cdr"
" s_710)))"
"(let-values(((s_86)"
"(if(syntax?$1"
" s_37)"
"(syntax-e$1"
" s_37)"
" s_37)))"
"(if(pair?"
" s_86)"
"(let-values(((id:struct46_0)"
"(let-values(((s_711)"
"(car"
" s_86)))"
"(if(let-values(((or-part_258)"
"(if(syntax?$1"
" s_711)"
"(symbol?"
"(syntax-e$1"
" s_711))"
" #f)))"
"(if or-part_258"
" or-part_258"
"(symbol?"
" s_711)))"
" s_711"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_65"
" s_711))))"
"((id:field47_0)"
"(let-values(((s_321)"
"(cdr"
" s_86)))"
"(let-values(((s_394)"
"(if(syntax?$1"
" s_321)"
"(syntax-e$1"
" s_321)"
" s_321)))"
"(if(pair?"
" s_394)"
"(let-values(((id:field48_0)"
"(let-values(((s_64)"
"(car"
" s_394)))"
"(let-values(((s_322)"
"(if(syntax?$1"
" s_64)"
"(syntax-e$1"
" s_64)"
" s_64)))"
"(let-values(((flat-s_46)"
"(to-syntax-list.1"
" s_322)))"
"(if(not"
" flat-s_46)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_65))"
"(let-values()"
"(let-values(((id:field_0)"
"(let-values(((lst_100)"
" flat-s_46))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_100)))"
"((letrec-values(((for-loop_116)"
"(lambda(id:field_1"
" lst_401)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_401)"
"(let-values(((s_66)"
"(unsafe-car"
" lst_401))"
"((rest_234)"
"(unsafe-cdr"
" lst_401)))"
"(let-values(((id:field_2)"
"(let-values(((id:field_3)"
" id:field_1))"
"(let-values(((id:field_4)"
"(let-values()"
"(let-values(((id:field49_0)"
"(let-values()"
"(if(let-values(((or-part_385)"
"(if(syntax?$1"
" s_66)"
"(symbol?"
"(syntax-e$1"
" s_66))"
" #f)))"
"(if or-part_385"
" or-part_385"
"(symbol?"
" s_66)))"
" s_66"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_65"
" s_66)))))"
"(cons"
" id:field49_0"
" id:field_3)))))"
"(values"
" id:field_4)))))"
"(if(not"
" #f)"
"(for-loop_116"
" id:field_2"
" rest_234)"
" id:field_2)))"
" id:field_1)))))"
" for-loop_116)"
" null"
" lst_100)))))"
"(reverse$1"
" id:field_0))))))))"
"(()"
"(let-values(((s_204)"
"(cdr"
" s_394)))"
"(let-values(((s_406)"
"(if(syntax?$1"
" s_204)"
"(syntax-e$1"
" s_204)"
" s_204)))"
"(if(null?"
" s_406)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_65))))))"
"(values"
" id:field48_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_65))))))"
"(values"
" id:struct46_0"
" id:field47_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_65))))))"
"(values"
" struct43_0"
" id:struct44_0"
" id:field45_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_65)))))"
"(values"
" #t"
" struct40_1"
" id:struct41_1"
" id:field42_1))))))"
"(begin"
"(parse-struct!"
" id:struct41_0"
" orig-s_61"
" id:field42_0"
" at-phase_13"
" ns_124"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))))"
"(if(unsafe-fx<"
" index_7"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_63"
" all-from50_0"
" mod-path51_0)"
"(let-values(((s_409)"
" disarmed-spec_0))"
"(let-values(((orig-s_66)"
" s_409))"
"(let-values(((all-from50_1"
" mod-path51_1)"
"(let-values(((s_712)"
"(if(syntax?$1"
" s_409)"
"(syntax-e$1"
" s_409)"
" s_409)))"
"(if(pair?"
" s_712)"
"(let-values(((all-from52_0)"
"(let-values(((s_417)"
"(car"
" s_712)))"
" s_417))"
"((mod-path53_0)"
"(let-values(((s_207)"
"(cdr"
" s_712)))"
"(let-values(((s_208)"
"(if(syntax?$1"
" s_207)"
"(syntax-e$1"
" s_207)"
" s_207)))"
"(if(pair?"
" s_208)"
"(let-values(((mod-path54_0)"
"(let-values(((s_93)"
"(car"
" s_208)))"
" s_93))"
"(()"
"(let-values(((s_713)"
"(cdr"
" s_208)))"
"(let-values(((s_323)"
"(if(syntax?$1"
" s_713)"
"(syntax-e$1"
" s_713)"
" s_713)))"
"(if(null?"
" s_323)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_66))))))"
"(values"
" mod-path54_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_66))))))"
"(values"
" all-from52_0"
" mod-path53_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_66)))))"
"(values"
" #t"
" all-from50_1"
" mod-path51_1))))))"
"(begin"
"(parse-all-from"
" mod-path51_0"
" orig-s_61"
" self_28"
" null"
" at-phase_13"
" ns_124"
" rp_1"
" protected?_4"
" ctx_102)"
"(values"
" null"
"(list"
" spec_0))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_64"
" all-from-except55_0"
" mod-path56_0"
" id57_0)"
"(let-values(((s_210)"
" disarmed-spec_0))"
"(let-values(((orig-s_67)"
" s_210))"
"(let-values(((all-from-except55_1"
" mod-path56_1"
" id57_1)"
"(let-values(((s_98)"
"(if(syntax?$1"
" s_210)"
"(syntax-e$1"
" s_210)"
" s_210)))"
"(if(pair?"
" s_98)"
"(let-values(((all-from-except58_0)"
"(let-values(((s_714)"
"(car"
" s_98)))"
" s_714))"
"((mod-path59_0"
" id60_0)"
"(let-values(((s_102)"
"(cdr"
" s_98)))"
"(let-values(((s_154)"
"(if(syntax?$1"
" s_102)"
"(syntax-e$1"
" s_102)"
" s_102)))"
"(if(pair?"
" s_154)"
"(let-values(((mod-path61_0)"
"(let-values(((s_482)"
"(car"
" s_154)))"
" s_482))"
"((id62_0)"
"(let-values(((s_483)"
"(cdr"
" s_154)))"
"(let-values(((s_715)"
"(if(syntax?$1"
" s_483)"
"(syntax-e$1"
" s_483)"
" s_483)))"
"(let-values(((flat-s_47)"
"(to-syntax-list.1"
" s_715)))"
"(if(not"
" flat-s_47)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_67))"
"(let-values()"
"(let-values(((id_127)"
"(let-values(((lst_402)"
" flat-s_47))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_402)))"
"((letrec-values(((for-loop_305)"
"(lambda(id_128"
" lst_403)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_403)"
"(let-values(((s_326)"
"(unsafe-car"
" lst_403))"
"((rest_235)"
"(unsafe-cdr"
" lst_403)))"
"(let-values(((id_109)"
"(let-values(((id_129)"
" id_128))"
"(let-values(((id_130)"
"(let-values()"
"(let-values(((id63_0)"
"(let-values()"
"(if(let-values(((or-part_386)"
"(if(syntax?$1"
" s_326)"
"(symbol?"
"(syntax-e$1"
" s_326))"
" #f)))"
"(if or-part_386"
" or-part_386"
"(symbol?"
" s_326)))"
" s_326"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_67"
" s_326)))))"
"(cons"
" id63_0"
" id_129)))))"
"(values"
" id_130)))))"
"(if(not"
" #f)"
"(for-loop_305"
" id_109"
" rest_235)"
" id_109)))"
" id_128)))))"
" for-loop_305)"
" null"
" lst_402)))))"
"(reverse$1"
" id_127)))))))))"
"(values"
" mod-path61_0"
" id62_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_67))))))"
"(values"
" all-from-except58_0"
" mod-path59_0"
" id60_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_67)))))"
"(values"
" #t"
" all-from-except55_1"
" mod-path56_1"
" id57_1))))))"
"(begin"
"(parse-all-from"
" mod-path56_0"
" orig-s_61"
" self_28"
" id57_0"
" at-phase_13"
" ns_124"
" rp_1"
" protected?_4"
" ctx_102)"
"(values"
" null"
"(list"
" spec_0))))))))"
"(if(unsafe-fx<"
" index_7"
" 11)"
"(if(unsafe-fx<"
" index_7"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_65"
" all-defined64_0)"
"(let-values(((s_214)"
" disarmed-spec_0))"
"(let-values(((orig-s_68)"
" s_214))"
"(let-values(((all-defined64_1)"
"(let-values(((s_395)"
"(if(syntax?$1"
" s_214)"
"(syntax-e$1"
" s_214)"
" s_214)))"
"(if(pair?"
" s_395)"
"(let-values(((all-defined65_0)"
"(let-values(((s_716)"
"(car"
" s_395)))"
" s_716))"
"(()"
"(let-values(((s_494)"
"(cdr"
" s_395)))"
"(let-values(((s_111)"
"(if(syntax?$1"
" s_494)"
"(syntax-e$1"
" s_494)"
" s_494)))"
"(if(null?"
" s_111)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_68))))))"
"(values"
" all-defined65_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_68)))))"
"(values"
" #t"
" all-defined64_1))))))"
"(begin"
"(parse-all-from-module"
" self_28"
" spec_0"
" orig-s_61"
" null"
" #f"
" at-phase_13"
" ns_124"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_66"
" all-defined-except66_0"
" id67_0)"
"(let-values(((s_717)"
" disarmed-spec_0))"
"(let-values(((orig-s_69)"
" s_717))"
"(let-values(((all-defined-except66_1"
" id67_1)"
"(let-values(((s_217)"
"(if(syntax?$1"
" s_717)"
"(syntax-e$1"
" s_717)"
" s_717)))"
"(if(pair?"
" s_217)"
"(let-values(((all-defined-except68_0)"
"(let-values(((s_330)"
"(car"
" s_217)))"
" s_330))"
"((id69_0)"
"(let-values(((s_218)"
"(cdr"
" s_217)))"
"(let-values(((s_219)"
"(if(syntax?$1"
" s_218)"
"(syntax-e$1"
" s_218)"
" s_218)))"
"(let-values(((flat-s_48)"
"(to-syntax-list.1"
" s_219)))"
"(if(not"
" flat-s_48)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_69))"
"(let-values()"
"(let-values(((id_131)"
"(let-values(((lst_404)"
" flat-s_48))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_404)))"
"((letrec-values(((for-loop_306)"
"(lambda(id_132"
" lst_405)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_405)"
"(let-values(((s_498)"
"(unsafe-car"
" lst_405))"
"((rest_236)"
"(unsafe-cdr"
" lst_405)))"
"(let-values(((id_133)"
"(let-values(((id_134)"
" id_132))"
"(let-values(((id_30)"
"(let-values()"
"(let-values(((id70_0)"
"(let-values()"
"(if(let-values(((or-part_387)"
"(if(syntax?$1"
" s_498)"
"(symbol?"
"(syntax-e$1"
" s_498))"
" #f)))"
"(if or-part_387"
" or-part_387"
"(symbol?"
" s_498)))"
" s_498"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_69"
" s_498)))))"
"(cons"
" id70_0"
" id_134)))))"
"(values"
" id_30)))))"
"(if(not"
" #f)"
"(for-loop_306"
" id_133"
" rest_236)"
" id_133)))"
" id_132)))))"
" for-loop_306)"
" null"
" lst_404)))))"
"(reverse$1"
" id_131)))))))))"
"(values"
" all-defined-except68_0"
" id69_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_69)))))"
"(values"
" #t"
" all-defined-except66_1"
" id67_1))))))"
"(begin"
"(parse-all-from-module"
" self_28"
" spec_0"
" orig-s_61"
" id67_0"
" #f"
" at-phase_13"
" ns_124"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0)))))))"
"(if(unsafe-fx<"
" index_7"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_67"
" prefix-all-defined71_0"
" id:prefix72_0)"
"(let-values(((s_504)"
" disarmed-spec_0))"
"(let-values(((orig-s_70)"
" s_504))"
"(let-values(((prefix-all-defined71_1"
" id:prefix72_1)"
"(let-values(((s_718)"
"(if(syntax?$1"
" s_504)"
"(syntax-e$1"
" s_504)"
" s_504)))"
"(if(pair?"
" s_718)"
"(let-values(((prefix-all-defined73_0)"
"(let-values(((s_507)"
"(car"
" s_718)))"
" s_507))"
"((id:prefix74_0)"
"(let-values(((s_719)"
"(cdr"
" s_718)))"
"(let-values(((s_720)"
"(if(syntax?$1"
" s_719)"
"(syntax-e$1"
" s_719)"
" s_719)))"
"(if(pair?"
" s_720)"
"(let-values(((id:prefix75_0)"
"(let-values(((s_721)"
"(car"
" s_720)))"
"(if(let-values(((or-part_388)"
"(if(syntax?$1"
" s_721)"
"(symbol?"
"(syntax-e$1"
" s_721))"
" #f)))"
"(if or-part_388"
" or-part_388"
"(symbol?"
" s_721)))"
" s_721"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_70"
" s_721))))"
"(()"
"(let-values(((s_722)"
"(cdr"
" s_720)))"
"(let-values(((s_462)"
"(if(syntax?$1"
" s_722)"
"(syntax-e$1"
" s_722)"
" s_722)))"
"(if(null?"
" s_462)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_70))))))"
"(values"
" id:prefix75_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_70))))))"
"(values"
" prefix-all-defined73_0"
" id:prefix74_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_70)))))"
"(values"
" #t"
" prefix-all-defined71_1"
" id:prefix72_1))))))"
"(begin"
"(parse-all-from-module"
" self_28"
" spec_0"
" orig-s_61"
" null"
"(syntax-e$1"
" id:prefix72_0)"
" at-phase_13"
" ns_124"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))))"
"(if(unsafe-fx<"
" index_7"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_68"
" prefix-all-defined-except76_0"
" id:prefix77_0"
" id78_0)"
"(let-values(((s_235)"
" disarmed-spec_0))"
"(let-values(((orig-s_71)"
" s_235))"
"(let-values(((prefix-all-defined-except76_1"
" id:prefix77_1"
" id78_1)"
"(let-values(((s_339)"
"(if(syntax?$1"
" s_235)"
"(syntax-e$1"
" s_235)"
" s_235)))"
"(if(pair?"
" s_339)"
"(let-values(((prefix-all-defined-except79_0)"
"(let-values(((s_343)"
"(car"
" s_339)))"
" s_343))"
"((id:prefix80_0"
" id81_0)"
"(let-values(((s_344)"
"(cdr"
" s_339)))"
"(let-values(((s_345)"
"(if(syntax?$1"
" s_344)"
"(syntax-e$1"
" s_344)"
" s_344)))"
"(if(pair?"
" s_345)"
"(let-values(((id:prefix82_0)"
"(let-values(((s_509)"
"(car"
" s_345)))"
"(if(let-values(((or-part_389)"
"(if(syntax?$1"
" s_509)"
"(symbol?"
"(syntax-e$1"
" s_509))"
" #f)))"
"(if or-part_389"
" or-part_389"
"(symbol?"
" s_509)))"
" s_509"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_71"
" s_509))))"
"((id83_0)"
"(let-values(((s_510)"
"(cdr"
" s_345)))"
"(let-values(((s_511)"
"(if(syntax?$1"
" s_510)"
"(syntax-e$1"
" s_510)"
" s_510)))"
"(let-values(((flat-s_49)"
"(to-syntax-list.1"
" s_511)))"
"(if(not"
" flat-s_49)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_71))"
"(let-values()"
"(let-values(((id_135)"
"(let-values(((lst_4)"
" flat-s_49))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_4)))"
"((letrec-values(((for-loop_307)"
"(lambda(id_136"
" lst_406)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_406)"
"(let-values(((s_723)"
"(unsafe-car"
" lst_406))"
"((rest_237)"
"(unsafe-cdr"
" lst_406)))"
"(let-values(((id_137)"
"(let-values(((id_138)"
" id_136))"
"(let-values(((id_139)"
"(let-values()"
"(let-values(((id84_2)"
"(let-values()"
"(if(let-values(((or-part_390)"
"(if(syntax?$1"
" s_723)"
"(symbol?"
"(syntax-e$1"
" s_723))"
" #f)))"
"(if or-part_390"
" or-part_390"
"(symbol?"
" s_723)))"
" s_723"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_71"
" s_723)))))"
"(cons"
" id84_2"
" id_138)))))"
"(values"
" id_139)))))"
"(if(not"
" #f)"
"(for-loop_307"
" id_137"
" rest_237)"
" id_137)))"
" id_136)))))"
" for-loop_307)"
" null"
" lst_4)))))"
"(reverse$1"
" id_135)))))))))"
"(values"
" id:prefix82_0"
" id83_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_71))))))"
"(values"
" prefix-all-defined-except79_0"
" id:prefix80_0"
" id81_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_71)))))"
"(values"
" #t"
" prefix-all-defined-except76_1"
" id:prefix77_1"
" id78_1))))))"
"(begin"
"(parse-all-from-module"
" self_28"
" spec_0"
" orig-s_61"
" id78_0"
"(syntax-e$1"
" id:prefix77_0)"
" at-phase_13"
" ns_124"
" rp_1"
" protected?_4)"
"(values"
" null"
"(list"
" spec_0))))))"
"(let-values()"
"(let-values(((ok?_69"
" expand85_0"
" id86_0"
" datum87_0)"
"(let-values(((s_724)"
" disarmed-spec_0))"
"(let-values(((orig-s_72)"
" s_724))"
"(let-values(((expand85_1"
" id86_1"
" datum87_1)"
"(let-values(((s_249)"
"(if(syntax?$1"
" s_724)"
"(syntax-e$1"
" s_724)"
" s_724)))"
"(if(pair?"
" s_249)"
"(let-values(((expand88_0)"
"(let-values(((s_250)"
"(car"
" s_249)))"
" s_250))"
"((id89_1"
" datum90_0)"
"(let-values(((s_463)"
"(cdr"
" s_249)))"
"(let-values(((s_251)"
"(if(syntax?$1"
" s_463)"
"(syntax-e$1"
" s_463)"
" s_463)))"
"(if(pair?"
" s_251)"
"(let-values(((id91_1"
" datum92_0)"
"(let-values(((s_725)"
"(car"
" s_251)))"
"(let-values(((s_253)"
"(if(syntax?$1"
" s_725)"
"(syntax-e$1"
" s_725)"
" s_725)))"
"(if(pair?"
" s_253)"
"(let-values(((id93_0)"
"(let-values(((s_726)"
"(car"
" s_253)))"
"(if(let-values(((or-part_391)"
"(if(syntax?$1"
" s_726)"
"(symbol?"
"(syntax-e$1"
" s_726))"
" #f)))"
"(if or-part_391"
" or-part_391"
"(symbol?"
" s_726)))"
" s_726"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_72"
" s_726))))"
"((datum94_0)"
"(let-values(((s_364)"
"(cdr"
" s_253)))"
" s_364)))"
"(values"
" id93_0"
" datum94_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_72)))))"
"(()"
"(let-values(((s_365)"
"(cdr"
" s_251)))"
"(let-values(((s_366)"
"(if(syntax?$1"
" s_365)"
"(syntax-e$1"
" s_365)"
" s_365)))"
"(if(null?"
" s_366)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_72))))))"
"(values"
" id91_1"
" datum92_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_72))))))"
"(values"
" expand88_0"
" id89_1"
" datum90_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_72)))))"
"(values"
" #t"
" expand85_1"
" id86_1"
" datum87_1))))))"
"(let-values(((ok?_70"
" expand95_0"
" form96_0)"
"(let-values(((s_367)"
" disarmed-spec_0))"
"(let-values(((orig-s_73)"
" s_367))"
"(let-values(((expand95_1"
" form96_1)"
"(let-values(((s_370)"
"(if(syntax?$1"
" s_367)"
"(syntax-e$1"
" s_367)"
" s_367)))"
"(if(pair?"
" s_370)"
"(let-values(((expand97_0)"
"(let-values(((s_373)"
"(car"
" s_370)))"
" s_373))"
"((form98_0)"
"(let-values(((s_374)"
"(cdr"
" s_370)))"
"(let-values(((s_375)"
"(if(syntax?$1"
" s_374)"
"(syntax-e$1"
" s_374)"
" s_374)))"
"(if(pair?"
" s_375)"
"(let-values(((form99_0)"
"(let-values(((s_727)"
"(car"
" s_375)))"
" s_727))"
"(()"
"(let-values(((s_728)"
"(cdr"
" s_375)))"
"(let-values(((s_729)"
"(if(syntax?$1"
" s_728)"
"(syntax-e$1"
" s_728)"
" s_728)))"
"(if(null?"
" s_729)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_73))))))"
"(values"
" form99_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_73))))))"
"(values"
" expand97_0"
" form98_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_73)))))"
"(values"
" #t"
" expand95_1"
" form96_1))))))"
"(let-values(((exp-spec_0)"
"(let-values(((temp104_4)"
" form96_0)"
"((temp105_4)"
"(let-values(((v_254)"
" ctx_102))"
"(let-values(((the-struct_98)"
" v_254))"
"(if(expand-context/outer?"
" the-struct_98)"
"(let-values(((def-ctx-scopes106_0)"
"(box"
" null))"
"((inner107_0)"
"(let-values(((the-struct_99)"
"(root-expand-context/outer-inner"
" v_254)))"
"(if(expand-context/inner?"
" the-struct_99)"
"(let-values(((stops108_0)"
"(free-id-set"
" at-phase_13"
"(list"
"(core-id"
" 'begin"
" at-phase_13)))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_99)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_99)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_99)"
"(root-expand-context/inner-defined-syms"
" the-struct_99)"
"(root-expand-context/inner-counter"
" the-struct_99)"
"(root-expand-context/inner-lift-key"
" the-struct_99)"
"(expand-context/inner-to-parsed?"
" the-struct_99)"
"(expand-context/inner-phase"
" the-struct_99)"
"(expand-context/inner-namespace"
" the-struct_99)"
"(expand-context/inner-just-once?"
" the-struct_99)"
"(expand-context/inner-module-begin-k"
" the-struct_99)"
"(expand-context/inner-allow-unbound?"
" the-struct_99)"
"(expand-context/inner-in-local-expand?"
" the-struct_99)"
" stops108_0"
"(expand-context/inner-declared-submodule-names"
" the-struct_99)"
"(expand-context/inner-lifts"
" the-struct_99)"
"(expand-context/inner-lift-envs"
" the-struct_99)"
"(expand-context/inner-module-lifts"
" the-struct_99)"
"(expand-context/inner-require-lifts"
" the-struct_99)"
"(expand-context/inner-to-module-lifts"
" the-struct_99)"
"(expand-context/inner-requires+provides"
" the-struct_99)"
"(expand-context/inner-observer"
" the-struct_99)"
"(expand-context/inner-for-serializable?"
" the-struct_99)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_99)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                       \"expand-context/inner?\""
" the-struct_99)))))"
"(expand-context/outer1.1"
" inner107_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_98)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_98)"
"(root-expand-context/outer-frame-id"
" the-struct_98)"
"(expand-context/outer-context"
" the-struct_98)"
"(expand-context/outer-env"
" the-struct_98)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_98)"
"(expand-context/outer-scopes"
" the-struct_98)"
" def-ctx-scopes106_0"
"(expand-context/outer-binding-layer"
" the-struct_98)"
"(expand-context/outer-reference-records"
" the-struct_98)"
"(expand-context/outer-only-immediate?"
" the-struct_98)"
"(expand-context/outer-need-eventually-defined"
" the-struct_98)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_98)"
"(expand-context/outer-name"
" the-struct_98)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                     \"expand-context/outer?\""
" the-struct_98))))))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" temp104_4"
" temp105_4))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_0))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_0)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_0"
" at-phase_13))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                         \"expansion was not a `begin' sequence\""
" orig-s_61"
" spec_0)))"
"(values))))"
"(let-values(((ok?_71"
" begin100_0"
" spec101_0)"
"(let-values(((s_379)"
" exp-spec_0))"
"(let-values(((orig-s_74)"
" s_379))"
"(let-values(((begin100_1"
" spec101_1)"
"(let-values(((s_380)"
"(if(syntax?$1"
" s_379)"
"(syntax-e$1"
" s_379)"
" s_379)))"
"(if(pair?"
" s_380)"
"(let-values(((begin102_0)"
"(let-values(((s_730)"
"(car"
" s_380)))"
" s_730))"
"((spec103_0)"
"(let-values(((s_464)"
"(cdr"
" s_380)))"
"(let-values(((s_382)"
"(if(syntax?$1"
" s_464)"
"(syntax-e$1"
" s_464)"
" s_464)))"
"(let-values(((flat-s_50)"
"(to-syntax-list.1"
" s_382)))"
"(if(not"
" flat-s_50)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_74))"
"(let-values()"
" flat-s_50)))))))"
"(values"
" begin102_0"
" spec103_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_74)))))"
"(values"
" #t"
" begin100_1"
" spec101_1))))))"
"(let-values(((track-stxes_9"
" exp-specs_9)"
"(loop_115"
" spec101_0"
" at-phase_13"
" protected?_4"
" layer_6)))"
"(values"
"(list*"
" spec_0"
" exp-spec_0"
" track-stxes_9)"
" exp-specs_9)))))))))))))))))))))"
"(values"
"(cons"
" track-stxes1_0"
" track-stxes_3)"
"(cons"
" exp-specs2_0"
" exp-specs_3))))))"
"(values"
" track-stxes_4"
" exp-specs_4)))))"
"(if(not #f)"
"(for-loop_91"
" track-stxes_2"
" exp-specs_2"
" rest_233)"
"(values"
" track-stxes_2"
" exp-specs_2))))"
"(values"
" track-stxes_1"
" exp-specs_1))))))"
" for-loop_91)"
" null"
" null"
" lst_73)))))"
"(values(reverse$1 track-stxes_0)(reverse$1 exp-specs_0)))))"
"(values(apply append track-stxess_0)(apply append exp-specss_0)))))))"
" loop_115)"
" specs_0"
" phase_41"
" #f"
" 'raw)))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_1 orig-s_75 sym_101 at-phase_14 ns_125 rp_2 protected?_5)"
"(begin"
"(let-values(((b_91)(resolve+shift/extra-inspector spec_1 at-phase_14 ns_125)))"
"(let-values((()"
"(begin"
"(if b_91"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             \"provided identifier is not defined or required\""
" orig-s_75"
" spec_1)))"
"(values))))"
"(let-values(((as-transformer?_6)(binding-for-transformer? b_91 spec_1 at-phase_14 ns_125)))"
"(let-values(((immed-b_0)"
"(let-values(((temp120_4) #t))"
"(resolve+shift30.1 #f #f #f #f #f #f temp120_4 #t #f #f spec_1 at-phase_14))))"
"(let-values(((protected?116_0) protected?_5)((as-transformer?117_0) as-transformer?_6))"
"(add-provide!107.1"
" protected?116_0"
" as-transformer?117_0"
" rp_2"
" sym_101"
" at-phase_14"
" b_91"
" immed-b_0"
" spec_1"
" orig-s_75)))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_0 orig-s_76 fields_0 at-phase_15 ns_126 rp_3 protected?_6)"
"(begin"
"(let-values(((mk_0)"
"(lambda(fmt_1)"
"(begin"
" 'mk"
"(let-values(((sym_102)(string->symbol(format fmt_1(syntax-e$1 id:struct_0)))))"
"(datum->syntax$1 id:struct_0 sym_102 id:struct_0))))))"
"(let-values(((mk2_0)"
"(lambda(fmt_2 field-id_0)"
"(begin"
" 'mk2"
"(let-values(((sym_103)"
"(string->symbol"
"(format fmt_2(syntax-e$1 id:struct_0)(syntax-e$1 field-id_0)))))"
"(datum->syntax$1 id:struct_0 sym_103 id:struct_0))))))"
"(begin"
"            (let-values (((lst_407) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\")))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_407)))"
"((letrec-values(((for-loop_308)"
"(lambda(lst_408)"
"(begin"
" 'for-loop"
"(if(pair? lst_408)"
"(let-values(((fmt_3)(unsafe-car lst_408))((rest_238)(unsafe-cdr lst_408)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_140)(mk_0 fmt_3)))"
"(parse-identifier!"
" id_140"
" orig-s_76"
"(syntax-e$1 id_140)"
" at-phase_15"
" ns_126"
" rp_3"
" protected?_6)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_308 rest_238)(values))))"
"(values))))))"
" for-loop_308)"
" lst_407)))"
"(void)"
"(let-values(((lst_409) fields_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_409)))"
"((letrec-values(((for-loop_309)"
"(lambda(lst_410)"
"(begin"
" 'for-loop"
"(if(pair? lst_410)"
"(let-values(((field_0)(unsafe-car lst_410))((rest_239)(unsafe-cdr lst_410)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_0)"
"                                                                                            (mk2_0 \"~a-~a\" field_0)))"
"(let-values(((set-id_0)"
"(mk2_0"
"                                                                                               \"set-~a-~a!\""
" field_0)))"
"(begin"
"(parse-identifier!"
" get-id_0"
" orig-s_76"
"(syntax-e$1 get-id_0)"
" at-phase_15"
" ns_126"
" rp_3"
" protected?_6)"
"(parse-identifier!"
" set-id_0"
" orig-s_76"
"(syntax-e$1 set-id_0)"
" at-phase_15"
" ns_126"
" rp_3"
" protected?_6)))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_309 rest_239)(values))))"
"(values))))))"
" for-loop_309)"
" lst_409)))"
"(void)))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_0 orig-s_77 self_29 except-ids_0 at-phase_16 ns_127 rp_4 protected?_7 ctx_103)"
"(begin"
"(let-values(((mod-path_33)(syntax->datum$1 mod-path-stx_0)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_33)"
"(void)"
"(let-values()"
"                            (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_77 mod-path-stx_0)))"
"(values))))"
"(let-values(((mpi_51)(module-path->mpi/context mod-path_33 ctx_103)))"
"(parse-all-from-module mpi_51 #f orig-s_77 except-ids_0 #f at-phase_16 ns_127 rp_4 protected?_7)))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_52 matching-stx_0 orig-s_78 except-ids_1 prefix-sym_0 at-phase_17 ns_26 rp_5 protected?_8)"
"(begin"
"(let-values(((requireds_2)(extract-module-requires rp_5 mpi_52 at-phase_17)))"
"(let-values(((phase-desc_0)"
"(lambda()"
"(begin"
" 'phase-desc"
"(if(zero-phase? at-phase_17)"
"                            (let-values () \"\")"
"(if(label-phase? at-phase_17)"
"                              (let-values () \" for-label\")"
"                              (let-values () (format \" for phase ~a\" at-phase_17))))))))"
"(let-values((()"
"(begin"
"(if requireds_2"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                               (format \"cannot provide from a module without a matching require~a\" (phase-desc_0))"
" orig-s_78"
" matching-stx_0)))"
"(values))))"
"(let-values(((add-prefix_1)"
"(lambda(sym_104)"
"(begin"
" 'add-prefix"
"                              (if prefix-sym_0 (string->symbol (format \"~a~a\" prefix-sym_0 sym_104)) sym_104)))))"
"(let-values(((found_0)(make-hasheq)))"
"(begin"
"(let-values(((lst_411) requireds_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_411)))"
"((letrec-values(((for-loop_310)"
"(lambda(lst_283)"
"(begin"
" 'for-loop"
"(if(pair? lst_283)"
"(let-values(((i_191)(unsafe-car lst_283))"
"((rest_240)(unsafe-cdr lst_283)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_141)"
"(required-id i_191)))"
"(let-values(((phase_145)"
"(required-phase"
" i_191)))"
"(if(let-values(((or-part_392)"
"(if matching-stx_0"
"(not"
"(if(eqv?"
" phase_145"
" at-phase_17)"
"(free-identifier=?$1"
" id_141"
"(datum->syntax$1"
" matching-stx_0"
"(syntax-e$1"
" id_141))"
" phase_145"
" phase_145)"
" #f))"
" #f)))"
"(if or-part_392"
" or-part_392"
"(let-values(((lst_234)"
" except-ids_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_234)))"
"((letrec-values(((for-loop_311)"
"(lambda(result_119"
" lst_412)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_412)"
"(let-values(((except-id_0)"
"(unsafe-car"
" lst_412))"
"((rest_214)"
"(unsafe-cdr"
" lst_412)))"
"(let-values(((result_120)"
"(let-values()"
"(let-values(((result_121)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_141"
" except-id_0"
" phase_145"
" phase_145)"
"(hash-set!"
" found_0"
" except-id_0"
" #t)"
" #f)))))"
"(values"
" result_121)))))"
"(if(if(not"
"((lambda x_91"
" result_120)"
" except-id_0))"
"(not"
" #f)"
" #f)"
"(for-loop_311"
" result_120"
" rest_214)"
" result_120)))"
" result_119)))))"
" for-loop_311)"
" #f"
" lst_234)))))"
"(void)"
"(let-values()"
"(let-values(((b_92)"
"(resolve+shift/extra-inspector"
" id_141"
" phase_145"
" ns_26)))"
"(let-values(((immed-b_1)"
"(let-values(((temp132_2)"
" #t))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp132_2"
" #t"
" #f"
" #f"
" id_141"
" phase_145))))"
"(let-values(((temp122_4)"
"(add-prefix_1"
"(syntax-e$1"
" id_141)))"
"((phase123_0)"
" phase_145)"
"((b124_0)"
" b_92)"
"((immed-b125_0)"
" immed-b_1)"
"((id126_0)"
" id_141)"
"((orig-s127_0)"
" orig-s_78)"
"((protected?128_0)"
" protected?_8)"
"((temp129_3)"
"(required-as-transformer?"
" i_191)))"
"(add-provide!107.1"
" protected?128_0"
" temp129_3"
" rp_5"
" temp122_4"
" phase123_0"
" b124_0"
" immed-b125_0"
" id126_0"
" orig-s127_0)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_310 rest_240)(values))))"
"(values))))))"
" for-loop_310)"
" lst_411)))"
"(void)"
"(if(=(hash-count found_0)(length except-ids_1))"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_370) except-ids_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_370)))"
"((letrec-values(((for-loop_312)"
"(lambda(lst_372)"
"(begin"
" 'for-loop"
"(if(pair? lst_372)"
"(let-values(((except-id_1)(unsafe-car lst_372))"
"((rest_241)(unsafe-cdr lst_372)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_156)"
"(hash-ref"
" found_0"
" except-id_1"
" #f)))"
"(if or-part_156"
" or-part_156"
"(let-values(((lst_373)"
" requireds_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_373)))"
"((letrec-values(((for-loop_313)"
"(lambda(result_122"
" lst_141)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_141)"
"(let-values(((i_192)"
"(unsafe-car"
" lst_141))"
"((rest_217)"
"(unsafe-cdr"
" lst_141)))"
"(let-values(((result_123)"
"(let-values()"
"(let-values(((result_124)"
"(let-values()"
"(let-values()"
"(let-values(((id_142)"
"(required-id"
" i_192)))"
"(let-values(((phase_146)"
"(required-phase"
" i_192)))"
"(free-identifier=?$1"
" id_142"
" except-id_1"
" phase_146"
" phase_146)))))))"
"(values"
" result_124)))))"
"(if(if(not"
"((lambda x_92"
" result_123)"
" i_192))"
"(not"
" #f)"
" #f)"
"(for-loop_313"
" result_123"
" rest_217)"
" result_123)))"
" result_122)))))"
" for-loop_313)"
" #f"
" lst_373)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_0"
"                                                                                                  \"excluded identifier was not defined or required in the module~a\""
"                                                                                                  \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_0))"
" orig-s_78"
" except-id_1))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_312 rest_241)(values))))"
"(values))))))"
" for-loop_312)"
" lst_370)))"
"(void)))))))))))))"
"(define-values(check-cross-phase-persistent-form)(lambda(bodys_13)(begin(check-body bodys_13))))"
"(define-values"
"(check-body)"
"(lambda(bodys_14)"
"(begin"
"(begin"
"(let-values(((lst_71) bodys_14))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_71)))"
"((letrec-values(((for-loop_90)"
"(lambda(lst_413)"
"(begin"
" 'for-loop"
"(if(pair? lst_413)"
"(let-values(((body_21)(unsafe-car lst_413))((rest_242)(unsafe-cdr lst_413)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_47)"
"(if(expanded+parsed? body_21)"
"(expanded+parsed-parsed"
" body_21)"
" body_21)))"
"(if(parsed-define-values? p_47)"
"(let-values()"
"(check-expr"
"(parsed-define-values-rhs p_47)"
"(length"
"(parsed-define-values-syms p_47))"
" p_47))"
"(if(let-values(((or-part_27)"
"(parsed-#%declare?"
" p_47)))"
"(if or-part_27"
" or-part_27"
"(let-values(((or-part_10)"
"(parsed-module?"
" p_47)))"
"(if or-part_10"
" or-part_10"
"(syntax?$1 p_47)))))"
"(let-values()(void))"
"(let-values()(disallow p_47))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_90 rest_242)(values))))"
"(values))))))"
" for-loop_90)"
" lst_71)))"
"(void)))))"
"(define-values"
"(check-expr)"
"(lambda(e_86 num-results_0 enclosing_15)"
"(begin"
"(if(let-values(((or-part_215)(parsed-lambda? e_86)))(if or-part_215 or-part_215(parsed-case-lambda? e_86)))"
"(let-values()(check-count 1 num-results_0 enclosing_15))"
"(if(parsed-quote? e_86)"
"(let-values()"
"(begin(check-datum(parsed-quote-datum e_86) e_86)(check-count 1 num-results_0 enclosing_15)))"
"(if(parsed-app? e_86)"
"(let-values()"
"(let-values(((rands_1)(parsed-app-rands e_86)))"
"(begin"
"(let-values(((lst_260) rands_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_260)))"
"((letrec-values(((for-loop_202)"
"(lambda(lst_261)"
"(begin"
" 'for-loop"
"(if(pair? lst_261)"
"(let-values(((rand_0)(unsafe-car lst_261))"
"((rest_138)(unsafe-cdr lst_261)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr rand_0 1 e_86))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_202 rest_138)(values))))"
"(values))))))"
" for-loop_202)"
" lst_260)))"
"(void)"
"(let-values(((tmp_64)(cross-phase-primitive-name(parsed-app-rator e_86))))"
"(if(if(equal? tmp_64 'cons) #t(equal? tmp_64 'list))"
"(let-values()(check-count 1 num-results_0 enclosing_15))"
"(if(equal? tmp_64 'make-struct-type)"
"(let-values()(check-count 5 num-results_0 enclosing_15))"
"(if(equal? tmp_64 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_0 enclosing_15))"
"(if(equal? tmp_64 'gensym)"
"(let-values()"
"(if(let-values(((or-part_289)(= 0(length rands_1))))"
"(if or-part_289"
" or-part_289"
"(if(= 1(length rands_1))(quoted-string?(car rands_1)) #f)))"
"(void)"
"(let-values()(disallow e_86))))"
"(if(equal? tmp_64 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_1))(quoted-string?(car rands_1)) #f)"
"(void)"
"(let-values()(disallow e_86))))"
"(let-values()(disallow e_86)))))))))))"
"(void)))))))"
"(define-values"
"(check-count)"
"(lambda(is-num_0 expected-num_0 enclosing_16)"
"(begin(if(= is-num_0 expected-num_0)(void)(let-values()(disallow enclosing_16))))))"
"(define-values"
"(check-datum)"
"(lambda(d_38 e_73)"
"(begin"
"(if(let-values(((or-part_160)(number? d_38)))"
"(if or-part_160"
" or-part_160"
"(let-values(((or-part_164)(boolean? d_38)))"
"(if or-part_164"
" or-part_164"
"(let-values(((or-part_76)(symbol? d_38)))"
"(if or-part_76"
" or-part_76"
"(let-values(((or-part_77)(string? d_38)))(if or-part_77 or-part_77(bytes? d_38)))))))))"
"(let-values()(void))"
"(let-values()(disallow e_73))))))"
"(define-values"
"(quoted-string?)"
"(lambda(e_87)(begin(if(parsed-quote? e_87)(string?(parsed-quote-datum e_87)) #f))))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_143)"
"(begin"
"(if(parsed-id? id_143)"
"(let-values()"
"(let-values(((b_93)(parsed-id-binding id_143)))"
"(if(module-binding? b_93)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_93)))"
"(module-binding-sym b_93)"
" #f)"
" #f)))"
"(let-values() #f)))))"
"(define-values"
"(disallow)"
"(lambda(body_22)"
"(begin"
"(raise-syntax-error$1"
" 'module"
"       \"not allowed in a cross-phase persistent module\""
"(if(parsed? body_22)(datum->syntax$1 #f body_22(parsed-s body_22)) body_22)))))"
"(void"
"(add-core-form!*"
" 'module"
"(lambda(s_184 ctx_104)"
"(begin"
"(if(eq?(expand-context-context ctx_104) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_117)(expand-context-observer ctx_104)))"
"(if obs_117(let-values()(let-values()(call-expand-observe obs_117 'prim-module)))(void)))"
"             (raise-syntax-error$1 #f \"allowed only at the top level\" s_184))))"
"(let-values()"
"(let-values(((s223_0) s_184)((ctx224_0) ctx_104)((temp225_3) #f))"
"(expand-module18.1 #f #f #f #f #f #f #f #f #f #f #f #f #f #f s223_0 ctx224_0 temp225_3)))))))"
"(void"
"(add-core-form!*"
" 'module*"
"(lambda(s_307 ctx_105)"
"(begin"
"(let-values(((obs_118)(expand-context-observer ctx_105)))"
"(if obs_118(let-values()(let-values()(call-expand-observe obs_118 'prim-module)))(void)))"
"       (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_307)))))"
"(void"
"(add-core-form!*"
" '#%module-begin"
"(lambda(s_83 ctx_106)"
"(begin"
"(let-values(((obs_119)(expand-context-observer ctx_106)))"
"(if obs_119(let-values()(let-values()(call-expand-observe obs_119 'prim-module-begin)))(void)))"
"(if(eq?(expand-context-context ctx_106) 'module-begin)"
"(void)"
"         (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_83)))"
"(if(expand-context-module-begin-k ctx_106)"
"(void)"
"         (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_83)))"
"((expand-context-module-begin-k ctx_106)"
" s_83"
"(let-values(((v_35) ctx_106))"
"(let-values(((the-struct_100) v_35))"
"(if(expand-context/outer? the-struct_100)"
"(let-values(((inner226_0)"
"(let-values(((the-struct_101)(root-expand-context/outer-inner v_35)))"
"(if(expand-context/inner? the-struct_101)"
"(let-values(((module-begin-k227_0) #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes the-struct_101)"
"(root-expand-context/inner-top-level-bind-scope the-struct_101)"
"(root-expand-context/inner-all-scopes-stx the-struct_101)"
"(root-expand-context/inner-defined-syms the-struct_101)"
"(root-expand-context/inner-counter the-struct_101)"
"(root-expand-context/inner-lift-key the-struct_101)"
"(expand-context/inner-to-parsed? the-struct_101)"
"(expand-context/inner-phase the-struct_101)"
"(expand-context/inner-namespace the-struct_101)"
"(expand-context/inner-just-once? the-struct_101)"
" module-begin-k227_0"
"(expand-context/inner-allow-unbound? the-struct_101)"
"(expand-context/inner-in-local-expand? the-struct_101)"
"(expand-context/inner-stops the-struct_101)"
"(expand-context/inner-declared-submodule-names the-struct_101)"
"(expand-context/inner-lifts the-struct_101)"
"(expand-context/inner-lift-envs the-struct_101)"
"(expand-context/inner-module-lifts the-struct_101)"
"(expand-context/inner-require-lifts the-struct_101)"
"(expand-context/inner-to-module-lifts the-struct_101)"
"(expand-context/inner-requires+provides the-struct_101)"
"(expand-context/inner-observer the-struct_101)"
"(expand-context/inner-for-serializable? the-struct_101)"
"(expand-context/inner-should-not-encounter-macros? the-struct_101)))"
"                                (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_101)))))"
"(expand-context/outer1.1"
" inner226_0"
"(root-expand-context/outer-post-expansion-scope the-struct_100)"
"(root-expand-context/outer-use-site-scopes the-struct_100)"
"(root-expand-context/outer-frame-id the-struct_100)"
"(expand-context/outer-context the-struct_100)"
"(expand-context/outer-env the-struct_100)"
"(expand-context/outer-post-expansion-scope-action the-struct_100)"
"(expand-context/outer-scopes the-struct_100)"
"(expand-context/outer-def-ctx-scopes the-struct_100)"
"(expand-context/outer-binding-layer the-struct_100)"
"(expand-context/outer-reference-records the-struct_100)"
"(expand-context/outer-only-immediate? the-struct_100)"
"(expand-context/outer-need-eventually-defined the-struct_100)"
"(expand-context/outer-current-introduction-scopes the-struct_100)"
"(expand-context/outer-name the-struct_100)))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_100)))))))))"
"(void"
"(add-core-form!*"
" '#%declare"
"(lambda(s_412 ctx_107)"
"(begin"
"(let-values(((obs_120)(expand-context-observer ctx_107)))"
"(if obs_120(let-values()(let-values()(call-expand-observe obs_120 'prim-declare)))(void)))"
"       (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_412)))))"
"(define-values"
"(expand-module18.1)"
"(lambda(always-produce-compiled?1_0"
" always-produce-compiled?8_0"
" enclosing-all-scopes-stx3_0"
" enclosing-all-scopes-stx10_0"
" enclosing-is-cross-phase-persistent?4_0"
" enclosing-is-cross-phase-persistent?11_0"
" enclosing-requires+provides5_0"
" enclosing-requires+provides12_0"
" keep-enclosing-scope-at-phase2_0"
" keep-enclosing-scope-at-phase9_0"
" modules-being-compiled7_0"
" modules-being-compiled14_0"
" mpis-for-enclosing-reset6_0"
" mpis-for-enclosing-reset13_0"
" s15_0"
" init-ctx16_0"
" enclosing-self17_0)"
"(begin"
" 'expand-module18"
"(let-values(((s_16) s15_0))"
"(let-values(((init-ctx_0) init-ctx16_0))"
"(let-values(((enclosing-self_1) enclosing-self17_0))"
"(let-values(((always-produce-compiled?_0)(if always-produce-compiled?8_0 always-produce-compiled?1_0 #f)))"
"(let-values(((keep-enclosing-scope-at-phase_0)"
"(if keep-enclosing-scope-at-phase9_0 keep-enclosing-scope-at-phase2_0 #f)))"
"(let-values(((enclosing-all-scopes-stx_0)"
"(if enclosing-all-scopes-stx10_0 enclosing-all-scopes-stx3_0 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_0)"
"(if enclosing-is-cross-phase-persistent?11_0"
" enclosing-is-cross-phase-persistent?4_0"
" #f)))"
"(let-values(((enclosing-r+p_1)"
"(if enclosing-requires+provides12_0 enclosing-requires+provides5_0 #f)))"
"(let-values(((mpis-for-enclosing-reset_0)"
"(if mpis-for-enclosing-reset13_0 mpis-for-enclosing-reset6_0 #f)))"
"(let-values(((modules-being-compiled_3)"
"(if modules-being-compiled14_0 modules-being-compiled7_0(make-hasheq))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_121)(expand-context-observer init-ctx_0)))"
"(if obs_121"
"(let-values()"
"(let-values()(call-expand-observe obs_121 'prim-module)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_24)(syntax-disarm$1 s_16)))"
"(let-values(((ok?_72 module228_0 id:module-name229_0 initial-require230_0 body231_0)"
"(let-values(((s_491) disarmed-s_24))"
"(let-values(((orig-s_79) s_491))"
"(let-values(((module228_1"
" id:module-name229_1"
" initial-require230_1"
" body231_1)"
"(let-values(((s_316)"
"(if(syntax?$1 s_491)"
"(syntax-e$1 s_491)"
" s_491)))"
"(if(pair? s_316)"
"(let-values(((module232_0)"
"(let-values(((s_731)(car s_316)))"
" s_731))"
"((id:module-name233_0"
" initial-require234_0"
" body235_0)"
"(let-values(((s_476)(cdr s_316)))"
"(let-values(((s_477)"
"(if(syntax?$1 s_476)"
"(syntax-e$1 s_476)"
" s_476)))"
"(if(pair? s_477)"
"(let-values(((id:module-name236_0)"
"(let-values(((s_317)"
"(car"
" s_477)))"
"(if(let-values(((or-part_365)"
"(if(syntax?$1"
" s_317)"
"(symbol?"
"(syntax-e$1"
" s_317))"
" #f)))"
"(if or-part_365"
" or-part_365"
"(symbol?"
" s_317)))"
" s_317"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"not an identifier\""
" orig-s_79"
" s_317))))"
"((initial-require237_0"
" body238_0)"
"(let-values(((s_55)"
"(cdr"
" s_477)))"
"(let-values(((s_318)"
"(if(syntax?$1"
" s_55)"
"(syntax-e$1"
" s_55)"
" s_55)))"
"(if(pair?"
" s_318)"
"(let-values(((initial-require239_0)"
"(let-values(((s_492)"
"(car"
" s_318)))"
" s_492))"
"((body240_0)"
"(let-values(((s_388)"
"(cdr"
" s_318)))"
"(let-values(((s_732)"
"(if(syntax?$1"
" s_388)"
"(syntax-e$1"
" s_388)"
" s_388)))"
"(let-values(((flat-s_51)"
"(to-syntax-list.1"
" s_732)))"
"(if(not"
" flat-s_51)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_79))"
"(let-values()"
" flat-s_51)))))))"
"(values"
" initial-require239_0"
" body240_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_79))))))"
"(values"
" id:module-name236_0"
" initial-require237_0"
" body238_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_79))))))"
"(values"
" module232_0"
" id:module-name233_0"
" initial-require234_0"
" body235_0))"
"                                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_79)))))"
"(values"
" #t"
" module228_1"
" id:module-name229_1"
" initial-require230_1"
" body231_1))))))"
"(let-values(((rebuild-s_14)"
"(let-values(((temp255_1) #t)((temp256_0) #t))"
"(keep-as-needed74.1"
" #f"
" #f"
" temp256_0"
" #t"
" temp255_1"
" #t"
" init-ctx_0"
" s_16))))"
"(let-values(((initial-require_0)(syntax->datum$1 initial-require230_0)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_366) keep-enclosing-scope-at-phase_0))"
"(if or-part_366"
" or-part_366"
"(1/module-path? initial-require_0)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                           \"not a module path\""
" s_16"
" initial-require230_0)))"
"(values))))"
"(let-values(((phase_147) 0))"
"(let-values(((module-name-sym_0)(syntax-e$1 id:module-name229_0)))"
"(let-values(((outside-scope_1)(new-scope 'module)))"
"(let-values(((inside-scope_0)(new-multi-scope module-name-sym_0)))"
"(let-values(((self_30)"
"(make-self-module-path-index"
"(if enclosing-self_1"
" module-name-sym_0"
"(string->uninterned-symbol"
"(symbol->string module-name-sym_0)))"
" enclosing-self_1)))"
"(let-values(((enclosing-mod_1)"
"(if enclosing-self_1"
"                                                                  (1/module-path-index-join '(submod \"..\") self_30)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_1"
" mpis-for-enclosing-reset_0"
" #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_0"
"(cons"
" enclosing-mod_1"
"(unbox mpis-for-enclosing-reset_0))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_0)"
"(make-apply-module-scopes"
" outside-scope_1"
" inside-scope_0"
" init-ctx_0"
" keep-enclosing-scope-at-phase_0"
" self_30"
" enclosing-self_1"
" enclosing-mod_1)))"
"(let-values(((initial-require-s_0)"
"(apply-module-scopes_0 initial-require230_0)))"
"(let-values(((all-scopes-s_0)"
"(if enclosing-all-scopes-stx_0"
"(apply-module-scopes_0"
"(syntax-shift-phase-level$1"
" enclosing-all-scopes-stx_0"
" keep-enclosing-scope-at-phase_0))"
" initial-require-s_0)))"
"(let-values(((root-ctx_6)"
"(let-values(((temp257_0)"
"(if keep-enclosing-scope-at-phase_0"
"(root-expand-context-module-scopes"
" init-ctx_0)"
" null))"
"((outside-scope258_0)"
" outside-scope_1)"
"((inside-scope259_0)"
" inside-scope_0)"
"((all-scopes-s260_0)"
" all-scopes-s_0))"
"(make-root-expand-context11.1"
" all-scopes-s260_0"
" #t"
" temp257_0"
" #t"
" outside-scope258_0"
" #t"
" inside-scope259_0"
" #t))))"
"(let-values(((new-module-scopes_0)"
"(root-expand-context-module-scopes"
" root-ctx_6)))"
"(let-values(((frame-id_16)"
"(root-expand-context-frame-id"
" root-ctx_6)))"
"(let-values(((make-m-ns244_0)"
"(lambda(for-submodule?241_0"
" for-submodule?242_0"
" ns243_0)"
"(begin"
" 'make-m-ns244"
"(let-values(((ns_11) ns243_0))"
"(let-values(((for-submodule?_1)"
"(if for-submodule?242_0"
" for-submodule?241_0"
"(if enclosing-self_1"
" #t"
" #f))))"
"(let-values()"
"(let-values(((self262_0)"
" self_30)"
"((root-ctx263_0)"
" root-ctx_6)"
"((for-submodule?264_0)"
" for-submodule?_1))"
"(make-module-namespace50.1"
" for-submodule?264_0"
" self262_0"
" root-ctx263_0"
" ns_11)))))))))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_19)"
"(let-values(((temp265_1)"
"(expand-context-namespace"
" init-ctx_0)))"
"(make-m-ns244_0"
" #f"
" #f"
" temp265_1))))"
"(let-values(((ctx_108)"
"(let-values(((v_97)"
"(copy-root-expand-context"
" init-ctx_0"
" root-ctx_6)))"
"(let-values(((the-struct_102)"
" v_97))"
"(if(expand-context/outer?"
" the-struct_102)"
"(let-values(((post-expansion-scope-action266_0)"
" add-scope)"
"((inner267_0)"
"(let-values(((the-struct_103)"
"(root-expand-context/outer-inner"
" v_97)))"
"(if(expand-context/inner?"
" the-struct_103)"
"(let-values(((allow-unbound?268_0)"
" #f)"
"((namespace269_0)"
" m-ns_19)"
"((phase270_0)"
" phase_147)"
"((just-once?271_0)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_103)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_103)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_103)"
"(root-expand-context/inner-defined-syms"
" the-struct_103)"
"(root-expand-context/inner-counter"
" the-struct_103)"
"(root-expand-context/inner-lift-key"
" the-struct_103)"
"(expand-context/inner-to-parsed?"
" the-struct_103)"
" phase270_0"
" namespace269_0"
" just-once?271_0"
"(expand-context/inner-module-begin-k"
" the-struct_103)"
" allow-unbound?268_0"
"(expand-context/inner-in-local-expand?"
" the-struct_103)"
"(expand-context/inner-stops"
" the-struct_103)"
"(expand-context/inner-declared-submodule-names"
" the-struct_103)"
"(expand-context/inner-lifts"
" the-struct_103)"
"(expand-context/inner-lift-envs"
" the-struct_103)"
"(expand-context/inner-module-lifts"
" the-struct_103)"
"(expand-context/inner-require-lifts"
" the-struct_103)"
"(expand-context/inner-to-module-lifts"
" the-struct_103)"
"(expand-context/inner-requires+provides"
" the-struct_103)"
"(expand-context/inner-observer"
" the-struct_103)"
"(expand-context/inner-for-serializable?"
" the-struct_103)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_103)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                 \"expand-context/inner?\""
" the-struct_103)))))"
"(expand-context/outer1.1"
" inner267_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_102)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_102)"
"(root-expand-context/outer-frame-id"
" the-struct_102)"
"(expand-context/outer-context"
" the-struct_102)"
"(expand-context/outer-env"
" the-struct_102)"
" post-expansion-scope-action266_0"
"(expand-context/outer-scopes"
" the-struct_102)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_102)"
"(expand-context/outer-binding-layer"
" the-struct_102)"
"(expand-context/outer-reference-records"
" the-struct_102)"
"(expand-context/outer-only-immediate?"
" the-struct_102)"
"(expand-context/outer-need-eventually-defined"
" the-struct_102)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_102)"
"(expand-context/outer-name"
" the-struct_102)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                               \"expand-context/outer?\""
" the-struct_102))))))"
"(let-values(((bodys_15)"
"(let-values(((scoped-s_0)"
"(apply-module-scopes_0"
" disarmed-s_24)))"
"(let-values(((ok?_73"
" _272_0"
" _273_0"
" _274_0"
" body275_0)"
"(let-values(((s_406)"
" scoped-s_0))"
"(let-values(((orig-s_80)"
" s_406))"
"(let-values(((_272_1"
" _273_1"
" _274_1"
" body275_1)"
"(let-values(((s_89)"
"(if(syntax?$1"
" s_406)"
"(syntax-e$1"
" s_406)"
" s_406)))"
"(if(pair?"
" s_89)"
"(let-values(((_276_0)"
"(let-values(((s_152)"
"(car"
" s_89)))"
" s_152))"
"((_277_0"
" _278_0"
" body279_0)"
"(let-values(((s_153)"
"(cdr"
" s_89)))"
"(let-values(((s_90)"
"(if(syntax?$1"
" s_153)"
"(syntax-e$1"
" s_153)"
" s_153)))"
"(if(pair?"
" s_90)"
"(let-values(((_280_0)"
"(let-values(((s_91)"
"(car"
" s_90)))"
" s_91))"
"((_281_0"
" body282_0)"
"(let-values(((s_712)"
"(cdr"
" s_90)))"
"(let-values(((s_206)"
"(if(syntax?$1"
" s_712)"
"(syntax-e$1"
" s_712)"
" s_712)))"
"(if(pair?"
" s_206)"
"(let-values(((_283_0)"
"(let-values(((s_207)"
"(car"
" s_206)))"
" s_207))"
"((body284_0)"
"(let-values(((s_208)"
"(cdr"
" s_206)))"
"(let-values(((s_92)"
"(if(syntax?$1"
" s_208)"
"(syntax-e$1"
" s_208)"
" s_208)))"
"(let-values(((flat-s_2)"
"(to-syntax-list.1"
" s_92)))"
"(if(not"
" flat-s_2)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_80))"
"(let-values()"
" flat-s_2)))))))"
"(values"
" _283_0"
" body284_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_80))))))"
"(values"
" _280_0"
" _281_0"
" body282_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_80))))))"
"(values"
" _276_0"
" _277_0"
" _278_0"
" body279_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_80)))))"
"(values"
" #t"
" _272_1"
" _273_1"
" _274_1"
" body275_1))))))"
" body275_0))))"
"(let-values(((requires+provides_6)"
"(let-values(((self285_0)"
" self_30))"
"(make-requires+provides8.1"
" #f"
" #f"
" self285_0))))"
"(let-values(((defined-syms_10)"
"(root-expand-context-defined-syms"
" root-ctx_6)))"
"(let-values(((compiled-submodules_1)"
"(make-hasheq)))"
"(let-values(((compiled-module-box_0)"
"(box #f)))"
"(let-values(((mpis-to-reset_0)"
"(box null)))"
"(let-values(((initial-require!249_0)"
"(lambda(bind?247_0)"
"(begin"
" 'initial-require!249"
"(let-values(((bind?_3)"
" bind?247_0))"
"(let-values()"
"(if(not"
" keep-enclosing-scope-at-phase_0)"
"(let-values()"
"(let-values(((bind?291_0)"
" bind?_3)"
"((temp292_0)"
" 'module))"
"(perform-initial-require!42.1"
" bind?291_0"
" temp292_0"
" initial-require_0"
" self_30"
" all-scopes-s_0"
" m-ns_19"
" requires+provides_6)))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_6"
" enclosing-mod_1"
" keep-enclosing-scope-at-phase_0"
" enclosing-is-cross-phase-persistent?_0)"
"(let-values(((enclosing-r+p294_0)"
" enclosing-r+p_1)"
"((enclosing-mod295_0)"
" enclosing-mod_1)"
"((keep-enclosing-scope-at-phase296_0)"
" keep-enclosing-scope-at-phase_0))"
"(add-enclosing-module-defined-and-required!67.1"
" enclosing-r+p294_0"
" requires+provides_6"
" enclosing-mod295_0"
" keep-enclosing-scope-at-phase296_0))"
"(let-values(((m-ns297_0)"
" m-ns_19)"
"((enclosing-mod298_0)"
" enclosing-mod_1)"
"((keep-enclosing-scope-at-phase299_0)"
" keep-enclosing-scope-at-phase_0))"
"(namespace-module-visit!104.1"
" #f"
" #f"
" m-ns297_0"
" enclosing-mod298_0"
" keep-enclosing-scope-at-phase299_0)))))))))))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_122)"
"(expand-context-observer"
" init-ctx_0)))"
"(if obs_122"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_122"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((temp252_0)"
" #t))"
"(initial-require!249_0"
" temp252_0))"
"(values))))"
"(let-values(((again?_0)"
" #f))"
"(letrec-values(((module-begin-k_1)"
"(lambda(mb-s_0"
" mb-init-ctx_0)"
"(begin"
" 'module-begin-k"
"(let-values((()"
"(begin"
"(if again?_0"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_6)"
"(let-values(((temp304_0)"
" #f))"
"(initial-require!249_0"
" temp304_0))"
"(hash-clear!"
" compiled-submodules_1)"
"(set-box!"
" compiled-module-box_0"
" #f)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_0"
" #t)"
"(values))))"
"(let-values(((ctx_109)"
"(let-values(((v_126)"
" mb-init-ctx_0))"
"(let-values(((the-struct_43)"
" v_126))"
"(if(expand-context/outer?"
" the-struct_43)"
"(let-values(((inner305_0)"
"(let-values(((the-struct_104)"
"(root-expand-context/outer-inner"
" v_126)))"
"(if(expand-context/inner?"
" the-struct_104)"
"(let-values(((module-begin-k306_0)"
"(lambda(s_214"
" ctx_3)"
"(begin"
" 'module-begin-k306"
"(let-values(((new-requires+provides_0)"
"(let-values(((requires+provides314_0)"
" requires+provides_6))"
"(make-requires+provides8.1"
" requires+provides314_0"
" #t"
" self_30))))"
"(let-values(((requires+provides307_0)"
" requires+provides_6)"
"((compiled-submodules308_0)"
" compiled-submodules_1)"
"((compiled-module-box309_0)"
" compiled-module-box_0)"
"((requires+provides310_0)"
" new-requires+provides_0)"
"((compiled-submodules311_0)"
"(make-hasheq))"
"((compiled-module-box312_0)"
"(box"
" #f)))"
"(dynamic-wind"
"(lambda()"
"(begin"
"(set! requires+provides_6"
" requires+provides310_0)"
"(set! compiled-submodules_1"
" compiled-submodules311_0)"
"(set! compiled-module-box_0"
" compiled-module-box312_0)))"
"(lambda()"
"(module-begin-k_1"
" s_214"
" ctx_3))"
"(lambda()"
"(begin"
"(set! requires+provides_6"
" requires+provides307_0)"
"(set! compiled-submodules_1"
" compiled-submodules308_0)"
"(set! compiled-module-box_0"
" compiled-module-box309_0))))))))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_104)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_104)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_104)"
"(root-expand-context/inner-defined-syms"
" the-struct_104)"
"(root-expand-context/inner-counter"
" the-struct_104)"
"(root-expand-context/inner-lift-key"
" the-struct_104)"
"(expand-context/inner-to-parsed?"
" the-struct_104)"
"(expand-context/inner-phase"
" the-struct_104)"
"(expand-context/inner-namespace"
" the-struct_104)"
"(expand-context/inner-just-once?"
" the-struct_104)"
" module-begin-k306_0"
"(expand-context/inner-allow-unbound?"
" the-struct_104)"
"(expand-context/inner-in-local-expand?"
" the-struct_104)"
"(expand-context/inner-stops"
" the-struct_104)"
"(expand-context/inner-declared-submodule-names"
" the-struct_104)"
"(expand-context/inner-lifts"
" the-struct_104)"
"(expand-context/inner-lift-envs"
" the-struct_104)"
"(expand-context/inner-module-lifts"
" the-struct_104)"
"(expand-context/inner-require-lifts"
" the-struct_104)"
"(expand-context/inner-to-module-lifts"
" the-struct_104)"
"(expand-context/inner-requires+provides"
" the-struct_104)"
"(expand-context/inner-observer"
" the-struct_104)"
"(expand-context/inner-for-serializable?"
" the-struct_104)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_104)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                    \"expand-context/inner?\""
" the-struct_104)))))"
"(expand-context/outer1.1"
" inner305_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_43)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_43)"
"(root-expand-context/outer-frame-id"
" the-struct_43)"
"(expand-context/outer-context"
" the-struct_43)"
"(expand-context/outer-env"
" the-struct_43)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_43)"
"(expand-context/outer-scopes"
" the-struct_43)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_43)"
"(expand-context/outer-binding-layer"
" the-struct_43)"
"(expand-context/outer-reference-records"
" the-struct_43)"
"(expand-context/outer-only-immediate?"
" the-struct_43)"
"(expand-context/outer-need-eventually-defined"
" the-struct_43)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_43)"
"(expand-context/outer-name"
" the-struct_43)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                  \"expand-context/outer?\""
" the-struct_43))))))"
"(let-values(((added-s_2)"
"(add-scope"
" mb-s_0"
" inside-scope_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_123)"
"(expand-context-observer"
" ctx_109)))"
"(if obs_123"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_123"
" 'rename-one"
" added-s_2)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_0)"
"(syntax-disarm$1"
" added-s_2)))"
"(let-values(((ok?_6"
" #%module-begin300_0"
" body301_0)"
"(let-values(((s_112)"
" disarmed-mb-s_0))"
"(let-values(((orig-s_81)"
" s_112))"
"(let-values(((#%module-begin300_1"
" body301_1)"
"(let-values(((s_113)"
"(if(syntax?$1"
" s_112)"
"(syntax-e$1"
" s_112)"
" s_112)))"
"(if(pair?"
" s_113)"
"(let-values(((#%module-begin302_0)"
"(let-values(((s_116)"
"(car"
" s_113)))"
" s_116))"
"((body303_0)"
"(let-values(((s_421)"
"(cdr"
" s_113)))"
"(let-values(((s_216)"
"(if(syntax?$1"
" s_421)"
"(syntax-e$1"
" s_421)"
" s_421)))"
"(let-values(((flat-s_52)"
"(to-syntax-list.1"
" s_216)))"
"(if(not"
" flat-s_52)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"bad syntax\""
" orig-s_81))"
"(let-values()"
" flat-s_52)))))))"
"(values"
" #%module-begin302_0"
" body303_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                          \"bad syntax\""
" orig-s_81)))))"
"(values"
" #t"
" #%module-begin300_1"
" body301_1))))))"
"(let-values(((bodys_16)"
" body301_0))"
"(let-values(((rebuild-mb-s_0)"
"(let-values(((ctx315_0)"
" ctx_109)"
"((mb-s316_0)"
" mb-s_0))"
"(keep-as-needed74.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" ctx315_0"
" mb-s316_0))))"
"(let-values(((need-eventually-defined_1)"
"(make-hasheqv)))"
"(let-values(((module-ends_0)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_0)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_3)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_0)"
"((letrec-values(((pass-1-and-2-loop_0)"
"(lambda(bodys_17"
" phase_148)"
"(begin"
" 'pass-1-and-2-loop"
"(let-values(((def-ctx-scopes_8)"
"(box"
" null)))"
"(let-values(((to-parsed?_5)"
"(expand-context-to-parsed?"
" ctx_109)))"
"(let-values(((partial-body-ctx_0)"
"(let-values(((v_255)"
" ctx_109))"
"(let-values(((the-struct_105)"
" v_255))"
"(if(expand-context/outer?"
" the-struct_105)"
"(let-values(((context325_0)"
" 'module)"
"((def-ctx-scopes326_0)"
" def-ctx-scopes_8)"
"((need-eventually-defined327_0)"
" need-eventually-defined_1)"
"((inner328_0)"
"(let-values(((the-struct_48)"
"(root-expand-context/outer-inner"
" v_255)))"
"(if(expand-context/inner?"
" the-struct_48)"
"(let-values(((phase329_0)"
" phase_148)"
"((namespace330_0)"
"(namespace->namespace-at-phase"
" m-ns_19"
" phase_148))"
"((stops331_0)"
"(free-id-set"
" phase_148"
"(module-expand-stop-ids"
" phase_148)))"
"((declared-submodule-names332_0)"
" declared-submodule-names_3)"
"((lifts333_0)"
"(let-values(((temp337_0)"
"(make-wrap-as-definition"
" self_30"
" frame-id_16"
" inside-scope_0"
" all-scopes-s_0"
" defined-syms_10"
" requires+provides_6)))"
"(make-lift-context6.1"
" #f"
" #f"
" temp337_0)))"
"((module-lifts334_0)"
"(make-module-lift-context"
" phase_148"
" #t))"
"((require-lifts335_0)"
"(make-require-lift-context"
" phase_148"
"(let-values(((declared-submodule-names341_0)"
" declared-submodule-names_3))"
"(make-parse-lifted-require220.1"
" declared-submodule-names341_0"
" m-ns_19"
" self_30"
" requires+provides_6))))"
"((to-module-lifts336_0)"
"(let-values(((module-ends343_0)"
" module-ends_0)"
"((temp344_1)"
" #f))"
"(make-to-module-lift-context27.1"
" temp344_1"
" module-ends343_0"
" phase_148))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_48)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_48)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_48)"
"(root-expand-context/inner-defined-syms"
" the-struct_48)"
"(root-expand-context/inner-counter"
" the-struct_48)"
"(root-expand-context/inner-lift-key"
" the-struct_48)"
"(expand-context/inner-to-parsed?"
" the-struct_48)"
" phase329_0"
" namespace330_0"
"(expand-context/inner-just-once?"
" the-struct_48)"
"(expand-context/inner-module-begin-k"
" the-struct_48)"
"(expand-context/inner-allow-unbound?"
" the-struct_48)"
"(expand-context/inner-in-local-expand?"
" the-struct_48)"
" stops331_0"
" declared-submodule-names332_0"
" lifts333_0"
"(expand-context/inner-lift-envs"
" the-struct_48)"
" module-lifts334_0"
" require-lifts335_0"
" to-module-lifts336_0"
"(expand-context/inner-requires+provides"
" the-struct_48)"
"(expand-context/inner-observer"
" the-struct_48)"
"(expand-context/inner-for-serializable?"
" the-struct_48)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_48)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                                  \"expand-context/inner?\""
" the-struct_48)))))"
"(expand-context/outer1.1"
" inner328_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_105)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_105)"
"(root-expand-context/outer-frame-id"
" the-struct_105)"
" context325_0"
"(expand-context/outer-env"
" the-struct_105)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_105)"
"(expand-context/outer-scopes"
" the-struct_105)"
" def-ctx-scopes326_0"
"(expand-context/outer-binding-layer"
" the-struct_105)"
"(expand-context/outer-reference-records"
" the-struct_105)"
"(expand-context/outer-only-immediate?"
" the-struct_105)"
" need-eventually-defined327_0"
"(expand-context/outer-current-introduction-scopes"
" the-struct_105)"
"(expand-context/outer-name"
" the-struct_105)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                \"expand-context/outer?\""
" the-struct_105))))))"
"(let-values(((partially-expanded-bodys_0)"
"(let-values(((phase346_0)"
" phase_148)"
"((partial-body-ctx347_0)"
" partial-body-ctx_0)"
"((m-ns348_0)"
" m-ns_19)"
"((self349_0)"
" self_30)"
"((frame-id350_0)"
" frame-id_16)"
"((requires+provides351_0)"
" requires+provides_6)"
"((need-eventually-defined352_0)"
" need-eventually-defined_1)"
"((all-scopes-s353_0)"
" all-scopes-s_0)"
"((defined-syms354_0)"
" defined-syms_10)"
"((declared-keywords355_0)"
" declared-keywords_0)"
"((declared-submodule-names356_0)"
" declared-submodule-names_3)"
"((compiled-submodules357_0)"
" compiled-submodules_1)"
"((modules-being-compiled358_0)"
" modules-being-compiled_3)"
"((mpis-to-reset359_0)"
" mpis-to-reset_0)"
"((pass-1-and-2-loop360_0)"
" pass-1-and-2-loop_0))"
"(partially-expand-bodys81.1"
" all-scopes-s353_0"
" compiled-submodules357_0"
" partial-body-ctx347_0"
" declared-keywords355_0"
" declared-submodule-names356_0"
" defined-syms354_0"
" frame-id350_0"
" pass-1-and-2-loop360_0"
" modules-being-compiled358_0"
" mpis-to-reset359_0"
" m-ns348_0"
" need-eventually-defined352_0"
" phase346_0"
" requires+provides351_0"
" self349_0"
" bodys_17))))"
"(let-values((()"
"(begin"
"(let-values(((obs_124)"
"(expand-context-observer"
" partial-body-ctx_0)))"
"(if obs_124"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_124"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_6)"
"(let-values(((v_256)"
"(accumulate-def-ctx-scopes"
" partial-body-ctx_0"
" def-ctx-scopes_8)))"
"(let-values(((the-struct_106)"
" v_256))"
"(if(expand-context/outer?"
" the-struct_106)"
"(let-values(((def-ctx-scopes361_0)"
" #f)"
"((post-expansion-scope362_0)"
" #f)"
"((inner363_0)"
"(let-values(((the-struct_107)"
"(root-expand-context/outer-inner"
" v_256)))"
"(if(expand-context/inner?"
" the-struct_107)"
"(let-values(((stops364_0)"
" empty-free-id-set)"
"((to-module-lifts365_0)"
"(let-values(((module-ends367_0)"
" module-ends_0)"
"((temp368_0)"
" #t))"
"(make-to-module-lift-context27.1"
" temp368_0"
" module-ends367_0"
" phase_148))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_107)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_107)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_107)"
"(root-expand-context/inner-defined-syms"
" the-struct_107)"
"(root-expand-context/inner-counter"
" the-struct_107)"
"(root-expand-context/inner-lift-key"
" the-struct_107)"
"(expand-context/inner-to-parsed?"
" the-struct_107)"
"(expand-context/inner-phase"
" the-struct_107)"
"(expand-context/inner-namespace"
" the-struct_107)"
"(expand-context/inner-just-once?"
" the-struct_107)"
"(expand-context/inner-module-begin-k"
" the-struct_107)"
"(expand-context/inner-allow-unbound?"
" the-struct_107)"
"(expand-context/inner-in-local-expand?"
" the-struct_107)"
" stops364_0"
"(expand-context/inner-declared-submodule-names"
" the-struct_107)"
"(expand-context/inner-lifts"
" the-struct_107)"
"(expand-context/inner-lift-envs"
" the-struct_107)"
"(expand-context/inner-module-lifts"
" the-struct_107)"
"(expand-context/inner-require-lifts"
" the-struct_107)"
" to-module-lifts365_0"
"(expand-context/inner-requires+provides"
" the-struct_107)"
"(expand-context/inner-observer"
" the-struct_107)"
"(expand-context/inner-for-serializable?"
" the-struct_107)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_107)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                                        \"expand-context/inner?\""
" the-struct_107)))))"
"(expand-context/outer1.1"
" inner363_0"
" post-expansion-scope362_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_106)"
"(root-expand-context/outer-frame-id"
" the-struct_106)"
"(expand-context/outer-context"
" the-struct_106)"
"(expand-context/outer-env"
" the-struct_106)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_106)"
"(expand-context/outer-scopes"
" the-struct_106)"
" def-ctx-scopes361_0"
"(expand-context/outer-binding-layer"
" the-struct_106)"
"(expand-context/outer-reference-records"
" the-struct_106)"
"(expand-context/outer-only-immediate?"
" the-struct_106)"
"(expand-context/outer-need-eventually-defined"
" the-struct_106)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_106)"
"(expand-context/outer-name"
" the-struct_106)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                      \"expand-context/outer?\""
" the-struct_106))))))"
"(let-values(((phase318_0)"
" phase_148)"
"((body-ctx319_0)"
" body-ctx_6)"
"((self320_0)"
" self_30)"
"((declared-submodule-names321_0)"
" declared-submodule-names_3)"
"((compiled-submodules322_0)"
" compiled-submodules_1)"
"((modules-being-compiled323_0)"
" modules-being-compiled_3)"
"((mpis-to-reset324_0)"
" mpis-to-reset_0))"
"(finish-expanding-body-expressons99.1"
" compiled-submodules322_0"
" body-ctx319_0"
" declared-submodule-names321_0"
" modules-being-compiled323_0"
" mpis-to-reset324_0"
" phase318_0"
" self320_0"
" partially-expanded-bodys_0))))))))))))"
" pass-1-and-2-loop_0)"
" bodys_16"
" phase_147)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_1"
" self_30"
" ctx_109)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_125)"
"(expand-context-observer"
" ctx_109)))"
"(if obs_125"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_125"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_0)"
"(let-values(((requires+provides370_0)"
" requires+provides_6)"
"((declared-submodule-names371_0)"
" declared-submodule-names_3)"
"((m-ns372_0)"
" m-ns_19)"
"((phase373_0)"
" phase_147)"
"((self374_0)"
" self_30)"
"((ctx375_0)"
" ctx_109))"
"(resolve-provides115.1"
" ctx375_0"
" declared-submodule-names371_0"
" m-ns372_0"
" phase373_0"
" requires+provides370_0"
" self374_0"
" expression-expanded-bodys_0))))"
"(let-values(((is-cross-phase-persistent?_1)"
"(hash-ref"
" declared-keywords_0"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_1"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_6)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                        \"cannot be cross-phase persistent due to required modules\""
" rebuild-s_14"
"(hash-ref"
" declared-keywords_0"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_0)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_126)"
"(expand-context-observer"
" ctx_109)))"
"(if obs_126"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_126"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((submod-m-ns_0)"
"(let-values(((temp377_0)"
" #t))"
"(make-m-ns244_0"
" temp377_0"
" #t"
" m-ns_19))))"
"(let-values(((submod-ctx_0)"
"(let-values(((v_257)"
" ctx_109))"
"(let-values(((the-struct_108)"
" v_257))"
"(if(expand-context/outer?"
" the-struct_108)"
"(let-values(((frame-id378_0)"
" #f)"
"((post-expansion-scope379_0)"
" #f)"
"((inner380_0)"
"(let-values(((the-struct_109)"
"(root-expand-context/outer-inner"
" v_257)))"
"(if(expand-context/inner?"
" the-struct_109)"
"(let-values(((namespace381_0)"
" submod-m-ns_0))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_109)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_109)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_109)"
"(root-expand-context/inner-defined-syms"
" the-struct_109)"
"(root-expand-context/inner-counter"
" the-struct_109)"
"(root-expand-context/inner-lift-key"
" the-struct_109)"
"(expand-context/inner-to-parsed?"
" the-struct_109)"
"(expand-context/inner-phase"
" the-struct_109)"
" namespace381_0"
"(expand-context/inner-just-once?"
" the-struct_109)"
"(expand-context/inner-module-begin-k"
" the-struct_109)"
"(expand-context/inner-allow-unbound?"
" the-struct_109)"
"(expand-context/inner-in-local-expand?"
" the-struct_109)"
"(expand-context/inner-stops"
" the-struct_109)"
"(expand-context/inner-declared-submodule-names"
" the-struct_109)"
"(expand-context/inner-lifts"
" the-struct_109)"
"(expand-context/inner-lift-envs"
" the-struct_109)"
"(expand-context/inner-module-lifts"
" the-struct_109)"
"(expand-context/inner-require-lifts"
" the-struct_109)"
"(expand-context/inner-to-module-lifts"
" the-struct_109)"
"(expand-context/inner-requires+provides"
" the-struct_109)"
"(expand-context/inner-observer"
" the-struct_109)"
"(expand-context/inner-for-serializable?"
" the-struct_109)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_109)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"expand-context/inner?\""
" the-struct_109)))))"
"(expand-context/outer1.1"
" inner380_0"
" post-expansion-scope379_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_108)"
" frame-id378_0"
"(expand-context/outer-context"
" the-struct_108)"
"(expand-context/outer-env"
" the-struct_108)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_108)"
"(expand-context/outer-scopes"
" the-struct_108)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_108)"
"(expand-context/outer-binding-layer"
" the-struct_108)"
"(expand-context/outer-reference-records"
" the-struct_108)"
"(expand-context/outer-only-immediate?"
" the-struct_108)"
"(expand-context/outer-need-eventually-defined"
" the-struct_108)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_108)"
"(expand-context/outer-name"
" the-struct_108)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                        \"expand-context/outer?\""
" the-struct_108))))))"
"(let-values(((declare-enclosing-module_0)"
"(delay"
"(lambda()"
"(begin"
" 'declare-enclosing-module"
"(let-values(((temp383_0)"
" id:module-name229_0)"
"((rebuild-s384_0)"
" rebuild-s_14)"
"((requires+provides385_0)"
" requires+provides_6)"
"((submod-m-ns386_0)"
" submod-m-ns_0)"
"((self387_0)"
" self_30)"
"((enclosing-self388_0)"
" enclosing-self_1)"
"((root-ctx389_0)"
" root-ctx_6)"
"((submod-ctx390_0)"
" submod-ctx_0)"
"((modules-being-compiled391_0)"
" modules-being-compiled_3)"
"((compiled-module-box392_0)"
" compiled-module-box_0))"
"(declare-module-for-expansion139.1"
" submod-ctx390_0"
" enclosing-self388_0"
" compiled-module-box392_0"
" temp383_0"
" modules-being-compiled391_0"
" submod-m-ns386_0"
" rebuild-s384_0"
" requires+provides385_0"
" root-ctx389_0"
" self387_0"
" fully-expanded-bodys-except-post-submodules_0)))))))"
"(let-values(((fully-expanded-bodys_0)"
"(if(stop-at-module*?"
" submod-ctx_0)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_0)"
"(let-values()"
"(let-values(((declare-enclosing-module394_0)"
" declare-enclosing-module_0)"
"((phase395_0)"
" phase_147)"
"((self396_0)"
" self_30)"
"((requires+provides397_0)"
" requires+provides_6)"
"((is-cross-phase-persistent?398_0)"
" is-cross-phase-persistent?_1)"
"((all-scopes-s399_0)"
" all-scopes-s_0)"
"((mpis-to-reset400_0)"
" mpis-to-reset_0)"
"((declared-submodule-names401_0)"
" declared-submodule-names_3)"
"((compiled-submodules402_0)"
" compiled-submodules_1)"
"((modules-being-compiled403_0)"
" modules-being-compiled_3)"
"((submod-ctx404_0)"
" submod-ctx_0))"
"(expand-post-submodules165.1"
" all-scopes-s399_0"
" compiled-submodules402_0"
" submod-ctx404_0"
" declare-enclosing-module394_0"
" declared-submodule-names401_0"
" is-cross-phase-persistent?398_0"
" modules-being-compiled403_0"
" mpis-to-reset400_0"
" phase395_0"
" requires+provides397_0"
" self396_0"
" fully-expanded-bodys-except-post-submodules_0))))))"
"(if(expand-context-to-parsed?"
" submod-ctx_0)"
"(let-values()"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_0"
"(parsed-only"
" fully-expanded-bodys_0)))"
"(let-values()"
"(let-values(((mb-result-s_0)"
"(let-values(((rebuild-mb-s405_0)"
" rebuild-mb-s_0)"
"((temp406_1)"
"(list*"
" #%module-begin300_0"
"(syntax-only"
" fully-expanded-bodys_0))))"
"(rebuild5.1"
" #f"
" #f"
" rebuild-mb-s405_0"
" temp406_1))))"
"(if(not"
"(expand-context-in-local-expand?"
" submod-ctx_0))"
"(let-values()"
"(expanded+parsed1.1"
" mb-result-s_0"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_0"
"(parsed-only"
" fully-expanded-bodys_0))))"
"(let-values()"
" mb-result-s_0)))))))))))))))))))))))))))))))))"
"(let-values(((mb-ctx_0)"
"(let-values(((v_258)"
" ctx_108))"
"(let-values(((the-struct_110)"
" v_258))"
"(if(expand-context/outer?"
" the-struct_110)"
"(let-values(((context407_0)"
" 'module-begin)"
"((inner408_0)"
"(let-values(((the-struct_111)"
"(root-expand-context/outer-inner"
" v_258)))"
"(if(expand-context/inner?"
" the-struct_111)"
"(let-values(((module-begin-k409_0)"
" module-begin-k_1)"
"((in-local-expand?410_0)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_111)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_111)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_111)"
"(root-expand-context/inner-defined-syms"
" the-struct_111)"
"(root-expand-context/inner-counter"
" the-struct_111)"
"(root-expand-context/inner-lift-key"
" the-struct_111)"
"(expand-context/inner-to-parsed?"
" the-struct_111)"
"(expand-context/inner-phase"
" the-struct_111)"
"(expand-context/inner-namespace"
" the-struct_111)"
"(expand-context/inner-just-once?"
" the-struct_111)"
" module-begin-k409_0"
"(expand-context/inner-allow-unbound?"
" the-struct_111)"
" in-local-expand?410_0"
"(expand-context/inner-stops"
" the-struct_111)"
"(expand-context/inner-declared-submodule-names"
" the-struct_111)"
"(expand-context/inner-lifts"
" the-struct_111)"
"(expand-context/inner-lift-envs"
" the-struct_111)"
"(expand-context/inner-module-lifts"
" the-struct_111)"
"(expand-context/inner-require-lifts"
" the-struct_111)"
"(expand-context/inner-to-module-lifts"
" the-struct_111)"
"(expand-context/inner-requires+provides"
" the-struct_111)"
"(expand-context/inner-observer"
" the-struct_111)"
"(expand-context/inner-for-serializable?"
" the-struct_111)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_111)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                             \"expand-context/inner?\""
" the-struct_111)))))"
"(expand-context/outer1.1"
" inner408_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_110)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_110)"
"(root-expand-context/outer-frame-id"
" the-struct_110)"
" context407_0"
"(expand-context/outer-env"
" the-struct_110)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_110)"
"(expand-context/outer-scopes"
" the-struct_110)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_110)"
"(expand-context/outer-binding-layer"
" the-struct_110)"
"(expand-context/outer-reference-records"
" the-struct_110)"
"(expand-context/outer-only-immediate?"
" the-struct_110)"
"(expand-context/outer-need-eventually-defined"
" the-struct_110)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_110)"
"(expand-context/outer-name"
" the-struct_110)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                           \"expand-context/outer?\""
" the-struct_110))))))"
"(let-values(((mb-scopes-s_0)"
"(if keep-enclosing-scope-at-phase_0"
" disarmed-s_24"
" all-scopes-s_0)))"
"(let-values(((mb-def-ctx-scopes_0)"
"(box"
" null)))"
"(let-values(((mb_0)"
"(let-values(((module-name-sym412_0)"
" module-name-sym_0)"
"((mb-scopes-s413_0)"
" mb-scopes-s_0)"
"((m-ns414_0)"
" m-ns_19)"
"((mb-ctx415_0)"
" mb-ctx_0)"
"((mb-def-ctx-scopes416_0)"
" mb-def-ctx-scopes_0)"
"((phase417_0)"
" phase_147)"
"((s418_0)"
" s_16))"
"(ensure-module-begin36.1"
" mb-ctx415_0"
" mb-def-ctx-scopes416_0"
" m-ns414_0"
" module-name-sym412_0"
" phase417_0"
" s418_0"
" mb-scopes-s413_0"
" bodys_15))))"
"(let-values(((expanded-mb_0)"
"(let-values()"
"(let-values(((mb419_0)"
" mb_0)"
"((temp420_1)"
"(accumulate-def-ctx-scopes"
" mb-ctx_0"
" mb-def-ctx-scopes_0)))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" mb419_0"
" temp420_1)))))"
"(let-values(((requires_6"
" provides_13)"
"(extract-requires-and-provides"
" requires+provides_6"
" self_30"
" self_30)))"
"(let-values(((result-form_0)"
"(if(let-values(((or-part_339)"
"(expand-context-to-parsed?"
" init-ctx_0)))"
"(if or-part_339"
" or-part_339"
" always-produce-compiled?_0))"
"(parsed-module25.1"
" rebuild-s_14"
" #f"
" id:module-name229_0"
" self_30"
" requires_6"
" provides_13"
"(requires+provides-all-bindings-simple?"
" requires+provides_6)"
"(root-expand-context-encode-for-module"
" root-ctx_6"
" self_30"
" self_30)"
"(parsed-#%module-begin-body"
"(if(expanded+parsed?"
" expanded-mb_0)"
"(expanded+parsed-parsed"
" expanded-mb_0)"
" expanded-mb_0))"
"(unbox"
" compiled-module-box_0)"
" compiled-submodules_1)"
" #f)))"
"(let-values(((result-s_14)"
"(if(not"
"(expand-context-to-parsed?"
" init-ctx_0))"
"(let-values()"
"(let-values(((generic-self_0)"
"(make-generic-self-module-path-index"
" self_30)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_30)"
"(let-values(((lst_215)"
"(unbox"
" mpis-to-reset_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_215)))"
"((letrec-values(((for-loop_314)"
"(lambda(lst_414)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_414)"
"(let-values(((mpi_53)"
"(unsafe-car"
" lst_414))"
"((rest_243)"
"(unsafe-cdr"
" lst_414)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_53))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_314"
" rest_243)"
"(values))))"
"(values))))))"
" for-loop_314)"
" lst_215)))"
"(void)"
"(let-values(((result-s_15)"
"(let-values(((rebuild-s421_0)"
" rebuild-s_14)"
"((temp422_0)"
"(list"
" module228_0"
" id:module-name229_0"
" initial-require-s_0"
"(expanded+parsed-s"
" expanded-mb_0))))"
"(rebuild5.1"
" #f"
" #f"
" rebuild-s421_0"
" temp422_0))))"
"(let-values(((result-s_16)"
"(let-values(((result-s423_0)"
" result-s_15)"
"((self424_0)"
" self_30)"
"((generic-self425_0)"
" generic-self_0))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" result-s423_0"
" self424_0"
" generic-self425_0"
" #f"
" #f))))"
"(let-values(((result-s_17)"
"(attach-root-expand-context-properties"
" result-s_16"
" root-ctx_6"
" self_30"
" generic-self_0)))"
"(let-values(((result-s_18)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_6)"
"(syntax-property$1"
" result-s_17"
" 'module-body-context-simple?"
" #t)"
" result-s_17)))"
"(begin"
"(let-values(((obs_127)"
"(expand-context-observer"
" init-ctx_0)))"
"(if obs_127"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_127"
" 'rename-one"
" result-s_18)))"
"(void)))"
" result-s_18))))))))"
"(void))))"
"(if(expand-context-to-parsed?"
" init-ctx_0)"
"(let-values()"
" result-form_0)"
"(if always-produce-compiled?_0"
"(let-values()"
"(expanded+parsed1.1"
" result-s_14"
" result-form_0))"
"(let-values()"
" result-s_14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(ensure-module-begin36.1)"
"(lambda(ctx24_0 def-ctx-scopes25_0 m-ns23_0 module-name-sym21_0 phase26_2 s27_2 scopes-s22_0 bodys35_0)"
"(begin"
" 'ensure-module-begin36"
"(let-values(((bodys_18) bodys35_0))"
"(let-values(((module-name-sym_1) module-name-sym21_0))"
"(let-values(((scopes-s_0) scopes-s22_0))"
"(let-values()"
"(let-values(((ctx_110) ctx24_0))"
"(let-values(((def-ctx-scopes_9) def-ctx-scopes25_0))"
"(let-values(((phase_149) phase26_2))"
"(let-values(((s_264) s27_2))"
"(let-values()"
"(let-values(((make-mb-ctx_0)"
"(lambda()"
"(begin"
" 'make-mb-ctx"
"(let-values(((v_259) ctx_110))"
"(let-values(((the-struct_112) v_259))"
"(if(expand-context/outer? the-struct_112)"
"(let-values(((context426_0) 'module-begin)"
"((only-immediate?427_0) #t)"
"((def-ctx-scopes428_0) def-ctx-scopes_9)"
"((inner429_0)(root-expand-context/outer-inner v_259)))"
"(expand-context/outer1.1"
" inner429_0"
"(root-expand-context/outer-post-expansion-scope the-struct_112)"
"(root-expand-context/outer-use-site-scopes the-struct_112)"
"(root-expand-context/outer-frame-id the-struct_112)"
" context426_0"
"(expand-context/outer-env the-struct_112)"
"(expand-context/outer-post-expansion-scope-action the-struct_112)"
"(expand-context/outer-scopes the-struct_112)"
" def-ctx-scopes428_0"
"(expand-context/outer-binding-layer the-struct_112)"
"(expand-context/outer-reference-records the-struct_112)"
" only-immediate?427_0"
"(expand-context/outer-need-eventually-defined the-struct_112)"
"(expand-context/outer-current-introduction-scopes the-struct_112)"
"(expand-context/outer-name the-struct_112)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_112))))))))"
"(let-values(((mb_1)"
"(if(= 1(length bodys_18))"
"(let-values()"
"(begin"
"(let-values(((obs_128)(expand-context-observer ctx_110)))"
"(if obs_128"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_128 'rename-one(car bodys_18))))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_18)) phase_149))"
"(let-values()(car bodys_18))"
"(let-values()"
"(let-values(((partly-expanded-body_0)"
"(let-values()"
"(let-values(((temp430_0)"
"(add-enclosing-name-property"
"(car bodys_18)"
" module-name-sym_1))"
"((temp431_0)(make-mb-ctx_0)))"
"(expand7.1 #f #f #f #f temp430_0 temp431_0)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_0)"
" phase_149))"
"(let-values() partly-expanded-body_0)"
"(let-values()"
"(let-values(((temp432_0)(list partly-expanded-body_0))"
"((s433_0) s_264)"
"((scopes-s434_0) scopes-s_0)"
"((phase435_0) phase_149)"
"((module-name-sym436_0) module-name-sym_1)"
"((temp437_0)(make-mb-ctx_0))"
"((temp438_0) #f))"
"(add-module-begin47.1"
" temp438_0"
" #t"
" temp432_0"
" s433_0"
" scopes-s434_0"
" phase435_0"
" module-name-sym436_0"
" temp437_0)))))))))"
"(let-values()"
"(let-values(((bodys439_0) bodys_18)"
"((s440_0) s_264)"
"((scopes-s441_0) scopes-s_0)"
"((phase442_0) phase_149)"
"((module-name-sym443_0) module-name-sym_1)"
"((temp444_0)(make-mb-ctx_0)))"
"(add-module-begin47.1"
" #f"
" #f"
" bodys439_0"
" s440_0"
" scopes-s441_0"
" phase442_0"
" module-name-sym443_0"
" temp444_0))))))"
"(add-enclosing-name-property mb_1 module-name-sym_1)))))))))))))))"
"(define-values"
"(add-module-begin47.1)"
"(lambda(log-rename-one?39_0"
" log-rename-one?40_0"
" bodys41_0"
" s42_0"
" scopes-s43_0"
" phase44_1"
" module-name-sym45_0"
" mb-ctx46_0)"
"(begin"
" 'add-module-begin47"
"(let-values(((bodys_19) bodys41_0))"
"(let-values(((s_733) s42_0))"
"(let-values(((scopes-s_1) scopes-s43_0))"
"(let-values(((phase_150) phase44_1))"
"(let-values(((module-name-sym_2) module-name-sym45_0))"
"(let-values(((mb-ctx_1) mb-ctx46_0))"
"(let-values(((log-rename-one?_0)(if log-rename-one?40_0 log-rename-one?39_0 #t)))"
"(let-values()"
"(let-values(((disarmed-scopes-s_0)(syntax-disarm$1 scopes-s_1)))"
"(let-values(((mb-id_0)(datum->syntax$1 disarmed-scopes-s_0 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id445_0) mb-id_0)((phase446_0) phase_150))"
"(resolve33.1 #f #f #f #f #f #f #f #f mb-id445_0 phase446_0))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                               \"no #%module-begin binding in the module's language\""
" s_733)))"
"(values))))"
"(let-values(((mb_2)(datum->syntax$1 disarmed-scopes-s_0(list* mb-id_0 bodys_19) s_733)))"
"(let-values((()"
"(begin"
"(let-values(((obs_129)(expand-context-observer mb-ctx_1)))"
"(if obs_129"
"(let-values()"
"(let-values()(call-expand-observe obs_129 'tag mb_2)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_0"
"(let-values()"
"(let-values(((obs_130)(expand-context-observer mb-ctx_1)))"
"(if obs_130"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_130 'rename-one mb_2)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_0)"
"(let-values()"
"(let-values(((temp447_0)"
"(add-enclosing-name-property mb_2 module-name-sym_2))"
"((mb-ctx448_0) mb-ctx_1))"
"(expand7.1 #f #f #f #f temp447_0 mb-ctx448_0)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_0) phase_150))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                           \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_733"
" partly-expanded-mb_0)))"
" partly-expanded-mb_0)))))))))))))))))))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_19 module-name-sym_3)(begin(syntax-property$1 stx_19 'enclosing-module-name module-name-sym_3))))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_1"
" outside-scope_2"
" init-ctx_1"
" keep-enclosing-scope-at-phase_1"
" self_11"
" enclosing-self_2"
" enclosing-mod_2)"
"(begin"
"(lambda(s_734)"
"(let-values()"
"(let-values(((s-without-enclosing_0)"
"(if keep-enclosing-scope-at-phase_1"
" s_734"
"(remove-use-site-scopes"
"(remove-scopes s_734(root-expand-context-module-scopes init-ctx_1))"
" init-ctx_1))))"
"(let-values(((s-with-edges_0)"
"(add-scope(add-scope s-without-enclosing_0 outside-scope_2) inside-scope_1)))"
"(let-values(((s-with-suitable-enclosing_0)"
"(if keep-enclosing-scope-at-phase_1"
"(let-values()"
"(let-values(((s-with-edges453_0) s-with-edges_0)"
"((enclosing-self454_0) enclosing-self_2)"
"((enclosing-mod455_0) enclosing-mod_2))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s-with-edges453_0"
" enclosing-self454_0"
" enclosing-mod455_0"
" #f"
" #f)))"
"(let-values() s-with-edges_0))))"
"(let-values(((s-with-suitable-enclosing449_0) s-with-suitable-enclosing_0)"
"((temp450_0)(make-generic-self-module-path-index self_11))"
"((self451_0) self_11)"
"((temp452_0)(current-code-inspector)))"
"(syntax-module-path-index-shift15.1"
" #f"
" #f"
" s-with-suitable-enclosing449_0"
" temp450_0"
" self451_0"
" temp452_0"
" #t))))))))))"
"(define-values"
"(partially-expand-bodys81.1)"
"(lambda(all-scopes-stx57_0"
" compiled-submodules61_0"
" ctx51_0"
" declared-keywords59_0"
" declared-submodule-names60_0"
" defined-syms58_0"
" frame-id54_0"
" loop64_0"
" modules-being-compiled62_0"
" mpis-to-reset63_0"
" namespace52_0"
" need-eventually-defined56_0"
" phase50_0"
" requires-and-provides55_0"
" self53_0"
" bodys80_0)"
"(begin"
" 'partially-expand-bodys81"
"(let-values(((bodys_20) bodys80_0))"
"(let-values(((phase_45) phase50_0))"
"(let-values(((partial-body-ctx_1) ctx51_0))"
"(let-values(((m-ns_20) namespace52_0))"
"(let-values(((self_31) self53_0))"
"(let-values(((frame-id_17) frame-id54_0))"
"(let-values(((requires+provides_7) requires-and-provides55_0))"
"(let-values(((need-eventually-defined_2) need-eventually-defined56_0))"
"(let-values(((all-scopes-stx_5) all-scopes-stx57_0))"
"(let-values(((defined-syms_11) defined-syms58_0))"
"(let-values(((declared-keywords_1) declared-keywords59_0))"
"(let-values(((declared-submodule-names_4) declared-submodule-names60_0))"
"(let-values(((compiled-submodules_2) compiled-submodules61_0))"
"(let-values(((modules-being-compiled_4) modules-being-compiled62_0))"
"(let-values(((mpis-to-reset_1) mpis-to-reset63_0))"
"(let-values(((pass-1-and-2-loop_1) loop64_0))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_20 phase_45)"
"((letrec-values(((loop_128)"
"(lambda(tail?_53 bodys_21)"
"(begin"
" 'loop"
"(if(null? bodys_21)"
"(let-values()"
"(if(if tail?_53(not(zero? phase_45)) #f)"
"(let-values()"
"(begin"
"(let-values(((obs_131)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_131"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_131"
" 'module-lift-end-loop"
" '())))"
"(void)))"
" null))"
"(if tail?_53"
"(let-values()"
"(let-values(((bodys_22)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_1))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_1)))))"
"(begin"
"(let-values(((obs_132)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_132"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_132"
" 'module-lift-end-loop"
" bodys_22)))"
"(void)))"
"(if(null? bodys_22)"
"(let-values() null)"
"(let-values()"
"(loop_128"
" #t"
"(add-post-expansion-scope"
" bodys_22"
" partial-body-ctx_1)))))))"
"(let-values() null))))"
"(let-values()"
"(let-values(((rest-bodys_1)(cdr bodys_21)))"
"(let-values((()"
"(begin"
"(let-values(((obs_133)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_133"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_133"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_7)"
"(let-values()"
"(let-values(((temp456_0)"
"(car bodys_21))"
"((partial-body-ctx457_0)"
" partial-body-ctx_1))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" temp456_0"
" partial-body-ctx457_0)))))"
"(let-values(((disarmed-exp-body_1)"
"(syntax-disarm$1 exp-body_7)))"
"(let-values(((lifted-defns_0)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_1))))"
"(begin"
"(if(pair? lifted-defns_0)"
"(let-values()"
"(log-lifted-defns"
" partial-body-ctx_1"
" lifted-defns_0"
" exp-body_7"
" rest-bodys_1))"
"(void))"
"(let-values(((obs_134)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_134"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_134"
" 'rename-one"
" exp-body_7)))"
"(void)))"
"(let-values(((finish_2)"
"(lambda()"
"(begin"
" 'finish"
"(let-values(((tmp_65)"
"(core-form-sym"
" disarmed-exp-body_1"
" phase_45)))"
"(if(equal?"
" tmp_65"
" 'begin)"
"(let-values()"
"(let-values(((ok?_74"
" begin458_0"
" e459_0)"
"(let-values(((s_735)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_82)"
" s_735))"
"(let-values(((begin458_1"
" e459_1)"
"(let-values(((s_736)"
"(if(syntax?$1"
" s_735)"
"(syntax-e$1"
" s_735)"
" s_735)))"
"(if(pair?"
" s_736)"
"(let-values(((begin460_0)"
"(let-values(((s_737)"
"(car"
" s_736)))"
" s_737))"
"((e461_0)"
"(let-values(((s_738)"
"(cdr"
" s_736)))"
"(let-values(((s_739)"
"(if(syntax?$1"
" s_738)"
"(syntax-e$1"
" s_738)"
" s_738)))"
"(let-values(((flat-s_53)"
"(to-syntax-list.1"
" s_739)))"
"(if(not"
" flat-s_53)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_82))"
"(let-values()"
" flat-s_53)))))))"
"(values"
" begin460_0"
" e461_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_82)))))"
"(values"
" #t"
" begin458_1"
" e459_1))))))"
"(let-values(((track_1)"
"(lambda(e_88)"
"(begin"
" 'track"
"(syntax-track-origin$1"
" e_88"
" exp-body_7)))))"
"(let-values(((spliced-bodys_0)"
"(append"
"(map2"
" track_1"
" e459_0)"
" rest-bodys_1)))"
"(begin"
"(let-values(((obs_135)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_135"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_135"
" 'splice"
" spliced-bodys_0)))"
"(void)))"
"(loop_128"
" tail?_53"
" spliced-bodys_0))))))"
"(if(equal?"
" tmp_65"
" 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_136)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_136"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_136"
" 'enter-prim"
" exp-body_7)"
"(call-expand-observe"
" obs_136"
" 'prim-begin-for-syntax)"
"(call-expand-observe"
" obs_136"
" 'prepare-env))))"
"(void)))"
"(values))))"
"(let-values(((ct-m-ns_0)"
"(namespace->namespace-at-phase"
" m-ns_20"
"(add1"
" phase_45))))"
"(let-values((()"
"(begin"
"(prepare-next-phase-namespace"
" partial-body-ctx_1)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_137)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_137"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_137"
" 'phase-up)))"
"(void)))"
"(values))))"
"(let-values(((ok?_75"
" begin-for-syntax462_0"
" e463_0)"
"(let-values(((s_740)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_83)"
" s_740))"
"(let-values(((begin-for-syntax462_1"
" e463_1)"
"(let-values(((s_741)"
"(if(syntax?$1"
" s_740)"
"(syntax-e$1"
" s_740)"
" s_740)))"
"(if(pair?"
" s_741)"
"(let-values(((begin-for-syntax464_0)"
"(let-values(((s_742)"
"(car"
" s_741)))"
" s_742))"
"((e465_0)"
"(let-values(((s_743)"
"(cdr"
" s_741)))"
"(let-values(((s_744)"
"(if(syntax?$1"
" s_743)"
"(syntax-e$1"
" s_743)"
" s_743)))"
"(let-values(((flat-s_54)"
"(to-syntax-list.1"
" s_744)))"
"(if(not"
" flat-s_54)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_83))"
"(let-values()"
" flat-s_54)))))))"
"(values"
" begin-for-syntax464_0"
" e465_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_83)))))"
"(values"
" #t"
" begin-for-syntax462_1"
" e463_1))))))"
"(let-values(((nested-bodys_1)"
"(pass-1-and-2-loop_1"
" e463_0"
"(add1"
" phase_45))))"
"(begin"
"(let-values(((obs_138)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_138"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_138"
" 'next-group)))"
"(void)))"
"(namespace-run-available-modules!"
" m-ns_20"
"(add1"
" phase_45))"
"(eval-nested-bodys"
" nested-bodys_1"
"(add1"
" phase_45)"
" ct-m-ns_0"
" self_31"
" partial-body-ctx_1)"
"(namespace-visit-available-modules!"
" m-ns_20"
" phase_45)"
"(let-values(((obs_139)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_139"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_139"
" 'exit-prim"
"(let-values(((s-nested-bodys_0)"
"(reverse$1"
"(let-values(((lst_131)"
" nested-bodys_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_131)))"
"((letrec-values(((for-loop_160)"
"(lambda(fold-var_122"
" lst_132)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_132)"
"(let-values(((nested-body_0)"
"(unsafe-car"
" lst_132))"
"((rest_65)"
"(unsafe-cdr"
" lst_132)))"
"(let-values(((fold-var_123)"
"(let-values(((fold-var_124)"
" fold-var_122))"
"(let-values(((fold-var_125)"
"(let-values()"
"(cons"
"(let-values()"
"(extract-syntax"
" nested-body_0))"
" fold-var_124))))"
"(values"
" fold-var_125)))))"
"(if(not"
" #f)"
"(for-loop_160"
" fold-var_123"
" rest_65)"
" fold-var_123)))"
" fold-var_122)))))"
" for-loop_160)"
" null"
" lst_131))))))"
"(datum->syntax$1"
" #f"
"(cons"
" begin-for-syntax462_0"
" s-nested-bodys_0)"
" exp-body_7)))))"
"(void)))"
"(cons"
"(semi-parsed-begin-for-syntax3.1"
" exp-body_7"
" nested-bodys_1)"
"(loop_128"
" tail?_53"
" rest-bodys_1))))))))))"
"(if(equal?"
" tmp_65"
" 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_140)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_140"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_140"
" 'enter-prim"
" exp-body_7)"
"(call-expand-observe"
" obs_140"
" 'prim-define-values))))"
"(void)))"
"(values))))"
"(let-values(((ok?_76"
" define-values466_0"
" id467_0"
" rhs468_0)"
"(let-values(((s_745)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_84)"
" s_745))"
"(let-values(((define-values466_1"
" id467_1"
" rhs468_1)"
"(let-values(((s_746)"
"(if(syntax?$1"
" s_745)"
"(syntax-e$1"
" s_745)"
" s_745)))"
"(if(pair?"
" s_746)"
"(let-values(((define-values469_0)"
"(let-values(((s_747)"
"(car"
" s_746)))"
" s_747))"
"((id470_0"
" rhs471_0)"
"(let-values(((s_748)"
"(cdr"
" s_746)))"
"(let-values(((s_749)"
"(if(syntax?$1"
" s_748)"
"(syntax-e$1"
" s_748)"
" s_748)))"
"(if(pair?"
" s_749)"
"(let-values(((id472_0)"
"(let-values(((s_750)"
"(car"
" s_749)))"
"(let-values(((s_526)"
"(if(syntax?$1"
" s_750)"
"(syntax-e$1"
" s_750)"
" s_750)))"
"(let-values(((flat-s_55)"
"(to-syntax-list.1"
" s_526)))"
"(if(not"
" flat-s_55)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_84))"
"(let-values()"
"(let-values(((id_144)"
"(let-values(((lst_415)"
" flat-s_55))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_415)))"
"((letrec-values(((for-loop_315)"
"(lambda(id_145"
" lst_416)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_416)"
"(let-values(((s_751)"
"(unsafe-car"
" lst_416))"
"((rest_244)"
"(unsafe-cdr"
" lst_416)))"
"(let-values(((id_146)"
"(let-values(((id_147)"
" id_145))"
"(let-values(((id_148)"
"(let-values()"
"(let-values(((id482_0)"
"(let-values()"
"(if(let-values(((or-part_393)"
"(if(syntax?$1"
" s_751)"
"(symbol?"
"(syntax-e$1"
" s_751))"
" #f)))"
"(if or-part_393"
" or-part_393"
"(symbol?"
" s_751)))"
" s_751"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_84"
" s_751)))))"
"(cons"
" id482_0"
" id_147)))))"
"(values"
" id_148)))))"
"(if(not"
" #f)"
"(for-loop_315"
" id_146"
" rest_244)"
" id_146)))"
" id_145)))))"
" for-loop_315)"
" null"
" lst_415)))))"
"(reverse$1"
" id_144))))))))"
"((rhs473_0)"
"(let-values(((s_752)"
"(cdr"
" s_749)))"
"(let-values(((s_753)"
"(if(syntax?$1"
" s_752)"
"(syntax-e$1"
" s_752)"
" s_752)))"
"(if(pair?"
" s_753)"
"(let-values(((rhs474_0)"
"(let-values(((s_754)"
"(car"
" s_753)))"
" s_754))"
"(()"
"(let-values(((s_755)"
"(cdr"
" s_753)))"
"(let-values(((s_191)"
"(if(syntax?$1"
" s_755)"
"(syntax-e$1"
" s_755)"
" s_755)))"
"(if(null?"
" s_191)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_84))))))"
"(values"
" rhs474_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_84))))))"
"(values"
" id472_0"
" rhs473_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_84))))))"
"(values"
" define-values469_0"
" id470_0"
" rhs471_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_84)))))"
"(values"
" #t"
" define-values466_1"
" id467_1"
" rhs468_1))))))"
"(let-values(((ids_40)"
"(remove-use-site-scopes"
" id467_0"
" partial-body-ctx_1)))"
"(let-values((()"
"(begin"
"(let-values(((ids475_0)"
" ids_40)"
"((phase476_0)"
" phase_45)"
"((exp-body477_0)"
" exp-body_7))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids475_0"
" phase476_0"
" exp-body477_0"
" #f"
" #f))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((exp-body481_0)"
" exp-body_7))"
"(check-ids-unbound173.1"
" exp-body481_0"
" ids_40"
" phase_45"
" requires+provides_7))"
"(values))))"
"(let-values(((syms_24)"
"(let-values(((frame-id488_0)"
" frame-id_17)"
"((requires+provides489_0)"
" requires+provides_7)"
"((exp-body490_0)"
" exp-body_7))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id488_0"
" exp-body490_0"
" #t"
" requires+provides489_0"
" #t"
" #f"
" #f"
" ids_40"
" defined-syms_11"
" self_31"
" phase_45"
" all-scopes-stx_5))))"
"(begin"
"(add-defined-syms!"
" requires+provides_7"
" syms_24"
" phase_45)"
"(let-values(((obs_141)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_141"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_141"
" 'exit-prim"
"(datum->syntax$1"
" #f"
"(list"
" define-values466_0"
" ids_40"
" rhs468_0)"
" exp-body_7))))"
"(void)))"
"(cons"
"(semi-parsed-define-values2.1"
" exp-body_7"
" syms_24"
" ids_40"
" rhs468_0)"
"(loop_128"
" tail?_53"
" rest-bodys_1))))))))))"
"(if(equal?"
" tmp_65"
" 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_142)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_142"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_142"
" 'enter-prim"
" exp-body_7)"
"(call-expand-observe"
" obs_142"
" 'prim-define-syntaxes)"
"(call-expand-observe"
" obs_142"
" 'prepare-env))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(prepare-next-phase-namespace"
" partial-body-ctx_1)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_143)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_143"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_143"
" 'phase-up)))"
"(void)))"
"(values))))"
"(let-values(((ok?_77"
" define-syntaxes491_0"
" id492_0"
" rhs493_0)"
"(let-values(((s_756)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_85)"
" s_756))"
"(let-values(((define-syntaxes491_1"
" id492_1"
" rhs493_1)"
"(let-values(((s_757)"
"(if(syntax?$1"
" s_756)"
"(syntax-e$1"
" s_756)"
" s_756)))"
"(if(pair?"
" s_757)"
"(let-values(((define-syntaxes494_0)"
"(let-values(((s_758)"
"(car"
" s_757)))"
" s_758))"
"((id495_0"
" rhs496_0)"
"(let-values(((s_759)"
"(cdr"
" s_757)))"
"(let-values(((s_535)"
"(if(syntax?$1"
" s_759)"
"(syntax-e$1"
" s_759)"
" s_759)))"
"(if(pair?"
" s_535)"
"(let-values(((id497_0)"
"(let-values(((s_536)"
"(car"
" s_535)))"
"(let-values(((s_537)"
"(if(syntax?$1"
" s_536)"
"(syntax-e$1"
" s_536)"
" s_536)))"
"(let-values(((flat-s_56)"
"(to-syntax-list.1"
" s_537)))"
"(if(not"
" flat-s_56)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_85))"
"(let-values()"
"(let-values(((id_149)"
"(let-values(((lst_417)"
" flat-s_56))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_417)))"
"((letrec-values(((for-loop_316)"
"(lambda(id_150"
" lst_418)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_418)"
"(let-values(((s_760)"
"(unsafe-car"
" lst_418))"
"((rest_245)"
"(unsafe-cdr"
" lst_418)))"
"(let-values(((id_151)"
"(let-values(((id_152)"
" id_150))"
"(let-values(((id_153)"
"(let-values()"
"(let-values(((id507_0)"
"(let-values()"
"(if(let-values(((or-part_394)"
"(if(syntax?$1"
" s_760)"
"(symbol?"
"(syntax-e$1"
" s_760))"
" #f)))"
"(if or-part_394"
" or-part_394"
"(symbol?"
" s_760)))"
" s_760"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_85"
" s_760)))))"
"(cons"
" id507_0"
" id_152)))))"
"(values"
" id_153)))))"
"(if(not"
" #f)"
"(for-loop_316"
" id_151"
" rest_245)"
" id_151)))"
" id_150)))))"
" for-loop_316)"
" null"
" lst_417)))))"
"(reverse$1"
" id_149))))))))"
"((rhs498_0)"
"(let-values(((s_761)"
"(cdr"
" s_535)))"
"(let-values(((s_762)"
"(if(syntax?$1"
" s_761)"
"(syntax-e$1"
" s_761)"
" s_761)))"
"(if(pair?"
" s_762)"
"(let-values(((rhs499_0)"
"(let-values(((s_763)"
"(car"
" s_762)))"
" s_763))"
"(()"
"(let-values(((s_764)"
"(cdr"
" s_762)))"
"(let-values(((s_765)"
"(if(syntax?$1"
" s_764)"
"(syntax-e$1"
" s_764)"
" s_764)))"
"(if(null?"
" s_765)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_85))))))"
"(values"
" rhs499_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_85))))))"
"(values"
" id497_0"
" rhs498_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_85))))))"
"(values"
" define-syntaxes494_0"
" id495_0"
" rhs496_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_85)))))"
"(values"
" #t"
" define-syntaxes491_1"
" id492_1"
" rhs493_1))))))"
"(let-values(((ids_41)"
"(remove-use-site-scopes"
" id492_0"
" partial-body-ctx_1)))"
"(let-values((()"
"(begin"
"(let-values(((ids500_0)"
" ids_41)"
"((phase501_0)"
" phase_45)"
"((exp-body502_0)"
" exp-body_7))"
"(check-no-duplicate-ids8.1"
" #f"
" #f"
" ids500_0"
" phase501_0"
" exp-body502_0"
" #f"
" #f))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((exp-body506_0)"
" exp-body_7))"
"(check-ids-unbound173.1"
" exp-body506_0"
" ids_41"
" phase_45"
" requires+provides_7))"
"(values))))"
"(let-values(((syms_25)"
"(let-values(((frame-id513_0)"
" frame-id_17)"
"((requires+provides514_0)"
" requires+provides_7)"
"((exp-body515_0)"
" exp-body_7)"
"((temp516_0)"
" #t))"
"(select-defined-syms-and-bind!16.1"
" temp516_0"
" #t"
" frame-id513_0"
" exp-body515_0"
" #t"
" requires+provides514_0"
" #t"
" #f"
" #f"
" ids_41"
" defined-syms_11"
" self_31"
" phase_45"
" all-scopes-stx_5))))"
"(let-values((()"
"(begin"
"(add-defined-syms!"
" requires+provides_7"
" syms_25"
" phase_45)"
"(values))))"
"(let-values(((exp-rhs_6"
" parsed-rhs_2"
" vals_10)"
"(let-values(((temp517_0)"
" rhs493_0)"
"((ids518_0)"
" ids_41)"
"((temp519_0)"
"(let-values(((v_260)"
" partial-body-ctx_1))"
"(let-values(((the-struct_113)"
" v_260))"
"(if(expand-context/outer?"
" the-struct_113)"
"(let-values(((need-eventually-defined521_0)"
" need-eventually-defined_2)"
"((inner522_0)"
"(let-values(((the-struct_114)"
"(root-expand-context/outer-inner"
" v_260)))"
"(if(expand-context/inner?"
" the-struct_114)"
"(let-values(((lifts523_0)"
" #f)"
"((module-lifts524_0)"
" #f)"
"((to-module-lifts525_0)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_114)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_114)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_114)"
"(root-expand-context/inner-defined-syms"
" the-struct_114)"
"(root-expand-context/inner-counter"
" the-struct_114)"
"(root-expand-context/inner-lift-key"
" the-struct_114)"
"(expand-context/inner-to-parsed?"
" the-struct_114)"
"(expand-context/inner-phase"
" the-struct_114)"
"(expand-context/inner-namespace"
" the-struct_114)"
"(expand-context/inner-just-once?"
" the-struct_114)"
"(expand-context/inner-module-begin-k"
" the-struct_114)"
"(expand-context/inner-allow-unbound?"
" the-struct_114)"
"(expand-context/inner-in-local-expand?"
" the-struct_114)"
"(expand-context/inner-stops"
" the-struct_114)"
"(expand-context/inner-declared-submodule-names"
" the-struct_114)"
" lifts523_0"
"(expand-context/inner-lift-envs"
" the-struct_114)"
" module-lifts524_0"
"(expand-context/inner-require-lifts"
" the-struct_114)"
" to-module-lifts525_0"
"(expand-context/inner-requires+provides"
" the-struct_114)"
"(expand-context/inner-observer"
" the-struct_114)"
"(expand-context/inner-for-serializable?"
" the-struct_114)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_114)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                     \"expand-context/inner?\""
" the-struct_114)))))"
"(expand-context/outer1.1"
" inner522_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_113)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_113)"
"(root-expand-context/outer-frame-id"
" the-struct_113)"
"(expand-context/outer-context"
" the-struct_113)"
"(expand-context/outer-env"
" the-struct_113)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_113)"
"(expand-context/outer-scopes"
" the-struct_113)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_113)"
"(expand-context/outer-binding-layer"
" the-struct_113)"
"(expand-context/outer-reference-records"
" the-struct_113)"
"(expand-context/outer-only-immediate?"
" the-struct_113)"
" need-eventually-defined521_0"
"(expand-context/outer-current-introduction-scopes"
" the-struct_113)"
"(expand-context/outer-name"
" the-struct_113)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                   \"expand-context/outer?\""
" the-struct_113)))))"
"((temp520_0)"
" #f))"
"(expand+eval-for-syntaxes-binding63.1"
" temp520_0"
" #t"
" temp517_0"
" ids518_0"
" temp519_0))))"
"(let-values((()"
"(begin"
"(let-values(((lst_419)"
" syms_25)"
"((lst_420)"
" vals_10)"
"((lst_421)"
" ids_41))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_419)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_420)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_421)))"
"((letrec-values(((for-loop_317)"
"(lambda(lst_422"
" lst_423"
" lst_424)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_422)"
"(if(pair?"
" lst_423)"
"(pair?"
" lst_424)"
" #f)"
" #f)"
"(let-values(((sym_105)"
"(unsafe-car"
" lst_422))"
"((rest_246)"
"(unsafe-cdr"
" lst_422))"
"((val_86)"
"(unsafe-car"
" lst_423))"
"((rest_247)"
"(unsafe-cdr"
" lst_423))"
"((id_154)"
"(unsafe-car"
" lst_424))"
"((rest_248)"
"(unsafe-cdr"
" lst_424)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_86"
" id_154"
" phase_45"
" partial-body-ctx_1)"
"(namespace-set-transformer!"
" m-ns_20"
" phase_45"
" sym_105"
" val_86)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_317"
" rest_246"
" rest_247"
" rest_248)"
"(values))))"
"(values))))))"
" for-loop_317)"
" lst_419"
" lst_420"
" lst_421)))"
"(values))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_144)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_144"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_144"
" 'exit-prim"
"(datum->syntax$1"
" #f"
"(list"
" define-syntaxes491_0"
" ids_41"
" exp-rhs_6)))))"
"(void)))"
"(values))))"
"(let-values(((parsed-body_0)"
"(parsed-define-syntaxes20.1"
"(keep-properties-only"
" exp-body_7)"
" ids_41"
" syms_25"
" parsed-rhs_2)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_1)"
" parsed-body_0"
"(expanded+parsed1.1"
"(let-values(((exp-body526_0)"
" exp-body_7)"
"((temp527_0)"
"(list"
" define-syntaxes491_0"
" ids_41"
" exp-rhs_6)))"
"(rebuild5.1"
" #f"
" #f"
" exp-body526_0"
" temp527_0))"
" parsed-body_0))"
"(loop_128"
" tail?_53"
" rest-bodys_1)))))))))))))))))"
"(if(equal?"
" tmp_65"
" '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_145)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_145"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_145"
" 'enter-prim"
" exp-body_7)"
"(call-expand-observe"
" obs_145"
" 'prim-require))))"
"(void)))"
"(values))))"
"(let-values(((ready-body_0)"
"(remove-use-site-scopes"
" disarmed-exp-body_1"
" partial-body-ctx_1)))"
"(let-values(((ok?_78"
" #%require528_0"
" req529_0)"
"(let-values(((s_766)"
" ready-body_0))"
"(let-values(((orig-s_86)"
" s_766))"
"(let-values(((#%require528_1"
" req529_1)"
"(let-values(((s_767)"
"(if(syntax?$1"
" s_766)"
"(syntax-e$1"
" s_766)"
" s_766)))"
"(if(pair?"
" s_767)"
"(let-values(((#%require530_0)"
"(let-values(((s_768)"
"(car"
" s_767)))"
" s_768))"
"((req531_0)"
"(let-values(((s_769)"
"(cdr"
" s_767)))"
"(let-values(((s_770)"
"(if(syntax?$1"
" s_769)"
"(syntax-e$1"
" s_769)"
" s_769)))"
"(let-values(((flat-s_57)"
"(to-syntax-list.1"
" s_770)))"
"(if(not"
" flat-s_57)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_86))"
"(let-values()"
" flat-s_57)))))))"
"(values"
" #%require530_0"
" req531_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_86)))))"
"(values"
" #t"
" #%require528_1"
" req529_1))))))"
"(begin"
"(let-values(((temp532_0)"
" req529_0)"
"((exp-body533_0)"
" exp-body_7)"
"((self534_0)"
" self_31)"
"((m-ns535_0)"
" m-ns_20)"
"((phase536_0)"
" phase_45)"
"((phase537_0)"
" phase_45)"
"((requires+provides538_0)"
" requires+provides_7)"
"((declared-submodule-names539_0)"
" declared-submodule-names_4)"
"((temp540_0)"
" 'module))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names539_0"
" #t"
" #f"
" #f"
" phase537_0"
" #t"
" #f"
" #f"
" self534_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp540_0"
" temp532_0"
" exp-body533_0"
" m-ns535_0"
" phase536_0"
" requires+provides538_0))"
"(let-values(((obs_146)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_146"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_146"
" 'exit-prim"
" ready-body_0)))"
"(void)))"
"(cons"
" exp-body_7"
"(loop_128"
" tail?_53"
" rest-bodys_1)))))))"
"(if(equal?"
" tmp_65"
" '#%provide)"
"(let-values()"
"(cons"
" exp-body_7"
"(loop_128"
" tail?_53"
" rest-bodys_1)))"
"(if(equal?"
" tmp_65"
" 'module)"
"(let-values()"
"(let-values(((ready-body_1)"
"(remove-use-site-scopes"
" exp-body_7"
" partial-body-ctx_1)))"
"(let-values(((submod_2)"
"(let-values(((temp544_0)"
" #f)"
"((declared-submodule-names545_0)"
" declared-submodule-names_4)"
"((mpis-to-reset546_0)"
" mpis-to-reset_1)"
"((compiled-submodules547_0)"
" compiled-submodules_2)"
"((modules-being-compiled548_0)"
" modules-being-compiled_4))"
"(expand-submodule197.1"
" compiled-submodules547_0"
" declared-submodule-names545_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp544_0"
" #f"
" #f"
" modules-being-compiled548_0"
" mpis-to-reset546_0"
" ready-body_1"
" self_31"
" partial-body-ctx_1))))"
"(cons"
" submod_2"
"(loop_128"
" tail?_53"
" rest-bodys_1)))))"
"(if(equal?"
" tmp_65"
" 'module*)"
"(let-values()"
"(begin"
"(let-values(((obs_147)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_147"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_147"
" 'enter-prim"
" exp-body_7)"
"(call-expand-observe"
" obs_147"
" 'prim-submodule*)"
"(call-expand-observe"
" obs_147"
" 'exit-prim"
" exp-body_7))))"
"(void)))"
"(cons"
" exp-body_7"
"(loop_128"
" tail?_53"
" rest-bodys_1))))"
"(if(equal?"
" tmp_65"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_79"
" #%declare549_0"
" kw550_0)"
"(let-values(((s_561)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_87)"
" s_561))"
"(let-values(((#%declare549_1"
" kw550_1)"
"(let-values(((s_563)"
"(if(syntax?$1"
" s_561)"
"(syntax-e$1"
" s_561)"
" s_561)))"
"(if(pair?"
" s_563)"
"(let-values(((#%declare551_0)"
"(let-values(((s_565)"
"(car"
" s_563)))"
" s_565))"
"((kw552_0)"
"(let-values(((s_566)"
"(cdr"
" s_563)))"
"(let-values(((s_567)"
"(if(syntax?$1"
" s_566)"
"(syntax-e$1"
" s_566)"
" s_566)))"
"(let-values(((flat-s_58)"
"(to-syntax-list.1"
" s_567)))"
"(if(not"
" flat-s_58)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_87))"
"(let-values()"
" flat-s_58)))))))"
"(values"
" #%declare551_0"
" kw552_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_87)))))"
"(values"
" #t"
" #%declare549_1"
" kw550_1))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_425)"
" kw550_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_425)))"
"((letrec-values(((for-loop_318)"
"(lambda(lst_426)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_426)"
"(let-values(((kw_1)"
"(unsafe-car"
" lst_426))"
"((rest_249)"
"(unsafe-cdr"
" lst_426)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_1))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"expected a keyword\""
" exp-body_7"
" kw_1)))"
"(if(memq"
"(syntax-e$1"
" kw_1)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"not an allowed declaration keyword\""
" exp-body_7"
" kw_1)))"
"(if(hash-ref"
" declared-keywords_1"
"(syntax-e$1"
" kw_1)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"keyword declared multiple times\""
" exp-body_7"
" kw_1))"
"(void))"
"(hash-set!"
" declared-keywords_1"
"(syntax-e$1"
" kw_1)"
" kw_1)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_318"
" rest_249)"
"(values))))"
"(values))))))"
" for-loop_318)"
" lst_425)))"
"(values))))"
"(let-values()"
"(let-values(((parsed-body_1)"
"(parsed-#%declare22.1"
" exp-body_7)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_1)"
" parsed-body_1"
"(expanded+parsed1.1"
" exp-body_7"
" parsed-body_1))"
"(loop_128"
" tail?_53"
" rest-bodys_1)))))))"
"(let-values()"
"(cons"
" exp-body_7"
"(loop_128"
" tail?_53"
" rest-bodys_1)))))))))))))))))"
"(let-values(((l_84)"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_1))"
" lifted-defns_0"
"(loop_128"
" #f"
"(add-post-expansion-scope"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_1))"
" partial-body-ctx_1)))))"
"(if(null? l_84)"
"(finish_2)"
"(append"
" l_84"
"(finish_2)))))))))))))))))"
" loop_128)"
" #t"
" bodys_20))))))))))))))))))))))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_32 frame-id_18 inside-scope_2 all-scopes-stx_6 defined-syms_12 requires+provides_8)"
"(begin"
"(lambda(ids_42 rhs_23 phase_151)"
"(let-values(((scoped-ids_0)"
"(reverse$1"
"(let-values(((lst_427) ids_42))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_427)))"
"((letrec-values(((for-loop_319)"
"(lambda(fold-var_363 lst_428)"
"(begin"
" 'for-loop"
"(if(pair? lst_428)"
"(let-values(((id_155)(unsafe-car lst_428))"
"((rest_250)(unsafe-cdr lst_428)))"
"(let-values(((fold-var_364)"
"(let-values(((fold-var_365) fold-var_363))"
"(let-values(((fold-var_366)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_155"
" inside-scope_2))"
" fold-var_365))))"
"(values fold-var_366)))))"
"(if(not #f)(for-loop_319 fold-var_364 rest_250) fold-var_364)))"
" fold-var_363)))))"
" for-loop_319)"
" null"
" lst_427))))))"
"(let-values(((syms_26)"
"(let-values(((frame-id558_0) frame-id_18)((requires+provides559_0) requires+provides_8))"
"(select-defined-syms-and-bind!16.1"
" #f"
" #f"
" frame-id558_0"
" #f"
" #f"
" requires+provides559_0"
" #t"
" #f"
" #f"
" scoped-ids_0"
" defined-syms_12"
" self_32"
" phase_151"
" all-scopes-stx_6))))"
"(let-values(((s_285)"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_151) 'define-values)"
" scoped-ids_0"
" rhs_23))"
" inside-scope_2)))"
"(values scoped-ids_0(semi-parsed-define-values2.1 s_285 syms_26 scoped-ids_0 rhs_23)))))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_23 ctx_111)"
"(begin"
"(let-values(((sc_34)(root-expand-context-post-expansion-scope ctx_111)))"
"(if sc_34"
"(reverse$1"
"(let-values(((lst_429) bodys_23))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_429)))"
"((letrec-values(((for-loop_320)"
"(lambda(fold-var_367 lst_430)"
"(begin"
" 'for-loop"
"(if(pair? lst_430)"
"(let-values(((body_23)(unsafe-car lst_430))((rest_251)(unsafe-cdr lst_430)))"
"(let-values(((fold-var_368)"
"(let-values(((fold-var_369) fold-var_367))"
"(let-values(((fold-var_370)"
"(let-values()"
"(cons"
"(let-values()(add-scope body_23 sc_34))"
" fold-var_369))))"
"(values fold-var_370)))))"
"(if(not #f)(for-loop_320 fold-var_368 rest_251) fold-var_368)))"
" fold-var_367)))))"
" for-loop_320)"
" null"
" lst_429))))"
" bodys_23)))))"
"(define-values"
"(finish-expanding-body-expressons99.1)"
"(lambda(compiled-submodules88_0"
" ctx85_0"
" declared-submodule-names87_0"
" modules-being-compiled89_0"
" mpis-to-reset90_0"
" phase84_0"
" self86_0"
" partially-expanded-bodys98_0)"
"(begin"
" 'finish-expanding-body-expressons99"
"(let-values(((partially-expanded-bodys_1) partially-expanded-bodys98_0))"
"(let-values(((phase_152) phase84_0))"
"(let-values(((body-ctx_7) ctx85_0))"
"(let-values(((self_33) self86_0))"
"(let-values(((declared-submodule-names_5) declared-submodule-names87_0))"
"(let-values(((compiled-submodules_3) compiled-submodules88_0))"
"(let-values(((modules-being-compiled_5) modules-being-compiled89_0))"
"(let-values(((mpis-to-reset_2) mpis-to-reset90_0))"
"(let-values()"
"((letrec-values(((loop_129)"
"(lambda(tail?_54 bodys_24)"
"(begin"
" 'loop"
"(if(null? bodys_24)"
"(let-values()"
"(if(if tail?_54(not(zero? phase_152)) #f)"
"(let-values()"
"(begin"
"(let-values(((obs_148)(expand-context-observer body-ctx_7)))"
"(if obs_148"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_148"
" 'module-lift-end-loop"
" '())))"
"(void)))"
" null))"
"(if tail?_54"
"(let-values()"
"(let-values(((bodys_25)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_7))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_7)))))"
"(if(null? bodys_25)"
"(let-values()"
"(begin"
"(let-values(((obs_149)"
"(expand-context-observer body-ctx_7)))"
"(if obs_149"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_149"
" 'module-lift-end-loop"
" '())))"
"(void)))"
" null))"
"(let-values()"
"(loop_129"
" #t"
"(add-post-expansion-scope bodys_25 body-ctx_7))))))"
"(let-values() null))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_150)"
"(expand-context-observer body-ctx_7)))"
"(if obs_150"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_150 'next)))"
"(void)))"
"(values))))"
"(let-values(((body_24)(car bodys_24)))"
"(let-values(((rest-bodys_2)(cdr bodys_24)))"
"(let-values(((exp-body_8)"
"(if(let-values(((or-part_395)"
"(parsed? body_24)))"
"(if or-part_395"
" or-part_395"
"(let-values(((or-part_396)"
"(expanded+parsed? body_24)))"
"(if or-part_396"
" or-part_396"
"(semi-parsed-begin-for-syntax?"
" body_24)))))"
"(let-values() body_24)"
"(if(semi-parsed-define-values? body_24)"
"(let-values()"
"(let-values(((ids_43)"
"(semi-parsed-define-values-ids"
" body_24)))"
"(let-values(((rhs-ctx_2)"
"(as-named-context"
"(as-expression-context"
" body-ctx_7)"
" ids_43)))"
"(let-values(((syms_27)"
"(semi-parsed-define-values-syms"
" body_24)))"
"(let-values(((s_300)"
"(semi-parsed-define-values-s"
" body_24)))"
"(let-values(((ok?_80"
" define-values560_0"
" _561_0"
" _562_0)"
"(let-values(((s_771)"
"(syntax-disarm$1"
" s_300)))"
"(if(if(not"
"(expand-context-to-parsed?"
" rhs-ctx_2))"
" #t"
" #f)"
"(let-values(((orig-s_88)"
" s_771))"
"(let-values(((define-values560_1"
" _561_1"
" _562_1)"
"(let-values(((s_772)"
"(if(syntax?$1"
" s_771)"
"(syntax-e$1"
" s_771)"
" s_771)))"
"(if(pair?"
" s_772)"
"(let-values(((define-values563_0)"
"(let-values(((s_603)"
"(car"
" s_772)))"
" s_603))"
"((_564_0"
" _565_0)"
"(let-values(((s_773)"
"(cdr"
" s_772)))"
"(let-values(((s_774)"
"(if(syntax?$1"
" s_773)"
"(syntax-e$1"
" s_773)"
" s_773)))"
"(if(pair?"
" s_774)"
"(let-values(((_566_0)"
"(let-values(((s_606)"
"(car"
" s_774)))"
" s_606))"
"((_567_0)"
"(let-values(((s_775)"
"(cdr"
" s_774)))"
"(let-values(((s_607)"
"(if(syntax?$1"
" s_775)"
"(syntax-e$1"
" s_775)"
" s_775)))"
"(if(pair?"
" s_607)"
"(let-values(((_568_0)"
"(let-values(((s_609)"
"(car"
" s_607)))"
" s_609))"
"(()"
"(let-values(((s_776)"
"(cdr"
" s_607)))"
"(let-values(((s_777)"
"(if(syntax?$1"
" s_776)"
"(syntax-e$1"
" s_776)"
" s_776)))"
"(if(null?"
" s_777)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_88))))))"
"(values"
" _568_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_88))))))"
"(values"
" _566_0"
" _567_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_88))))))"
"(values"
" define-values563_0"
" _564_0"
" _565_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_88)))))"
"(values"
" #t"
" define-values560_1"
" _561_1"
" _562_1)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((rebuild-s_15)"
"(let-values(((temp571_0)"
" #t))"
"(keep-as-needed74.1"
" #f"
" #f"
" #f"
" #f"
" temp571_0"
" #t"
" rhs-ctx_2"
" s_300))))"
"(let-values((()"
"(begin"
"(log-defn-enter"
" body-ctx_7"
" body_24)"
"(values))))"
"(let-values(((exp-rhs_7)"
"(let-values()"
"(let-values(((temp572_0)"
"(semi-parsed-define-values-rhs"
" body_24))"
"((rhs-ctx573_0)"
" rhs-ctx_2))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" temp572_0"
" rhs-ctx573_0)))))"
"(let-values((()"
"(begin"
"(log-defn-exit"
" body-ctx_7"
" body_24"
" exp-rhs_7)"
"(values))))"
"(let-values(((comp-form_0)"
"(parsed-define-values19.1"
" rebuild-s_15"
" ids_43"
" syms_27"
"(if(expand-context-to-parsed?"
" rhs-ctx_2)"
" exp-rhs_7"
"(let-values(((exp-rhs574_0)"
" exp-rhs_7)"
"((temp575_0)"
"(as-to-parsed-context"
" rhs-ctx_2)))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" exp-rhs574_0"
" temp575_0))))))"
"(if(expand-context-to-parsed?"
" rhs-ctx_2)"
" comp-form_0"
"(expanded+parsed1.1"
"(let-values(((rebuild-s576_0)"
" rebuild-s_15)"
"((temp577_0)"
"(list"
" define-values560_0"
" ids_43"
" exp-rhs_7)))"
"(rebuild5.1"
" #f"
" #f"
" rebuild-s576_0"
" temp577_0))"
" comp-form_0)))))))))))))"
"(let-values()"
"(let-values(((disarmed-body_0)"
"(syntax-disarm$1 body_24)))"
"(let-values(((tmp_66)"
"(core-form-sym"
" disarmed-body_0"
" phase_152)))"
"(if(if(equal? tmp_66 '#%require)"
" #t"
"(if(equal? tmp_66 '#%provide)"
" #t"
"(equal? tmp_66 'module*)))"
"(let-values() body_24)"
"(let-values()"
"(let-values()"
"(let-values(((exp-body_9)"
"(let-values(((body578_0)"
" body_24)"
"((temp579_0)"
"(as-expression-context"
" body-ctx_7)))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" body578_0"
" temp579_0))))"
"(if(expand-context-to-parsed?"
" body-ctx_7)"
" exp-body_9"
"(expanded+parsed1.1"
" exp-body_9"
"(let-values(((exp-body580_0)"
" exp-body_9)"
"((temp581_0)"
"(as-to-parsed-context"
" body-ctx_7)))"
"(expand7.1"
" #f"
" #f"
" #f"
" #f"
" exp-body580_0"
" temp581_0)))))))))))))))"
"(let-values(((lifted-defns_1)"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_7))))"
"(let-values(((lifted-requires_0)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_7))))"
"(let-values(((lifted-modules_0)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts body-ctx_7))))"
"(let-values(((no-lifts?_0)"
"(if(null? lifted-defns_1)"
"(if(null? lifted-modules_0)"
"(null? lifted-requires_0)"
" #f)"
" #f)))"
"(let-values((()"
"(begin"
"(if no-lifts?_0"
"(void)"
"(let-values()"
"(let-values(((obs_151)"
"(expand-context-observer"
" body-ctx_7)))"
"(if obs_151"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_151"
" 'module-lift-loop"
"(append"
" lifted-requires_0"
"(lifted-defns-extract-syntax"
" lifted-defns_1)"
"(add-post-expansion-scope"
" lifted-modules_0"
" body-ctx_7)))))"
"(void)))))"
"(values))))"
"(let-values(((exp-lifted-modules_0)"
"(let-values(((mpis-to-reset586_0)"
" mpis-to-reset_2)"
"((declared-submodule-names587_0)"
" declared-submodule-names_5)"
"((compiled-submodules588_0)"
" compiled-submodules_3)"
"((modules-being-compiled589_0)"
" modules-being-compiled_5))"
"(expand-non-module*-submodules212.1"
" compiled-submodules588_0"
" declared-submodule-names587_0"
" modules-being-compiled589_0"
" mpis-to-reset586_0"
" lifted-modules_0"
" phase_152"
" self_33"
" body-ctx_7))))"
"(let-values(((exp-lifted-defns_0)"
"(loop_129 #f lifted-defns_1)))"
"(begin"
"(if no-lifts?_0"
"(void)"
"(let-values()"
"(let-values(((obs_152)"
"(expand-context-observer"
" body-ctx_7)))"
"(if obs_152"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_152"
" 'next)))"
"(void)))))"
"(append"
" lifted-requires_0"
" exp-lifted-defns_0"
" exp-lifted-modules_0"
"(cons"
" exp-body_8"
"(loop_129"
" tail?_54"
" rest-bodys_2)))))))))))))))))))))"
" loop_129)"
" #t"
" partially-expanded-bodys_1)))))))))))))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_3 self_34 ctx_112)"
"(begin"
"(begin"
"(let-values(((ht_166) need-eventually-defined_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_166)))"
"((letrec-values(((for-loop_321)"
"(lambda(i_193)"
"(begin"
" 'for-loop"
"(if i_193"
"(let-values(((phase_153 l_85)(hash-iterate-key+value ht_166 i_193)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((lst_431) l_85))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_431)))"
"((letrec-values(((for-loop_322)"
"(lambda(lst_432)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_432)"
"(let-values(((id_156)"
"(unsafe-car"
" lst_432))"
"((rest_252)"
"(unsafe-cdr"
" lst_432)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_94)"
"(let-values(((id590_0)"
" id_156)"
"((phase591_0)"
" phase_153))"
"(resolve+shift30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" id590_0"
" phase591_0))))"
"(if(if b_94"
"(if(module-binding?"
" b_94)"
"(if(eq?"
"(module-binding-sym"
" b_94)"
"(syntax-e$1"
" id_156))"
"(eq?"
"(module-binding-module"
" b_94)"
" self_34)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"reference to an unbound identifier\""
" id_156"
" #f"
" null"
"(syntax-debug-info-string"
" id_156"
" ctx_112))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_322"
" rest_252)"
"(values))))"
"(values))))))"
" for-loop_322)"
" lst_431)))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_321(hash-iterate-next ht_166 i_193))(values))))"
"(values))))))"
" for-loop_321)"
"(hash-iterate-first ht_166))))"
"(void)))))"
"(define-values"
"(resolve-provides115.1)"
"(lambda(ctx107_1"
" declared-submodule-names103_0"
" namespace104_0"
" phase105_0"
" requires-and-provides102_0"
" self106_0"
" expression-expanded-bodys114_0)"
"(begin"
" 'resolve-provides115"
"(let-values(((expression-expanded-bodys_1) expression-expanded-bodys114_0))"
"(let-values(((requires+provides_9) requires-and-provides102_0))"
"(let-values(((declared-submodule-names_6) declared-submodule-names103_0))"
"(let-values(((m-ns_21) namespace104_0))"
"(let-values(((phase_154) phase105_0))"
"(let-values(((self_35) self106_0))"
"(let-values(((ctx_113) ctx107_1))"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_130)"
"(lambda(bodys_26 phase_155)"
"(begin"
" 'loop"
"(if(null? bodys_26)"
"(let-values() null)"
"(if(let-values(((or-part_397)(parsed?(car bodys_26))))"
"(if or-part_397 or-part_397(expanded+parsed?(car bodys_26))))"
"(let-values()"
"(cons(car bodys_26)(loop_130(cdr bodys_26) phase_155)))"
"(if(semi-parsed-begin-for-syntax?(car bodys_26))"
"(let-values()"
"(let-values(((nested-bodys_2)"
"(loop_130"
"(semi-parsed-begin-for-syntax-body(car bodys_26))"
"(add1 phase_155))))"
"(cons"
"(let-values(((the-struct_115)(car bodys_26)))"
"(if(semi-parsed-begin-for-syntax? the-struct_115)"
"(let-values(((body592_0) nested-bodys_2))"
"(semi-parsed-begin-for-syntax3.1"
"(semi-parsed-begin-for-syntax-s the-struct_115)"
" body592_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                              \"semi-parsed-begin-for-syntax?\""
" the-struct_115)))"
"(loop_130(cdr bodys_26) phase_155))))"
"(let-values()"
"(let-values(((disarmed-body_1)(syntax-disarm$1(car bodys_26))))"
"(let-values(((tmp_67)"
"(core-form-sym disarmed-body_1 phase_155)))"
"(if(equal? tmp_67 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_153)"
"(expand-context-observer"
" ctx_113)))"
"(if obs_153"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_153"
" 'enter-prim"
"(car bodys_26))"
"(call-expand-observe"
" obs_153"
" 'prim-provide))))"
"(void)))"
"(values))))"
"(let-values(((ok?_81 #%provide593_0 spec594_0)"
"(let-values(((s_622) disarmed-body_1))"
"(let-values(((orig-s_89) s_622))"
"(let-values(((#%provide593_1"
" spec594_1)"
"(let-values(((s_625)"
"(if(syntax?$1"
" s_622)"
"(syntax-e$1"
" s_622)"
" s_622)))"
"(if(pair? s_625)"
"(let-values(((#%provide595_0)"
"(let-values(((s_778)"
"(car"
" s_625)))"
" s_778))"
"((spec596_0)"
"(let-values(((s_779)"
"(cdr"
" s_625)))"
"(let-values(((s_780)"
"(if(syntax?$1"
" s_779)"
"(syntax-e$1"
" s_779)"
" s_779)))"
"(let-values(((flat-s_59)"
"(to-syntax-list.1"
" s_780)))"
"(if(not"
" flat-s_59)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_89))"
"(let-values()"
" flat-s_59)))))))"
"(values"
" #%provide595_0"
" spec596_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_89)))))"
"(values"
" #t"
" #%provide593_1"
" spec594_1))))))"
"(let-values(((track-stxes_10 specs_2)"
"(parse-and-expand-provides!"
" spec594_0"
"(car bodys_26)"
" requires+provides_9"
" self_35"
" phase_155"
"(let-values(((v_261) ctx_113))"
"(let-values(((the-struct_116)"
" v_261))"
"(if(expand-context/outer?"
" the-struct_116)"
"(let-values(((context597_0)"
" 'top-level)"
"((inner598_0)"
"(let-values(((the-struct_117)"
"(root-expand-context/outer-inner"
" v_261)))"
"(if(expand-context/inner?"
" the-struct_117)"
"(let-values(((phase599_0)"
" phase_155)"
"((namespace600_0)"
"(namespace->namespace-at-phase"
" m-ns_21"
" phase_155))"
"((requires+provides601_0)"
" requires+provides_9)"
"((declared-submodule-names602_0)"
" declared-submodule-names_6))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_117)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_117)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_117)"
"(root-expand-context/inner-defined-syms"
" the-struct_117)"
"(root-expand-context/inner-counter"
" the-struct_117)"
"(root-expand-context/inner-lift-key"
" the-struct_117)"
"(expand-context/inner-to-parsed?"
" the-struct_117)"
" phase599_0"
" namespace600_0"
"(expand-context/inner-just-once?"
" the-struct_117)"
"(expand-context/inner-module-begin-k"
" the-struct_117)"
"(expand-context/inner-allow-unbound?"
" the-struct_117)"
"(expand-context/inner-in-local-expand?"
" the-struct_117)"
"(expand-context/inner-stops"
" the-struct_117)"
" declared-submodule-names602_0"
"(expand-context/inner-lifts"
" the-struct_117)"
"(expand-context/inner-lift-envs"
" the-struct_117)"
"(expand-context/inner-module-lifts"
" the-struct_117)"
"(expand-context/inner-require-lifts"
" the-struct_117)"
"(expand-context/inner-to-module-lifts"
" the-struct_117)"
" requires+provides601_0"
"(expand-context/inner-observer"
" the-struct_117)"
"(expand-context/inner-for-serializable?"
" the-struct_117)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_117)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                          \"expand-context/inner?\""
" the-struct_117)))))"
"(expand-context/outer1.1"
" inner598_0"
"(root-expand-context/outer-post-expansion-scope"
" the-struct_116)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_116)"
"(root-expand-context/outer-frame-id"
" the-struct_116)"
" context597_0"
"(expand-context/outer-env"
" the-struct_116)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_116)"
"(expand-context/outer-scopes"
" the-struct_116)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_116)"
"(expand-context/outer-binding-layer"
" the-struct_116)"
"(expand-context/outer-reference-records"
" the-struct_116)"
"(expand-context/outer-only-immediate?"
" the-struct_116)"
"(expand-context/outer-need-eventually-defined"
" the-struct_116)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_116)"
"(expand-context/outer-name"
" the-struct_116)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                        \"expand-context/outer?\""
" the-struct_116)))))))"
"(begin"
"(let-values(((obs_154)"
"(expand-context-observer ctx_113)))"
"(if obs_154"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_154 'exit-prim)))"
"(void)))"
"(if(expand-context-to-parsed? ctx_113)"
"(let-values()"
"(loop_130(cdr bodys_26) phase_155))"
"(let-values()"
"(cons"
"(syntax-track-origin*"
" track-stxes_10"
"(let-values(((temp603_0)(car bodys_26))"
"((temp604_0)"
"(list*"
" #%provide593_0"
" specs_2)))"
"(rebuild5.1 #f #f temp603_0 temp604_0)))"
"(loop_130(cdr bodys_26) phase_155)))))))))"
"(let-values()"
"(cons"
"(car bodys_26)"
"(loop_130(cdr bodys_26) phase_155))))))))))))))"
" loop_130)"
" expression-expanded-bodys_1"
" phase_154)))))))))))))"
"(define-values"
"(declare-module-for-expansion139.1)"
"(lambda(ctx125_0"
" enclosing123_0"
" fill127_0"
" module-name-id118_0"
" modules-being-compiled126_0"
" namespace121_0"
" rebuild-s119_0"
" requires-and-provides120_0"
" root-ctx124_0"
" self122_0"
" fully-expanded-bodys-except-post-submodules138_0)"
"(begin"
" 'declare-module-for-expansion139"
"(let-values(((fully-expanded-bodys-except-post-submodules_1) fully-expanded-bodys-except-post-submodules138_0))"
"(let-values(((module-name-id_0) module-name-id118_0))"
"(let-values(((rebuild-s_16) rebuild-s119_0))"
"(let-values(((requires+provides_10) requires-and-provides120_0))"
"(let-values(((m-ns_22) namespace121_0))"
"(let-values(((self_36) self122_0))"
"(let-values(((enclosing-self_3) enclosing123_0))"
"(let-values(((root-ctx_7) root-ctx124_0))"
"(let-values(((ctx_114) ctx125_0))"
"(let-values(((modules-being-compiled_6) modules-being-compiled126_0))"
"(let-values(((compiled-module-box_1) fill127_0))"
"(let-values()"
"(let-values(((requires_7 provides_14)"
"(extract-requires-and-provides requires+provides_10 self_36 self_36)))"
"(let-values(((parsed-mod_0)"
"(parsed-module25.1"
" rebuild-s_16"
" #f"
" module-name-id_0"
" self_36"
" requires_7"
" provides_14"
"(requires+provides-all-bindings-simple? requires+provides_10)"
"(root-expand-context-encode-for-module root-ctx_7 self_36 self_36)"
"(parsed-only fully-expanded-bodys-except-post-submodules_1)"
" #f"
"(hasheq))))"
"(let-values(((module-name_2)"
"(1/module-path-index-resolve"
"(let-values(((or-part_398) enclosing-self_3))"
"(if or-part_398 or-part_398 self_36)))))"
"(let-values(((compiled-module_0)"
"(let-values(((temp606_0)"
"(let-values(((m-ns610_0) m-ns_22)"
"((enclosing-self611_0) enclosing-self_3)"
"((temp612_0)"
"(if enclosing-self_3"
"(1/resolved-module-path-name"
" module-name_2)"
" #f)))"
"(make-compile-context14.1"
" temp612_0"
" #t"
" #f"
" #f"
" enclosing-self611_0"
" #t"
" m-ns610_0"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp607_0)(expand-context-for-serializable? ctx_114))"
"((modules-being-compiled608_0) modules-being-compiled_6)"
"((temp609_0) #f))"
"(compile-module13.1"
" #f"
" #f"
" modules-being-compiled608_0"
" #t"
" temp609_0"
" #t"
" temp607_0"
" #t"
" #f"
" #f"
" parsed-mod_0"
" temp606_0))))"
"(let-values((()"
"(begin"
"(set-box! compiled-module-box_1 compiled-module_0)"
"(values))))"
"(let-values(((root-module-name_0)"
"(resolved-module-path-root-name module-name_2)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_22"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_0))"
"(let-values()"
"(let-values(((temp614_0) #f))"
"(eval-module8.1"
" #f"
" #f"
" #f"
" #f"
" temp614_0"
" #t"
" compiled-module_0)))))))))))))))))))))))))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_781 root-ctx_8 orig-self_1 new-self_2)"
"(begin"
"(let-values(((s_782)"
"(syntax-property$1 s_781 'module-body-context(root-expand-context-all-scopes-stx root-ctx_8))))"
"(let-values(((s_783)"
"(syntax-property$1"
" s_782"
" 'module-body-inside-context"
"(add-scope empty-syntax(root-expand-context-post-expansion-scope root-ctx_8)))))"
" s_783)))))"
"(define-values"
"(expand-post-submodules165.1)"
"(lambda(all-scopes-s147_0"
" compiled-submodules150_0"
" ctx152_0"
" declare-enclosing142_0"
" declared-submodule-names149_0"
" enclosing-is-cross-phase-persistent?146_0"
" modules-being-compiled151_0"
" mpis-to-reset148_0"
" phase143_0"
" requires-and-provides145_0"
" self144_0"
" fully-expanded-bodys-except-post-submodules164_0)"
"(begin"
" 'expand-post-submodules165"
"(let-values(((fully-expanded-bodys-except-post-submodules_2) fully-expanded-bodys-except-post-submodules164_0))"
"(let-values(((declare-enclosing-module_1) declare-enclosing142_0))"
"(let-values(((phase_156) phase143_0))"
"(let-values(((self_37) self144_0))"
"(let-values(((requires+provides_11) requires-and-provides145_0))"
"(let-values(((enclosing-is-cross-phase-persistent?_1) enclosing-is-cross-phase-persistent?146_0))"
"(let-values(((all-scopes-s_1) all-scopes-s147_0))"
"(let-values(((mpis-to-reset_3) mpis-to-reset148_0))"
"(let-values(((declared-submodule-names_7) declared-submodule-names149_0))"
"(let-values(((compiled-submodules_4) compiled-submodules150_0))"
"(let-values(((modules-being-compiled_7) modules-being-compiled151_0))"
"(let-values(((submod-ctx_1) ctx152_0))"
"(let-values()"
"((letrec-values(((loop_131)"
"(lambda(bodys_27 phase_157)"
"(begin"
" 'loop"
"(if(null? bodys_27)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_25)(car bodys_27)))"
"(let-values(((rest-bodys_3)(cdr bodys_27)))"
"(if(semi-parsed-begin-for-syntax? body_25)"
"(let-values()"
"(let-values(((body-s_0)"
"(semi-parsed-begin-for-syntax-s"
" body_25)))"
"(let-values(((ok?_82 begin-for-syntax615_0 _616_0)"
"(let-values(((s_784)"
"(syntax-disarm$1"
" body-s_0)))"
"(let-values(((orig-s_90) s_784))"
"(let-values(((begin-for-syntax615_1"
" _616_1)"
"(let-values(((s_785)"
"(if(syntax?$1"
" s_784)"
"(syntax-e$1"
" s_784)"
" s_784)))"
"(if(pair? s_785)"
"(let-values(((begin-for-syntax617_0)"
"(let-values(((s_786)"
"(car"
" s_785)))"
" s_786))"
"((_618_0)"
"(let-values(((s_787)"
"(cdr"
" s_785)))"
"(let-values(((s_788)"
"(if(syntax?$1"
" s_787)"
"(syntax-e$1"
" s_787)"
" s_787)))"
"(let-values(((flat-s_60)"
"(to-syntax-list.1"
" s_788)))"
"(if(not"
" flat-s_60)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_90))"
"(let-values()"
" flat-s_60)))))))"
"(values"
" begin-for-syntax617_0"
" _618_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_90)))))"
"(values"
" #t"
" begin-for-syntax615_1"
" _616_1))))))"
"(let-values(((rebuild-body-s_0)"
"(let-values(((submod-ctx619_0)"
" submod-ctx_1)"
"((body-s620_0)"
" body-s_0))"
"(keep-as-needed74.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" submod-ctx619_0"
" body-s620_0))))"
"(let-values(((nested-bodys_3)"
"(loop_131"
"(semi-parsed-begin-for-syntax-body"
" body_25)"
"(add1 phase_157))))"
"(let-values(((parsed-bfs_0)"
"(parsed-begin-for-syntax21.1"
" rebuild-body-s_0"
"(parsed-only nested-bodys_3))))"
"(cons"
"(if(expand-context-to-parsed?"
" submod-ctx_1)"
" parsed-bfs_0"
"(expanded+parsed1.1"
"(let-values(((rebuild-body-s621_0)"
" rebuild-body-s_0)"
"((temp622_0)"
"(list*"
" begin-for-syntax615_0"
"(syntax-only"
" nested-bodys_3))))"
"(rebuild5.1"
" #f"
" #f"
" rebuild-body-s621_0"
" temp622_0))"
" parsed-bfs_0))"
"(loop_131 rest-bodys_3 phase_157))))))))"
"(if(let-values(((or-part_399)(parsed? body_25)))"
"(if or-part_399"
" or-part_399"
"(expanded+parsed? body_25)))"
"(let-values()"
"(cons body_25(loop_131 rest-bodys_3 phase_157)))"
"(let-values()"
"(let-values(((disarmed-body_2)"
"(syntax-disarm$1 body_25)))"
"(let-values(((tmp_68)"
"(core-form-sym"
" disarmed-body_2"
" phase_157)))"
"(if(equal? tmp_68 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force"
" declare-enclosing-module_1)"
"(values))))"
"(let-values(((ready-body_2)"
"(remove-use-site-scopes"
" body_25"
" submod-ctx_1)))"
"(let-values(((ok?_83"
" module*623_0"
" name624_0"
" _625_0)"
"(let-values(((s_789)"
" disarmed-body_2))"
"(if(let-values(((s_790)"
"(if(syntax?$1"
" s_789)"
"(syntax-e$1"
" s_789)"
" s_789)))"
"(if(pair? s_790)"
"(if(let-values(((s_791)"
"(car"
" s_790)))"
" #t)"
"(let-values(((s_792)"
"(cdr"
" s_790)))"
"(let-values(((s_793)"
"(if(syntax?$1"
" s_792)"
"(syntax-e$1"
" s_792)"
" s_792)))"
"(if(pair?"
" s_793)"
"(if(let-values(((s_794)"
"(car"
" s_793)))"
" #t)"
"(let-values(((s_653)"
"(cdr"
" s_793)))"
"(let-values(((s_654)"
"(if(syntax?$1"
" s_653)"
"(syntax-e$1"
" s_653)"
" s_653)))"
"(if(pair?"
" s_654)"
"(if(let-values(((s_655)"
"(car"
" s_654)))"
"(let-values(((s_656)"
"(if(syntax?$1"
" s_655)"
"(syntax-e$1"
" s_655)"
" s_655)))"
"(eq?"
" #f"
" s_656)))"
"(let-values(((s_657)"
"(cdr"
" s_654)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((module*623_1"
" name624_1"
" _625_1)"
"(let-values(((s_795)"
"(if(syntax?$1"
" s_789)"
"(syntax-e$1"
" s_789)"
" s_789)))"
"(let-values(((module*626_0)"
"(let-values(((s_796)"
"(car"
" s_795)))"
" s_796))"
"((name627_0"
" _628_0)"
"(let-values(((s_797)"
"(cdr"
" s_795)))"
"(let-values(((s_662)"
"(if(syntax?$1"
" s_797)"
"(syntax-e$1"
" s_797)"
" s_797)))"
"(let-values(((name629_0)"
"(let-values(((s_798)"
"(car"
" s_662)))"
" s_798))"
"((_630_0)"
"(let-values(((s_665)"
"(cdr"
" s_662)))"
"(let-values(((s_666)"
"(if(syntax?$1"
" s_665)"
"(syntax-e$1"
" s_665)"
" s_665)))"
"(let-values((()"
"(let-values(((s_668)"
"(car"
" s_666)))"
"(let-values(((s_669)"
"(if(syntax?$1"
" s_668)"
"(syntax-e$1"
" s_668)"
" s_668)))"
"(values))))"
"((_631_0)"
"(let-values(((s_670)"
"(cdr"
" s_666)))"
" s_670)))"
"(values"
" _631_0))))))"
"(values"
" name629_0"
" _630_0))))))"
"(values"
" module*626_0"
" name627_0"
" _628_0)))))"
"(values"
" #t"
" module*623_1"
" name624_1"
" _625_1)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((submod_3)"
"(if ok?_83"
"(let-values()"
"(let-values(((neg-phase_0)"
"(phase-"
" 0"
" phase_157)))"
"(let-values(((shifted-s_0)"
"(syntax-shift-phase-level$1"
" ready-body_2"
" neg-phase_0)))"
"(let-values(((submod_4)"
"(let-values(((temp635_0)"
" #t)"
"((neg-phase636_0)"
" neg-phase_0)"
"((all-scopes-s637_0)"
" all-scopes-s_1)"
"((requires+provides638_0)"
" requires+provides_11)"
"((enclosing-is-cross-phase-persistent?639_0)"
" enclosing-is-cross-phase-persistent?_1)"
"((mpis-to-reset640_0)"
" mpis-to-reset_3)"
"((declared-submodule-names641_0)"
" declared-submodule-names_7)"
"((compiled-submodules642_0)"
" compiled-submodules_4)"
"((modules-being-compiled643_0)"
" modules-being-compiled_7))"
"(expand-submodule197.1"
" compiled-submodules642_0"
" declared-submodule-names641_0"
" all-scopes-s637_0"
" #t"
" enclosing-is-cross-phase-persistent?639_0"
" #t"
" requires+provides638_0"
" #t"
" temp635_0"
" neg-phase636_0"
" #t"
" modules-being-compiled643_0"
" mpis-to-reset640_0"
" shifted-s_0"
" self_37"
" submod-ctx_1))))"
"(if(parsed?"
" submod_4)"
"(let-values()"
" submod_4)"
"(if(expanded+parsed?"
" submod_4)"
"(let-values()"
"(let-values(((the-struct_118)"
" submod_4))"
"(if(expanded+parsed?"
" the-struct_118)"
"(let-values(((s644_0)"
"(syntax-shift-phase-level$1"
"(expanded+parsed-s"
" submod_4)"
" phase_157)))"
"(expanded+parsed1.1"
" s644_0"
"(expanded+parsed-parsed"
" the-struct_118)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                     \"expanded+parsed?\""
" the-struct_118))))"
"(let-values()"
"(syntax-shift-phase-level$1"
" submod_4"
" phase_157))))))))"
"(let-values()"
"(let-values(((temp648_0)"
" #t)"
"((mpis-to-reset649_0)"
" mpis-to-reset_3)"
"((declared-submodule-names650_0)"
" declared-submodule-names_7)"
"((compiled-submodules651_0)"
" compiled-submodules_4)"
"((modules-being-compiled652_0)"
" modules-being-compiled_7))"
"(expand-submodule197.1"
" compiled-submodules651_0"
" declared-submodule-names650_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp648_0"
" #f"
" #f"
" modules-being-compiled652_0"
" mpis-to-reset649_0"
" ready-body_2"
" self_37"
" submod-ctx_1))))))"
"(cons"
" submod_3"
"(loop_131"
" rest-bodys_3"
" phase_157)))))))"
"(let-values()"
"(cons"
" body_25"
"(loop_131"
" rest-bodys_3"
" phase_157)))))))))))))))))"
" loop_131)"
" fully-expanded-bodys-except-post-submodules_2"
" phase_156)))))))))))))))))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_115)"
"(begin"
"(free-id-set-member?"
"(expand-context-stops ctx_115)"
"(expand-context-phase ctx_115)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_115))))))"
"(define-values"
"(check-ids-unbound173.1)"
"(lambda(in168_0 ids170_0 phase171_1 requires+provides172_0)"
"(begin"
" 'check-ids-unbound173"
"(let-values(((ids_44) ids170_0))"
"(let-values(((phase_158) phase171_1))"
"(let-values(((requires+provides_12) requires+provides172_0))"
"(let-values(((s_799) in168_0))"
"(let-values()"
"(begin"
"(let-values(((lst_433) ids_44))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_433)))"
"((letrec-values(((for-loop_323)"
"(lambda(lst_434)"
"(begin"
" 'for-loop"
"(if(pair? lst_434)"
"(let-values(((id_157)(unsafe-car lst_434))"
"((rest_253)(unsafe-cdr lst_434)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((s656_0) s_799)"
"((temp657_0) 'module))"
"(check-not-defined93.1"
" #f"
" #f"
" #f"
" #f"
" s656_0"
" #f"
" #f"
" #f"
" #f"
" temp657_0"
" requires+provides_12"
" id_157"
" phase_158)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_323 rest_253)(values))))"
"(values))))))"
" for-loop_323)"
" lst_433)))"
"(void))))))))))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_28 phase_159 m-ns_23 self_38 ctx_116)"
"(begin"
"(begin"
"(let-values(((lst_435) bodys_28))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_435)))"
"((letrec-values(((for-loop_324)"
"(lambda(lst_436)"
"(begin"
" 'for-loop"
"(if(pair? lst_436)"
"(let-values(((body_26)(unsafe-car lst_436))((rest_254)(unsafe-cdr lst_436)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_84)"
"(if(expanded+parsed? body_26)"
"(expanded+parsed-parsed"
" body_26)"
" body_26)))"
"(if(parsed-define-values? p_84)"
"(let-values()"
"(let-values(((ids_45)"
"(parsed-define-values-ids"
" p_84)))"
"(let-values(((vals_11)"
"(eval-for-bindings"
" ids_45"
"(parsed-define-values-rhs"
" p_84)"
" phase_159"
" m-ns_23"
" ctx_116)))"
"(begin"
"(let-values(((lst_437) ids_45)"
"((lst_438)"
"(parsed-define-values-syms"
" p_84))"
"((lst_439) vals_11))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_437)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_438)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_439)))"
"((letrec-values(((for-loop_325)"
"(lambda(lst_440"
" lst_441"
" lst_442)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_440)"
"(if(pair?"
" lst_441)"
"(pair?"
" lst_442)"
" #f)"
" #f)"
"(let-values(((id_158)"
"(unsafe-car"
" lst_440))"
"((rest_255)"
"(unsafe-cdr"
" lst_440))"
"((sym_106)"
"(unsafe-car"
" lst_441))"
"((rest_256)"
"(unsafe-cdr"
" lst_441))"
"((val_87)"
"(unsafe-car"
" lst_442))"
"((rest_257)"
"(unsafe-cdr"
" lst_442)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" m-ns_23"
" phase_159"
" sym_106"
" val_87))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_325"
" rest_255"
" rest_256"
" rest_257)"
"(values))))"
"(values))))))"
" for-loop_325)"
" lst_437"
" lst_438"
" lst_439)))"
"(void)))))"
"(if(let-values(((or-part_400)"
"(parsed-define-syntaxes?"
" p_84)))"
"(if or-part_400"
" or-part_400"
"(semi-parsed-begin-for-syntax?"
" p_84)))"
"(let-values()(void))"
"(if(let-values(((or-part_401)"
"(parsed-#%declare?"
" p_84)))"
"(if or-part_401"
" or-part_401"
"(syntax?$1 p_84)))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_116"
" 1/current-namespace"
" m-ns_23)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" p_84"
"(let-values(((m-ns658_0)"
" m-ns_23)"
"((phase659_0)"
" phase_159))"
"(make-compile-context14.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" m-ns658_0"
" #t"
" phase659_0"
" #t"
" #f"
" #f)))"
" m-ns_23)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_324 rest_254)(values))))"
"(values))))))"
" for-loop_324)"
" lst_435)))"
"(void)))))"
"(define-values"
"(expand-submodule197.1)"
"(lambda(compiled-submodules183_0"
" declared-submodule-names182_0"
" enclosing-all-scopes-stx180_0"
" enclosing-all-scopes-stx189_0"
" enclosing-is-cross-phase-persistent?179_0"
" enclosing-is-cross-phase-persistent?188_0"
" enclosing-requires+provides178_0"
" enclosing-requires+provides187_0"
" is-star?176_0"
" keep-enclosing-scope-at-phase177_0"
" keep-enclosing-scope-at-phase186_0"
" modules-being-compiled184_0"
" mpis-to-reset181_0"
" s194_0"
" self195_0"
" ctx196_0)"
"(begin"
" 'expand-submodule197"
"(let-values(((s_800) s194_0))"
"(let-values(((self_39) self195_0))"
"(let-values(((ctx_117) ctx196_0))"
"(let-values(((is-star?_0) is-star?176_0))"
"(let-values(((keep-enclosing-scope-at-phase_2)"
"(if keep-enclosing-scope-at-phase186_0 keep-enclosing-scope-at-phase177_0 #f)))"
"(let-values(((enclosing-r+p_2)"
"(if enclosing-requires+provides187_0 enclosing-requires+provides178_0 #f)))"
"(let-values(((enclosing-is-cross-phase-persistent?_2)"
"(if enclosing-is-cross-phase-persistent?188_0"
" enclosing-is-cross-phase-persistent?179_0"
" #f)))"
"(let-values(((enclosing-all-scopes-stx_1)"
"(if enclosing-all-scopes-stx189_0 enclosing-all-scopes-stx180_0 #f)))"
"(let-values(((mpis-to-reset_4) mpis-to-reset181_0))"
"(let-values(((declared-submodule-names_8) declared-submodule-names182_0))"
"(let-values(((compiled-submodules_5) compiled-submodules183_0))"
"(let-values(((modules-being-compiled_8) modules-being-compiled184_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if is-star?_0"
"(void)"
"(let-values()"
"(let-values(((obs_155)(expand-context-observer ctx_117)))"
"(if obs_155"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_155 'enter-prim s_800)"
"(call-expand-observe"
" obs_155"
"(if is-star?_0 'prim-submodule* 'prim-submodule)))))"
"(void)))))"
"(values))))"
"(let-values(((ok?_84 module660_0 name661_0 _662_0)"
"(let-values(((s_801) s_800))"
"(let-values(((orig-s_91) s_801))"
"(let-values(((module660_1 name661_1 _662_1)"
"(let-values(((s_802)"
"(if(syntax?$1 s_801)"
"(syntax-e$1 s_801)"
" s_801)))"
"(if(pair? s_802)"
"(let-values(((module663_0)"
"(let-values(((s_803)(car s_802)))"
" s_803))"
"((name664_0 _665_0)"
"(let-values(((s_804)(cdr s_802)))"
"(let-values(((s_805)"
"(if(syntax?$1"
" s_804)"
"(syntax-e$1 s_804)"
" s_804)))"
"(if(pair? s_805)"
"(let-values(((name666_0)"
"(let-values(((s_806)"
"(car"
" s_805)))"
" s_806))"
"((_667_0)"
"(let-values(((s_807)"
"(cdr"
" s_805)))"
" s_807)))"
"(values name666_0 _667_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_91))))))"
"(values module663_0 name664_0 _665_0))"
"(raise-syntax-error$1"
" #f"
"                                                                       \"bad syntax\""
" orig-s_91)))))"
"(values #t module660_1 name661_1 _662_1))))))"
"(let-values(((name_81)(syntax-e$1 name661_0)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_8 name_81 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                           \"submodule already declared with the same name\""
" s_800"
" name_81))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_8"
" name_81"
"(syntax-e$1 module660_0))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_156)(expand-context-observer ctx_117)))"
"(if obs_156"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_156 'enter-prim s_800)))"
"(void)))"
"(values))))"
"(let-values(((submod_5)"
"(let-values(((temp669_0)"
"(let-values(((v_262) ctx_117))"
"(let-values(((the-struct_119) v_262))"
"(if(expand-context/outer? the-struct_119)"
"(let-values(((context678_0) 'module)"
"((post-expansion-scope679_0)"
" #f)"
"((inner680_0)"
"(let-values(((the-struct_120)"
"(root-expand-context/outer-inner"
" v_262)))"
"(if(expand-context/inner?"
" the-struct_120)"
"(let-values(((stops681_0)"
" empty-free-id-set))"
"(expand-context/inner2.1"
"(root-expand-context/inner-module-scopes"
" the-struct_120)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_120)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_120)"
"(root-expand-context/inner-defined-syms"
" the-struct_120)"
"(root-expand-context/inner-counter"
" the-struct_120)"
"(root-expand-context/inner-lift-key"
" the-struct_120)"
"(expand-context/inner-to-parsed?"
" the-struct_120)"
"(expand-context/inner-phase"
" the-struct_120)"
"(expand-context/inner-namespace"
" the-struct_120)"
"(expand-context/inner-just-once?"
" the-struct_120)"
"(expand-context/inner-module-begin-k"
" the-struct_120)"
"(expand-context/inner-allow-unbound?"
" the-struct_120)"
"(expand-context/inner-in-local-expand?"
" the-struct_120)"
" stops681_0"
"(expand-context/inner-declared-submodule-names"
" the-struct_120)"
"(expand-context/inner-lifts"
" the-struct_120)"
"(expand-context/inner-lift-envs"
" the-struct_120)"
"(expand-context/inner-module-lifts"
" the-struct_120)"
"(expand-context/inner-require-lifts"
" the-struct_120)"
"(expand-context/inner-to-module-lifts"
" the-struct_120)"
"(expand-context/inner-requires+provides"
" the-struct_120)"
"(expand-context/inner-observer"
" the-struct_120)"
"(expand-context/inner-for-serializable?"
" the-struct_120)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_120)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                 \"expand-context/inner?\""
" the-struct_120)))))"
"(expand-context/outer1.1"
" inner680_0"
" post-expansion-scope679_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_119)"
"(root-expand-context/outer-frame-id"
" the-struct_119)"
" context678_0"
"(expand-context/outer-env"
" the-struct_119)"
"(expand-context/outer-post-expansion-scope-action"
" the-struct_119)"
"(expand-context/outer-scopes"
" the-struct_119)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_119)"
"(expand-context/outer-binding-layer"
" the-struct_119)"
"(expand-context/outer-reference-records"
" the-struct_119)"
"(expand-context/outer-only-immediate?"
" the-struct_119)"
"(expand-context/outer-need-eventually-defined"
" the-struct_119)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_119)"
"(expand-context/outer-name"
" the-struct_119)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                               \"expand-context/outer?\""
" the-struct_119)))))"
"((self670_0) self_39)"
"((temp671_0) #t)"
"((keep-enclosing-scope-at-phase672_0)"
" keep-enclosing-scope-at-phase_2)"
"((enclosing-all-scopes-stx673_0)"
" enclosing-all-scopes-stx_1)"
"((enclosing-r+p674_0) enclosing-r+p_2)"
"((enclosing-is-cross-phase-persistent?675_0)"
" enclosing-is-cross-phase-persistent?_2)"
"((mpis-to-reset676_0) mpis-to-reset_4)"
"((modules-being-compiled677_0)"
" modules-being-compiled_8))"
"(expand-module18.1"
" temp671_0"
" #t"
" enclosing-all-scopes-stx673_0"
" #t"
" enclosing-is-cross-phase-persistent?675_0"
" #t"
" enclosing-r+p674_0"
" #t"
" keep-enclosing-scope-at-phase672_0"
" #t"
" modules-being-compiled677_0"
" #t"
" mpis-to-reset676_0"
" #t"
" s_800"
" temp669_0"
" self670_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_157)"
"(expand-context-observer ctx_117)))"
"(if obs_157"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_157"
" 'exit-prim"
"(extract-syntax submod_5))))"
"(void)))"
"(values))))"
"(let-values(((ns_128)(expand-context-namespace ctx_117)))"
"(let-values(((module-name_3)(1/module-path-index-resolve self_39)))"
"(let-values(((root-module-name_1)"
"(resolved-module-path-root-name module-name_3)))"
"(let-values(((compiled-submodule_0)"
"(let-values(((temp682_0)"
"(if(expanded+parsed? submod_5)"
"(expanded+parsed-parsed submod_5)"
" submod_5))"
"((temp683_0)"
"(let-values(((ns688_0) ns_128)"
"((self689_0) self_39)"
"((temp690_0)"
"(1/resolved-module-path-name"
" module-name_3)))"
"(make-compile-context14.1"
" temp690_0"
" #t"
" #f"
" #f"
" self689_0"
" #t"
" ns688_0"
" #t"
" #f"
" #f"
" #f"
" #f)))"
"((temp684_0) #t)"
"((temp685_0)"
"(expand-context-for-serializable?"
" ctx_117))"
"((modules-being-compiled686_0)"
" modules-being-compiled_8)"
"((temp687_0) #f))"
"(compile-module13.1"
" temp684_0"
" #t"
" modules-being-compiled686_0"
" #t"
" temp687_0"
" #t"
" temp685_0"
" #t"
" #f"
" #f"
" temp682_0"
" temp683_0))))"
"(begin"
"(hash-set!"
" compiled-submodules_5"
" name_81"
"(cons is-star?_0 compiled-submodule_0))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_128"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1))"
"(let-values()"
"(let-values(((temp692_0) #f))"
"(eval-module8.1"
" #f"
" #f"
" #f"
" #f"
" temp692_0"
" #t"
" compiled-submodule_0))))"
"(if is-star?_0"
"(void)"
"(let-values()"
"(let-values(((obs_158)"
"(expand-context-observer ctx_117)))"
"(if obs_158"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_158"
" 'exit-prim"
"(extract-syntax submod_5))))"
"(void)))))"
"(if(not is-star?_0)"
"(let-values() submod_5)"
"(if(expanded+parsed? submod_5)"
"(let-values()"
"(let-values(((the-struct_121) submod_5))"
"(if(expanded+parsed? the-struct_121)"
"(let-values(((parsed693_0)"
"(let-values(((the-struct_122)"
"(expanded+parsed-parsed"
" submod_5)))"
"(if(parsed-module? the-struct_122)"
"(let-values(((star?694_0) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_122)"
" star?694_0"
"(parsed-module-name-id"
" the-struct_122)"
"(parsed-module-self"
" the-struct_122)"
"(parsed-module-requires"
" the-struct_122)"
"(parsed-module-provides"
" the-struct_122)"
"(parsed-module-root-ctx-simple?"
" the-struct_122)"
"(parsed-module-encoded-root-ctx"
" the-struct_122)"
"(parsed-module-body"
" the-struct_122)"
"(parsed-module-compiled-module"
" the-struct_122)"
"(parsed-module-compiled-submodules"
" the-struct_122)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                       \"parsed-module?\""
" the-struct_122)))))"
"(expanded+parsed1.1"
"(expanded+parsed-s the-struct_121)"
" parsed693_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expanded+parsed?\""
" the-struct_121))))"
"(let-values()"
"(let-values(((the-struct_123) submod_5))"
"(if(parsed-module? the-struct_123)"
"(let-values(((star?695_0) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_123)"
" star?695_0"
"(parsed-module-name-id the-struct_123)"
"(parsed-module-self the-struct_123)"
"(parsed-module-requires the-struct_123)"
"(parsed-module-provides the-struct_123)"
"(parsed-module-root-ctx-simple? the-struct_123)"
"(parsed-module-encoded-root-ctx the-struct_123)"
"(parsed-module-body the-struct_123)"
"(parsed-module-compiled-module the-struct_123)"
"(parsed-module-compiled-submodules"
" the-struct_123)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"parsed-module?\""
" the-struct_123)))))))))))))))))))))))))))))))))))"
"(define-values"
"(expand-non-module*-submodules212.1)"
"(lambda(compiled-submodules202_0"
" declared-submodule-names201_0"
" modules-being-compiled203_0"
" mpis-to-reset200_0"
" bodys208_0"
" phase209_0"
" self210_0"
" ctx211_0)"
"(begin"
" 'expand-non-module*-submodules212"
"(let-values(((bodys_29) bodys208_0))"
"(let-values(((phase_160) phase209_0))"
"(let-values(((self_40) self210_0))"
"(let-values(((ctx_118) ctx211_0))"
"(let-values(((mpis-to-reset_5) mpis-to-reset200_0))"
"(let-values(((declared-submodule-names_9) declared-submodule-names201_0))"
"(let-values(((compiled-submodules_6) compiled-submodules202_0))"
"(let-values(((modules-being-compiled_9) modules-being-compiled203_0))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_443) bodys_29))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_443)))"
"((letrec-values(((for-loop_326)"
"(lambda(fold-var_371 lst_444)"
"(begin"
" 'for-loop"
"(if(pair? lst_444)"
"(let-values(((body_27)(unsafe-car lst_444))"
"((rest_258)(unsafe-cdr lst_444)))"
"(let-values(((fold-var_372)"
"(let-values(((fold-var_373) fold-var_371))"
"(let-values(((fold-var_374)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_69)"
"(core-form-sym"
"(syntax-disarm$1"
" body_27)"
" phase_160)))"
"(if(equal? tmp_69 'module)"
"(let-values()"
"(let-values(((temp699_0)"
" #f)"
"((mpis-to-reset700_0)"
" mpis-to-reset_5)"
"((declared-submodule-names701_0)"
" declared-submodule-names_9)"
"((compiled-submodules702_0)"
" compiled-submodules_6)"
"((modules-being-compiled703_0)"
" modules-being-compiled_9))"
"(expand-submodule197.1"
" compiled-submodules702_0"
" declared-submodule-names701_0"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp699_0"
" #f"
" #f"
" modules-being-compiled703_0"
" mpis-to-reset700_0"
" body_27"
" self_40"
" ctx_118)))"
"(let-values() body_27))))"
" fold-var_373))))"
"(values fold-var_374)))))"
"(if(not #f)"
"(for-loop_326 fold-var_372 rest_258)"
" fold-var_372)))"
" fold-var_371)))))"
" for-loop_326)"
" null"
" lst_443))))))))))))))))"
"(define-values"
"(make-parse-lifted-require220.1)"
"(lambda(declared-submodule-names215_0 m-ns217_0 self218_0 requires+provides219_0)"
"(begin"
" 'make-parse-lifted-require220"
"(let-values(((m-ns_24) m-ns217_0))"
"(let-values(((self_41) self218_0))"
"(let-values(((requires+provides_13) requires+provides219_0))"
"(let-values(((declared-submodule-names_10) declared-submodule-names215_0))"
"(let-values()"
"(lambda(s_808 phase_161)"
"(let-values(((ok?_85 #%require704_0 req705_0)"
"(let-values(((s_809)(syntax-disarm$1 s_808)))"
"(let-values(((orig-s_92) s_809))"
"(let-values(((#%require704_1 req705_1)"
"(let-values(((s_810)"
"(if(syntax?$1 s_809)(syntax-e$1 s_809) s_809)))"
"(if(pair? s_810)"
"(let-values(((#%require706_0)"
"(let-values(((s_811)(car s_810))) s_811))"
"((req707_0)"
"(let-values(((s_812)(cdr s_810)))"
"(let-values(((s_813)"
"(if(syntax?$1 s_812)"
"(syntax-e$1 s_812)"
" s_812)))"
"(if(pair? s_813)"
"(let-values(((req708_0)"
"(let-values(((s_814)"
"(car s_813)))"
" s_814))"
"(()"
"(let-values(((s_815)"
"(cdr s_813)))"
"(let-values(((s_816)"
"(if(syntax?$1"
" s_815)"
"(syntax-e$1"
" s_815)"
" s_815)))"
"(if(null? s_816)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_92))))))"
"(values req708_0))"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_92))))))"
"(values #%require706_0 req707_0))"
"                                                      (raise-syntax-error$1 #f \"bad syntax\" orig-s_92)))))"
"(values #t #%require704_1 req705_1))))))"
"(let-values(((temp709_0)(list req705_0))"
"((s710_0) s_808)"
"((self711_0) self_41)"
"((m-ns712_0) m-ns_24)"
"((phase713_0) phase_161)"
"((phase714_0) phase_161)"
"((requires+provides715_0) requires+provides_13)"
"((declared-submodule-names716_0) declared-submodule-names_10)"
"((temp717_0) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" declared-submodule-names716_0"
" #t"
" #f"
" #f"
" phase714_0"
" #t"
" #f"
" #f"
" self711_0"
" #t"
" #f"
" #f"
" #f"
" #f"
" temp717_0"
" temp709_0"
" s710_0"
" m-ns712_0"
" phase713_0"
" requires+provides715_0))))))))))))"
"(define-values"
"(defn-extract-syntax)"
"(lambda(defn_0)"
"(begin"
"(datum->syntax$1"
" #f"
"(list 'define-values(semi-parsed-define-values-ids defn_0)(semi-parsed-define-values-rhs defn_0))"
"(semi-parsed-define-values-s defn_0)))))"
"(define-values"
"(lifted-defns-extract-syntax)"
"(lambda(lifted-defns_2)"
"(begin"
"(reverse$1"
"(let-values(((lst_445) lifted-defns_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_445)))"
"((letrec-values(((for-loop_327)"
"(lambda(fold-var_375 lst_446)"
"(begin"
" 'for-loop"
"(if(pair? lst_446)"
"(let-values(((lifted-defn_0)(unsafe-car lst_446))"
"((rest_259)(unsafe-cdr lst_446)))"
"(let-values(((fold-var_376)"
"(let-values(((fold-var_377) fold-var_375))"
"(let-values(((fold-var_378)"
"(let-values()"
"(cons"
"(let-values()"
"(defn-extract-syntax lifted-defn_0))"
" fold-var_377))))"
"(values fold-var_378)))))"
"(if(not #f)(for-loop_327 fold-var_376 rest_259) fold-var_376)))"
" fold-var_375)))))"
" for-loop_327)"
" null"
" lst_445)))))))"
"(define-values"
"(log-lifted-defns)"
"(lambda(partial-body-ctx_2 lifted-defns_3 exp-body_10 rest-bodys_4)"
"(begin"
"(let-values(((obs_159)(expand-context-observer partial-body-ctx_2)))"
"(if obs_159"
"(let-values()"
"(let-values(((s-lifted-defns_0)(lifted-defns-extract-syntax lifted-defns_3)))"
"(let-values((()"
"(begin"
"(call-expand-observe obs_159 'rename-list(cons exp-body_10 rest-bodys_4))"
"(values))))"
"(let-values((()(begin(call-expand-observe obs_159 'module-lift-loop s-lifted-defns_0)(values))))"
"(let-values((()"
"(begin"
"(let-values(((lst_447) s-lifted-defns_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_447)))"
"((letrec-values(((for-loop_328)"
"(lambda(lst_448)"
"(begin"
" 'for-loop"
"(if(pair? lst_448)"
"(let-values(((s-lifted-defn_0)(unsafe-car lst_448))"
"((rest_260)(unsafe-cdr lst_448)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ok?_86"
" define-values722_0"
" _723_0)"
"(let-values(((s_817)"
" s-lifted-defn_0))"
"(let-values(((orig-s_93)"
" s_817))"
"(let-values(((define-values722_1"
" _723_1)"
"(let-values(((s_818)"
"(if(syntax?$1"
" s_817)"
"(syntax-e$1"
" s_817)"
" s_817)))"
"(if(pair?"
" s_818)"
"(let-values(((define-values724_0)"
"(let-values(((s_819)"
"(car"
" s_818)))"
" s_819))"
"((_725_0)"
"(let-values(((s_820)"
"(cdr"
" s_818)))"
"(let-values(((s_821)"
"(if(syntax?$1"
" s_820)"
"(syntax-e$1"
" s_820)"
" s_820)))"
"(let-values(((flat-s_61)"
"(to-syntax-list.1"
" s_821)))"
"(if(not"
" flat-s_61)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_93))"
"(let-values()"
" flat-s_61)))))))"
"(values"
" define-values724_0"
" _725_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_93)))))"
"(values"
" #t"
" define-values722_1"
" _723_1))))))"
"(begin"
"(call-expand-observe"
" obs_159"
" 'next)"
"(call-expand-observe"
" obs_159"
" 'visit"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_159"
" 'resolve"
" define-values722_0)"
"(call-expand-observe"
" obs_159"
" 'enter-prim"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_159"
" 'prim-stop)"
"(call-expand-observe"
" obs_159"
" 'exit-prim"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_159"
" 'return"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_159"
" 'rename-one"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_159"
" 'enter-prim"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_159"
" 'prim-define-values)"
"(call-expand-observe"
" obs_159"
" 'exit-prim"
" s-lifted-defn_0))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_328 rest_260)(values))))"
"(values))))))"
" for-loop_328)"
" lst_447)))"
"(values))))"
"(let-values()"
"(let-values(((ok?_87 form-id718_0 _719_0)"
"(let-values(((s_822) exp-body_10))"
"(let-values(((orig-s_94) s_822))"
"(let-values(((form-id718_1 _719_1)"
"(let-values(((s_823)"
"(if(syntax?$1 s_822)(syntax-e$1 s_822) s_822)))"
"(if(pair? s_823)"
"(let-values(((form-id720_0)"
"(let-values(((s_824)(car s_823))) s_824))"
"((_721_0)"
"(let-values(((s_825)(cdr s_823))) s_825)))"
"(values form-id720_0 _721_0))"
"                                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_94)))))"
"(values #t form-id718_1 _719_1))))))"
"(begin"
"(call-expand-observe obs_159 'next)"
"(call-expand-observe obs_159 'visit exp-body_10)"
"(call-expand-observe obs_159 'resolve form-id718_0)"
"(call-expand-observe obs_159 'enter-prim exp-body_10)"
"(call-expand-observe obs_159 'prim-stop)"
"(call-expand-observe obs_159 'exit-prim exp-body_10)"
"(call-expand-observe obs_159 'return exp-body_10)))))))))"
"(void))))))"
"(define-values"
"(log-defn-enter)"
"(lambda(ctx_119 defn_1)"
"(begin"
"(let-values(((obs_160)(expand-context-observer ctx_119)))"
"(if obs_160"
"(let-values()"
"(let-values(((s-defn_0)(defn-extract-syntax defn_1)))"
"(let-values(((ok?_88 define-values726_0 _727_0)"
"(let-values(((s_826) s-defn_0))"
"(let-values(((orig-s_95) s_826))"
"(let-values(((define-values726_1 _727_1)"
"(let-values(((s_827)(if(syntax?$1 s_826)(syntax-e$1 s_826) s_826)))"
"(if(pair? s_827)"
"(let-values(((define-values728_0)"
"(let-values(((s_828)(car s_827))) s_828))"
"((_729_0)"
"(let-values(((s_829)(cdr s_827)))"
"(let-values(((s_830)"
"(if(syntax?$1 s_829)"
"(syntax-e$1 s_829)"
" s_829)))"
"(let-values(((flat-s_62)(to-syntax-list.1 s_830)))"
"(if(not flat-s_62)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_95))"
"(let-values() flat-s_62)))))))"
"(values define-values728_0 _729_0))"
"                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_95)))))"
"(values #t define-values726_1 _727_1))))))"
"(begin"
"(call-expand-observe obs_160 'visit s-defn_0)"
"(call-expand-observe obs_160 'resolve define-values726_0)"
"(call-expand-observe obs_160 'enter-prim s-defn_0)"
"(call-expand-observe obs_160 'prim-define-values)))))"
"(void))))))"
"(define-values"
"(log-defn-exit)"
"(lambda(ctx_120 defn_2 exp-rhs_8)"
"(begin"
"(let-values(((obs_161)(expand-context-observer ctx_120)))"
"(if obs_161"
"(let-values()"
"(let-values(((s-defn_1)"
"(datum->syntax$1"
" #f"
"(list 'define-values(semi-parsed-define-values-ids defn_2) exp-rhs_8)"
"(semi-parsed-define-values-s defn_2))))"
"(begin(call-expand-observe obs_161 'exit-prim s-defn_1)(call-expand-observe obs_161 'return s-defn_1))))"
"(void))))))"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_46 s_157 ctx_121)"
"(begin"
"(let-values(((top-level-bind-scope_6)(root-expand-context-top-level-bind-scope ctx_121)))"
"(let-values(((tl-ids_2)"
"(reverse$1"
"(let-values(((lst_6) ids_46))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_6)))"
"((letrec-values(((for-loop_98)"
"(lambda(fold-var_379 lst_80)"
"(begin"
" 'for-loop"
"(if(pair? lst_80)"
"(let-values(((id_159)(unsafe-car lst_80))"
"((rest_38)(unsafe-cdr lst_80)))"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_379))"
"(let-values(((fold-var_380)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-use-site-scopes"
" id_159"
" ctx_121))"
" fold-var_61))))"
"(values fold-var_380)))))"
"(if(not #f)(for-loop_98 fold-var_60 rest_38) fold-var_60)))"
" fold-var_379)))))"
" for-loop_98)"
" null"
" lst_6))))))"
"(let-values((()"
"(begin"
"(let-values(((tl-ids1_0) tl-ids_2)((temp2_8)(expand-context-phase ctx_121))((s3_3) s_157))"
"(check-no-duplicate-ids8.1 #f #f tl-ids1_0 temp2_8 s3_3 #f #f))"
"(values))))"
"(let-values(((tmp-bind-ids_0)"
"(reverse$1"
"(let-values(((lst_94) tl-ids_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_94)))"
"((letrec-values(((for-loop_329)"
"(lambda(fold-var_217 lst_81)"
"(begin"
" 'for-loop"
"(if(pair? lst_81)"
"(let-values(((id_3)(unsafe-car lst_81))"
"((rest_261)(unsafe-cdr lst_81)))"
"(let-values(((fold-var_381)"
"(let-values(((fold-var_31) fold-var_217))"
"(let-values(((fold-var_32)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_3"
" top-level-bind-scope_6))"
" fold-var_31))))"
"(values fold-var_32)))))"
"(if(not #f)"
"(for-loop_329 fold-var_381 rest_261)"
" fold-var_381)))"
" fold-var_217)))))"
" for-loop_329)"
" null"
" lst_94))))))"
"(values tl-ids_2(select-defined-syms-and-bind!/ctx tmp-bind-ids_0 ctx_121)))))))))"
"(void"
"(add-core-form!*"
" 'define-values"
"(lambda(s_0 ctx_7)"
"(let-values((()"
"(begin"
"(let-values(((obs_162)(expand-context-observer ctx_7)))"
"(if obs_162"
"(let-values()(let-values()(call-expand-observe obs_162 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_7) 'top-level)"
"(void)"
"                         (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_0)))"
"(values))))"
"(let-values(((disarmed-s_25)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_25 define-values1_0 id2_1 rhs3_0)"
"(let-values(((s_172) s_0))"
"(let-values(((orig-s_96) s_172))"
"(let-values(((define-values1_1 id2_2 rhs3_1)"
"(let-values(((s_40)(if(syntax?$1 s_172)(syntax-e$1 s_172) s_172)))"
"(if(pair? s_40)"
"(let-values(((define-values4_0)"
"(let-values(((s_182)(car s_40))) s_182))"
"((id5_0 rhs6_0)"
"(let-values(((s_41)(cdr s_40)))"
"(let-values(((s_174)"
"(if(syntax?$1 s_41)"
"(syntax-e$1 s_41)"
" s_41)))"
"(if(pair? s_174)"
"(let-values(((id7_0)"
"(let-values(((s_161)(car s_174)))"
"(let-values(((s_5)"
"(if(syntax?$1 s_161)"
"(syntax-e$1 s_161)"
" s_161)))"
"(let-values(((flat-s_63)"
"(to-syntax-list.1"
" s_5)))"
"(if(not flat-s_63)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_96))"
"(let-values()"
"(let-values(((id_160)"
"(let-values(((lst_24)"
" flat-s_63))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_24)))"
"((letrec-values(((for-loop_241)"
"(lambda(id_161"
" lst_76)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_76)"
"(let-values(((s_183)"
"(unsafe-car"
" lst_76))"
"((rest_141)"
"(unsafe-cdr"
" lst_76)))"
"(let-values(((id_162)"
"(let-values(((id_52)"
" id_161))"
"(let-values(((id_163)"
"(let-values()"
"(let-values(((id10_0)"
"(let-values()"
"(if(let-values(((or-part_56)"
"(if(syntax?$1"
" s_183)"
"(symbol?"
"(syntax-e$1"
" s_183))"
" #f)))"
"(if or-part_56"
" or-part_56"
"(symbol?"
" s_183)))"
" s_183"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"not an identifier\""
" orig-s_96"
" s_183)))))"
"(cons"
" id10_0"
" id_52)))))"
"(values"
" id_163)))))"
"(if(not"
" #f)"
"(for-loop_241"
" id_162"
" rest_141)"
" id_162)))"
" id_161)))))"
" for-loop_241)"
" null"
" lst_24)))))"
"(reverse$1 id_160))))))))"
"((rhs8_0)"
"(let-values(((s_82)(cdr s_174)))"
"(let-values(((s_306)"
"(if(syntax?$1 s_82)"
"(syntax-e$1 s_82)"
" s_82)))"
"(if(pair? s_306)"
"(let-values(((rhs9_0)"
"(let-values(((s_43)"
"(car"
" s_306)))"
" s_43))"
"(()"
"(let-values(((s_307)"
"(cdr"
" s_306)))"
"(let-values(((s_35)"
"(if(syntax?$1"
" s_307)"
"(syntax-e$1"
" s_307)"
" s_307)))"
"(if(null?"
" s_35)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_96))))))"
"(values rhs9_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_96))))))"
"(values id7_0 rhs8_0))"
"                                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_96))))))"
"(values define-values4_0 id5_0 rhs6_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_96)))))"
"(values #t define-values1_1 id2_2 rhs3_1))))))"
"(let-values(((ids_47 syms_28)(as-expand-time-top-level-bindings id2_1 s_0 ctx_7)))"
"(let-values(((exp-rhs_9)"
"(let-values(((temp11_6) rhs3_0)((temp12_8)(as-named-context ctx_7 ids_47)))"
"(expand7.1 #f #f #f #f temp11_6 temp12_8))))"
"(if(expand-context-to-parsed? ctx_7)"
"(parsed-define-values19.1 s_0 ids_47 syms_28 exp-rhs_9)"
"(let-values(((s13_0) s_0)((temp14_7)(list define-values1_0 ids_47 exp-rhs_9)))"
"(rebuild5.1 #f #f s13_0 temp14_7))))))))))))"
"(void"
"(add-core-form!*"
" 'define-syntaxes"
"(lambda(s_460 ctx_122)"
"(let-values((()"
"(begin"
"(let-values(((obs_163)(expand-context-observer ctx_122)))"
"(if obs_163"
"(let-values()(let-values()(call-expand-observe obs_163 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_164)(expand-context-observer ctx_122)))"
"(if obs_164(let-values()(let-values()(call-expand-observe obs_164 'prepare-env)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_122) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_460)))"
"(values))))"
"(let-values(((disarmed-s_26)(syntax-disarm$1 s_460)))"
"(let-values(((ok?_89 define-syntaxes15_0 id16_2 rhs17_0)"
"(let-values(((s_831) disarmed-s_26))"
"(let-values(((orig-s_97) s_831))"
"(let-values(((define-syntaxes15_1 id16_3 rhs17_1)"
"(let-values(((s_20)(if(syntax?$1 s_831)(syntax-e$1 s_831) s_831)))"
"(if(pair? s_20)"
"(let-values(((define-syntaxes18_0)"
"(let-values(((s_23)(car s_20))) s_23))"
"((id19_0 rhs20_0)"
"(let-values(((s_431)(cdr s_20)))"
"(let-values(((s_24)"
"(if(syntax?$1 s_431)"
"(syntax-e$1 s_431)"
" s_431)))"
"(if(pair? s_24)"
"(let-values(((id21_0)"
"(let-values(((s_705)(car s_24)))"
"(let-values(((s_467)"
"(if(syntax?$1 s_705)"
"(syntax-e$1 s_705)"
" s_705)))"
"(let-values(((flat-s_64)"
"(to-syntax-list.1"
" s_467)))"
"(if(not flat-s_64)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_97))"
"(let-values()"
"(let-values(((id_93)"
"(let-values(((lst_177)"
" flat-s_64))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_177)))"
"((letrec-values(((for-loop_266)"
"(lambda(id_164"
" lst_449)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_449)"
"(let-values(((s_489)"
"(unsafe-car"
" lst_449))"
"((rest_262)"
"(unsafe-cdr"
" lst_449)))"
"(let-values(((id_75)"
"(let-values(((id_95)"
" id_164))"
"(let-values(((id_165)"
"(let-values()"
"(let-values(((id24_1)"
"(let-values()"
"(if(let-values(((or-part_263)"
"(if(syntax?$1"
" s_489)"
"(symbol?"
"(syntax-e$1"
" s_489))"
" #f)))"
"(if or-part_263"
" or-part_263"
"(symbol?"
" s_489)))"
" s_489"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"not an identifier\""
" orig-s_97"
" s_489)))))"
"(cons"
" id24_1"
" id_95)))))"
"(values"
" id_165)))))"
"(if(not"
" #f)"
"(for-loop_266"
" id_75"
" rest_262)"
" id_75)))"
" id_164)))))"
" for-loop_266)"
" null"
" lst_177)))))"
"(reverse$1 id_93))))))))"
"((rhs22_0)"
"(let-values(((s_832)(cdr s_24)))"
"(let-values(((s_475)"
"(if(syntax?$1 s_832)"
"(syntax-e$1 s_832)"
" s_832)))"
"(if(pair? s_475)"
"(let-values(((rhs23_2)"
"(let-values(((s_490)"
"(car"
" s_475)))"
" s_490))"
"(()"
"(let-values(((s_44)"
"(cdr"
" s_475)))"
"(let-values(((s_167)"
"(if(syntax?$1"
" s_44)"
"(syntax-e$1"
" s_44)"
" s_44)))"
"(if(null?"
" s_167)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_97))))))"
"(values rhs23_2))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_97))))))"
"(values id21_0 rhs22_0))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_97))))))"
"(values define-syntaxes18_0 id19_0 rhs20_0))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_97)))))"
"(values #t define-syntaxes15_1 id16_3 rhs17_1))))))"
"(let-values(((ids_48 syms_29)(as-expand-time-top-level-bindings id16_2 s_460 ctx_122)))"
"(let-values(((exp-rhs_10)"
"(let-values(((temp25_8) rhs17_0)((temp26_7)(as-named-context ctx_122 ids_48)))"
"(expand-transformer47.1 #f #f #f #f #f #f #f #f #f #f #f #f temp25_8 temp26_7))))"
"(if(expand-context-to-parsed? ctx_122)"
"(parsed-define-syntaxes20.1 s_460 ids_48 syms_29 exp-rhs_10)"
"(let-values(((s27_3) s_460)((temp28_5)(list define-syntaxes15_0 ids_48 exp-rhs_10)))"
"(rebuild5.1 #f #f s27_3 temp28_5)))))))))))))"
"(void"
"(add-core-form!*"
" 'begin-for-syntax"
"   (lambda (s_308 ctx_123) (raise-syntax-error$1 #f \"not allowed in an expression position\" s_308))))"
"(void"
"(add-core-form!*"
" '#%require"
"(lambda(s_45 ctx_124)"
"(let-values((()"
"(begin"
"(let-values(((obs_15)(expand-context-observer ctx_124)))"
"(if obs_15(let-values()(let-values()(call-expand-observe obs_15 'prim-require)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_124) 'top-level)"
"(void)"
"                         (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_45)))"
"(values))))"
"(let-values(((disarmed-s_27)(syntax-disarm$1 s_45)))"
"(let-values(((ok?_90 #%require29_0 req30_0)"
"(let-values(((s_833) disarmed-s_27))"
"(let-values(((orig-s_98) s_833))"
"(let-values(((#%require29_1 req30_1)"
"(let-values(((s_834)(if(syntax?$1 s_833)(syntax-e$1 s_833) s_833)))"
"(if(pair? s_834)"
"(let-values(((#%require31_0)(let-values(((s_46)(car s_834))) s_46))"
"((req32_0)"
"(let-values(((s_32)(cdr s_834)))"
"(let-values(((s_707)"
"(if(syntax?$1 s_32)"
"(syntax-e$1 s_32)"
" s_32)))"
"(let-values(((flat-s_65)(to-syntax-list.1 s_707)))"
"(if(not flat-s_65)"
"(let-values()"
"                                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_98))"
"(let-values() flat-s_65)))))))"
"(values #%require31_0 req32_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_98)))))"
"(values #t #%require29_1 req30_1))))))"
"(let-values(((sc_35)(new-scope 'macro)))"
"(begin"
"(let-values(((temp33_4)"
"(reverse$1"
"(let-values(((lst_12) req30_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_12)))"
"((letrec-values(((for-loop_330)"
"(lambda(fold-var_382 lst_450)"
"(begin"
" 'for-loop"
"(if(pair? lst_450)"
"(let-values(((req_20)(unsafe-car lst_450))"
"((rest_263)(unsafe-cdr lst_450)))"
"(let-values(((fold-var_383)"
"(let-values(((fold-var_384) fold-var_382))"
"(let-values(((fold-var_36)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_20"
" sc_35))"
" fold-var_384))))"
"(values fold-var_36)))))"
"(if(not #f)"
"(for-loop_330 fold-var_383 rest_263)"
" fold-var_383)))"
" fold-var_382)))))"
" for-loop_330)"
" null"
" lst_12)))))"
"((s34_0) s_45)"
"((temp35_3) #f)"
"((temp36_7)(expand-context-namespace ctx_124))"
"((temp37_5)(expand-context-phase ctx_124))"
"((temp38_3)(let-values(((temp41_5) #f))(make-requires+provides8.1 #f #f temp41_5)))"
"((temp39_8) 'require)"
"((temp40_4) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp40_4"
" #t"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" temp35_3"
" #t"
" temp39_8"
" temp33_4"
" s34_0"
" temp36_7"
" temp37_5"
" temp38_3))"
"(if(expand-context-to-parsed? ctx_124)(parsed-require23.1 s_45) s_45))))))))))"
"(void"
"(add-core-form!*"
" '#%provide"
"(lambda(s_434 ctx_125)"
"(begin"
"(let-values(((obs_23)(expand-context-observer ctx_125)))"
"(if obs_23(let-values()(let-values()(call-expand-observe obs_23 'prim-provide)))(void)))"
"       (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_434)))))"
"(define-values(ns)(make-namespace))"
"(void"
"(begin"
"(declare-core-module! ns)"
"(let-values(((temp1_4) '#%read)((read-primitives2_0) read-primitives)((ns3_1) ns))"
"(declare-hash-based-module!41.1 ns3_1 #f #f #f #f #f #f #f #f temp1_4 read-primitives2_0))"
"(let-values(((temp4_9) '#%main)((main-primitives5_0) main-primitives)((ns6_1) ns))"
"(declare-hash-based-module!41.1 ns6_1 #f #f #f #f #f #f #f #f temp4_9 main-primitives5_0))"
"(let-values(((temp7_4) '#%utils)((utils-primitives8_0) utils-primitives)((ns9_1) ns))"
"(declare-hash-based-module!41.1 ns9_1 #f #f #f #f #f #f #f #f temp7_4 utils-primitives8_0))"
"(let-values(((temp10_7) '#%place-struct)"
"((place-struct-primitives11_0) place-struct-primitives)"
"((ns12_1) ns)"
"((temp13_3) '(dynamic-place)))"
"(declare-hash-based-module!41.1 ns12_1 #f #f temp13_3 #t #f #f #f #f temp10_7 place-struct-primitives11_0))"
"(let-values(((temp14_8) '#%boot)((boot-primitives15_0) boot-primitives)((ns16_1) ns))"
"(declare-hash-based-module!41.1 ns16_1 #f #f #f #f #f #f #f #f temp14_8 boot-primitives15_0))"
"(let-values(((linklet-primitives_0)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((temp17_4) '#%linklet)"
"((linklet-primitives18_0) linklet-primitives_0)"
"((ns19_1) ns)"
"((temp20_5) #t)"
"((temp21_2) #t))"
"(declare-hash-based-module!41.1 ns19_1 temp20_5 #t #f #f #f #f temp21_2 #t temp17_4 linklet-primitives18_0)))"
"(let-values(((temp22_6) '#%expobs)((expobs-primitives23_0) expobs-primitives)((ns24_2) ns)((temp25_9) #t))"
"(declare-hash-based-module!41.1 ns24_2 #f #f #f #f temp25_9 #t #f #f temp22_6 expobs-primitives23_0))"
"(let-values(((eval27_0) 1/eval)"
"((temp28_6)"
"(let-values(((ht_66) main-primitives))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_66)))"
"((letrec-values(((for-loop_77)"
"(lambda(table_216 i_80)"
"(begin"
" 'for-loop"
"(if i_80"
"(let-values(((name_82)(hash-iterate-key ht_66 i_80)))"
"(let-values(((table_102)"
"(let-values(((table_217) table_216))"
"(let-values(((table_218)"
"(let-values()"
"(let-values(((key_67 val_88)"
"(let-values()"
"(values"
"(let-values() name_82)"
" #t))))"
"(hash-set table_217 key_67 val_88)))))"
"(values table_218)))))"
"(if(not #f)"
"(for-loop_77 table_102(hash-iterate-next ht_66 i_80))"
" table_102)))"
" table_216)))))"
" for-loop_77)"
" '#hash()"
"(hash-iterate-first ht_66)))))"
"((temp29_4)"
"(let-values(((ht_167) read-primitives))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_167)))"
"((letrec-values(((for-loop_269)"
"(lambda(table_202 i_36)"
"(begin"
" 'for-loop"
"(if i_36"
"(let-values(((name_83)(hash-iterate-key ht_167 i_36)))"
"(let-values(((table_219)"
"(let-values(((table_175) table_202))"
"(let-values(((table_95)"
"(let-values()"
"(let-values(((key_95 val_89)"
"(let-values()"
"(values"
"(let-values() name_83)"
" #t))))"
"(hash-set table_175 key_95 val_89)))))"
"(values table_95)))))"
"(if(not #f)"
"(for-loop_269 table_219(hash-iterate-next ht_167 i_36))"
" table_219)))"
" table_202)))))"
" for-loop_269)"
" '#hash()"
"(hash-iterate-first ht_167))))))"
"(declare-kernel-module!8.1 eval27_0 temp28_6 temp29_4 ns))"
"(begin"
"(let-values(((lst_270) runtime-instances))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_270)))"
"((letrec-values(((for-loop_331)"
"(lambda(lst_54)"
"(begin"
" 'for-loop"
"(if(pair? lst_54)"
"(let-values(((name_84)(unsafe-car lst_54))((rest_171)(unsafe-cdr lst_54)))"
"(let-values((()"
"(let-values()"
"(if(eq? name_84 '#%kernel)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ns31_4) ns)"
"((temp32_1)"
"(let-values(((or-part_53)"
"(eq?"
" name_84"
" '#%foreign)))"
"(if or-part_53"
" or-part_53"
"(let-values(((or-part_21)"
"(eq?"
" name_84"
" '#%futures)))"
"(if or-part_21"
" or-part_21"
"(eq?"
" name_84"
" '#%unsafe)))))))"
"(copy-runtime-module!26.1"
" #f"
" #f"
" #f"
" #f"
" ns31_4"
" #f"
" #f"
" temp32_1"
" #t"
" #f"
" #f"
" #f"
" #f"
" name_84)))"
"(values)))))"
"(values)))))))"
"(if(not #f)(for-loop_331 rest_171)(values))))"
"(values))))))"
" for-loop_331)"
" lst_270)))"
"(void))"
"(let-values(((temp33_5) '#%builtin)"
"((temp34_4)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((ns35_1) ns)"
"((temp36_8) #f))"
"(declare-reexporting-module!50.1 ns35_1 temp36_8 #t temp33_5 temp34_4))"
"(1/current-namespace ns)"
"(1/dynamic-require ''#%kernel 0)))"
"(define-values(datum->kernel-syntax)(lambda(s_460)(begin(1/datum->syntax core-stx s_460)))))"
;
